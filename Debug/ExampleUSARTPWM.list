
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009138  08009138  00019138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b8  080095b8  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  080095b8  080095b8  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095b8  080095b8  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080095c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000220  080097e0  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  080097e0  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbf1  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a67  00000000  00000000  0002be3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018614  00000000  00000000  0002f030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094e9  00000000  00000000  00047644  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b7f9  00000000  00000000  00050b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004420  00000000  00000000  000dc3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000e07c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000e0860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08009120 	.word	0x08009120

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08009120 	.word	0x08009120

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <interpreteComando>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interpreteComando(){
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

	//uint32_t duty_cycle;
	double consigna;

	switch (buffer[0]) {
 8000b6e:	4bae      	ldr	r3, [pc, #696]	; (8000e28 <interpreteComando+0x2c0>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b44      	subs	r3, #68	; 0x44
 8000b74:	2b33      	cmp	r3, #51	; 0x33
 8000b76:	f200 8292 	bhi.w	800109e <interpreteComando+0x536>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <interpreteComando+0x18>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	0800102f 	.word	0x0800102f
 8000b84:	0800109f 	.word	0x0800109f
 8000b88:	0800109f 	.word	0x0800109f
 8000b8c:	0800109f 	.word	0x0800109f
 8000b90:	0800109f 	.word	0x0800109f
 8000b94:	08000fbf 	.word	0x08000fbf
 8000b98:	0800109f 	.word	0x0800109f
 8000b9c:	0800109f 	.word	0x0800109f
 8000ba0:	0800109f 	.word	0x0800109f
 8000ba4:	0800109f 	.word	0x0800109f
 8000ba8:	0800109f 	.word	0x0800109f
 8000bac:	0800109f 	.word	0x0800109f
 8000bb0:	08000f4f 	.word	0x08000f4f
 8000bb4:	0800109f 	.word	0x0800109f
 8000bb8:	0800109f 	.word	0x0800109f
 8000bbc:	0800109f 	.word	0x0800109f
 8000bc0:	0800109f 	.word	0x0800109f
 8000bc4:	0800109f 	.word	0x0800109f
 8000bc8:	0800109f 	.word	0x0800109f
 8000bcc:	08000c51 	.word	0x08000c51
 8000bd0:	0800109f 	.word	0x0800109f
 8000bd4:	0800109f 	.word	0x0800109f
 8000bd8:	0800109f 	.word	0x0800109f
 8000bdc:	0800109f 	.word	0x0800109f
 8000be0:	0800109f 	.word	0x0800109f
 8000be4:	0800109f 	.word	0x0800109f
 8000be8:	0800109f 	.word	0x0800109f
 8000bec:	0800109f 	.word	0x0800109f
 8000bf0:	0800109f 	.word	0x0800109f
 8000bf4:	0800109f 	.word	0x0800109f
 8000bf8:	0800109f 	.word	0x0800109f
 8000bfc:	0800109f 	.word	0x0800109f
 8000c00:	0800102f 	.word	0x0800102f
 8000c04:	0800109f 	.word	0x0800109f
 8000c08:	0800109f 	.word	0x0800109f
 8000c0c:	0800109f 	.word	0x0800109f
 8000c10:	0800109f 	.word	0x0800109f
 8000c14:	08000fbf 	.word	0x08000fbf
 8000c18:	0800109f 	.word	0x0800109f
 8000c1c:	0800109f 	.word	0x0800109f
 8000c20:	0800109f 	.word	0x0800109f
 8000c24:	0800109f 	.word	0x0800109f
 8000c28:	0800109f 	.word	0x0800109f
 8000c2c:	0800109f 	.word	0x0800109f
 8000c30:	08000f4f 	.word	0x08000f4f
 8000c34:	0800109f 	.word	0x0800109f
 8000c38:	0800109f 	.word	0x0800109f
 8000c3c:	0800109f 	.word	0x0800109f
 8000c40:	0800109f 	.word	0x0800109f
 8000c44:	0800109f 	.word	0x0800109f
 8000c48:	0800109f 	.word	0x0800109f
 8000c4c:	08000c51 	.word	0x08000c51
	case 'W':
	case 'w':
		switch (buffer[1]) {
 8000c50:	4b75      	ldr	r3, [pc, #468]	; (8000e28 <interpreteComando+0x2c0>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	2b32      	cmp	r3, #50	; 0x32
 8000c56:	f000 80a5 	beq.w	8000da4 <interpreteComando+0x23c>
 8000c5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c5c:	f000 816f 	beq.w	8000f3e <interpreteComando+0x3d6>
 8000c60:	2b31      	cmp	r3, #49	; 0x31
 8000c62:	d000      	beq.n	8000c66 <interpreteComando+0xfe>
			indexBuf=0;
		   // HAL_SPI_TransmitReceive_IT(&hspi2, &out_buffer[indexBuf], &byte, 1);
		    //HAL__IT(&hspi2, out_buffer, 14);
		    break;
		}
			break;
 8000c64:	e21b      	b.n	800109e <interpreteComando+0x536>
			if (buffer[2]) {
 8000c66:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <interpreteComando+0x2c0>)
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 816b 	beq.w	8000f46 <interpreteComando+0x3de>
				if (buffer[2] == 43) {
 8000c70:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <interpreteComando+0x2c0>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	2b2b      	cmp	r3, #43	; 0x2b
 8000c76:	d135      	bne.n	8000ce4 <interpreteComando+0x17c>
					stop1=0;
 8000c78:	4b6c      	ldr	r3, [pc, #432]	; (8000e2c <interpreteComando+0x2c4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2110      	movs	r1, #16
 8000c82:	486b      	ldr	r0, [pc, #428]	; (8000e30 <interpreteComando+0x2c8>)
 8000c84:	f001 ff3e 	bl	8002b04 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	4868      	ldr	r0, [pc, #416]	; (8000e30 <interpreteComando+0x2c8>)
 8000c8e:	f001 ff39 	bl	8002b04 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000c92:	4b65      	ldr	r3, [pc, #404]	; (8000e28 <interpreteComando+0x2c0>)
 8000c94:	78db      	ldrb	r3, [r3, #3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8155 	beq.w	8000f46 <interpreteComando+0x3de>
						consigna = atof(&buffer[3]);
 8000c9c:	4865      	ldr	r0, [pc, #404]	; (8000e34 <interpreteComando+0x2cc>)
 8000c9e:	f004 fbc6 	bl	800542e <atof>
 8000ca2:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <interpreteComando+0x2d0>)
 8000cac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cb0:	f7ff fe84 	bl	80009bc <__aeabi_dcmplt>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <interpreteComando+0x15e>
							velocidad_consigna = consigna;
 8000cba:	4a60      	ldr	r2, [pc, #384]	; (8000e3c <interpreteComando+0x2d4>)
 8000cbc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000cc0:	e9c2 3400 	strd	r3, r4, [r2]
 8000cc4:	e005      	b.n	8000cd2 <interpreteComando+0x16a>
							velocidad_consigna = 35;
 8000cc6:	4a5d      	ldr	r2, [pc, #372]	; (8000e3c <interpreteComando+0x2d4>)
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	4c5a      	ldr	r4, [pc, #360]	; (8000e38 <interpreteComando+0x2d0>)
 8000cce:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %s %5.3f \r\n","+", velocidad_consigna);
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <interpreteComando+0x2d4>)
 8000cd4:	cb18      	ldmia	r3, {r3, r4}
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4623      	mov	r3, r4
 8000cda:	4959      	ldr	r1, [pc, #356]	; (8000e40 <interpreteComando+0x2d8>)
 8000cdc:	4859      	ldr	r0, [pc, #356]	; (8000e44 <interpreteComando+0x2dc>)
 8000cde:	f005 f82b 	bl	8005d38 <iprintf>
			break;
 8000ce2:	e130      	b.n	8000f46 <interpreteComando+0x3de>
				} else if (buffer[2] == 45) {
 8000ce4:	4b50      	ldr	r3, [pc, #320]	; (8000e28 <interpreteComando+0x2c0>)
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	2b2d      	cmp	r3, #45	; 0x2d
 8000cea:	d13a      	bne.n	8000d62 <interpreteComando+0x1fa>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	484f      	ldr	r0, [pc, #316]	; (8000e30 <interpreteComando+0x2c8>)
 8000cf2:	f001 ff07 	bl	8002b04 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	484d      	ldr	r0, [pc, #308]	; (8000e30 <interpreteComando+0x2c8>)
 8000cfc:	f001 ff02 	bl	8002b04 <HAL_GPIO_WritePin>
					stop1=0;
 8000d00:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <interpreteComando+0x2c4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000d06:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <interpreteComando+0x2c0>)
 8000d08:	78db      	ldrb	r3, [r3, #3]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 811b 	beq.w	8000f46 <interpreteComando+0x3de>
						consigna = atof(&buffer[3]);
 8000d10:	4848      	ldr	r0, [pc, #288]	; (8000e34 <interpreteComando+0x2cc>)
 8000d12:	f004 fb8c 	bl	800542e <atof>
 8000d16:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <interpreteComando+0x2d0>)
 8000d20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d24:	f7ff fe4a 	bl	80009bc <__aeabi_dcmplt>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00b      	beq.n	8000d46 <interpreteComando+0x1de>
							velocidad_consigna = -consigna;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <interpreteComando+0x2d4>)
 8000d3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d40:	e9c3 1200 	strd	r1, r2, [r3]
 8000d44:	e005      	b.n	8000d52 <interpreteComando+0x1ea>
							velocidad_consigna = -35;
 8000d46:	4a3d      	ldr	r2, [pc, #244]	; (8000e3c <interpreteComando+0x2d4>)
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	4c3e      	ldr	r4, [pc, #248]	; (8000e48 <interpreteComando+0x2e0>)
 8000d4e:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <interpreteComando+0x2d4>)
 8000d54:	cb18      	ldmia	r3, {r3, r4}
 8000d56:	461a      	mov	r2, r3
 8000d58:	4623      	mov	r3, r4
 8000d5a:	483c      	ldr	r0, [pc, #240]	; (8000e4c <interpreteComando+0x2e4>)
 8000d5c:	f004 ffec 	bl	8005d38 <iprintf>
			break;
 8000d60:	e0f1      	b.n	8000f46 <interpreteComando+0x3de>
				}else if(buffer[2] == 48){
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <interpreteComando+0x2c0>)
 8000d64:	789b      	ldrb	r3, [r3, #2]
 8000d66:	2b30      	cmp	r3, #48	; 0x30
 8000d68:	f040 80ed 	bne.w	8000f46 <interpreteComando+0x3de>
					velocidad_consigna=0;
 8000d6c:	4a33      	ldr	r2, [pc, #204]	; (8000e3c <interpreteComando+0x2d4>)
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	f04f 0400 	mov.w	r4, #0
 8000d76:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	482c      	ldr	r0, [pc, #176]	; (8000e30 <interpreteComando+0x2c8>)
 8000d80:	f001 fec0 	bl	8002b04 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2120      	movs	r1, #32
 8000d88:	4829      	ldr	r0, [pc, #164]	; (8000e30 <interpreteComando+0x2c8>)
 8000d8a:	f001 febb 	bl	8002b04 <HAL_GPIO_WritePin>
					stop1=1;
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <interpreteComando+0x2c4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <interpreteComando+0x2d4>)
 8000d96:	cb18      	ldmia	r3, {r3, r4}
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	482b      	ldr	r0, [pc, #172]	; (8000e4c <interpreteComando+0x2e4>)
 8000d9e:	f004 ffcb 	bl	8005d38 <iprintf>
			break;
 8000da2:	e0d0      	b.n	8000f46 <interpreteComando+0x3de>
			if (buffer[2]) {
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <interpreteComando+0x2c0>)
 8000da6:	789b      	ldrb	r3, [r3, #2]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80ce 	beq.w	8000f4a <interpreteComando+0x3e2>
				if (buffer[2] == 43) {
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <interpreteComando+0x2c0>)
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	2b2b      	cmp	r3, #43	; 0x2b
 8000db4:	d152      	bne.n	8000e5c <interpreteComando+0x2f4>
					stop2=0;
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <interpreteComando+0x2e8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	481b      	ldr	r0, [pc, #108]	; (8000e30 <interpreteComando+0x2c8>)
 8000dc4:	f001 fe9e 	bl	8002b04 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dce:	4818      	ldr	r0, [pc, #96]	; (8000e30 <interpreteComando+0x2c8>)
 8000dd0:	f001 fe98 	bl	8002b04 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <interpreteComando+0x2c0>)
 8000dd6:	78db      	ldrb	r3, [r3, #3]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80b6 	beq.w	8000f4a <interpreteComando+0x3e2>
						consigna = atof(&buffer[3]);
 8000dde:	4815      	ldr	r0, [pc, #84]	; (8000e34 <interpreteComando+0x2cc>)
 8000de0:	f004 fb25 	bl	800542e <atof>
 8000de4:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <interpreteComando+0x2d0>)
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f7ff fde3 	bl	80009bc <__aeabi_dcmplt>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d005      	beq.n	8000e08 <interpreteComando+0x2a0>
							velocidad_consigna2 = consigna;
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <interpreteComando+0x2ec>)
 8000dfe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e02:	e9c2 3400 	strd	r3, r4, [r2]
 8000e06:	e005      	b.n	8000e14 <interpreteComando+0x2ac>
							velocidad_consigna2 = 35;
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <interpreteComando+0x2ec>)
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <interpreteComando+0x2d0>)
 8000e10:	e9c2 3400 	strd	r3, r4, [r2]
						printf(
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <interpreteComando+0x2ec>)
 8000e16:	cb18      	ldmia	r3, {r3, r4}
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4908      	ldr	r1, [pc, #32]	; (8000e40 <interpreteComando+0x2d8>)
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <interpreteComando+0x2f0>)
 8000e20:	f004 ff8a 	bl	8005d38 <iprintf>
			break;
 8000e24:	e091      	b.n	8000f4a <interpreteComando+0x3e2>
 8000e26:	bf00      	nop
 8000e28:	200003f0 	.word	0x200003f0
 8000e2c:	2000003c 	.word	0x2000003c
 8000e30:	40010800 	.word	0x40010800
 8000e34:	200003f3 	.word	0x200003f3
 8000e38:	40418000 	.word	0x40418000
 8000e3c:	200002a0 	.word	0x200002a0
 8000e40:	08009138 	.word	0x08009138
 8000e44:	0800913c 	.word	0x0800913c
 8000e48:	c0418000 	.word	0xc0418000
 8000e4c:	08009168 	.word	0x08009168
 8000e50:	20000040 	.word	0x20000040
 8000e54:	200002a8 	.word	0x200002a8
 8000e58:	08009194 	.word	0x08009194
				} else if (buffer[2] == 45) {
 8000e5c:	4b92      	ldr	r3, [pc, #584]	; (80010a8 <interpreteComando+0x540>)
 8000e5e:	789b      	ldrb	r3, [r3, #2]
 8000e60:	2b2d      	cmp	r3, #45	; 0x2d
 8000e62:	d14a      	bne.n	8000efa <interpreteComando+0x392>
					stop2=0;
 8000e64:	4b91      	ldr	r3, [pc, #580]	; (80010ac <interpreteComando+0x544>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	488f      	ldr	r0, [pc, #572]	; (80010b0 <interpreteComando+0x548>)
 8000e72:	f001 fe47 	bl	8002b04 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	488c      	ldr	r0, [pc, #560]	; (80010b0 <interpreteComando+0x548>)
 8000e7e:	f001 fe41 	bl	8002b04 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000e82:	4b89      	ldr	r3, [pc, #548]	; (80010a8 <interpreteComando+0x540>)
 8000e84:	78db      	ldrb	r3, [r3, #3]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d05f      	beq.n	8000f4a <interpreteComando+0x3e2>
						consigna = atof(&buffer[3]);
 8000e8a:	488a      	ldr	r0, [pc, #552]	; (80010b4 <interpreteComando+0x54c>)
 8000e8c:	f004 facf 	bl	800542e <atof>
 8000e90:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if( consigna==0){
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ea0:	f7ff fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d007      	beq.n	8000eba <interpreteComando+0x352>
							velocidad_consigna2=0;
 8000eaa:	4a83      	ldr	r2, [pc, #524]	; (80010b8 <interpreteComando+0x550>)
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	f04f 0400 	mov.w	r4, #0
 8000eb4:	e9c2 3400 	strd	r3, r4, [r2]
 8000eb8:	e017      	b.n	8000eea <interpreteComando+0x382>
						}else if (consigna < 35) {
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <interpreteComando+0x554>)
 8000ec0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ec4:	f7ff fd7a 	bl	80009bc <__aeabi_dcmplt>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d007      	beq.n	8000ede <interpreteComando+0x376>
							velocidad_consigna2 = -consigna;
 8000ece:	68bc      	ldr	r4, [r7, #8]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000ed6:	4b78      	ldr	r3, [pc, #480]	; (80010b8 <interpreteComando+0x550>)
 8000ed8:	e9c3 4500 	strd	r4, r5, [r3]
 8000edc:	e005      	b.n	8000eea <interpreteComando+0x382>
							velocidad_consigna2 = -35;
 8000ede:	4a76      	ldr	r2, [pc, #472]	; (80010b8 <interpreteComando+0x550>)
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	4c76      	ldr	r4, [pc, #472]	; (80010c0 <interpreteComando+0x558>)
 8000ee6:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000eea:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <interpreteComando+0x550>)
 8000eec:	cb18      	ldmia	r3, {r3, r4}
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4623      	mov	r3, r4
 8000ef2:	4874      	ldr	r0, [pc, #464]	; (80010c4 <interpreteComando+0x55c>)
 8000ef4:	f004 ff20 	bl	8005d38 <iprintf>
			break;
 8000ef8:	e027      	b.n	8000f4a <interpreteComando+0x3e2>
				}else if(buffer[2] == 48){
 8000efa:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <interpreteComando+0x540>)
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	2b30      	cmp	r3, #48	; 0x30
 8000f00:	d123      	bne.n	8000f4a <interpreteComando+0x3e2>
					velocidad_consigna2=0;
 8000f02:	4a6d      	ldr	r2, [pc, #436]	; (80010b8 <interpreteComando+0x550>)
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	f04f 0400 	mov.w	r4, #0
 8000f0c:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f16:	4866      	ldr	r0, [pc, #408]	; (80010b0 <interpreteComando+0x548>)
 8000f18:	f001 fdf4 	bl	8002b04 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f22:	4863      	ldr	r0, [pc, #396]	; (80010b0 <interpreteComando+0x548>)
 8000f24:	f001 fdee 	bl	8002b04 <HAL_GPIO_WritePin>
					stop2=0;
 8000f28:	4b60      	ldr	r3, [pc, #384]	; (80010ac <interpreteComando+0x544>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000f2e:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <interpreteComando+0x550>)
 8000f30:	cb18      	ldmia	r3, {r3, r4}
 8000f32:	461a      	mov	r2, r3
 8000f34:	4623      	mov	r3, r4
 8000f36:	4863      	ldr	r0, [pc, #396]	; (80010c4 <interpreteComando+0x55c>)
 8000f38:	f004 fefe 	bl	8005d38 <iprintf>
			break;
 8000f3c:	e005      	b.n	8000f4a <interpreteComando+0x3e2>
			indexBuf=0;
 8000f3e:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <interpreteComando+0x560>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
		    break;
 8000f44:	e002      	b.n	8000f4c <interpreteComando+0x3e4>
			break;
 8000f46:	bf00      	nop
 8000f48:	e0a9      	b.n	800109e <interpreteComando+0x536>
			break;
 8000f4a:	bf00      	nop
			break;
 8000f4c:	e0a7      	b.n	800109e <interpreteComando+0x536>
//		case 'C':
//			control=1;
//			break;
		case 'p':
		case 'P':
			switch (buffer[1]) {
 8000f4e:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <interpreteComando+0x540>)
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	2b31      	cmp	r3, #49	; 0x31
 8000f54:	d002      	beq.n	8000f5c <interpreteComando+0x3f4>
 8000f56:	2b32      	cmp	r3, #50	; 0x32
 8000f58:	d016      	beq.n	8000f88 <interpreteComando+0x420>
 8000f5a:	e02b      	b.n	8000fb4 <interpreteComando+0x44c>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000f5c:	485b      	ldr	r0, [pc, #364]	; (80010cc <interpreteComando+0x564>)
 8000f5e:	f004 fa66 	bl	800542e <atof>
 8000f62:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP1=(float) consigna;
 8000f66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f6a:	f7ff fdad 	bl	8000ac8 <__aeabi_d2f>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa59 	bl	8000428 <__aeabi_f2d>
 8000f76:	4603      	mov	r3, r0
 8000f78:	460c      	mov	r4, r1
 8000f7a:	4a55      	ldr	r2, [pc, #340]	; (80010d0 <interpreteComando+0x568>)
 8000f7c:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8000f80:	4854      	ldr	r0, [pc, #336]	; (80010d4 <interpreteComando+0x56c>)
 8000f82:	f004 ff4d 	bl	8005e20 <puts>
						break;
 8000f86:	e019      	b.n	8000fbc <interpreteComando+0x454>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000f88:	4850      	ldr	r0, [pc, #320]	; (80010cc <interpreteComando+0x564>)
 8000f8a:	f004 fa50 	bl	800542e <atof>
 8000f8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP2=(float) consigna;
 8000f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f96:	f7ff fd97 	bl	8000ac8 <__aeabi_d2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fa43 	bl	8000428 <__aeabi_f2d>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <interpreteComando+0x570>)
 8000fa8:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8000fac:	4849      	ldr	r0, [pc, #292]	; (80010d4 <interpreteComando+0x56c>)
 8000fae:	f004 ff37 	bl	8005e20 <puts>
						break;
 8000fb2:	e003      	b.n	8000fbc <interpreteComando+0x454>
					default:
					printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000fb4:	4849      	ldr	r0, [pc, #292]	; (80010dc <interpreteComando+0x574>)
 8000fb6:	f004 ff33 	bl	8005e20 <puts>
					break;
 8000fba:	bf00      	nop

			}
			break;
 8000fbc:	e06f      	b.n	800109e <interpreteComando+0x536>
		case 'i':
		case 'I':
			switch (buffer[1]) {
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <interpreteComando+0x540>)
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	2b31      	cmp	r3, #49	; 0x31
 8000fc4:	d002      	beq.n	8000fcc <interpreteComando+0x464>
 8000fc6:	2b32      	cmp	r3, #50	; 0x32
 8000fc8:	d016      	beq.n	8000ff8 <interpreteComando+0x490>
 8000fca:	e02b      	b.n	8001024 <interpreteComando+0x4bc>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000fcc:	483f      	ldr	r0, [pc, #252]	; (80010cc <interpreteComando+0x564>)
 8000fce:	f004 fa2e 	bl	800542e <atof>
 8000fd2:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI1=(float) consigna;
 8000fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fda:	f7ff fd75 	bl	8000ac8 <__aeabi_d2f>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa21 	bl	8000428 <__aeabi_f2d>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460c      	mov	r4, r1
 8000fea:	4a3d      	ldr	r2, [pc, #244]	; (80010e0 <interpreteComando+0x578>)
 8000fec:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8000ff0:	4838      	ldr	r0, [pc, #224]	; (80010d4 <interpreteComando+0x56c>)
 8000ff2:	f004 ff15 	bl	8005e20 <puts>
						break;
 8000ff6:	e019      	b.n	800102c <interpreteComando+0x4c4>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000ff8:	4834      	ldr	r0, [pc, #208]	; (80010cc <interpreteComando+0x564>)
 8000ffa:	f004 fa18 	bl	800542e <atof>
 8000ffe:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI2=(float) consigna;
 8001002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001006:	f7ff fd5f 	bl	8000ac8 <__aeabi_d2f>
 800100a:	4603      	mov	r3, r0
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa0b 	bl	8000428 <__aeabi_f2d>
 8001012:	4603      	mov	r3, r0
 8001014:	460c      	mov	r4, r1
 8001016:	4a33      	ldr	r2, [pc, #204]	; (80010e4 <interpreteComando+0x57c>)
 8001018:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 800101c:	482d      	ldr	r0, [pc, #180]	; (80010d4 <interpreteComando+0x56c>)
 800101e:	f004 feff 	bl	8005e20 <puts>
						break;
 8001022:	e003      	b.n	800102c <interpreteComando+0x4c4>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8001024:	482d      	ldr	r0, [pc, #180]	; (80010dc <interpreteComando+0x574>)
 8001026:	f004 fefb 	bl	8005e20 <puts>
						break;
 800102a:	bf00      	nop
			}
			break;
 800102c:	e037      	b.n	800109e <interpreteComando+0x536>
		case 'd':
		case 'D':
			switch (buffer[1]) {
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <interpreteComando+0x540>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	2b31      	cmp	r3, #49	; 0x31
 8001034:	d002      	beq.n	800103c <interpreteComando+0x4d4>
 8001036:	2b32      	cmp	r3, #50	; 0x32
 8001038:	d016      	beq.n	8001068 <interpreteComando+0x500>
 800103a:	e02b      	b.n	8001094 <interpreteComando+0x52c>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 800103c:	4823      	ldr	r0, [pc, #140]	; (80010cc <interpreteComando+0x564>)
 800103e:	f004 f9f6 	bl	800542e <atof>
 8001042:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD1=(float) consigna;
 8001046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800104a:	f7ff fd3d 	bl	8000ac8 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f9e9 	bl	8000428 <__aeabi_f2d>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <interpreteComando+0x580>)
 800105c:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8001060:	481c      	ldr	r0, [pc, #112]	; (80010d4 <interpreteComando+0x56c>)
 8001062:	f004 fedd 	bl	8005e20 <puts>
						break;
 8001066:	e019      	b.n	800109c <interpreteComando+0x534>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <interpreteComando+0x564>)
 800106a:	f004 f9e0 	bl	800542e <atof>
 800106e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD2=(float) consigna;
 8001072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001076:	f7ff fd27 	bl	8000ac8 <__aeabi_d2f>
 800107a:	4603      	mov	r3, r0
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f9d3 	bl	8000428 <__aeabi_f2d>
 8001082:	4603      	mov	r3, r0
 8001084:	460c      	mov	r4, r1
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <interpreteComando+0x584>)
 8001088:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <interpreteComando+0x56c>)
 800108e:	f004 fec7 	bl	8005e20 <puts>
						break;
 8001092:	e003      	b.n	800109c <interpreteComando+0x534>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <interpreteComando+0x574>)
 8001096:	f004 fec3 	bl	8005e20 <puts>
						break;
 800109a:	bf00      	nop
			}
			break;
 800109c:	bf00      	nop
//			control=0;
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//			break;
	}

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdb0      	pop	{r4, r5, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200003f0 	.word	0x200003f0
 80010ac:	20000040 	.word	0x20000040
 80010b0:	40010800 	.word	0x40010800
 80010b4:	200003f3 	.word	0x200003f3
 80010b8:	200002a8 	.word	0x200002a8
 80010bc:	40418000 	.word	0x40418000
 80010c0:	c0418000 	.word	0xc0418000
 80010c4:	080091c4 	.word	0x080091c4
 80010c8:	2000027c 	.word	0x2000027c
 80010cc:	200003f2 	.word	0x200003f2
 80010d0:	20000008 	.word	0x20000008
 80010d4:	080091f0 	.word	0x080091f0
 80010d8:	20000020 	.word	0x20000020
 80010dc:	080091f4 	.word	0x080091f4
 80010e0:	20000010 	.word	0x20000010
 80010e4:	20000028 	.word	0x20000028
 80010e8:	20000018 	.word	0x20000018
 80010ec:	20000030 	.word	0x20000030

080010f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80010f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6178      	str	r0, [r7, #20]
	if(htim->Instance == TIM1){
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a96      	ldr	r2, [pc, #600]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001100:	4293      	cmp	r3, r2
 8001102:	f040 82e8 	bne.w	80016d6 <HAL_TIM_PeriodElapsedCallback+0x5e6>



		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 8001106:	4b95      	ldr	r3, [pc, #596]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	461a      	mov	r2, r3
 8001114:	4b92      	ldr	r3, [pc, #584]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	4413      	add	r3, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4b91      	ldr	r3, [pc, #580]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001120:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 8001122:	4b90      	ldr	r3, [pc, #576]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b90      	ldr	r3, [pc, #576]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f969 	bl	8000404 <__aeabi_i2d>
 8001132:	4b8e      	ldr	r3, [pc, #568]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001134:	cb18      	ldmia	r3, {r3, r4}
 8001136:	461a      	mov	r2, r3
 8001138:	4623      	mov	r3, r4
 800113a:	f7ff faf7 	bl	800072c <__aeabi_ddiv>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	4a8b      	ldr	r2, [pc, #556]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001144:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 8001148:	4b89      	ldr	r3, [pc, #548]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	a380      	add	r3, pc, #512	; (adr r3, 8001350 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff faea 	bl	800072c <__aeabi_ddiv>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	4618      	mov	r0, r3
 800115e:	4621      	mov	r1, r4
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b83      	ldr	r3, [pc, #524]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001166:	f7ff f9b7 	bl	80004d8 <__aeabi_dmul>
 800116a:	4603      	mov	r3, r0
 800116c:	460c      	mov	r4, r1
 800116e:	4a82      	ldr	r2, [pc, #520]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001170:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8001174:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a7b      	ldr	r2, [pc, #492]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800117a:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 800117c:	4b7f      	ldr	r3, [pc, #508]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4b7d      	ldr	r3, [pc, #500]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	4413      	add	r3, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4b7b      	ldr	r3, [pc, #492]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001196:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f92e 	bl	8000404 <__aeabi_i2d>
 80011a8:	4b70      	ldr	r3, [pc, #448]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80011aa:	cb18      	ldmia	r3, {r3, r4}
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	f7ff fabc 	bl	800072c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4a74      	ldr	r2, [pc, #464]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011ba:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 80011be:	4b73      	ldr	r3, [pc, #460]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c4:	a362      	add	r3, pc, #392	; (adr r3, 8001350 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff faaf 	bl	800072c <__aeabi_ddiv>
 80011ce:	4603      	mov	r3, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	4618      	mov	r0, r3
 80011d4:	4621      	mov	r1, r4
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b66      	ldr	r3, [pc, #408]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80011dc:	f7ff f97c 	bl	80004d8 <__aeabi_dmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4a6a      	ldr	r2, [pc, #424]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80011e6:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 80011ea:	4b66      	ldr	r3, [pc, #408]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a66      	ldr	r2, [pc, #408]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80011f0:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 80011f2:	4b68      	ldr	r3, [pc, #416]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	f040 82ac 	bne.w	8001754 <HAL_TIM_PeriodElapsedCallback+0x664>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001204:	cb18      	ldmia	r3, {r3, r4}
 8001206:	461a      	mov	r2, r3
 8001208:	4623      	mov	r3, r4
 800120a:	f7fe ffad 	bl	8000168 <__aeabi_dsub>
 800120e:	4603      	mov	r3, r0
 8001210:	460c      	mov	r4, r1
 8001212:	4a62      	ldr	r2, [pc, #392]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001214:	e9c2 3400 	strd	r3, r4, [r2]
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
//			else if(error_vel_act==0){
//				Ui_anterior=0;
//			}
			if(stop1==1){
 8001218:	4b61      	ldr	r3, [pc, #388]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d106      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x13e>
			  Ui_anterior=0;
 8001220:	4a60      	ldr	r2, [pc, #384]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	f04f 0400 	mov.w	r4, #0
 800122a:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 800122e:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001230:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001234:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001236:	cb18      	ldmia	r3, {r3, r4}
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	f7ff f94c 	bl	80004d8 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4a59      	ldr	r2, [pc, #356]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001246:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_ant);
 800124a:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800124c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001252:	cb18      	ldmia	r3, {r3, r4}
 8001254:	461a      	mov	r2, r3
 8001256:	4623      	mov	r3, r4
 8001258:	f7ff f93e 	bl	80004d8 <__aeabi_dmul>
 800125c:	4603      	mov	r3, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4618      	mov	r0, r3
 8001262:	4621      	mov	r1, r4
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001266:	cb18      	ldmia	r3, {r3, r4}
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	f7ff f934 	bl	80004d8 <__aeabi_dmul>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800127a:	cb18      	ldmia	r3, {r3, r4}
 800127c:	461a      	mov	r2, r3
 800127e:	4623      	mov	r3, r4
 8001280:	f7fe ff74 	bl	800016c <__adddf3>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	4a4b      	ldr	r2, [pc, #300]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800128a:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001296:	cb18      	ldmia	r3, {r3, r4}
 8001298:	461a      	mov	r2, r3
 800129a:	4623      	mov	r3, r4
 800129c:	f7ff fa46 	bl	800072c <__aeabi_ddiv>
 80012a0:	4603      	mov	r3, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	461d      	mov	r5, r3
 80012a6:	4626      	mov	r6, r4
 80012a8:	4b3c      	ldr	r3, [pc, #240]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80012aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012b0:	cb18      	ldmia	r3, {r3, r4}
 80012b2:	461a      	mov	r2, r3
 80012b4:	4623      	mov	r3, r4
 80012b6:	f7fe ff57 	bl	8000168 <__aeabi_dsub>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	461a      	mov	r2, r3
 80012c0:	4623      	mov	r3, r4
 80012c2:	4628      	mov	r0, r5
 80012c4:	4631      	mov	r1, r6
 80012c6:	f7ff f907 	bl	80004d8 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012d0:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna>0){
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80012d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	f7ff fb89 	bl	80009f8 <__aeabi_dcmpgt>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d06d      	beq.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid +(Up + Ui_actual + Ud));
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f877 	bl	80003e4 <__aeabi_ui2d>
 80012f6:	4605      	mov	r5, r0
 80012f8:	460e      	mov	r6, r1
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80012fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001302:	cb18      	ldmia	r3, {r3, r4}
 8001304:	461a      	mov	r2, r3
 8001306:	4623      	mov	r3, r4
 8001308:	f7fe ff30 	bl	800016c <__adddf3>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4618      	mov	r0, r3
 8001312:	4621      	mov	r1, r4
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001316:	cb18      	ldmia	r3, {r3, r4}
 8001318:	461a      	mov	r2, r3
 800131a:	4623      	mov	r3, r4
 800131c:	f7fe ff26 	bl	800016c <__adddf3>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	4628      	mov	r0, r5
 800132a:	4631      	mov	r1, r6
 800132c:	f7fe ff1e 	bl	800016c <__adddf3>
 8001330:	4603      	mov	r3, r0
 8001332:	460c      	mov	r4, r1
 8001334:	469a      	mov	sl, r3
 8001336:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800133a:	4650      	mov	r0, sl
 800133c:	4659      	mov	r1, fp
 800133e:	f7ff fba3 	bl	8000a88 <__aeabi_d2uiz>
 8001342:	4602      	mov	r2, r0
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e07c      	b.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x354>
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	00000000 	.word	0x00000000
 8001354:	40bce000 	.word	0x40bce000
 8001358:	40012c00 	.word	0x40012c00
 800135c:	20000240 	.word	0x20000240
 8001360:	200003a8 	.word	0x200003a8
 8001364:	20000248 	.word	0x20000248
 8001368:	20000244 	.word	0x20000244
 800136c:	20000000 	.word	0x20000000
 8001370:	20000258 	.word	0x20000258
 8001374:	404e0000 	.word	0x404e0000
 8001378:	20000260 	.word	0x20000260
 800137c:	2000024c 	.word	0x2000024c
 8001380:	2000035c 	.word	0x2000035c
 8001384:	20000254 	.word	0x20000254
 8001388:	20000250 	.word	0x20000250
 800138c:	20000268 	.word	0x20000268
 8001390:	20000270 	.word	0x20000270
 8001394:	20000038 	.word	0x20000038
 8001398:	200002a0 	.word	0x200002a0
 800139c:	20000280 	.word	0x20000280
 80013a0:	2000003c 	.word	0x2000003c
 80013a4:	200002b0 	.word	0x200002b0
 80013a8:	20000008 	.word	0x20000008
 80013ac:	200002c0 	.word	0x200002c0
 80013b0:	20000010 	.word	0x20000010
 80013b4:	20000288 	.word	0x20000288
 80013b8:	200002b8 	.word	0x200002b8
 80013bc:	20000018 	.word	0x20000018
 80013c0:	200002c8 	.word	0x200002c8
 80013c4:	200002f0 	.word	0x200002f0
			}else if(velocidad_consigna<0){
 80013c8:	4b9d      	ldr	r3, [pc, #628]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80013ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f7ff faf1 	bl	80009bc <__aeabi_dcmplt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02e      	beq.n	800143e <HAL_TIM_PeriodElapsedCallback+0x34e>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid -(Up + Ui_actual + Ud));
 80013e0:	4b98      	ldr	r3, [pc, #608]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe fffd 	bl	80003e4 <__aeabi_ui2d>
 80013ea:	4605      	mov	r5, r0
 80013ec:	460e      	mov	r6, r1
 80013ee:	4b96      	ldr	r3, [pc, #600]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80013f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f4:	4b95      	ldr	r3, [pc, #596]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80013f6:	cb18      	ldmia	r3, {r3, r4}
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	f7fe feb6 	bl	800016c <__adddf3>
 8001400:	4603      	mov	r3, r0
 8001402:	460c      	mov	r4, r1
 8001404:	4618      	mov	r0, r3
 8001406:	4621      	mov	r1, r4
 8001408:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800140a:	cb18      	ldmia	r3, {r3, r4}
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	f7fe feac 	bl	800016c <__adddf3>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	4628      	mov	r0, r5
 800141e:	4631      	mov	r1, r6
 8001420:	f7fe fea2 	bl	8000168 <__aeabi_dsub>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4698      	mov	r8, r3
 800142a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800142e:	4640      	mov	r0, r8
 8001430:	4649      	mov	r1, r9
 8001432:	f7ff fb29 	bl	8000a88 <__aeabi_d2uiz>
 8001436:	4602      	mov	r2, r0
 8001438:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e002      	b.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x354>
			}else{
				duty_cycle_pid = 0;
 800143e:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
			}

			if(duty_cycle_pid > 14000){
 8001444:	4b7f      	ldr	r3, [pc, #508]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800144c:	4293      	cmp	r3, r2
 800144e:	d903      	bls.n	8001458 <HAL_TIM_PeriodElapsedCallback+0x368>
				duty_cycle_pid=14000;
 8001450:	4b7c      	ldr	r3, [pc, #496]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001452:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001456:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8001458:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a79      	ldr	r2, [pc, #484]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8001462:	4b7a      	ldr	r3, [pc, #488]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001464:	cb18      	ldmia	r3, {r3, r4}
 8001466:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001468:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 800146c:	4b7b      	ldr	r3, [pc, #492]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800146e:	cb18      	ldmia	r3, {r3, r4}
 8001470:	4a7b      	ldr	r2, [pc, #492]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001472:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 8001476:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800147e:	cb18      	ldmia	r3, {r3, r4}
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	f7fe fe70 	bl	8000168 <__aeabi_dsub>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800148e:	e9c2 3400 	strd	r3, r4, [r2]
//			}
//			else if(error_vel_act2==0){
//				Ui_anterior2=0;
//			}
//			error_vel_act2= fabs(error_vel_act2);
			if(stop2==1){
 8001492:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d106      	bne.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
				Ui_anterior2=0;
 800149a:	4a76      	ldr	r2, [pc, #472]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	f04f 0400 	mov.w	r4, #0
 80014a4:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2=KP2 * error_vel_act2;
 80014a8:	4b73      	ldr	r3, [pc, #460]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80014aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ae:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80014b0:	cb18      	ldmia	r3, {r3, r4}
 80014b2:	461a      	mov	r2, r3
 80014b4:	4623      	mov	r3, r4
 80014b6:	f7ff f80f 	bl	80004d8 <__aeabi_dmul>
 80014ba:	4603      	mov	r3, r0
 80014bc:	460c      	mov	r4, r1
 80014be:	4a6f      	ldr	r2, [pc, #444]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80014c0:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 80014c4:	4b6e      	ldr	r3, [pc, #440]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80014c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ca:	4b6e      	ldr	r3, [pc, #440]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80014cc:	cb18      	ldmia	r3, {r3, r4}
 80014ce:	461a      	mov	r2, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	f7ff f801 	bl	80004d8 <__aeabi_dmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	4618      	mov	r0, r3
 80014dc:	4621      	mov	r1, r4
 80014de:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80014e0:	cb18      	ldmia	r3, {r3, r4}
 80014e2:	461a      	mov	r2, r3
 80014e4:	4623      	mov	r3, r4
 80014e6:	f7fe fff7 	bl	80004d8 <__aeabi_dmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80014f4:	cb18      	ldmia	r3, {r3, r4}
 80014f6:	461a      	mov	r2, r3
 80014f8:	4623      	mov	r3, r4
 80014fa:	f7fe fe37 	bl	800016c <__adddf3>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	4a62      	ldr	r2, [pc, #392]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001504:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800150a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001510:	cb18      	ldmia	r3, {r3, r4}
 8001512:	461a      	mov	r2, r3
 8001514:	4623      	mov	r3, r4
 8001516:	f7ff f909 	bl	800072c <__aeabi_ddiv>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	461d      	mov	r5, r3
 8001520:	4626      	mov	r6, r4
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001528:	4b57      	ldr	r3, [pc, #348]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800152a:	cb18      	ldmia	r3, {r3, r4}
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	f7fe fe1a 	bl	8000168 <__aeabi_dsub>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	4628      	mov	r0, r5
 800153e:	4631      	mov	r1, r6
 8001540:	f7fe ffca 	bl	80004d8 <__aeabi_dmul>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800154a:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna2 > 0){
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f7ff fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d02f      	beq.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x4d6>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 +(Up2 + Ui_actual2 + Ud2));
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff3a 	bl	80003e4 <__aeabi_ui2d>
 8001570:	4605      	mov	r5, r0
 8001572:	460e      	mov	r6, r1
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800157c:	cb18      	ldmia	r3, {r3, r4}
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	f7fe fdf3 	bl	800016c <__adddf3>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	4618      	mov	r0, r3
 800158c:	4621      	mov	r1, r4
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001590:	cb18      	ldmia	r3, {r3, r4}
 8001592:	461a      	mov	r2, r3
 8001594:	4623      	mov	r3, r4
 8001596:	f7fe fde9 	bl	800016c <__adddf3>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	461a      	mov	r2, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	4628      	mov	r0, r5
 80015a4:	4631      	mov	r1, r6
 80015a6:	f7fe fde1 	bl	800016c <__adddf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ba:	f7ff fa65 	bl	8000a88 <__aeabi_d2uiz>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e06d      	b.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x5b2>
			}else if(velocidad_consigna2 < 0){
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f7ff f9f2 	bl	80009bc <__aeabi_dcmplt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d05e      	beq.n	800169c <HAL_TIM_PeriodElapsedCallback+0x5ac>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 -(Up2 + Ui_actual2 + Ud2));
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fefe 	bl	80003e4 <__aeabi_ui2d>
 80015e8:	4605      	mov	r5, r0
 80015ea:	460e      	mov	r6, r1
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80015ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80015f4:	cb18      	ldmia	r3, {r3, r4}
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	f7fe fdb7 	bl	800016c <__adddf3>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4618      	mov	r0, r3
 8001604:	4621      	mov	r1, r4
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001608:	cb18      	ldmia	r3, {r3, r4}
 800160a:	461a      	mov	r2, r3
 800160c:	4623      	mov	r3, r4
 800160e:	f7fe fdad 	bl	800016c <__adddf3>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	461a      	mov	r2, r3
 8001618:	4623      	mov	r3, r4
 800161a:	4628      	mov	r0, r5
 800161c:	4631      	mov	r1, r6
 800161e:	f7fe fda3 	bl	8000168 <__aeabi_dsub>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001632:	f7ff fa29 	bl	8000a88 <__aeabi_d2uiz>
 8001636:	4602      	mov	r2, r0
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e031      	b.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x5b2>
 800163e:	bf00      	nop
 8001640:	200002a0 	.word	0x200002a0
 8001644:	200002f0 	.word	0x200002f0
 8001648:	200002c0 	.word	0x200002c0
 800164c:	200002b8 	.word	0x200002b8
 8001650:	200002c8 	.word	0x200002c8
 8001654:	20000464 	.word	0x20000464
 8001658:	200002b0 	.word	0x200002b0
 800165c:	20000280 	.word	0x20000280
 8001660:	20000288 	.word	0x20000288
 8001664:	200002a8 	.word	0x200002a8
 8001668:	20000270 	.word	0x20000270
 800166c:	20000290 	.word	0x20000290
 8001670:	20000040 	.word	0x20000040
 8001674:	200002d0 	.word	0x200002d0
 8001678:	20000020 	.word	0x20000020
 800167c:	200002e0 	.word	0x200002e0
 8001680:	20000028 	.word	0x20000028
 8001684:	20000000 	.word	0x20000000
 8001688:	20000298 	.word	0x20000298
 800168c:	200002d8 	.word	0x200002d8
 8001690:	20000030 	.word	0x20000030
 8001694:	200002e8 	.word	0x200002e8
 8001698:	200002f4 	.word	0x200002f4
			}else{
				duty_cycle_pid2 = 0;
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
			}
			if(duty_cycle_pid2 > 14000){
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d903      	bls.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x5c6>
				duty_cycle_pid2=14000;
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80016b0:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80016b4:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x674>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a29      	ldr	r2, [pc, #164]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80016c2:	cb18      	ldmia	r3, {r3, r4}
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80016c6:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80016cc:	cb18      	ldmia	r3, {r3, r4}
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016d0:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 80016d4:	e03e      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x664>
	}else if(htim->Instance == TIM3){
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d11a      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x626>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d908      	bls.n	8001704 <HAL_TIM_PeriodElapsedCallback+0x614>
			contOUFlow--;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80016fa:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 80016fc:	4821      	ldr	r0, [pc, #132]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80016fe:	f004 fb8f 	bl	8005e20 <puts>
}
 8001702:	e027      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x664>
			contOUFlow++;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800170c:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001710:	f004 fb86 	bl	8005e20 <puts>
}
 8001714:	e01e      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x664>
	}else if(htim->Instance == TIM4){
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d119      	bne.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x664>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	429a      	cmp	r2, r3
 8001730:	d908      	bls.n	8001744 <HAL_TIM_PeriodElapsedCallback+0x654>
			contOUFlow2--;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800173a:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 800173e:	f004 fb6f 	bl	8005e20 <puts>
}
 8001742:	e007      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x664>
			contOUFlow2++;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800174c:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001750:	f004 fb66 	bl	8005e20 <puts>
}
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800175e:	bf00      	nop
 8001760:	200002f4 	.word	0x200002f4
 8001764:	20000464 	.word	0x20000464
 8001768:	200002d8 	.word	0x200002d8
 800176c:	200002d0 	.word	0x200002d0
 8001770:	20000290 	.word	0x20000290
 8001774:	20000298 	.word	0x20000298
 8001778:	40000400 	.word	0x40000400
 800177c:	200003a8 	.word	0x200003a8
 8001780:	20000240 	.word	0x20000240
 8001784:	08009228 	.word	0x08009228
 8001788:	0800923c 	.word	0x0800923c
 800178c:	40000800 	.word	0x40000800
 8001790:	2000035c 	.word	0x2000035c
 8001794:	2000024c 	.word	0x2000024c
 8001798:	08009250 	.word	0x08009250
 800179c:	08009264 	.word	0x08009264

080017a0 <HAL_SPI_RxCpltCallback>:
}
/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	num_spi=num_spi+10;
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_SPI_RxCpltCallback+0xd8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	330a      	adds	r3, #10
 80017ae:	4a32      	ldr	r2, [pc, #200]	; (8001878 <HAL_SPI_RxCpltCallback+0xd8>)
 80017b0:	6013      	str	r3, [r2, #0]
	  if (hspi->Instance == SPI2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a31      	ldr	r2, [pc, #196]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d158      	bne.n	800186e <HAL_SPI_RxCpltCallback+0xce>
	  {
		  switch(byte){
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_SPI_RxCpltCallback+0xe0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b0d      	cmp	r3, #13
 80017c2:	d010      	beq.n	80017e6 <HAL_SPI_RxCpltCallback+0x46>
 80017c4:	2b0d      	cmp	r3, #13
 80017c6:	dc02      	bgt.n	80017ce <HAL_SPI_RxCpltCallback+0x2e>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d01c      	beq.n	8001806 <HAL_SPI_RxCpltCallback+0x66>
 80017cc:	e02a      	b.n	8001824 <HAL_SPI_RxCpltCallback+0x84>
 80017ce:	2b3a      	cmp	r3, #58	; 0x3a
 80017d0:	d002      	beq.n	80017d8 <HAL_SPI_RxCpltCallback+0x38>
 80017d2:	2b3b      	cmp	r3, #59	; 0x3b
 80017d4:	d007      	beq.n	80017e6 <HAL_SPI_RxCpltCallback+0x46>
 80017d6:	e025      	b.n	8001824 <HAL_SPI_RxCpltCallback+0x84>
		  	  case ':': //Comienzo de la trama
		  		  flagRx = 1;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_SPI_RxCpltCallback+0xe4>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		  		  indRx = 0;
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		  		  break;
 80017e4:	e039      	b.n	800185a <HAL_SPI_RxCpltCallback+0xba>
		  	  case '\r': //Retorno, fin de trama.
		  	  case ';':  //Fin de trama.
		  		  if(flagRx){
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_SPI_RxCpltCallback+0xe4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d030      	beq.n	8001850 <HAL_SPI_RxCpltCallback+0xb0>
		  			flagRx = 0;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_SPI_RxCpltCallback+0xe4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
		  			buffer[indRx] = 0;
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_SPI_RxCpltCallback+0xec>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	5499      	strb	r1, [r3, r2]
		  			interpreteComando();
 8001800:	f7ff f9b2 	bl	8000b68 <interpreteComando>
		  		  }
		  		  break;
 8001804:	e024      	b.n	8001850 <HAL_SPI_RxCpltCallback+0xb0>
		  	  case 8: //Retroceso es permitido de esta manera.
		  		  if(flagRx){
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_SPI_RxCpltCallback+0xe4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d022      	beq.n	8001854 <HAL_SPI_RxCpltCallback+0xb4>
		  			  if(indRx > 0){
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01e      	beq.n	8001854 <HAL_SPI_RxCpltCallback+0xb4>
		  				indRx--;
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 8001820:	701a      	strb	r2, [r3, #0]
		  			  }
		  		  }
		  		  break;
 8001822:	e017      	b.n	8001854 <HAL_SPI_RxCpltCallback+0xb4>
		  	  default: //Almacenamiento de la trama.
		  		  if(flagRx){
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_SPI_RxCpltCallback+0xe4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d015      	beq.n	8001858 <HAL_SPI_RxCpltCallback+0xb8>
		  			  buffer[indRx] = byte;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_SPI_RxCpltCallback+0xe0>)
 8001834:	7819      	ldrb	r1, [r3, #0]
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_SPI_RxCpltCallback+0xec>)
 8001838:	5499      	strb	r1, [r3, r2]
		  			  if(indRx < MAX_BUFFER - 1){
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b26      	cmp	r3, #38	; 0x26
 8001840:	d80a      	bhi.n	8001858 <HAL_SPI_RxCpltCallback+0xb8>
		  				indRx++;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_SPI_RxCpltCallback+0xe8>)
 800184c:	701a      	strb	r2, [r3, #0]
		  			  }

		  		  }
		  		break;
 800184e:	e003      	b.n	8001858 <HAL_SPI_RxCpltCallback+0xb8>
		  		  break;
 8001850:	bf00      	nop
 8001852:	e002      	b.n	800185a <HAL_SPI_RxCpltCallback+0xba>
		  		  break;
 8001854:	bf00      	nop
 8001856:	e000      	b.n	800185a <HAL_SPI_RxCpltCallback+0xba>
		  		break;
 8001858:	bf00      	nop
		  }
		  indexBuf++;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_SPI_RxCpltCallback+0xf0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_SPI_RxCpltCallback+0xf0>)
 8001862:	6013      	str	r3, [r2, #0]
	    /* Receive one byte in interrupt mode */
		  //HAL_SPI_TransmitReceive_IT(&hspi2, &out_buffer[indexBuf], &byte, 1);
		  HAL_SPI_Receive_IT(&hspi2, &byte, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	4906      	ldr	r1, [pc, #24]	; (8001880 <HAL_SPI_RxCpltCallback+0xe0>)
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <HAL_SPI_RxCpltCallback+0xf4>)
 800186a:	f001 fdd1 	bl	8003410 <HAL_SPI_Receive_IT>
	  }
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000278 	.word	0x20000278
 800187c:	40003800 	.word	0x40003800
 8001880:	20000418 	.word	0x20000418
 8001884:	200003a5 	.word	0x200003a5
 8001888:	2000023c 	.word	0x2000023c
 800188c:	200003f0 	.word	0x200003f0
 8001890:	2000027c 	.word	0x2000027c
 8001894:	20000304 	.word	0x20000304

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f000 fdd0 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f872 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f000 fab0 	bl	8001e08 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018a8:	f000 f986 	bl	8001bb8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80018ac:	f000 f8e6 	bl	8001a7c <MX_TIM1_Init>
  MX_TIM3_Init();
 80018b0:	f000 fa02 	bl	8001cb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018b4:	f000 fa54 	bl	8001d60 <MX_TIM4_Init>
  MX_SPI2_Init();
 80018b8:	f000 f8ac 	bl	8001a14 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	//HAL_UART_Receive_IT(&huart2, &byte, 1);
  	HAL_SPI_Receive_IT(&hspi2, &byte, 1);
 80018bc:	2201      	movs	r2, #1
 80018be:	492a      	ldr	r1, [pc, #168]	; (8001968 <main+0xd0>)
 80018c0:	482a      	ldr	r0, [pc, #168]	; (800196c <main+0xd4>)
 80018c2:	f001 fda5 	bl	8003410 <HAL_SPI_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 80018c6:	482a      	ldr	r0, [pc, #168]	; (8001970 <main+0xd8>)
 80018c8:	f002 fb30 	bl	8003f2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80018cc:	2100      	movs	r1, #0
 80018ce:	4828      	ldr	r0, [pc, #160]	; (8001970 <main+0xd8>)
 80018d0:	f002 fbd6 	bl	8004080 <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 80018d4:	4827      	ldr	r0, [pc, #156]	; (8001974 <main+0xdc>)
 80018d6:	f002 fadf 	bl	8003e98 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80018da:	2100      	movs	r1, #0
 80018dc:	4825      	ldr	r0, [pc, #148]	; (8001974 <main+0xdc>)
 80018de:	f002 fd0f 	bl	8004300 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80018e2:	2108      	movs	r1, #8
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <main+0xdc>)
 80018e6:	f002 fd0b 	bl	8004300 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80018ea:	4823      	ldr	r0, [pc, #140]	; (8001978 <main+0xe0>)
 80018ec:	f002 fb1e 	bl	8003f2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80018f0:	213c      	movs	r1, #60	; 0x3c
 80018f2:	4821      	ldr	r0, [pc, #132]	; (8001978 <main+0xe0>)
 80018f4:	f002 fe8e 	bl	8004614 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 80018f8:	4820      	ldr	r0, [pc, #128]	; (800197c <main+0xe4>)
 80018fa:	f002 fb17 	bl	8003f2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80018fe:	213c      	movs	r1, #60	; 0x3c
 8001900:	481e      	ldr	r0, [pc, #120]	; (800197c <main+0xe4>)
 8001902:	f002 fe87 	bl	8004614 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	2110      	movs	r1, #16
 800190a:	481d      	ldr	r0, [pc, #116]	; (8001980 <main+0xe8>)
 800190c:	f001 f8fa 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2120      	movs	r1, #32
 8001914:	481a      	ldr	r0, [pc, #104]	; (8001980 <main+0xe8>)
 8001916:	f001 f8f5 	bl	8002b04 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001920:	4817      	ldr	r0, [pc, #92]	; (8001980 <main+0xe8>)
 8001922:	f001 f8ef 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192c:	4814      	ldr	r0, [pc, #80]	; (8001980 <main+0xe8>)
 800192e:	f001 f8e9 	bl	8002b04 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <main+0xe0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <main+0xe4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	480e      	ldr	r0, [pc, #56]	; (8001984 <main+0xec>)
 800194a:	f001 f8db 	bl	8002b04 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f000 fdd8 	bl	8002504 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195a:	480a      	ldr	r0, [pc, #40]	; (8001984 <main+0xec>)
 800195c:	f001 f8d2 	bl	8002b04 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001960:	2064      	movs	r0, #100	; 0x64
 8001962:	f000 fdcf 	bl	8002504 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001966:	e7ec      	b.n	8001942 <main+0xaa>
 8001968:	20000418 	.word	0x20000418
 800196c:	20000304 	.word	0x20000304
 8001970:	2000041c 	.word	0x2000041c
 8001974:	20000464 	.word	0x20000464
 8001978:	200003a8 	.word	0x200003a8
 800197c:	2000035c 	.word	0x2000035c
 8001980:	40010800 	.word	0x40010800
 8001984:	40011000 	.word	0x40011000

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b090      	sub	sp, #64	; 0x40
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	2228      	movs	r2, #40	; 0x28
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fd76 	bl	8005488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019bc:	2302      	movs	r3, #2
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 f8af 	bl	8002b34 <HAL_RCC_OscConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019dc:	f000 fa82 	bl	8001ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e0:	230f      	movs	r3, #15
 80019e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fb1a 	bl	8003034 <HAL_RCC_ClockConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a06:	f000 fa6d 	bl	8001ee4 <Error_Handler>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3740      	adds	r7, #64	; 0x40
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <MX_SPI2_Init+0x64>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a44:	2238      	movs	r2, #56	; 0x38
 8001a46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_SPI2_Init+0x60>)
 8001a62:	f001 fc51 	bl	8003308 <HAL_SPI_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8001a6c:	f000 fa3a 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000304 	.word	0x20000304
 8001a78:	40003800 	.word	0x40003800

08001a7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b096      	sub	sp, #88	; 0x58
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fce7 	bl	8005488 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001abc:	4a3d      	ldr	r2, [pc, #244]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001ac2:	220b      	movs	r2, #11
 8001ac4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001ace:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001ad2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ae6:	4832      	ldr	r0, [pc, #200]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001ae8:	f002 f987 	bl	8003dfa <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001af2:	f000 f9f7 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b00:	4619      	mov	r1, r3
 8001b02:	482b      	ldr	r0, [pc, #172]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001b04:	f003 f852 	bl	8004bac <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b0e:	f000 f9e9 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001b12:	4827      	ldr	r0, [pc, #156]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001b14:	f002 fa5c 	bl	8003fd0 <HAL_TIM_OC_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b1e:	f000 f9e1 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481f      	ldr	r0, [pc, #124]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001b32:	f003 fbbb 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b3c:	f000 f9d2 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001b66:	f002 ff0b 	bl	8004980 <HAL_TIM_OC_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b70:	f000 f9b8 	bl	8001ee4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <MX_TIM1_Init+0x134>)
 8001b98:	f003 fbe6 	bl	8005368 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ba2:	f000 f99f 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	3758      	adds	r7, #88	; 0x58
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000041c 	.word	0x2000041c
 8001bb4:	40012c00 	.word	0x40012c00

08001bb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be8:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001bfe:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c10:	4828      	ldr	r0, [pc, #160]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c12:	f002 f8f2 	bl	8003dfa <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c1c:	f000 f962 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4821      	ldr	r0, [pc, #132]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c2e:	f002 ffbd 	bl	8004bac <HAL_TIM_ConfigClockSource>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c38:	f000 f954 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c3c:	481d      	ldr	r0, [pc, #116]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c3e:	f002 fb07 	bl	8004250 <HAL_TIM_PWM_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c48:	f000 f94c 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c5c:	f003 fb26 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c66:	f000 f93d 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6a:	2360      	movs	r3, #96	; 0x60
 8001c6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c82:	f002 fed5 	bl	8004a30 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c8c:	f000 f92a 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2208      	movs	r2, #8
 8001c94:	4619      	mov	r1, r3
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001c98:	f002 feca 	bl	8004a30 <HAL_TIM_PWM_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001ca2:	f000 f91f 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM2_Init+0xfc>)
 8001ca8:	f000 fa74 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8001cac:	bf00      	nop
 8001cae:	3738      	adds	r7, #56	; 0x38
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000464 	.word	0x20000464

08001cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	; 0x30
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fbde 	bl	8005488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <MX_TIM3_Init+0xa4>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001ce8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001cec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d02:	2301      	movs	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d12:	2301      	movs	r3, #1
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	4619      	mov	r1, r3
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001d26:	f002 fbd3 	bl	80044d0 <HAL_TIM_Encoder_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d30:	f000 f8d8 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001d42:	f003 fab3 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d4c:	f000 f8ca 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	3730      	adds	r7, #48	; 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200003a8 	.word	0x200003a8
 8001d5c:	40000400 	.word	0x40000400

08001d60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb8a 	bl	8005488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <MX_TIM4_Init+0xa4>)
 8001d80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d90:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001d94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001da2:	2303      	movs	r3, #3
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001dce:	f002 fb7f 	bl	80044d0 <HAL_TIM_Encoder_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001dd8:	f000 f884 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001dea:	f003 fa5f 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001df4:	f000 f876 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3730      	adds	r7, #48	; 0x30
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	2000035c 	.word	0x2000035c
 8001e04:	40000800 	.word	0x40000800

08001e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e3a:	f043 0320 	orr.w	r3, r3, #32
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MX_GPIO_Init+0xd0>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e82:	4816      	ldr	r0, [pc, #88]	; (8001edc <MX_GPIO_Init+0xd4>)
 8001e84:	f000 fe3e 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001e8e:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <MX_GPIO_Init+0xd8>)
 8001e90:	f000 fe38 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <MX_GPIO_Init+0xd4>)
 8001eae:	f000 fccf 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 8001eb2:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_GPIO_Init+0xd8>)
 8001ecc:	f000 fcc0 	bl	8002850 <HAL_GPIO_Init>

}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40011000 	.word	0x40011000
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_MspInit+0x5c>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <HAL_MspInit+0x5c>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6193      	str	r3, [r2, #24]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_MspInit+0x5c>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_MspInit+0x60>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_MspInit+0x60>)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000

08001f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_SPI_MspInit+0x9c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d139      	bne.n	8001fe8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f74:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <HAL_SPI_MspInit+0xa0>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_SPI_MspInit+0xa0>)
 8001f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7e:	61d3      	str	r3, [r2, #28]
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_SPI_MspInit+0xa0>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_SPI_MspInit+0xa0>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_SPI_MspInit+0xa0>)
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_SPI_MspInit+0xa0>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001fa4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <HAL_SPI_MspInit+0xa4>)
 8001fba:	f000 fc49 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <HAL_SPI_MspInit+0xa4>)
 8001fd4:	f000 fc3c 	bl	8002850 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2024      	movs	r0, #36	; 0x24
 8001fde:	f000 fb8a 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fe2:	2024      	movs	r0, #36	; 0x24
 8001fe4:	f000 fba3 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40003800 	.word	0x40003800
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010c00 	.word	0x40010c00

08001ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_TIM_Base_MspInit+0x98>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12c      	bne.n	8002068 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <HAL_TIM_Base_MspInit+0x9c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_TIM_Base_MspInit+0x9c>)
 8002014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002018:	6193      	str	r3, [r2, #24]
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_TIM_Base_MspInit+0x9c>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2018      	movs	r0, #24
 800202c:	f000 fb63 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002030:	2018      	movs	r0, #24
 8002032:	f000 fb7c 	bl	800272e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2019      	movs	r0, #25
 800203c:	f000 fb5b 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002040:	2019      	movs	r0, #25
 8002042:	f000 fb74 	bl	800272e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201a      	movs	r0, #26
 800204c:	f000 fb53 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002050:	201a      	movs	r0, #26
 8002052:	f000 fb6c 	bl	800272e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	201b      	movs	r0, #27
 800205c:	f000 fb4b 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002060:	201b      	movs	r0, #27
 8002062:	f000 fb64 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002066:	e010      	b.n	800208a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d10b      	bne.n	800208a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_TIM_Base_MspInit+0x9c>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <HAL_TIM_Base_MspInit+0x9c>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_TIM_Base_MspInit+0x9c>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_TIM_Encoder_MspInit+0xe4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d12c      	bne.n	8002116 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a2a      	ldr	r2, [pc, #168]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4822      	ldr	r0, [pc, #136]	; (8002188 <HAL_TIM_Encoder_MspInit+0xec>)
 8002100:	f000 fba6 	bl	8002850 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	201d      	movs	r0, #29
 800210a:	f000 faf4 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800210e:	201d      	movs	r0, #29
 8002110:	f000 fb0d 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002114:	e030      	b.n	8002178 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_TIM_Encoder_MspInit+0xf0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d12b      	bne.n	8002178 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4a17      	ldr	r2, [pc, #92]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	61d3      	str	r3, [r2, #28]
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	4619      	mov	r1, r3
 8002162:	480b      	ldr	r0, [pc, #44]	; (8002190 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002164:	f000 fb74 	bl	8002850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	201e      	movs	r0, #30
 800216e:	f000 fac2 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002172:	201e      	movs	r0, #30
 8002174:	f000 fadb 	bl	800272e <HAL_NVIC_EnableIRQ>
}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40000400 	.word	0x40000400
 8002184:	40021000 	.word	0x40021000
 8002188:	40010800 	.word	0x40010800
 800218c:	40000800 	.word	0x40000800
 8002190:	40010c00 	.word	0x40010c00

08002194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d142      	bne.n	800223a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021e4:	2301      	movs	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	4814      	ldr	r0, [pc, #80]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 80021f8:	f000 fb2a 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	480e      	ldr	r0, [pc, #56]	; (800224c <HAL_TIM_MspPostInit+0xb8>)
 8002212:	f000 fb1d 	bl	8002850 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_TIM_MspPostInit+0xbc>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_TIM_MspPostInit+0xbc>)
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40010800 	.word	0x40010800
 800224c:	40010c00 	.word	0x40010c00
 8002250:	40010000 	.word	0x40010000

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <HardFault_Handler+0x4>

08002266 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <MemManage_Handler+0x4>

0800226c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <BusFault_Handler+0x4>

08002272 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <UsageFault_Handler+0x4>

08002278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f000 f914 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <TIM1_BRK_IRQHandler+0x10>)
 80022ae:	f002 fa5e 	bl	800476e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000041c 	.word	0x2000041c

080022bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <TIM1_UP_IRQHandler+0x10>)
 80022c2:	f002 fa54 	bl	800476e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000041c 	.word	0x2000041c

080022d0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022d6:	f002 fa4a 	bl	800476e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000041c 	.word	0x2000041c

080022e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <TIM1_CC_IRQHandler+0x10>)
 80022ea:	f002 fa40 	bl	800476e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000041c 	.word	0x2000041c

080022f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <TIM3_IRQHandler+0x10>)
 80022fe:	f002 fa36 	bl	800476e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200003a8 	.word	0x200003a8

0800230c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM4_IRQHandler+0x10>)
 8002312:	f002 fa2c 	bl	800476e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000035c 	.word	0x2000035c

08002320 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <SPI2_IRQHandler+0x10>)
 8002326:	f001 f9a5 	bl	8003674 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000304 	.word	0x20000304

08002334 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x50>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <_sbrk+0x16>
		heap_end = &end;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <_sbrk+0x50>)
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <_sbrk+0x54>)
 8002348:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <_sbrk+0x50>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <_sbrk+0x50>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	466a      	mov	r2, sp
 800235a:	4293      	cmp	r3, r2
 800235c:	d907      	bls.n	800236e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800235e:	f003 f869 	bl	8005434 <__errno>
 8002362:	4602      	mov	r2, r0
 8002364:	230c      	movs	r3, #12
 8002366:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236c:	e006      	b.n	800237c <_sbrk+0x48>
	}

	heap_end += incr;
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <_sbrk+0x50>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	4a03      	ldr	r2, [pc, #12]	; (8002384 <_sbrk+0x50>)
 8002378:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200002f8 	.word	0x200002f8
 8002388:	200004b8 	.word	0x200004b8

0800238c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <SystemInit+0x5c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <SystemInit+0x5c>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <SystemInit+0x5c>)
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4911      	ldr	r1, [pc, #68]	; (80023e8 <SystemInit+0x5c>)
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <SystemInit+0x60>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <SystemInit+0x5c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <SystemInit+0x5c>)
 80023ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <SystemInit+0x5c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SystemInit+0x5c>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <SystemInit+0x5c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <SystemInit+0x5c>)
 80023ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SystemInit+0x5c>)
 80023d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <SystemInit+0x64>)
 80023da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023de:	609a      	str	r2, [r3, #8]
#endif 
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000
 80023ec:	f8ff0000 	.word	0xf8ff0000
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023f6:	e003      	b.n	8002400 <LoopCopyDataInit>

080023f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023fe:	3104      	adds	r1, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002400:	480a      	ldr	r0, [pc, #40]	; (800242c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002404:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002406:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002408:	d3f6      	bcc.n	80023f8 <CopyDataInit>
  ldr r2, =_sbss
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800240c:	e002      	b.n	8002414 <LoopFillZerobss>

0800240e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002410:	f842 3b04 	str.w	r3, [r2], #4

08002414 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002416:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002418:	d3f9      	bcc.n	800240e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800241a:	f7ff ffb7 	bl	800238c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f003 f80f 	bl	8005440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002422:	f7ff fa39 	bl	8001898 <main>
  bx lr
 8002426:	4770      	bx	lr
  ldr r3, =_sidata
 8002428:	080095c0 	.word	0x080095c0
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002430:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8002434:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8002438:	200004b4 	.word	0x200004b4

0800243c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC1_2_IRQHandler>
	...

08002440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_Init+0x28>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_Init+0x28>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 f945 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fd48 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40022000 	.word	0x40022000

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f95d 	bl	800274a <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a8:	f000 f925 	bl	80026f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000044 	.word	0x20000044
 80024c4:	2000004c 	.word	0x2000004c
 80024c8:	20000048 	.word	0x20000048

080024cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_IncTick+0x1c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_IncTick+0x20>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a03      	ldr	r2, [pc, #12]	; (80024ec <HAL_IncTick+0x20>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	2000004c 	.word	0x2000004c
 80024ec:	200004ac 	.word	0x200004ac

080024f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b02      	ldr	r3, [pc, #8]	; (8002500 <HAL_GetTick+0x10>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	200004ac 	.word	0x200004ac

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff fff0 	bl	80024f0 <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_Delay+0x40>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffe0 	bl	80024f0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000004c 	.word	0x2000004c

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4906      	ldr	r1, [pc, #24]	; (80025e0 <__NVIC_EnableIRQ+0x34>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ac:	d301      	bcc.n	80026b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <SysTick_Config+0x40>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ba:	210f      	movs	r1, #15
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c0:	f7ff ff90 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <SysTick_Config+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <SysTick_Config+0x40>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff2d 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff42 	bl	8002590 <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff90 	bl	8002638 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5f 	bl	80025e4 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff35 	bl	80025ac <__NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa2 	bl	800269c <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002776:	2b02      	cmp	r3, #2
 8002778:	d005      	beq.n	8002786 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2204      	movs	r2, #4
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e051      	b.n	800282a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 020e 	bic.w	r2, r2, #14
 8002794:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a22      	ldr	r2, [pc, #136]	; (8002834 <HAL_DMA_Abort_IT+0xd0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d029      	beq.n	8002804 <HAL_DMA_Abort_IT+0xa0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a20      	ldr	r2, [pc, #128]	; (8002838 <HAL_DMA_Abort_IT+0xd4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d022      	beq.n	8002800 <HAL_DMA_Abort_IT+0x9c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1f      	ldr	r2, [pc, #124]	; (800283c <HAL_DMA_Abort_IT+0xd8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d01a      	beq.n	80027fa <HAL_DMA_Abort_IT+0x96>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <HAL_DMA_Abort_IT+0xdc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d012      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x90>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_DMA_Abort_IT+0xe0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00a      	beq.n	80027ee <HAL_DMA_Abort_IT+0x8a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1a      	ldr	r2, [pc, #104]	; (8002848 <HAL_DMA_Abort_IT+0xe4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d102      	bne.n	80027e8 <HAL_DMA_Abort_IT+0x84>
 80027e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027e6:	e00e      	b.n	8002806 <HAL_DMA_Abort_IT+0xa2>
 80027e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ec:	e00b      	b.n	8002806 <HAL_DMA_Abort_IT+0xa2>
 80027ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f2:	e008      	b.n	8002806 <HAL_DMA_Abort_IT+0xa2>
 80027f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f8:	e005      	b.n	8002806 <HAL_DMA_Abort_IT+0xa2>
 80027fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fe:	e002      	b.n	8002806 <HAL_DMA_Abort_IT+0xa2>
 8002800:	2310      	movs	r3, #16
 8002802:	e000      	b.n	8002806 <HAL_DMA_Abort_IT+0xa2>
 8002804:	2301      	movs	r3, #1
 8002806:	4a11      	ldr	r2, [pc, #68]	; (800284c <HAL_DMA_Abort_IT+0xe8>)
 8002808:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
    } 
  }
  return status;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40020008 	.word	0x40020008
 8002838:	4002001c 	.word	0x4002001c
 800283c:	40020030 	.word	0x40020030
 8002840:	40020044 	.word	0x40020044
 8002844:	40020058 	.word	0x40020058
 8002848:	4002006c 	.word	0x4002006c
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b08b      	sub	sp, #44	; 0x2c
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e127      	b.n	8002ab4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002864:	2201      	movs	r2, #1
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8116 	bne.w	8002aae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b12      	cmp	r3, #18
 8002888:	d034      	beq.n	80028f4 <HAL_GPIO_Init+0xa4>
 800288a:	2b12      	cmp	r3, #18
 800288c:	d80d      	bhi.n	80028aa <HAL_GPIO_Init+0x5a>
 800288e:	2b02      	cmp	r3, #2
 8002890:	d02b      	beq.n	80028ea <HAL_GPIO_Init+0x9a>
 8002892:	2b02      	cmp	r3, #2
 8002894:	d804      	bhi.n	80028a0 <HAL_GPIO_Init+0x50>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d031      	beq.n	80028fe <HAL_GPIO_Init+0xae>
 800289a:	2b01      	cmp	r3, #1
 800289c:	d01c      	beq.n	80028d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800289e:	e048      	b.n	8002932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d043      	beq.n	800292c <HAL_GPIO_Init+0xdc>
 80028a4:	2b11      	cmp	r3, #17
 80028a6:	d01b      	beq.n	80028e0 <HAL_GPIO_Init+0x90>
          break;
 80028a8:	e043      	b.n	8002932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028aa:	4a89      	ldr	r2, [pc, #548]	; (8002ad0 <HAL_GPIO_Init+0x280>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d026      	beq.n	80028fe <HAL_GPIO_Init+0xae>
 80028b0:	4a87      	ldr	r2, [pc, #540]	; (8002ad0 <HAL_GPIO_Init+0x280>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d806      	bhi.n	80028c4 <HAL_GPIO_Init+0x74>
 80028b6:	4a87      	ldr	r2, [pc, #540]	; (8002ad4 <HAL_GPIO_Init+0x284>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d020      	beq.n	80028fe <HAL_GPIO_Init+0xae>
 80028bc:	4a86      	ldr	r2, [pc, #536]	; (8002ad8 <HAL_GPIO_Init+0x288>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01d      	beq.n	80028fe <HAL_GPIO_Init+0xae>
          break;
 80028c2:	e036      	b.n	8002932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028c4:	4a85      	ldr	r2, [pc, #532]	; (8002adc <HAL_GPIO_Init+0x28c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0xae>
 80028ca:	4a85      	ldr	r2, [pc, #532]	; (8002ae0 <HAL_GPIO_Init+0x290>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d016      	beq.n	80028fe <HAL_GPIO_Init+0xae>
 80028d0:	4a84      	ldr	r2, [pc, #528]	; (8002ae4 <HAL_GPIO_Init+0x294>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0xae>
          break;
 80028d6:	e02c      	b.n	8002932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e028      	b.n	8002932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	3304      	adds	r3, #4
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e023      	b.n	8002932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	3308      	adds	r3, #8
 80028f0:	623b      	str	r3, [r7, #32]
          break;
 80028f2:	e01e      	b.n	8002932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	330c      	adds	r3, #12
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e019      	b.n	8002932 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002906:	2304      	movs	r3, #4
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e012      	b.n	8002932 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	611a      	str	r2, [r3, #16]
          break;
 800291e:	e008      	b.n	8002932 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	615a      	str	r2, [r3, #20]
          break;
 800292a:	e002      	b.n	8002932 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2bff      	cmp	r3, #255	; 0xff
 8002936:	d801      	bhi.n	800293c <HAL_GPIO_Init+0xec>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	e001      	b.n	8002940 <HAL_GPIO_Init+0xf0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2bff      	cmp	r3, #255	; 0xff
 8002946:	d802      	bhi.n	800294e <HAL_GPIO_Init+0xfe>
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	e002      	b.n	8002954 <HAL_GPIO_Init+0x104>
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	3b08      	subs	r3, #8
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	210f      	movs	r1, #15
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	401a      	ands	r2, r3
 8002966:	6a39      	ldr	r1, [r7, #32]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	431a      	orrs	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8096 	beq.w	8002aae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002982:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_GPIO_Init+0x298>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <HAL_GPIO_Init+0x298>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6193      	str	r3, [r2, #24]
 800298e:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_GPIO_Init+0x298>)
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800299a:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_GPIO_Init+0x29c>)
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4b      	ldr	r2, [pc, #300]	; (8002af0 <HAL_GPIO_Init+0x2a0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_GPIO_Init+0x19e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <HAL_GPIO_Init+0x2a4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00d      	beq.n	80029ea <HAL_GPIO_Init+0x19a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a49      	ldr	r2, [pc, #292]	; (8002af8 <HAL_GPIO_Init+0x2a8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <HAL_GPIO_Init+0x196>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2ac>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <HAL_GPIO_Init+0x192>
 80029de:	2303      	movs	r3, #3
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x1a0>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x1a0>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x1a0>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x1a0>
 80029ee:	2300      	movs	r3, #0
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a00:	493a      	ldr	r1, [pc, #232]	; (8002aec <HAL_GPIO_Init+0x29c>)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a1a:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4938      	ldr	r1, [pc, #224]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
 8002a26:	e006      	b.n	8002a36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a28:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	4933      	ldr	r1, [pc, #204]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a42:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	492e      	ldr	r1, [pc, #184]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
 8002a4e:	e006      	b.n	8002a5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	4929      	ldr	r1, [pc, #164]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a6a:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	4924      	ldr	r1, [pc, #144]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
 8002a76:	e006      	b.n	8002a86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	491f      	ldr	r1, [pc, #124]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	491a      	ldr	r1, [pc, #104]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60cb      	str	r3, [r1, #12]
 8002a9e:	e006      	b.n	8002aae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	4915      	ldr	r1, [pc, #84]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f47f aed0 	bne.w	8002864 <HAL_GPIO_Init+0x14>
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	372c      	adds	r7, #44	; 0x2c
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	10210000 	.word	0x10210000
 8002ad4:	10110000 	.word	0x10110000
 8002ad8:	10120000 	.word	0x10120000
 8002adc:	10310000 	.word	0x10310000
 8002ae0:	10320000 	.word	0x10320000
 8002ae4:	10220000 	.word	0x10220000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40010800 	.word	0x40010800
 8002af4:	40010c00 	.word	0x40010c00
 8002af8:	40011000 	.word	0x40011000
 8002afc:	40011400 	.word	0x40011400
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e26c      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8087 	beq.w	8002c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b54:	4b92      	ldr	r3, [pc, #584]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d00c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b60:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d112      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
 8002b6c:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d10b      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7a:	4b89      	ldr	r3, [pc, #548]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d06c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x12c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d168      	bne.n	8002c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e246      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x76>
 8002b9c:	4b80      	ldr	r3, [pc, #512]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7f      	ldr	r2, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b78      	ldr	r3, [pc, #480]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xbc>
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a71      	ldr	r2, [pc, #452]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002bf0:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6a      	ldr	r2, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a67      	ldr	r2, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7ff fc6e 	bl	80024f0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7ff fc6a 	bl	80024f0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1fa      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b5d      	ldr	r3, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe4>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff fc5a 	bl	80024f0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff fc56 	bl	80024f0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1e6      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x10c>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6e:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7a:	4b49      	ldr	r3, [pc, #292]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x18c>
 8002c86:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x176>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1ba      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4939      	ldr	r1, [pc, #228]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	e03a      	b.n	8002d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x270>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7ff fc0f 	bl	80024f0 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7ff fc0b 	bl	80024f0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e19b      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4927      	ldr	r1, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e015      	b.n	8002d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff fbee 	bl	80024f0 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d18:	f7ff fbea 	bl	80024f0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e17a      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d03a      	beq.n	8002db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d019      	beq.n	8002d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7ff fbce 	bl	80024f0 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d58:	f7ff fbca 	bl	80024f0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e15a      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f000 faa8 	bl	80032cc <RCC_Delay>
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d84:	f7ff fbb4 	bl	80024f0 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8a:	e00f      	b.n	8002dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fbb0 	bl	80024f0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d908      	bls.n	8002dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e140      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	42420000 	.word	0x42420000
 8002da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	4b9e      	ldr	r3, [pc, #632]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e9      	bne.n	8002d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a6 	beq.w	8002f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b97      	ldr	r3, [pc, #604]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10d      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b94      	ldr	r3, [pc, #592]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4a93      	ldr	r2, [pc, #588]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	61d3      	str	r3, [r2, #28]
 8002de2:	4b91      	ldr	r3, [pc, #580]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b8e      	ldr	r3, [pc, #568]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b8b      	ldr	r3, [pc, #556]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a8a      	ldr	r2, [pc, #552]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7ff fb71 	bl	80024f0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7ff fb6d 	bl	80024f0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e0fd      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x312>
 8002e38:	4b7b      	ldr	r3, [pc, #492]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4a7a      	ldr	r2, [pc, #488]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6213      	str	r3, [r2, #32]
 8002e44:	e02d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x36e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x334>
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a75      	ldr	r2, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6213      	str	r3, [r2, #32]
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a72      	ldr	r2, [pc, #456]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	e01c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x36e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x356>
 8002e70:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a6c      	ldr	r2, [pc, #432]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e00b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x36e>
 8002e8a:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a66      	ldr	r2, [pc, #408]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6213      	str	r3, [r2, #32]
 8002e96:	4b64      	ldr	r3, [pc, #400]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a63      	ldr	r2, [pc, #396]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d015      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fb21 	bl	80024f0 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7ff fb1d 	bl	80024f0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0ab      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	4b57      	ldr	r3, [pc, #348]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ee      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x37e>
 8002ed4:	e014      	b.n	8002f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed6:	f7ff fb0b 	bl	80024f0 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7ff fb07 	bl	80024f0 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e095      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ee      	bne.n	8002ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a47      	ldr	r2, [pc, #284]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8081 	beq.w	800301e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d061      	beq.n	8002fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d146      	bne.n	8002fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_OscConfig+0x4fc>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7ff fadb 	bl	80024f0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7ff fad7 	bl	80024f0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e067      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f50:	4b35      	ldr	r3, [pc, #212]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d108      	bne.n	8002f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	492d      	ldr	r1, [pc, #180]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a19      	ldr	r1, [r3, #32]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	4927      	ldr	r1, [pc, #156]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x4fc>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7ff faab 	bl	80024f0 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7ff faa7 	bl	80024f0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e037      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x46a>
 8002fbc:	e02f      	b.n	800301e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_RCC_OscConfig+0x4fc>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7ff fa94 	bl	80024f0 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7ff fa90 	bl	80024f0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e020      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x498>
 8002fea:	e018      	b.n	800301e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e013      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	429a      	cmp	r2, r3
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
 8003030:	42420060 	.word	0x42420060

08003034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d040      	beq.n	8003154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e073      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4936      	ldr	r1, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003124:	f7ff f9e4 	bl	80024f0 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7ff f9e0 	bl	80024f0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e053      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d210      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	4922      	ldr	r1, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4601      	mov	r1, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	fa21 f303 	lsr.w	r3, r1, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1cc>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f942 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	0800928c 	.word	0x0800928c
 8003200:	20000044 	.word	0x20000044
 8003204:	20000048 	.word	0x20000048

08003208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b490      	push	{r4, r7}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003210:	1d3c      	adds	r4, r7, #4
 8003212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003232:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b04      	cmp	r3, #4
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x40>
 8003242:	2b08      	cmp	r3, #8
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x46>
 8003246:	e02d      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003248:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800324a:	623b      	str	r3, [r7, #32]
      break;
 800324c:	e02d      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	0c9b      	lsrs	r3, r3, #18
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800325a:	4413      	add	r3, r2
 800325c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003260:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0c5b      	lsrs	r3, r3, #17
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327a:	4413      	add	r3, r2
 800327c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4a0f      	ldr	r2, [pc, #60]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003286:	fb02 f203 	mul.w	r2, r2, r3
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	e004      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	623b      	str	r3, [r7, #32]
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a6:	623b      	str	r3, [r7, #32]
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	6a3b      	ldr	r3, [r7, #32]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc90      	pop	{r4, r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	08009278 	.word	0x08009278
 80032bc:	08009288 	.word	0x08009288
 80032c0:	40021000 	.word	0x40021000
 80032c4:	007a1200 	.word	0x007a1200
 80032c8:	003d0900 	.word	0x003d0900

080032cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <RCC_Delay+0x34>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <RCC_Delay+0x38>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0a5b      	lsrs	r3, r3, #9
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e8:	bf00      	nop
  }
  while (Delay --);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1e5a      	subs	r2, r3, #1
 80032ee:	60fa      	str	r2, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <RCC_Delay+0x1c>
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000044 	.word	0x20000044
 8003304:	10624dd3 	.word	0x10624dd3

08003308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e076      	b.n	8003408 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d108      	bne.n	8003334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332a:	d009      	beq.n	8003340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
 8003332:	e005      	b.n	8003340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe fdfa 	bl	8001f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	ea42 0103 	orr.w	r1, r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	0c1a      	lsrs	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f002 0204 	and.w	r2, r2, #4
 80033e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d110      	bne.n	800344c <HAL_SPI_Receive_IT+0x3c>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003432:	d10b      	bne.n	800344c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2204      	movs	r2, #4
 8003438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f882 	bl	800354c <HAL_SPI_TransmitReceive_IT>
 8003448:	4603      	mov	r3, r0
 800344a:	e076      	b.n	800353a <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_SPI_Receive_IT+0x4a>
 8003456:	2302      	movs	r3, #2
 8003458:	e06f      	b.n	800353a <HAL_SPI_Receive_IT+0x12a>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d002      	beq.n	8003474 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003472:	e05d      	b.n	8003530 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_SPI_Receive_IT+0x70>
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003484:	e054      	b.n	8003530 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2204      	movs	r2, #4
 800348a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <HAL_SPI_Receive_IT+0x134>)
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
 80034cc:	e002      	b.n	80034d4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_SPI_Receive_IT+0x138>)
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d10f      	bne.n	80034fe <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800350c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d008      	beq.n	800352e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e000      	b.n	8003530 <HAL_SPI_Receive_IT+0x120>
  }

error :
 800352e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	08003a5d 	.word	0x08003a5d
 8003548:	08003a13 	.word	0x08003a13

0800354c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_SPI_TransmitReceive_IT+0x20>
 8003568:	2302      	movs	r3, #2
 800356a:	e075      	b.n	8003658 <HAL_SPI_TransmitReceive_IT+0x10c>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800357a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003582:	7dbb      	ldrb	r3, [r7, #22]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d00d      	beq.n	80035a4 <HAL_SPI_TransmitReceive_IT+0x58>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358e:	d106      	bne.n	800359e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <HAL_SPI_TransmitReceive_IT+0x52>
 8003598:	7dbb      	ldrb	r3, [r7, #22]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800359e:	2302      	movs	r3, #2
 80035a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a2:	e054      	b.n	800364e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ba:	e048      	b.n	800364e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d003      	beq.n	80035d0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2205      	movs	r2, #5
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	887a      	ldrh	r2, [r7, #2]
 80035e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	887a      	ldrh	r2, [r7, #2]
 80035f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
 800360e:	e005      	b.n	800361c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a16      	ldr	r2, [pc, #88]	; (800366c <HAL_SPI_TransmitReceive_IT+0x120>)
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <HAL_SPI_TransmitReceive_IT+0x124>)
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800362a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d008      	beq.n	800364c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e000      	b.n	800364e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800364c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	08003955 	.word	0x08003955
 8003668:	080039b5 	.word	0x080039b5
 800366c:	08003891 	.word	0x08003891
 8003670:	080038f5 	.word	0x080038f5

08003674 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10f      	bne.n	80036b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
    return;
 80036b6:	e0bf      	b.n	8003838 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_SPI_IRQHandler+0x66>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	09db      	lsrs	r3, r3, #7
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d004      	beq.n	80036da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
    return;
 80036d8:	e0ae      	b.n	8003838 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_SPI_IRQHandler+0x80>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80a2 	beq.w	8003838 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 809b 	beq.w	8003838 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d023      	beq.n	8003756 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b03      	cmp	r3, #3
 8003718:	d011      	beq.n	800373e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f043 0204 	orr.w	r2, r3, #4
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	e00b      	b.n	8003756 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
        return;
 8003754:	e070      	b.n	8003838 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d014      	beq.n	800378c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	2b00      	cmp	r3, #0
 8003792:	d050      	beq.n	8003836 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <HAL_SPI_IRQHandler+0x14c>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d034      	beq.n	800382a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0203 	bic.w	r2, r2, #3
 80037ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d011      	beq.n	80037fc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_SPI_IRQHandler+0x1cc>)
 80037de:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe ffbd 	bl	8002764 <HAL_DMA_Abort_IT>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <HAL_SPI_IRQHandler+0x1cc>)
 800380a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe ffa7 	bl	8002764 <HAL_DMA_Abort_IT>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003828:	e003      	b.n	8003832 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f813 	bl	8003856 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003830:	e000      	b.n	8003834 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003832:	bf00      	nop
    return;
 8003834:	bf00      	nop
 8003836:	bf00      	nop
  }
}
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	08003869 	.word	0x08003869

08003844 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ffe7 	bl	8003856 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f103 020c 	add.w	r2, r3, #12
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f9d4 	bl	8003c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f9a4 	bl	8003c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	b292      	uxth	r2, r2
 8003968:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f974 	bl	8003c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039f8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f945 	bl	8003c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f103 020c 	add.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	7812      	ldrb	r2, [r2, #0]
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f994 	bl	8003d7c <SPI_CloseRx_ISR>
  }
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f971 	bl	8003d7c <SPI_CloseRx_ISR>
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ab4:	f7fe fd1c 	bl	80024f0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ac4:	f7fe fd14 	bl	80024f0 <HAL_GetTick>
 8003ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aca:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	0d1b      	lsrs	r3, r3, #20
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ada:	e054      	b.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae2:	d050      	beq.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ae4:	f7fe fd04 	bl	80024f0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d902      	bls.n	8003afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d13d      	bne.n	8003b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d111      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d004      	beq.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d107      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d10f      	bne.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e017      	b.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d19b      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000044 	.word	0x20000044

08003bb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc8:	d111      	bne.n	8003bee <SPI_EndRxTransaction+0x3a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd2:	d004      	beq.n	8003bde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bdc:	d107      	bne.n	8003bee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d117      	bne.n	8003c28 <SPI_EndRxTransaction+0x74>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c00:	d112      	bne.n	8003c28 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff49 	bl	8003aa4 <SPI_WaitFlagStateUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01a      	beq.n	8003c4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e013      	b.n	8003c50 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff36 	bl	8003aa4 <SPI_WaitFlagStateUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e000      	b.n	8003c50 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff18 	bl	8003aa4 <SPI_WaitFlagStateUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e000      	b.n	8003c8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003c9c:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <SPI_CloseRxTx_ISR+0xe0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a35      	ldr	r2, [pc, #212]	; (8003d78 <SPI_CloseRxTx_ISR+0xe4>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0a5b      	lsrs	r3, r3, #9
 8003ca8:	2264      	movs	r2, #100	; 0x64
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cb0:	f7fe fc1e 	bl	80024f0 <HAL_GetTick>
 8003cb4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0220 	bic.w	r2, r2, #32
 8003cc4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cd8:	e009      	b.n	8003cee <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0eb      	beq.n	8003cc6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	2164      	movs	r1, #100	; 0x64
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffb0 	bl	8003c58 <SPI_EndRxTxTransaction>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d115      	bne.n	8003d5c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fd fd2b 	bl	80017a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003d4a:	e00e      	b.n	8003d6a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fd75 	bl	8003844 <HAL_SPI_TxRxCpltCallback>
}
 8003d5a:	e006      	b.n	8003d6a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fd76 	bl	8003856 <HAL_SPI_ErrorCallback>
}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000044 	.word	0x20000044
 8003d78:	057619f1 	.word	0x057619f1

08003d7c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d92:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003d94:	f7fe fbac 	bl	80024f0 <HAL_GetTick>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2164      	movs	r1, #100	; 0x64
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ff08 	bl	8003bb4 <SPI_EndRxTransaction>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fd fcdb 	bl	80017a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003dea:	e002      	b.n	8003df2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fd32 	bl	8003856 <HAL_SPI_ErrorCallback>
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e041      	b.n	8003e90 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fe f8eb 	bl	8001ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 ff93 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d001      	beq.n	8003eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <HAL_TIM_Base_Start+0x88>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_TIM_Base_Start+0x48>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d009      	beq.n	8003ee0 <HAL_TIM_Base_Start+0x48>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <HAL_TIM_Base_Start+0x8c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_TIM_Base_Start+0x48>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <HAL_TIM_Base_Start+0x90>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d111      	bne.n	8003f04 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d010      	beq.n	8003f14 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f02:	e007      	b.n	8003f14 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800

08003f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d001      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e03a      	b.n	8003fba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_TIM_Base_Start_IT+0x98>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x58>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x58>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x58>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <HAL_TIM_Base_Start_IT+0xa0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d111      	bne.n	8003fa8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d010      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	e007      	b.n	8003fb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800

08003fd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e041      	b.n	8004066 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f839 	bl	800406e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 fea8 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_TIM_OC_Start_IT+0x24>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e022      	b.n	80040ea <HAL_TIM_OC_Start_IT+0x6a>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d109      	bne.n	80040be <HAL_TIM_OC_Start_IT+0x3e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e015      	b.n	80040ea <HAL_TIM_OC_Start_IT+0x6a>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d109      	bne.n	80040d8 <HAL_TIM_OC_Start_IT+0x58>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e008      	b.n	80040ea <HAL_TIM_OC_Start_IT+0x6a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0a4      	b.n	800423c <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_OC_Start_IT+0x82>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	e013      	b.n	800412a <HAL_TIM_OC_Start_IT+0xaa>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_OC_Start_IT+0x92>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004110:	e00b      	b.n	800412a <HAL_TIM_OC_Start_IT+0xaa>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_OC_Start_IT+0xa2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	e003      	b.n	800412a <HAL_TIM_OC_Start_IT+0xaa>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d841      	bhi.n	80041b4 <HAL_TIM_OC_Start_IT+0x134>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <HAL_TIM_OC_Start_IT+0xb8>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	0800416d 	.word	0x0800416d
 800413c:	080041b5 	.word	0x080041b5
 8004140:	080041b5 	.word	0x080041b5
 8004144:	080041b5 	.word	0x080041b5
 8004148:	0800417f 	.word	0x0800417f
 800414c:	080041b5 	.word	0x080041b5
 8004150:	080041b5 	.word	0x080041b5
 8004154:	080041b5 	.word	0x080041b5
 8004158:	08004191 	.word	0x08004191
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041b5 	.word	0x080041b5
 8004164:	080041b5 	.word	0x080041b5
 8004168:	080041a3 	.word	0x080041a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0202 	orr.w	r2, r2, #2
 800417a:	60da      	str	r2, [r3, #12]
      break;
 800417c:	e01b      	b.n	80041b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0204 	orr.w	r2, r2, #4
 800418c:	60da      	str	r2, [r3, #12]
      break;
 800418e:	e012      	b.n	80041b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	60da      	str	r2, [r3, #12]
      break;
 80041a0:	e009      	b.n	80041b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0210 	orr.w	r2, r2, #16
 80041b0:	60da      	str	r2, [r3, #12]
      break;
 80041b2:	e000      	b.n	80041b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80041b4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f850 	bl	8005264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_TIM_OC_Start_IT+0x1c4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d107      	bne.n	80041de <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a18      	ldr	r2, [pc, #96]	; (8004244 <HAL_TIM_OC_Start_IT+0x1c4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIM_OC_Start_IT+0x186>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d009      	beq.n	8004206 <HAL_TIM_OC_Start_IT+0x186>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a14      	ldr	r2, [pc, #80]	; (8004248 <HAL_TIM_OC_Start_IT+0x1c8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_OC_Start_IT+0x186>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a12      	ldr	r2, [pc, #72]	; (800424c <HAL_TIM_OC_Start_IT+0x1cc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d010      	beq.n	800423a <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	e007      	b.n	800423a <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800

08004250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e041      	b.n	80042e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f839 	bl	80042ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 fd68 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_TIM_PWM_Start_IT+0x24>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e022      	b.n	800436a <HAL_TIM_PWM_Start_IT+0x6a>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d109      	bne.n	800433e <HAL_TIM_PWM_Start_IT+0x3e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e015      	b.n	800436a <HAL_TIM_PWM_Start_IT+0x6a>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start_IT+0x58>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e008      	b.n	800436a <HAL_TIM_PWM_Start_IT+0x6a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e0a4      	b.n	80044bc <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <HAL_TIM_PWM_Start_IT+0x82>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004380:	e013      	b.n	80043aa <HAL_TIM_PWM_Start_IT+0xaa>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d104      	bne.n	8004392 <HAL_TIM_PWM_Start_IT+0x92>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	e00b      	b.n	80043aa <HAL_TIM_PWM_Start_IT+0xaa>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b08      	cmp	r3, #8
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_PWM_Start_IT+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	e003      	b.n	80043aa <HAL_TIM_PWM_Start_IT+0xaa>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b0c      	cmp	r3, #12
 80043ae:	d841      	bhi.n	8004434 <HAL_TIM_PWM_Start_IT+0x134>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <HAL_TIM_PWM_Start_IT+0xb8>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043ed 	.word	0x080043ed
 80043bc:	08004435 	.word	0x08004435
 80043c0:	08004435 	.word	0x08004435
 80043c4:	08004435 	.word	0x08004435
 80043c8:	080043ff 	.word	0x080043ff
 80043cc:	08004435 	.word	0x08004435
 80043d0:	08004435 	.word	0x08004435
 80043d4:	08004435 	.word	0x08004435
 80043d8:	08004411 	.word	0x08004411
 80043dc:	08004435 	.word	0x08004435
 80043e0:	08004435 	.word	0x08004435
 80043e4:	08004435 	.word	0x08004435
 80043e8:	08004423 	.word	0x08004423
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0202 	orr.w	r2, r2, #2
 80043fa:	60da      	str	r2, [r3, #12]
      break;
 80043fc:	e01b      	b.n	8004436 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0204 	orr.w	r2, r2, #4
 800440c:	60da      	str	r2, [r3, #12]
      break;
 800440e:	e012      	b.n	8004436 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0208 	orr.w	r2, r2, #8
 800441e:	60da      	str	r2, [r3, #12]
      break;
 8004420:	e009      	b.n	8004436 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0210 	orr.w	r2, r2, #16
 8004430:	60da      	str	r2, [r3, #12]
      break;
 8004432:	e000      	b.n	8004436 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004434:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 ff10 	bl	8005264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d107      	bne.n	800445e <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_PWM_Start_IT+0x186>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d009      	beq.n	8004486 <HAL_TIM_PWM_Start_IT+0x186>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_TIM_PWM_Start_IT+0x186>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_TIM_PWM_Start_IT+0x1cc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d111      	bne.n	80044aa <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b06      	cmp	r3, #6
 8004496:	d010      	beq.n	80044ba <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	e007      	b.n	80044ba <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800

080044d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e093      	b.n	800460c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fd fdcf 	bl	800209c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f000 fc1d 	bl	8004d64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4313      	orrs	r3, r2
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004570:	f023 030c 	bic.w	r3, r3, #12
 8004574:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800457c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	4313      	orrs	r3, r2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	011a      	lsls	r2, r3, #4
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	031b      	lsls	r3, r3, #12
 80045a0:	4313      	orrs	r3, r2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	4313      	orrs	r3, r2
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004624:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800462c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004634:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800463c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d110      	bne.n	8004666 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d102      	bne.n	8004650 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800464a:	7b7b      	ldrb	r3, [r7, #13]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d001      	beq.n	8004654 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e088      	b.n	8004766 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	e031      	b.n	80046ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d110      	bne.n	800468e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004672:	7b3b      	ldrb	r3, [r7, #12]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d001      	beq.n	800467c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e074      	b.n	8004766 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800468c:	e01d      	b.n	80046ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d108      	bne.n	80046a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004694:	7bbb      	ldrb	r3, [r7, #14]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800469a:	7b7b      	ldrb	r3, [r7, #13]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a0:	7b3b      	ldrb	r3, [r7, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e05d      	b.n	8004766 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_TIM_Encoder_Start_IT+0xc2>
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d010      	beq.n	80046f6 <HAL_TIM_Encoder_Start_IT+0xe2>
 80046d4:	e01f      	b.n	8004716 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	2100      	movs	r1, #0
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fdc0 	bl	8005264 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0202 	orr.w	r2, r2, #2
 80046f2:	60da      	str	r2, [r3, #12]
      break;
 80046f4:	e02e      	b.n	8004754 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	2104      	movs	r1, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fdb0 	bl	8005264 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0204 	orr.w	r2, r2, #4
 8004712:	60da      	str	r2, [r3, #12]
      break;
 8004714:	e01e      	b.n	8004754 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2201      	movs	r2, #1
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fda0 	bl	8005264 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2201      	movs	r2, #1
 800472a:	2104      	movs	r1, #4
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fd99 	bl	8005264 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0202 	orr.w	r2, r2, #2
 8004740:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0204 	orr.w	r2, r2, #4
 8004750:	60da      	str	r2, [r3, #12]
      break;
 8004752:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d122      	bne.n	80047ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d11b      	bne.n	80047ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f06f 0202 	mvn.w	r2, #2
 800479a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fabb 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 80047b6:	e005      	b.n	80047c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 faae 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fabd 	bl	8004d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d122      	bne.n	800481e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d11b      	bne.n	800481e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f06f 0204 	mvn.w	r2, #4
 80047ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa91 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 800480a:	e005      	b.n	8004818 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fa84 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa93 	bl	8004d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b08      	cmp	r3, #8
 800482a:	d122      	bne.n	8004872 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b08      	cmp	r3, #8
 8004838:	d11b      	bne.n	8004872 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f06f 0208 	mvn.w	r2, #8
 8004842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2204      	movs	r2, #4
 8004848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fa67 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 800485e:	e005      	b.n	800486c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fa5a 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa69 	bl	8004d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b10      	cmp	r3, #16
 800487e:	d122      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b10      	cmp	r3, #16
 800488c:	d11b      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f06f 0210 	mvn.w	r2, #16
 8004896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2208      	movs	r2, #8
 800489c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fa3d 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 80048b2:	e005      	b.n	80048c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fa30 	bl	8004d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa3f 	bl	8004d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10e      	bne.n	80048f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0201 	mvn.w	r2, #1
 80048ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fc fbff 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fc:	2b80      	cmp	r3, #128	; 0x80
 80048fe:	d10e      	bne.n	800491e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d107      	bne.n	800491e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fd7f 	bl	800541c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d10e      	bne.n	800494a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d107      	bne.n	800494a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa03 	bl	8004d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b20      	cmp	r3, #32
 8004956:	d10e      	bne.n	8004976 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d107      	bne.n	8004976 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0220 	mvn.w	r2, #32
 800496e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fd4a 	bl	800540a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004996:	2302      	movs	r3, #2
 8004998:	e046      	b.n	8004a28 <HAL_TIM_OC_ConfigChannel+0xa8>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d839      	bhi.n	8004a1c <HAL_TIM_OC_ConfigChannel+0x9c>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004a1d 	.word	0x08004a1d
 80049b8:	08004a1d 	.word	0x08004a1d
 80049bc:	08004a1d 	.word	0x08004a1d
 80049c0:	080049f3 	.word	0x080049f3
 80049c4:	08004a1d 	.word	0x08004a1d
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004a1d 	.word	0x08004a1d
 80049d0:	08004a01 	.word	0x08004a01
 80049d4:	08004a1d 	.word	0x08004a1d
 80049d8:	08004a1d 	.word	0x08004a1d
 80049dc:	08004a1d 	.word	0x08004a1d
 80049e0:	08004a0f 	.word	0x08004a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fa1c 	bl	8004e28 <TIM_OC1_SetConfig>
      break;
 80049f0:	e015      	b.n	8004a1e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fa7b 	bl	8004ef4 <TIM_OC2_SetConfig>
      break;
 80049fe:	e00e      	b.n	8004a1e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fade 	bl	8004fc8 <TIM_OC3_SetConfig>
      break;
 8004a0c:	e007      	b.n	8004a1e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fb41 	bl	800509c <TIM_OC4_SetConfig>
      break;
 8004a1a:	e000      	b.n	8004a1e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ac      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	f200 809f 	bhi.w	8004b98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004b99 	.word	0x08004b99
 8004a68:	08004b99 	.word	0x08004b99
 8004a6c:	08004b99 	.word	0x08004b99
 8004a70:	08004ad5 	.word	0x08004ad5
 8004a74:	08004b99 	.word	0x08004b99
 8004a78:	08004b99 	.word	0x08004b99
 8004a7c:	08004b99 	.word	0x08004b99
 8004a80:	08004b17 	.word	0x08004b17
 8004a84:	08004b99 	.word	0x08004b99
 8004a88:	08004b99 	.word	0x08004b99
 8004a8c:	08004b99 	.word	0x08004b99
 8004a90:	08004b57 	.word	0x08004b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f9c4 	bl	8004e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0208 	orr.w	r2, r2, #8
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0204 	bic.w	r2, r2, #4
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	619a      	str	r2, [r3, #24]
      break;
 8004ad2:	e062      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa0a 	bl	8004ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6999      	ldr	r1, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	021a      	lsls	r2, r3, #8
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	619a      	str	r2, [r3, #24]
      break;
 8004b14:	e041      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fa53 	bl	8004fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0208 	orr.w	r2, r2, #8
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0204 	bic.w	r2, r2, #4
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	61da      	str	r2, [r3, #28]
      break;
 8004b54:	e021      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fa9d 	bl	800509c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	021a      	lsls	r2, r3, #8
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	61da      	str	r2, [r3, #28]
      break;
 8004b96:	e000      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_ConfigClockSource+0x18>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0a6      	b.n	8004d12 <HAL_TIM_ConfigClockSource+0x166>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d067      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0x120>
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d80b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x6c>
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d073      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d802      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x62>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d06f      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c0c:	e078      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d06c      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
 8004c12:	2b30      	cmp	r3, #48	; 0x30
 8004c14:	d06a      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c16:	e073      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d00d      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x8c>
 8004c1c:	2b70      	cmp	r3, #112	; 0x70
 8004c1e:	d804      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x7e>
 8004c20:	2b50      	cmp	r3, #80	; 0x50
 8004c22:	d033      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0xe0>
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d041      	beq.n	8004cac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c28:	e06a      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d066      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x152>
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c34:	d017      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c36:	e063      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f000 faed 	bl	8005226 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	609a      	str	r2, [r3, #8]
      break;
 8004c64:	e04c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6899      	ldr	r1, [r3, #8]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f000 fad6 	bl	8005226 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c88:	609a      	str	r2, [r3, #8]
      break;
 8004c8a:	e039      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f000 fa4d 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2150      	movs	r1, #80	; 0x50
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 faa4 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004caa:	e029      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6859      	ldr	r1, [r3, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f000 fa6b 	bl	8005194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2160      	movs	r1, #96	; 0x60
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fa94 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004cca:	e019      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f000 fa2d 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2140      	movs	r1, #64	; 0x40
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fa84 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004cea:	e009      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 fa7b 	bl	80051f2 <TIM_ITRx_SetConfig>
        break;
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
	...

08004d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <TIM_Base_SetConfig+0xb8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0x30>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0x30>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a26      	ldr	r2, [pc, #152]	; (8004e20 <TIM_Base_SetConfig+0xbc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0x30>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a25      	ldr	r2, [pc, #148]	; (8004e24 <TIM_Base_SetConfig+0xc0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d108      	bne.n	8004da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <TIM_Base_SetConfig+0xb8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <TIM_Base_SetConfig+0x62>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db4:	d007      	beq.n	8004dc6 <TIM_Base_SetConfig+0x62>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <TIM_Base_SetConfig+0xbc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_Base_SetConfig+0x62>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <TIM_Base_SetConfig+0xc0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <TIM_Base_SetConfig+0xb8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800

08004e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0201 	bic.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0302 	bic.w	r3, r3, #2
 8004e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <TIM_OC1_SetConfig+0xc8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d10c      	bne.n	8004e9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0308 	bic.w	r3, r3, #8
 8004e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 0304 	bic.w	r3, r3, #4
 8004e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <TIM_OC1_SetConfig+0xc8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d111      	bne.n	8004eca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40012c00 	.word	0x40012c00

08004ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0210 	bic.w	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0320 	bic.w	r3, r3, #32
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <TIM_OC2_SetConfig+0xd0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10d      	bne.n	8004f70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <TIM_OC2_SetConfig+0xd0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d113      	bne.n	8004fa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	40012c00 	.word	0x40012c00

08004fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <TIM_OC3_SetConfig+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10d      	bne.n	8005042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800502c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <TIM_OC3_SetConfig+0xd0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d113      	bne.n	8005072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00

0800509c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a0f      	ldr	r2, [pc, #60]	; (8005134 <TIM_OC4_SetConfig+0x98>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	40012c00 	.word	0x40012c00

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f023 0210 	bic.w	r2, r3, #16
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	031b      	lsls	r3, r3, #12
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	021a      	lsls	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4313      	orrs	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2201      	movs	r2, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1a      	ldr	r2, [r3, #32]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e046      	b.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d009      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a10      	ldr	r2, [pc, #64]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10c      	bne.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4313      	orrs	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800

08005368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e03d      	b.n	8005400 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <atof>:
 800542e:	2100      	movs	r1, #0
 8005430:	f001 bb22 	b.w	8006a78 <strtod>

08005434 <__errno>:
 8005434:	4b01      	ldr	r3, [pc, #4]	; (800543c <__errno+0x8>)
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000050 	.word	0x20000050

08005440 <__libc_init_array>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	2500      	movs	r5, #0
 8005444:	4e0c      	ldr	r6, [pc, #48]	; (8005478 <__libc_init_array+0x38>)
 8005446:	4c0d      	ldr	r4, [pc, #52]	; (800547c <__libc_init_array+0x3c>)
 8005448:	1ba4      	subs	r4, r4, r6
 800544a:	10a4      	asrs	r4, r4, #2
 800544c:	42a5      	cmp	r5, r4
 800544e:	d109      	bne.n	8005464 <__libc_init_array+0x24>
 8005450:	f003 fe66 	bl	8009120 <_init>
 8005454:	2500      	movs	r5, #0
 8005456:	4e0a      	ldr	r6, [pc, #40]	; (8005480 <__libc_init_array+0x40>)
 8005458:	4c0a      	ldr	r4, [pc, #40]	; (8005484 <__libc_init_array+0x44>)
 800545a:	1ba4      	subs	r4, r4, r6
 800545c:	10a4      	asrs	r4, r4, #2
 800545e:	42a5      	cmp	r5, r4
 8005460:	d105      	bne.n	800546e <__libc_init_array+0x2e>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005468:	4798      	blx	r3
 800546a:	3501      	adds	r5, #1
 800546c:	e7ee      	b.n	800544c <__libc_init_array+0xc>
 800546e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005472:	4798      	blx	r3
 8005474:	3501      	adds	r5, #1
 8005476:	e7f2      	b.n	800545e <__libc_init_array+0x1e>
 8005478:	080095b8 	.word	0x080095b8
 800547c:	080095b8 	.word	0x080095b8
 8005480:	080095b8 	.word	0x080095b8
 8005484:	080095bc 	.word	0x080095bc

08005488 <memset>:
 8005488:	4603      	mov	r3, r0
 800548a:	4402      	add	r2, r0
 800548c:	4293      	cmp	r3, r2
 800548e:	d100      	bne.n	8005492 <memset+0xa>
 8005490:	4770      	bx	lr
 8005492:	f803 1b01 	strb.w	r1, [r3], #1
 8005496:	e7f9      	b.n	800548c <memset+0x4>

08005498 <__cvt>:
 8005498:	2b00      	cmp	r3, #0
 800549a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800549e:	461e      	mov	r6, r3
 80054a0:	bfbb      	ittet	lt
 80054a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	461e      	movlt	r6, r3
 80054a8:	2300      	movge	r3, #0
 80054aa:	232d      	movlt	r3, #45	; 0x2d
 80054ac:	b088      	sub	sp, #32
 80054ae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054b0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80054b4:	f027 0720 	bic.w	r7, r7, #32
 80054b8:	2f46      	cmp	r7, #70	; 0x46
 80054ba:	4614      	mov	r4, r2
 80054bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054be:	700b      	strb	r3, [r1, #0]
 80054c0:	d004      	beq.n	80054cc <__cvt+0x34>
 80054c2:	2f45      	cmp	r7, #69	; 0x45
 80054c4:	d100      	bne.n	80054c8 <__cvt+0x30>
 80054c6:	3501      	adds	r5, #1
 80054c8:	2302      	movs	r3, #2
 80054ca:	e000      	b.n	80054ce <__cvt+0x36>
 80054cc:	2303      	movs	r3, #3
 80054ce:	aa07      	add	r2, sp, #28
 80054d0:	9204      	str	r2, [sp, #16]
 80054d2:	aa06      	add	r2, sp, #24
 80054d4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054d8:	e9cd 3500 	strd	r3, r5, [sp]
 80054dc:	4622      	mov	r2, r4
 80054de:	4633      	mov	r3, r6
 80054e0:	f001 fc2a 	bl	8006d38 <_dtoa_r>
 80054e4:	2f47      	cmp	r7, #71	; 0x47
 80054e6:	4680      	mov	r8, r0
 80054e8:	d102      	bne.n	80054f0 <__cvt+0x58>
 80054ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054ec:	07db      	lsls	r3, r3, #31
 80054ee:	d526      	bpl.n	800553e <__cvt+0xa6>
 80054f0:	2f46      	cmp	r7, #70	; 0x46
 80054f2:	eb08 0905 	add.w	r9, r8, r5
 80054f6:	d111      	bne.n	800551c <__cvt+0x84>
 80054f8:	f898 3000 	ldrb.w	r3, [r8]
 80054fc:	2b30      	cmp	r3, #48	; 0x30
 80054fe:	d10a      	bne.n	8005516 <__cvt+0x7e>
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	4620      	mov	r0, r4
 8005506:	4631      	mov	r1, r6
 8005508:	f7fb fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800550c:	b918      	cbnz	r0, 8005516 <__cvt+0x7e>
 800550e:	f1c5 0501 	rsb	r5, r5, #1
 8005512:	f8ca 5000 	str.w	r5, [sl]
 8005516:	f8da 3000 	ldr.w	r3, [sl]
 800551a:	4499      	add	r9, r3
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	4620      	mov	r0, r4
 8005522:	4631      	mov	r1, r6
 8005524:	f7fb fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8005528:	b938      	cbnz	r0, 800553a <__cvt+0xa2>
 800552a:	2230      	movs	r2, #48	; 0x30
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	454b      	cmp	r3, r9
 8005530:	d205      	bcs.n	800553e <__cvt+0xa6>
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	9107      	str	r1, [sp, #28]
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e7f8      	b.n	800552c <__cvt+0x94>
 800553a:	f8cd 901c 	str.w	r9, [sp, #28]
 800553e:	4640      	mov	r0, r8
 8005540:	9b07      	ldr	r3, [sp, #28]
 8005542:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005544:	eba3 0308 	sub.w	r3, r3, r8
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	b008      	add	sp, #32
 800554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005550 <__exponent>:
 8005550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005552:	2900      	cmp	r1, #0
 8005554:	bfb4      	ite	lt
 8005556:	232d      	movlt	r3, #45	; 0x2d
 8005558:	232b      	movge	r3, #43	; 0x2b
 800555a:	4604      	mov	r4, r0
 800555c:	bfb8      	it	lt
 800555e:	4249      	neglt	r1, r1
 8005560:	2909      	cmp	r1, #9
 8005562:	f804 2b02 	strb.w	r2, [r4], #2
 8005566:	7043      	strb	r3, [r0, #1]
 8005568:	dd21      	ble.n	80055ae <__exponent+0x5e>
 800556a:	f10d 0307 	add.w	r3, sp, #7
 800556e:	461f      	mov	r7, r3
 8005570:	260a      	movs	r6, #10
 8005572:	fb91 f5f6 	sdiv	r5, r1, r6
 8005576:	fb06 1115 	mls	r1, r6, r5, r1
 800557a:	2d09      	cmp	r5, #9
 800557c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005580:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005584:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005588:	4629      	mov	r1, r5
 800558a:	dc09      	bgt.n	80055a0 <__exponent+0x50>
 800558c:	3130      	adds	r1, #48	; 0x30
 800558e:	3b02      	subs	r3, #2
 8005590:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005594:	42bb      	cmp	r3, r7
 8005596:	4622      	mov	r2, r4
 8005598:	d304      	bcc.n	80055a4 <__exponent+0x54>
 800559a:	1a10      	subs	r0, r2, r0
 800559c:	b003      	add	sp, #12
 800559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a0:	4613      	mov	r3, r2
 80055a2:	e7e6      	b.n	8005572 <__exponent+0x22>
 80055a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a8:	f804 2b01 	strb.w	r2, [r4], #1
 80055ac:	e7f2      	b.n	8005594 <__exponent+0x44>
 80055ae:	2330      	movs	r3, #48	; 0x30
 80055b0:	4419      	add	r1, r3
 80055b2:	7083      	strb	r3, [r0, #2]
 80055b4:	1d02      	adds	r2, r0, #4
 80055b6:	70c1      	strb	r1, [r0, #3]
 80055b8:	e7ef      	b.n	800559a <__exponent+0x4a>
	...

080055bc <_printf_float>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	b091      	sub	sp, #68	; 0x44
 80055c2:	460c      	mov	r4, r1
 80055c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80055c6:	4693      	mov	fp, r2
 80055c8:	461e      	mov	r6, r3
 80055ca:	4605      	mov	r5, r0
 80055cc:	f002 fe0c 	bl	80081e8 <_localeconv_r>
 80055d0:	6803      	ldr	r3, [r0, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	9309      	str	r3, [sp, #36]	; 0x24
 80055d6:	f7fa fdbb 	bl	8000150 <strlen>
 80055da:	2300      	movs	r3, #0
 80055dc:	930e      	str	r3, [sp, #56]	; 0x38
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	900a      	str	r0, [sp, #40]	; 0x28
 80055e2:	3307      	adds	r3, #7
 80055e4:	f023 0307 	bic.w	r3, r3, #7
 80055e8:	f103 0208 	add.w	r2, r3, #8
 80055ec:	f894 8018 	ldrb.w	r8, [r4, #24]
 80055f0:	f8d4 a000 	ldr.w	sl, [r4]
 80055f4:	603a      	str	r2, [r7, #0]
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055fe:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005606:	930b      	str	r3, [sp, #44]	; 0x2c
 8005608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800560c:	4ba6      	ldr	r3, [pc, #664]	; (80058a8 <_printf_float+0x2ec>)
 800560e:	4638      	mov	r0, r7
 8005610:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005612:	f7fb f9fb 	bl	8000a0c <__aeabi_dcmpun>
 8005616:	bb68      	cbnz	r0, 8005674 <_printf_float+0xb8>
 8005618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800561c:	4ba2      	ldr	r3, [pc, #648]	; (80058a8 <_printf_float+0x2ec>)
 800561e:	4638      	mov	r0, r7
 8005620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005622:	f7fb f9d5 	bl	80009d0 <__aeabi_dcmple>
 8005626:	bb28      	cbnz	r0, 8005674 <_printf_float+0xb8>
 8005628:	2200      	movs	r2, #0
 800562a:	2300      	movs	r3, #0
 800562c:	4638      	mov	r0, r7
 800562e:	4649      	mov	r1, r9
 8005630:	f7fb f9c4 	bl	80009bc <__aeabi_dcmplt>
 8005634:	b110      	cbz	r0, 800563c <_printf_float+0x80>
 8005636:	232d      	movs	r3, #45	; 0x2d
 8005638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563c:	4f9b      	ldr	r7, [pc, #620]	; (80058ac <_printf_float+0x2f0>)
 800563e:	4b9c      	ldr	r3, [pc, #624]	; (80058b0 <_printf_float+0x2f4>)
 8005640:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005644:	bf98      	it	ls
 8005646:	461f      	movls	r7, r3
 8005648:	2303      	movs	r3, #3
 800564a:	f04f 0900 	mov.w	r9, #0
 800564e:	6123      	str	r3, [r4, #16]
 8005650:	f02a 0304 	bic.w	r3, sl, #4
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	9600      	str	r6, [sp, #0]
 8005658:	465b      	mov	r3, fp
 800565a:	aa0f      	add	r2, sp, #60	; 0x3c
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f9e2 	bl	8005a28 <_printf_common>
 8005664:	3001      	adds	r0, #1
 8005666:	f040 8090 	bne.w	800578a <_printf_float+0x1ce>
 800566a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800566e:	b011      	add	sp, #68	; 0x44
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	463a      	mov	r2, r7
 8005676:	464b      	mov	r3, r9
 8005678:	4638      	mov	r0, r7
 800567a:	4649      	mov	r1, r9
 800567c:	f7fb f9c6 	bl	8000a0c <__aeabi_dcmpun>
 8005680:	b110      	cbz	r0, 8005688 <_printf_float+0xcc>
 8005682:	4f8c      	ldr	r7, [pc, #560]	; (80058b4 <_printf_float+0x2f8>)
 8005684:	4b8c      	ldr	r3, [pc, #560]	; (80058b8 <_printf_float+0x2fc>)
 8005686:	e7db      	b.n	8005640 <_printf_float+0x84>
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	a80d      	add	r0, sp, #52	; 0x34
 8005692:	a90e      	add	r1, sp, #56	; 0x38
 8005694:	d140      	bne.n	8005718 <_printf_float+0x15c>
 8005696:	2306      	movs	r3, #6
 8005698:	6063      	str	r3, [r4, #4]
 800569a:	f04f 0c00 	mov.w	ip, #0
 800569e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80056a2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80056a6:	6863      	ldr	r3, [r4, #4]
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	463a      	mov	r2, r7
 80056b2:	464b      	mov	r3, r9
 80056b4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7ff feed 	bl	8005498 <__cvt>
 80056be:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80056c2:	2b47      	cmp	r3, #71	; 0x47
 80056c4:	4607      	mov	r7, r0
 80056c6:	d109      	bne.n	80056dc <_printf_float+0x120>
 80056c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ca:	1cd8      	adds	r0, r3, #3
 80056cc:	db02      	blt.n	80056d4 <_printf_float+0x118>
 80056ce:	6862      	ldr	r2, [r4, #4]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	dd47      	ble.n	8005764 <_printf_float+0x1a8>
 80056d4:	f1a8 0802 	sub.w	r8, r8, #2
 80056d8:	fa5f f888 	uxtb.w	r8, r8
 80056dc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80056e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056e2:	d824      	bhi.n	800572e <_printf_float+0x172>
 80056e4:	3901      	subs	r1, #1
 80056e6:	4642      	mov	r2, r8
 80056e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056ec:	910d      	str	r1, [sp, #52]	; 0x34
 80056ee:	f7ff ff2f 	bl	8005550 <__exponent>
 80056f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f4:	4681      	mov	r9, r0
 80056f6:	1813      	adds	r3, r2, r0
 80056f8:	2a01      	cmp	r2, #1
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	dc02      	bgt.n	8005704 <_printf_float+0x148>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	07d1      	lsls	r1, r2, #31
 8005702:	d501      	bpl.n	8005708 <_printf_float+0x14c>
 8005704:	3301      	adds	r3, #1
 8005706:	6123      	str	r3, [r4, #16]
 8005708:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0a2      	beq.n	8005656 <_printf_float+0x9a>
 8005710:	232d      	movs	r3, #45	; 0x2d
 8005712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005716:	e79e      	b.n	8005656 <_printf_float+0x9a>
 8005718:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800571c:	f000 816e 	beq.w	80059fc <_printf_float+0x440>
 8005720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005724:	d1b9      	bne.n	800569a <_printf_float+0xde>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1b7      	bne.n	800569a <_printf_float+0xde>
 800572a:	2301      	movs	r3, #1
 800572c:	e7b4      	b.n	8005698 <_printf_float+0xdc>
 800572e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005732:	d119      	bne.n	8005768 <_printf_float+0x1ac>
 8005734:	2900      	cmp	r1, #0
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	dd0c      	ble.n	8005754 <_printf_float+0x198>
 800573a:	6121      	str	r1, [r4, #16]
 800573c:	b913      	cbnz	r3, 8005744 <_printf_float+0x188>
 800573e:	6822      	ldr	r2, [r4, #0]
 8005740:	07d2      	lsls	r2, r2, #31
 8005742:	d502      	bpl.n	800574a <_printf_float+0x18e>
 8005744:	3301      	adds	r3, #1
 8005746:	440b      	add	r3, r1
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800574c:	f04f 0900 	mov.w	r9, #0
 8005750:	65a3      	str	r3, [r4, #88]	; 0x58
 8005752:	e7d9      	b.n	8005708 <_printf_float+0x14c>
 8005754:	b913      	cbnz	r3, 800575c <_printf_float+0x1a0>
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	07d0      	lsls	r0, r2, #31
 800575a:	d501      	bpl.n	8005760 <_printf_float+0x1a4>
 800575c:	3302      	adds	r3, #2
 800575e:	e7f3      	b.n	8005748 <_printf_float+0x18c>
 8005760:	2301      	movs	r3, #1
 8005762:	e7f1      	b.n	8005748 <_printf_float+0x18c>
 8005764:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005768:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800576c:	4293      	cmp	r3, r2
 800576e:	db05      	blt.n	800577c <_printf_float+0x1c0>
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	6123      	str	r3, [r4, #16]
 8005774:	07d1      	lsls	r1, r2, #31
 8005776:	d5e8      	bpl.n	800574a <_printf_float+0x18e>
 8005778:	3301      	adds	r3, #1
 800577a:	e7e5      	b.n	8005748 <_printf_float+0x18c>
 800577c:	2b00      	cmp	r3, #0
 800577e:	bfcc      	ite	gt
 8005780:	2301      	movgt	r3, #1
 8005782:	f1c3 0302 	rsble	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	e7de      	b.n	8005748 <_printf_float+0x18c>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	055a      	lsls	r2, r3, #21
 800578e:	d407      	bmi.n	80057a0 <_printf_float+0x1e4>
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	463a      	mov	r2, r7
 8005794:	4659      	mov	r1, fp
 8005796:	4628      	mov	r0, r5
 8005798:	47b0      	blx	r6
 800579a:	3001      	adds	r0, #1
 800579c:	d129      	bne.n	80057f2 <_printf_float+0x236>
 800579e:	e764      	b.n	800566a <_printf_float+0xae>
 80057a0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80057a4:	f240 80d7 	bls.w	8005956 <_printf_float+0x39a>
 80057a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057ac:	2200      	movs	r2, #0
 80057ae:	2300      	movs	r3, #0
 80057b0:	f7fb f8fa 	bl	80009a8 <__aeabi_dcmpeq>
 80057b4:	b388      	cbz	r0, 800581a <_printf_float+0x25e>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4a40      	ldr	r2, [pc, #256]	; (80058bc <_printf_float+0x300>)
 80057ba:	4659      	mov	r1, fp
 80057bc:	4628      	mov	r0, r5
 80057be:	47b0      	blx	r6
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f af52 	beq.w	800566a <_printf_float+0xae>
 80057c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057ca:	429a      	cmp	r2, r3
 80057cc:	db02      	blt.n	80057d4 <_printf_float+0x218>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	07d8      	lsls	r0, r3, #31
 80057d2:	d50e      	bpl.n	80057f2 <_printf_float+0x236>
 80057d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057d8:	4659      	mov	r1, fp
 80057da:	4628      	mov	r0, r5
 80057dc:	47b0      	blx	r6
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af43 	beq.w	800566a <_printf_float+0xae>
 80057e4:	2700      	movs	r7, #0
 80057e6:	f104 081a 	add.w	r8, r4, #26
 80057ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ec:	3b01      	subs	r3, #1
 80057ee:	42bb      	cmp	r3, r7
 80057f0:	dc09      	bgt.n	8005806 <_printf_float+0x24a>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	079f      	lsls	r7, r3, #30
 80057f6:	f100 80fd 	bmi.w	80059f4 <_printf_float+0x438>
 80057fa:	68e0      	ldr	r0, [r4, #12]
 80057fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057fe:	4298      	cmp	r0, r3
 8005800:	bfb8      	it	lt
 8005802:	4618      	movlt	r0, r3
 8005804:	e733      	b.n	800566e <_printf_float+0xb2>
 8005806:	2301      	movs	r3, #1
 8005808:	4642      	mov	r2, r8
 800580a:	4659      	mov	r1, fp
 800580c:	4628      	mov	r0, r5
 800580e:	47b0      	blx	r6
 8005810:	3001      	adds	r0, #1
 8005812:	f43f af2a 	beq.w	800566a <_printf_float+0xae>
 8005816:	3701      	adds	r7, #1
 8005818:	e7e7      	b.n	80057ea <_printf_float+0x22e>
 800581a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	dc2b      	bgt.n	8005878 <_printf_float+0x2bc>
 8005820:	2301      	movs	r3, #1
 8005822:	4a26      	ldr	r2, [pc, #152]	; (80058bc <_printf_float+0x300>)
 8005824:	4659      	mov	r1, fp
 8005826:	4628      	mov	r0, r5
 8005828:	47b0      	blx	r6
 800582a:	3001      	adds	r0, #1
 800582c:	f43f af1d 	beq.w	800566a <_printf_float+0xae>
 8005830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005832:	b923      	cbnz	r3, 800583e <_printf_float+0x282>
 8005834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005836:	b913      	cbnz	r3, 800583e <_printf_float+0x282>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	07d9      	lsls	r1, r3, #31
 800583c:	d5d9      	bpl.n	80057f2 <_printf_float+0x236>
 800583e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005842:	4659      	mov	r1, fp
 8005844:	4628      	mov	r0, r5
 8005846:	47b0      	blx	r6
 8005848:	3001      	adds	r0, #1
 800584a:	f43f af0e 	beq.w	800566a <_printf_float+0xae>
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	f104 091a 	add.w	r9, r4, #26
 8005856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005858:	425b      	negs	r3, r3
 800585a:	4543      	cmp	r3, r8
 800585c:	dc01      	bgt.n	8005862 <_printf_float+0x2a6>
 800585e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005860:	e797      	b.n	8005792 <_printf_float+0x1d6>
 8005862:	2301      	movs	r3, #1
 8005864:	464a      	mov	r2, r9
 8005866:	4659      	mov	r1, fp
 8005868:	4628      	mov	r0, r5
 800586a:	47b0      	blx	r6
 800586c:	3001      	adds	r0, #1
 800586e:	f43f aefc 	beq.w	800566a <_printf_float+0xae>
 8005872:	f108 0801 	add.w	r8, r8, #1
 8005876:	e7ee      	b.n	8005856 <_printf_float+0x29a>
 8005878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800587a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800587c:	429a      	cmp	r2, r3
 800587e:	bfa8      	it	ge
 8005880:	461a      	movge	r2, r3
 8005882:	2a00      	cmp	r2, #0
 8005884:	4690      	mov	r8, r2
 8005886:	dd07      	ble.n	8005898 <_printf_float+0x2dc>
 8005888:	4613      	mov	r3, r2
 800588a:	4659      	mov	r1, fp
 800588c:	463a      	mov	r2, r7
 800588e:	4628      	mov	r0, r5
 8005890:	47b0      	blx	r6
 8005892:	3001      	adds	r0, #1
 8005894:	f43f aee9 	beq.w	800566a <_printf_float+0xae>
 8005898:	f104 031a 	add.w	r3, r4, #26
 800589c:	f04f 0a00 	mov.w	sl, #0
 80058a0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80058a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058a6:	e015      	b.n	80058d4 <_printf_float+0x318>
 80058a8:	7fefffff 	.word	0x7fefffff
 80058ac:	080092a4 	.word	0x080092a4
 80058b0:	080092a0 	.word	0x080092a0
 80058b4:	080092ac 	.word	0x080092ac
 80058b8:	080092a8 	.word	0x080092a8
 80058bc:	080092b0 	.word	0x080092b0
 80058c0:	2301      	movs	r3, #1
 80058c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058c4:	4659      	mov	r1, fp
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b0      	blx	r6
 80058ca:	3001      	adds	r0, #1
 80058cc:	f43f aecd 	beq.w	800566a <_printf_float+0xae>
 80058d0:	f10a 0a01 	add.w	sl, sl, #1
 80058d4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80058d8:	eba9 0308 	sub.w	r3, r9, r8
 80058dc:	4553      	cmp	r3, sl
 80058de:	dcef      	bgt.n	80058c0 <_printf_float+0x304>
 80058e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058e4:	429a      	cmp	r2, r3
 80058e6:	444f      	add	r7, r9
 80058e8:	db14      	blt.n	8005914 <_printf_float+0x358>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	07da      	lsls	r2, r3, #31
 80058ee:	d411      	bmi.n	8005914 <_printf_float+0x358>
 80058f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058f4:	eba3 0209 	sub.w	r2, r3, r9
 80058f8:	eba3 0901 	sub.w	r9, r3, r1
 80058fc:	4591      	cmp	r9, r2
 80058fe:	bfa8      	it	ge
 8005900:	4691      	movge	r9, r2
 8005902:	f1b9 0f00 	cmp.w	r9, #0
 8005906:	dc0d      	bgt.n	8005924 <_printf_float+0x368>
 8005908:	2700      	movs	r7, #0
 800590a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800590e:	f104 081a 	add.w	r8, r4, #26
 8005912:	e018      	b.n	8005946 <_printf_float+0x38a>
 8005914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005918:	4659      	mov	r1, fp
 800591a:	4628      	mov	r0, r5
 800591c:	47b0      	blx	r6
 800591e:	3001      	adds	r0, #1
 8005920:	d1e6      	bne.n	80058f0 <_printf_float+0x334>
 8005922:	e6a2      	b.n	800566a <_printf_float+0xae>
 8005924:	464b      	mov	r3, r9
 8005926:	463a      	mov	r2, r7
 8005928:	4659      	mov	r1, fp
 800592a:	4628      	mov	r0, r5
 800592c:	47b0      	blx	r6
 800592e:	3001      	adds	r0, #1
 8005930:	d1ea      	bne.n	8005908 <_printf_float+0x34c>
 8005932:	e69a      	b.n	800566a <_printf_float+0xae>
 8005934:	2301      	movs	r3, #1
 8005936:	4642      	mov	r2, r8
 8005938:	4659      	mov	r1, fp
 800593a:	4628      	mov	r0, r5
 800593c:	47b0      	blx	r6
 800593e:	3001      	adds	r0, #1
 8005940:	f43f ae93 	beq.w	800566a <_printf_float+0xae>
 8005944:	3701      	adds	r7, #1
 8005946:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	eba3 0309 	sub.w	r3, r3, r9
 8005950:	42bb      	cmp	r3, r7
 8005952:	dcef      	bgt.n	8005934 <_printf_float+0x378>
 8005954:	e74d      	b.n	80057f2 <_printf_float+0x236>
 8005956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005958:	2a01      	cmp	r2, #1
 800595a:	dc01      	bgt.n	8005960 <_printf_float+0x3a4>
 800595c:	07db      	lsls	r3, r3, #31
 800595e:	d538      	bpl.n	80059d2 <_printf_float+0x416>
 8005960:	2301      	movs	r3, #1
 8005962:	463a      	mov	r2, r7
 8005964:	4659      	mov	r1, fp
 8005966:	4628      	mov	r0, r5
 8005968:	47b0      	blx	r6
 800596a:	3001      	adds	r0, #1
 800596c:	f43f ae7d 	beq.w	800566a <_printf_float+0xae>
 8005970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005974:	4659      	mov	r1, fp
 8005976:	4628      	mov	r0, r5
 8005978:	47b0      	blx	r6
 800597a:	3001      	adds	r0, #1
 800597c:	f107 0701 	add.w	r7, r7, #1
 8005980:	f43f ae73 	beq.w	800566a <_printf_float+0xae>
 8005984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800598a:	2200      	movs	r2, #0
 800598c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005990:	2300      	movs	r3, #0
 8005992:	f7fb f809 	bl	80009a8 <__aeabi_dcmpeq>
 8005996:	b9c0      	cbnz	r0, 80059ca <_printf_float+0x40e>
 8005998:	4643      	mov	r3, r8
 800599a:	463a      	mov	r2, r7
 800599c:	4659      	mov	r1, fp
 800599e:	4628      	mov	r0, r5
 80059a0:	47b0      	blx	r6
 80059a2:	3001      	adds	r0, #1
 80059a4:	d10d      	bne.n	80059c2 <_printf_float+0x406>
 80059a6:	e660      	b.n	800566a <_printf_float+0xae>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4642      	mov	r2, r8
 80059ac:	4659      	mov	r1, fp
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b0      	blx	r6
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f ae59 	beq.w	800566a <_printf_float+0xae>
 80059b8:	3701      	adds	r7, #1
 80059ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059bc:	3b01      	subs	r3, #1
 80059be:	42bb      	cmp	r3, r7
 80059c0:	dcf2      	bgt.n	80059a8 <_printf_float+0x3ec>
 80059c2:	464b      	mov	r3, r9
 80059c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059c8:	e6e4      	b.n	8005794 <_printf_float+0x1d8>
 80059ca:	2700      	movs	r7, #0
 80059cc:	f104 081a 	add.w	r8, r4, #26
 80059d0:	e7f3      	b.n	80059ba <_printf_float+0x3fe>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e7e1      	b.n	800599a <_printf_float+0x3de>
 80059d6:	2301      	movs	r3, #1
 80059d8:	4642      	mov	r2, r8
 80059da:	4659      	mov	r1, fp
 80059dc:	4628      	mov	r0, r5
 80059de:	47b0      	blx	r6
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f ae42 	beq.w	800566a <_printf_float+0xae>
 80059e6:	3701      	adds	r7, #1
 80059e8:	68e3      	ldr	r3, [r4, #12]
 80059ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	42bb      	cmp	r3, r7
 80059f0:	dcf1      	bgt.n	80059d6 <_printf_float+0x41a>
 80059f2:	e702      	b.n	80057fa <_printf_float+0x23e>
 80059f4:	2700      	movs	r7, #0
 80059f6:	f104 0819 	add.w	r8, r4, #25
 80059fa:	e7f5      	b.n	80059e8 <_printf_float+0x42c>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f43f ae94 	beq.w	800572a <_printf_float+0x16e>
 8005a02:	f04f 0c00 	mov.w	ip, #0
 8005a06:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005a0a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005a0e:	6022      	str	r2, [r4, #0]
 8005a10:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005a14:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	463a      	mov	r2, r7
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f7ff fd3a 	bl	8005498 <__cvt>
 8005a24:	4607      	mov	r7, r0
 8005a26:	e64f      	b.n	80056c8 <_printf_float+0x10c>

08005a28 <_printf_common>:
 8005a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2c:	4691      	mov	r9, r2
 8005a2e:	461f      	mov	r7, r3
 8005a30:	688a      	ldr	r2, [r1, #8]
 8005a32:	690b      	ldr	r3, [r1, #16]
 8005a34:	4606      	mov	r6, r0
 8005a36:	4293      	cmp	r3, r2
 8005a38:	bfb8      	it	lt
 8005a3a:	4613      	movlt	r3, r2
 8005a3c:	f8c9 3000 	str.w	r3, [r9]
 8005a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a44:	460c      	mov	r4, r1
 8005a46:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a4a:	b112      	cbz	r2, 8005a52 <_printf_common+0x2a>
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	f8c9 3000 	str.w	r3, [r9]
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	0699      	lsls	r1, r3, #26
 8005a56:	bf42      	ittt	mi
 8005a58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a5c:	3302      	addmi	r3, #2
 8005a5e:	f8c9 3000 	strmi.w	r3, [r9]
 8005a62:	6825      	ldr	r5, [r4, #0]
 8005a64:	f015 0506 	ands.w	r5, r5, #6
 8005a68:	d107      	bne.n	8005a7a <_printf_common+0x52>
 8005a6a:	f104 0a19 	add.w	sl, r4, #25
 8005a6e:	68e3      	ldr	r3, [r4, #12]
 8005a70:	f8d9 2000 	ldr.w	r2, [r9]
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	42ab      	cmp	r3, r5
 8005a78:	dc29      	bgt.n	8005ace <_printf_common+0xa6>
 8005a7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	3300      	adds	r3, #0
 8005a82:	bf18      	it	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	0692      	lsls	r2, r2, #26
 8005a88:	d42e      	bmi.n	8005ae8 <_printf_common+0xc0>
 8005a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4630      	mov	r0, r6
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d021      	beq.n	8005adc <_printf_common+0xb4>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	68e5      	ldr	r5, [r4, #12]
 8005a9c:	f003 0306 	and.w	r3, r3, #6
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	bf18      	it	ne
 8005aa4:	2500      	movne	r5, #0
 8005aa6:	f8d9 2000 	ldr.w	r2, [r9]
 8005aaa:	f04f 0900 	mov.w	r9, #0
 8005aae:	bf08      	it	eq
 8005ab0:	1aad      	subeq	r5, r5, r2
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	bf08      	it	eq
 8005ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005abc:	4293      	cmp	r3, r2
 8005abe:	bfc4      	itt	gt
 8005ac0:	1a9b      	subgt	r3, r3, r2
 8005ac2:	18ed      	addgt	r5, r5, r3
 8005ac4:	341a      	adds	r4, #26
 8005ac6:	454d      	cmp	r5, r9
 8005ac8:	d11a      	bne.n	8005b00 <_printf_common+0xd8>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e008      	b.n	8005ae0 <_printf_common+0xb8>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	47c0      	blx	r8
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d103      	bne.n	8005ae4 <_printf_common+0xbc>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7c2      	b.n	8005a6e <_printf_common+0x46>
 8005ae8:	2030      	movs	r0, #48	; 0x30
 8005aea:	18e1      	adds	r1, r4, r3
 8005aec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005af6:	4422      	add	r2, r4
 8005af8:	3302      	adds	r3, #2
 8005afa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005afe:	e7c4      	b.n	8005a8a <_printf_common+0x62>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4622      	mov	r2, r4
 8005b04:	4639      	mov	r1, r7
 8005b06:	4630      	mov	r0, r6
 8005b08:	47c0      	blx	r8
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d0e6      	beq.n	8005adc <_printf_common+0xb4>
 8005b0e:	f109 0901 	add.w	r9, r9, #1
 8005b12:	e7d8      	b.n	8005ac6 <_printf_common+0x9e>

08005b14 <_printf_i>:
 8005b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	7e09      	ldrb	r1, [r1, #24]
 8005b20:	b085      	sub	sp, #20
 8005b22:	296e      	cmp	r1, #110	; 0x6e
 8005b24:	4617      	mov	r7, r2
 8005b26:	4606      	mov	r6, r0
 8005b28:	4698      	mov	r8, r3
 8005b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b2c:	f000 80b3 	beq.w	8005c96 <_printf_i+0x182>
 8005b30:	d822      	bhi.n	8005b78 <_printf_i+0x64>
 8005b32:	2963      	cmp	r1, #99	; 0x63
 8005b34:	d036      	beq.n	8005ba4 <_printf_i+0x90>
 8005b36:	d80a      	bhi.n	8005b4e <_printf_i+0x3a>
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	f000 80b9 	beq.w	8005cb0 <_printf_i+0x19c>
 8005b3e:	2958      	cmp	r1, #88	; 0x58
 8005b40:	f000 8083 	beq.w	8005c4a <_printf_i+0x136>
 8005b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b4c:	e032      	b.n	8005bb4 <_printf_i+0xa0>
 8005b4e:	2964      	cmp	r1, #100	; 0x64
 8005b50:	d001      	beq.n	8005b56 <_printf_i+0x42>
 8005b52:	2969      	cmp	r1, #105	; 0x69
 8005b54:	d1f6      	bne.n	8005b44 <_printf_i+0x30>
 8005b56:	6820      	ldr	r0, [r4, #0]
 8005b58:	6813      	ldr	r3, [r2, #0]
 8005b5a:	0605      	lsls	r5, r0, #24
 8005b5c:	f103 0104 	add.w	r1, r3, #4
 8005b60:	d52a      	bpl.n	8005bb8 <_printf_i+0xa4>
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6011      	str	r1, [r2, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da03      	bge.n	8005b72 <_printf_i+0x5e>
 8005b6a:	222d      	movs	r2, #45	; 0x2d
 8005b6c:	425b      	negs	r3, r3
 8005b6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b72:	486f      	ldr	r0, [pc, #444]	; (8005d30 <_printf_i+0x21c>)
 8005b74:	220a      	movs	r2, #10
 8005b76:	e039      	b.n	8005bec <_printf_i+0xd8>
 8005b78:	2973      	cmp	r1, #115	; 0x73
 8005b7a:	f000 809d 	beq.w	8005cb8 <_printf_i+0x1a4>
 8005b7e:	d808      	bhi.n	8005b92 <_printf_i+0x7e>
 8005b80:	296f      	cmp	r1, #111	; 0x6f
 8005b82:	d020      	beq.n	8005bc6 <_printf_i+0xb2>
 8005b84:	2970      	cmp	r1, #112	; 0x70
 8005b86:	d1dd      	bne.n	8005b44 <_printf_i+0x30>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	f043 0320 	orr.w	r3, r3, #32
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	e003      	b.n	8005b9a <_printf_i+0x86>
 8005b92:	2975      	cmp	r1, #117	; 0x75
 8005b94:	d017      	beq.n	8005bc6 <_printf_i+0xb2>
 8005b96:	2978      	cmp	r1, #120	; 0x78
 8005b98:	d1d4      	bne.n	8005b44 <_printf_i+0x30>
 8005b9a:	2378      	movs	r3, #120	; 0x78
 8005b9c:	4865      	ldr	r0, [pc, #404]	; (8005d34 <_printf_i+0x220>)
 8005b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ba2:	e055      	b.n	8005c50 <_printf_i+0x13c>
 8005ba4:	6813      	ldr	r3, [r2, #0]
 8005ba6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005baa:	1d19      	adds	r1, r3, #4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6011      	str	r1, [r2, #0]
 8005bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e08c      	b.n	8005cd2 <_printf_i+0x1be>
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bbe:	6011      	str	r1, [r2, #0]
 8005bc0:	bf18      	it	ne
 8005bc2:	b21b      	sxthne	r3, r3
 8005bc4:	e7cf      	b.n	8005b66 <_printf_i+0x52>
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	6825      	ldr	r5, [r4, #0]
 8005bca:	1d18      	adds	r0, r3, #4
 8005bcc:	6010      	str	r0, [r2, #0]
 8005bce:	0628      	lsls	r0, r5, #24
 8005bd0:	d501      	bpl.n	8005bd6 <_printf_i+0xc2>
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	e002      	b.n	8005bdc <_printf_i+0xc8>
 8005bd6:	0668      	lsls	r0, r5, #25
 8005bd8:	d5fb      	bpl.n	8005bd2 <_printf_i+0xbe>
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	296f      	cmp	r1, #111	; 0x6f
 8005bde:	bf14      	ite	ne
 8005be0:	220a      	movne	r2, #10
 8005be2:	2208      	moveq	r2, #8
 8005be4:	4852      	ldr	r0, [pc, #328]	; (8005d30 <_printf_i+0x21c>)
 8005be6:	2100      	movs	r1, #0
 8005be8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bec:	6865      	ldr	r5, [r4, #4]
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	60a5      	str	r5, [r4, #8]
 8005bf2:	f2c0 8095 	blt.w	8005d20 <_printf_i+0x20c>
 8005bf6:	6821      	ldr	r1, [r4, #0]
 8005bf8:	f021 0104 	bic.w	r1, r1, #4
 8005bfc:	6021      	str	r1, [r4, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d13d      	bne.n	8005c7e <_printf_i+0x16a>
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	f040 808e 	bne.w	8005d24 <_printf_i+0x210>
 8005c08:	4665      	mov	r5, ip
 8005c0a:	2a08      	cmp	r2, #8
 8005c0c:	d10b      	bne.n	8005c26 <_printf_i+0x112>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	07db      	lsls	r3, r3, #31
 8005c12:	d508      	bpl.n	8005c26 <_printf_i+0x112>
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	6862      	ldr	r2, [r4, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bfde      	ittt	le
 8005c1c:	2330      	movle	r3, #48	; 0x30
 8005c1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c26:	ebac 0305 	sub.w	r3, ip, r5
 8005c2a:	6123      	str	r3, [r4, #16]
 8005c2c:	f8cd 8000 	str.w	r8, [sp]
 8005c30:	463b      	mov	r3, r7
 8005c32:	aa03      	add	r2, sp, #12
 8005c34:	4621      	mov	r1, r4
 8005c36:	4630      	mov	r0, r6
 8005c38:	f7ff fef6 	bl	8005a28 <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d14d      	bne.n	8005cdc <_printf_i+0x1c8>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c44:	b005      	add	sp, #20
 8005c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	4839      	ldr	r0, [pc, #228]	; (8005d30 <_printf_i+0x21c>)
 8005c4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	6821      	ldr	r1, [r4, #0]
 8005c54:	1d1d      	adds	r5, r3, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6015      	str	r5, [r2, #0]
 8005c5a:	060a      	lsls	r2, r1, #24
 8005c5c:	d50b      	bpl.n	8005c76 <_printf_i+0x162>
 8005c5e:	07ca      	lsls	r2, r1, #31
 8005c60:	bf44      	itt	mi
 8005c62:	f041 0120 	orrmi.w	r1, r1, #32
 8005c66:	6021      	strmi	r1, [r4, #0]
 8005c68:	b91b      	cbnz	r3, 8005c72 <_printf_i+0x15e>
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	f022 0220 	bic.w	r2, r2, #32
 8005c70:	6022      	str	r2, [r4, #0]
 8005c72:	2210      	movs	r2, #16
 8005c74:	e7b7      	b.n	8005be6 <_printf_i+0xd2>
 8005c76:	064d      	lsls	r5, r1, #25
 8005c78:	bf48      	it	mi
 8005c7a:	b29b      	uxthmi	r3, r3
 8005c7c:	e7ef      	b.n	8005c5e <_printf_i+0x14a>
 8005c7e:	4665      	mov	r5, ip
 8005c80:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c84:	fb02 3311 	mls	r3, r2, r1, r3
 8005c88:	5cc3      	ldrb	r3, [r0, r3]
 8005c8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c8e:	460b      	mov	r3, r1
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d1f5      	bne.n	8005c80 <_printf_i+0x16c>
 8005c94:	e7b9      	b.n	8005c0a <_printf_i+0xf6>
 8005c96:	6813      	ldr	r3, [r2, #0]
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1d18      	adds	r0, r3, #4
 8005c9c:	6961      	ldr	r1, [r4, #20]
 8005c9e:	6010      	str	r0, [r2, #0]
 8005ca0:	0628      	lsls	r0, r5, #24
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	d501      	bpl.n	8005caa <_printf_i+0x196>
 8005ca6:	6019      	str	r1, [r3, #0]
 8005ca8:	e002      	b.n	8005cb0 <_printf_i+0x19c>
 8005caa:	066a      	lsls	r2, r5, #25
 8005cac:	d5fb      	bpl.n	8005ca6 <_printf_i+0x192>
 8005cae:	8019      	strh	r1, [r3, #0]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4665      	mov	r5, ip
 8005cb4:	6123      	str	r3, [r4, #16]
 8005cb6:	e7b9      	b.n	8005c2c <_printf_i+0x118>
 8005cb8:	6813      	ldr	r3, [r2, #0]
 8005cba:	1d19      	adds	r1, r3, #4
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	681d      	ldr	r5, [r3, #0]
 8005cc0:	6862      	ldr	r2, [r4, #4]
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f002 fb1b 	bl	8008300 <memchr>
 8005cca:	b108      	cbz	r0, 8005cd0 <_printf_i+0x1bc>
 8005ccc:	1b40      	subs	r0, r0, r5
 8005cce:	6060      	str	r0, [r4, #4]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	6123      	str	r3, [r4, #16]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cda:	e7a7      	b.n	8005c2c <_printf_i+0x118>
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	462a      	mov	r2, r5
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	47c0      	blx	r8
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d0aa      	beq.n	8005c40 <_printf_i+0x12c>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	079b      	lsls	r3, r3, #30
 8005cee:	d413      	bmi.n	8005d18 <_printf_i+0x204>
 8005cf0:	68e0      	ldr	r0, [r4, #12]
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	4298      	cmp	r0, r3
 8005cf6:	bfb8      	it	lt
 8005cf8:	4618      	movlt	r0, r3
 8005cfa:	e7a3      	b.n	8005c44 <_printf_i+0x130>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	464a      	mov	r2, r9
 8005d00:	4639      	mov	r1, r7
 8005d02:	4630      	mov	r0, r6
 8005d04:	47c0      	blx	r8
 8005d06:	3001      	adds	r0, #1
 8005d08:	d09a      	beq.n	8005c40 <_printf_i+0x12c>
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	68e3      	ldr	r3, [r4, #12]
 8005d0e:	9a03      	ldr	r2, [sp, #12]
 8005d10:	1a9b      	subs	r3, r3, r2
 8005d12:	42ab      	cmp	r3, r5
 8005d14:	dcf2      	bgt.n	8005cfc <_printf_i+0x1e8>
 8005d16:	e7eb      	b.n	8005cf0 <_printf_i+0x1dc>
 8005d18:	2500      	movs	r5, #0
 8005d1a:	f104 0919 	add.w	r9, r4, #25
 8005d1e:	e7f5      	b.n	8005d0c <_printf_i+0x1f8>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ac      	bne.n	8005c7e <_printf_i+0x16a>
 8005d24:	7803      	ldrb	r3, [r0, #0]
 8005d26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d2e:	e76c      	b.n	8005c0a <_printf_i+0xf6>
 8005d30:	080092b2 	.word	0x080092b2
 8005d34:	080092c3 	.word	0x080092c3

08005d38 <iprintf>:
 8005d38:	b40f      	push	{r0, r1, r2, r3}
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <iprintf+0x2c>)
 8005d3c:	b513      	push	{r0, r1, r4, lr}
 8005d3e:	681c      	ldr	r4, [r3, #0]
 8005d40:	b124      	cbz	r4, 8005d4c <iprintf+0x14>
 8005d42:	69a3      	ldr	r3, [r4, #24]
 8005d44:	b913      	cbnz	r3, 8005d4c <iprintf+0x14>
 8005d46:	4620      	mov	r0, r4
 8005d48:	f001 fe9a 	bl	8007a80 <__sinit>
 8005d4c:	ab05      	add	r3, sp, #20
 8005d4e:	9a04      	ldr	r2, [sp, #16]
 8005d50:	68a1      	ldr	r1, [r4, #8]
 8005d52:	4620      	mov	r0, r4
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	f002 ffc1 	bl	8008cdc <_vfiprintf_r>
 8005d5a:	b002      	add	sp, #8
 8005d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d60:	b004      	add	sp, #16
 8005d62:	4770      	bx	lr
 8005d64:	20000050 	.word	0x20000050

08005d68 <_puts_r>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	460e      	mov	r6, r1
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	b118      	cbz	r0, 8005d78 <_puts_r+0x10>
 8005d70:	6983      	ldr	r3, [r0, #24]
 8005d72:	b90b      	cbnz	r3, 8005d78 <_puts_r+0x10>
 8005d74:	f001 fe84 	bl	8007a80 <__sinit>
 8005d78:	69ab      	ldr	r3, [r5, #24]
 8005d7a:	68ac      	ldr	r4, [r5, #8]
 8005d7c:	b913      	cbnz	r3, 8005d84 <_puts_r+0x1c>
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f001 fe7e 	bl	8007a80 <__sinit>
 8005d84:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <_puts_r+0xac>)
 8005d86:	429c      	cmp	r4, r3
 8005d88:	d117      	bne.n	8005dba <_puts_r+0x52>
 8005d8a:	686c      	ldr	r4, [r5, #4]
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	071b      	lsls	r3, r3, #28
 8005d90:	d51d      	bpl.n	8005dce <_puts_r+0x66>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	b1db      	cbz	r3, 8005dce <_puts_r+0x66>
 8005d96:	3e01      	subs	r6, #1
 8005d98:	68a3      	ldr	r3, [r4, #8]
 8005d9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	b9e9      	cbnz	r1, 8005de0 <_puts_r+0x78>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	da2e      	bge.n	8005e06 <_puts_r+0x9e>
 8005da8:	4622      	mov	r2, r4
 8005daa:	210a      	movs	r1, #10
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 fe75 	bl	8006a9c <__swbuf_r>
 8005db2:	3001      	adds	r0, #1
 8005db4:	d011      	beq.n	8005dda <_puts_r+0x72>
 8005db6:	200a      	movs	r0, #10
 8005db8:	e011      	b.n	8005dde <_puts_r+0x76>
 8005dba:	4b17      	ldr	r3, [pc, #92]	; (8005e18 <_puts_r+0xb0>)
 8005dbc:	429c      	cmp	r4, r3
 8005dbe:	d101      	bne.n	8005dc4 <_puts_r+0x5c>
 8005dc0:	68ac      	ldr	r4, [r5, #8]
 8005dc2:	e7e3      	b.n	8005d8c <_puts_r+0x24>
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <_puts_r+0xb4>)
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	bf08      	it	eq
 8005dca:	68ec      	ldreq	r4, [r5, #12]
 8005dcc:	e7de      	b.n	8005d8c <_puts_r+0x24>
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 feb5 	bl	8006b40 <__swsetup_r>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d0dd      	beq.n	8005d96 <_puts_r+0x2e>
 8005dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da04      	bge.n	8005dee <_puts_r+0x86>
 8005de4:	69a2      	ldr	r2, [r4, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	dc06      	bgt.n	8005df8 <_puts_r+0x90>
 8005dea:	290a      	cmp	r1, #10
 8005dec:	d004      	beq.n	8005df8 <_puts_r+0x90>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	6022      	str	r2, [r4, #0]
 8005df4:	7019      	strb	r1, [r3, #0]
 8005df6:	e7cf      	b.n	8005d98 <_puts_r+0x30>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fe4e 	bl	8006a9c <__swbuf_r>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d1c9      	bne.n	8005d98 <_puts_r+0x30>
 8005e04:	e7e9      	b.n	8005dda <_puts_r+0x72>
 8005e06:	200a      	movs	r0, #10
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	7018      	strb	r0, [r3, #0]
 8005e10:	e7e5      	b.n	8005dde <_puts_r+0x76>
 8005e12:	bf00      	nop
 8005e14:	08009358 	.word	0x08009358
 8005e18:	08009378 	.word	0x08009378
 8005e1c:	08009338 	.word	0x08009338

08005e20 <puts>:
 8005e20:	4b02      	ldr	r3, [pc, #8]	; (8005e2c <puts+0xc>)
 8005e22:	4601      	mov	r1, r0
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	f7ff bf9f 	b.w	8005d68 <_puts_r>
 8005e2a:	bf00      	nop
 8005e2c:	20000050 	.word	0x20000050

08005e30 <sulp>:
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	460f      	mov	r7, r1
 8005e36:	4690      	mov	r8, r2
 8005e38:	f002 fd46 	bl	80088c8 <__ulp>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	460d      	mov	r5, r1
 8005e40:	f1b8 0f00 	cmp.w	r8, #0
 8005e44:	d011      	beq.n	8005e6a <sulp+0x3a>
 8005e46:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005e4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	dd0b      	ble.n	8005e6a <sulp+0x3a>
 8005e52:	2400      	movs	r4, #0
 8005e54:	051b      	lsls	r3, r3, #20
 8005e56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e5a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	f7fa fb39 	bl	80004d8 <__aeabi_dmul>
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e72:	0000      	movs	r0, r0
 8005e74:	0000      	movs	r0, r0
	...

08005e78 <_strtod_l>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	461f      	mov	r7, r3
 8005e7e:	2300      	movs	r3, #0
 8005e80:	b0a1      	sub	sp, #132	; 0x84
 8005e82:	4683      	mov	fp, r0
 8005e84:	4638      	mov	r0, r7
 8005e86:	460e      	mov	r6, r1
 8005e88:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e8a:	931c      	str	r3, [sp, #112]	; 0x70
 8005e8c:	f002 f9aa 	bl	80081e4 <__localeconv_l>
 8005e90:	4680      	mov	r8, r0
 8005e92:	6800      	ldr	r0, [r0, #0]
 8005e94:	f7fa f95c 	bl	8000150 <strlen>
 8005e98:	f04f 0900 	mov.w	r9, #0
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	f04f 0a00 	mov.w	sl, #0
 8005ea2:	961b      	str	r6, [sp, #108]	; 0x6c
 8005ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ea6:	781a      	ldrb	r2, [r3, #0]
 8005ea8:	2a0d      	cmp	r2, #13
 8005eaa:	d832      	bhi.n	8005f12 <_strtod_l+0x9a>
 8005eac:	2a09      	cmp	r2, #9
 8005eae:	d236      	bcs.n	8005f1e <_strtod_l+0xa6>
 8005eb0:	2a00      	cmp	r2, #0
 8005eb2:	d03e      	beq.n	8005f32 <_strtod_l+0xba>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8005eb8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005eba:	782b      	ldrb	r3, [r5, #0]
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	f040 80ac 	bne.w	800601a <_strtod_l+0x1a2>
 8005ec2:	786b      	ldrb	r3, [r5, #1]
 8005ec4:	2b58      	cmp	r3, #88	; 0x58
 8005ec6:	d001      	beq.n	8005ecc <_strtod_l+0x54>
 8005ec8:	2b78      	cmp	r3, #120	; 0x78
 8005eca:	d167      	bne.n	8005f9c <_strtod_l+0x124>
 8005ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ece:	9702      	str	r7, [sp, #8]
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	ab1c      	add	r3, sp, #112	; 0x70
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	4a89      	ldr	r2, [pc, #548]	; (80060fc <_strtod_l+0x284>)
 8005ed8:	ab1d      	add	r3, sp, #116	; 0x74
 8005eda:	a91b      	add	r1, sp, #108	; 0x6c
 8005edc:	4658      	mov	r0, fp
 8005ede:	f001 fea9 	bl	8007c34 <__gethex>
 8005ee2:	f010 0407 	ands.w	r4, r0, #7
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	d005      	beq.n	8005ef6 <_strtod_l+0x7e>
 8005eea:	2c06      	cmp	r4, #6
 8005eec:	d12b      	bne.n	8005f46 <_strtod_l+0xce>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	951b      	str	r5, [sp, #108]	; 0x6c
 8005ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f040 85a6 	bne.w	8006a4a <_strtod_l+0xbd2>
 8005efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f00:	b1e3      	cbz	r3, 8005f3c <_strtod_l+0xc4>
 8005f02:	464a      	mov	r2, r9
 8005f04:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	b021      	add	sp, #132	; 0x84
 8005f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f12:	2a2b      	cmp	r2, #43	; 0x2b
 8005f14:	d015      	beq.n	8005f42 <_strtod_l+0xca>
 8005f16:	2a2d      	cmp	r2, #45	; 0x2d
 8005f18:	d004      	beq.n	8005f24 <_strtod_l+0xac>
 8005f1a:	2a20      	cmp	r2, #32
 8005f1c:	d1ca      	bne.n	8005eb4 <_strtod_l+0x3c>
 8005f1e:	3301      	adds	r3, #1
 8005f20:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f22:	e7bf      	b.n	8005ea4 <_strtod_l+0x2c>
 8005f24:	2201      	movs	r2, #1
 8005f26:	920d      	str	r2, [sp, #52]	; 0x34
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1c2      	bne.n	8005eb8 <_strtod_l+0x40>
 8005f32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f34:	961b      	str	r6, [sp, #108]	; 0x6c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f040 8585 	bne.w	8006a46 <_strtod_l+0xbce>
 8005f3c:	464a      	mov	r2, r9
 8005f3e:	4653      	mov	r3, sl
 8005f40:	e7e2      	b.n	8005f08 <_strtod_l+0x90>
 8005f42:	2200      	movs	r2, #0
 8005f44:	e7ef      	b.n	8005f26 <_strtod_l+0xae>
 8005f46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005f48:	b13a      	cbz	r2, 8005f5a <_strtod_l+0xe2>
 8005f4a:	2135      	movs	r1, #53	; 0x35
 8005f4c:	a81e      	add	r0, sp, #120	; 0x78
 8005f4e:	f002 fdae 	bl	8008aae <__copybits>
 8005f52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f54:	4658      	mov	r0, fp
 8005f56:	f002 fa20 	bl	800839a <_Bfree>
 8005f5a:	3c01      	subs	r4, #1
 8005f5c:	2c04      	cmp	r4, #4
 8005f5e:	d806      	bhi.n	8005f6e <_strtod_l+0xf6>
 8005f60:	e8df f004 	tbb	[pc, r4]
 8005f64:	1714030a 	.word	0x1714030a
 8005f68:	0a          	.byte	0x0a
 8005f69:	00          	.byte	0x00
 8005f6a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005f6e:	0731      	lsls	r1, r6, #28
 8005f70:	d5c1      	bpl.n	8005ef6 <_strtod_l+0x7e>
 8005f72:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005f76:	e7be      	b.n	8005ef6 <_strtod_l+0x7e>
 8005f78:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005f7a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005f7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f86:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005f8a:	e7f0      	b.n	8005f6e <_strtod_l+0xf6>
 8005f8c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006100 <_strtod_l+0x288>
 8005f90:	e7ed      	b.n	8005f6e <_strtod_l+0xf6>
 8005f92:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005f96:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005f9a:	e7e8      	b.n	8005f6e <_strtod_l+0xf6>
 8005f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b30      	cmp	r3, #48	; 0x30
 8005fa6:	d0f9      	beq.n	8005f9c <_strtod_l+0x124>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0a4      	beq.n	8005ef6 <_strtod_l+0x7e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	2500      	movs	r5, #0
 8005fb0:	220a      	movs	r2, #10
 8005fb2:	9307      	str	r3, [sp, #28]
 8005fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fb6:	9506      	str	r5, [sp, #24]
 8005fb8:	9308      	str	r3, [sp, #32]
 8005fba:	9504      	str	r5, [sp, #16]
 8005fbc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005fbe:	7807      	ldrb	r7, [r0, #0]
 8005fc0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005fc4:	b2d9      	uxtb	r1, r3
 8005fc6:	2909      	cmp	r1, #9
 8005fc8:	d929      	bls.n	800601e <_strtod_l+0x1a6>
 8005fca:	4622      	mov	r2, r4
 8005fcc:	f8d8 1000 	ldr.w	r1, [r8]
 8005fd0:	f002 ffed 	bl	8008fae <strncmp>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d031      	beq.n	800603c <_strtod_l+0x1c4>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	463b      	mov	r3, r7
 8005fdc:	4602      	mov	r2, r0
 8005fde:	9c04      	ldr	r4, [sp, #16]
 8005fe0:	9005      	str	r0, [sp, #20]
 8005fe2:	2b65      	cmp	r3, #101	; 0x65
 8005fe4:	d001      	beq.n	8005fea <_strtod_l+0x172>
 8005fe6:	2b45      	cmp	r3, #69	; 0x45
 8005fe8:	d114      	bne.n	8006014 <_strtod_l+0x19c>
 8005fea:	b924      	cbnz	r4, 8005ff6 <_strtod_l+0x17e>
 8005fec:	b910      	cbnz	r0, 8005ff4 <_strtod_l+0x17c>
 8005fee:	9b07      	ldr	r3, [sp, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d09e      	beq.n	8005f32 <_strtod_l+0xba>
 8005ff4:	2400      	movs	r4, #0
 8005ff6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005ff8:	1c73      	adds	r3, r6, #1
 8005ffa:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ffc:	7873      	ldrb	r3, [r6, #1]
 8005ffe:	2b2b      	cmp	r3, #43	; 0x2b
 8006000:	d078      	beq.n	80060f4 <_strtod_l+0x27c>
 8006002:	2b2d      	cmp	r3, #45	; 0x2d
 8006004:	d070      	beq.n	80060e8 <_strtod_l+0x270>
 8006006:	f04f 0c00 	mov.w	ip, #0
 800600a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800600e:	2f09      	cmp	r7, #9
 8006010:	d97c      	bls.n	800610c <_strtod_l+0x294>
 8006012:	961b      	str	r6, [sp, #108]	; 0x6c
 8006014:	f04f 0e00 	mov.w	lr, #0
 8006018:	e09a      	b.n	8006150 <_strtod_l+0x2d8>
 800601a:	2300      	movs	r3, #0
 800601c:	e7c7      	b.n	8005fae <_strtod_l+0x136>
 800601e:	9904      	ldr	r1, [sp, #16]
 8006020:	3001      	adds	r0, #1
 8006022:	2908      	cmp	r1, #8
 8006024:	bfd7      	itett	le
 8006026:	9906      	ldrle	r1, [sp, #24]
 8006028:	fb02 3505 	mlagt	r5, r2, r5, r3
 800602c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006030:	9306      	strle	r3, [sp, #24]
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	901b      	str	r0, [sp, #108]	; 0x6c
 8006036:	3301      	adds	r3, #1
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	e7bf      	b.n	8005fbc <_strtod_l+0x144>
 800603c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800603e:	191a      	adds	r2, r3, r4
 8006040:	921b      	str	r2, [sp, #108]	; 0x6c
 8006042:	9a04      	ldr	r2, [sp, #16]
 8006044:	5d1b      	ldrb	r3, [r3, r4]
 8006046:	2a00      	cmp	r2, #0
 8006048:	d037      	beq.n	80060ba <_strtod_l+0x242>
 800604a:	4602      	mov	r2, r0
 800604c:	9c04      	ldr	r4, [sp, #16]
 800604e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006052:	2909      	cmp	r1, #9
 8006054:	d913      	bls.n	800607e <_strtod_l+0x206>
 8006056:	2101      	movs	r1, #1
 8006058:	9105      	str	r1, [sp, #20]
 800605a:	e7c2      	b.n	8005fe2 <_strtod_l+0x16a>
 800605c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800605e:	3001      	adds	r0, #1
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	921b      	str	r2, [sp, #108]	; 0x6c
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b30      	cmp	r3, #48	; 0x30
 8006068:	d0f8      	beq.n	800605c <_strtod_l+0x1e4>
 800606a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800606e:	2a08      	cmp	r2, #8
 8006070:	f200 84f0 	bhi.w	8006a54 <_strtod_l+0xbdc>
 8006074:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006076:	9208      	str	r2, [sp, #32]
 8006078:	4602      	mov	r2, r0
 800607a:	2000      	movs	r0, #0
 800607c:	4604      	mov	r4, r0
 800607e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006082:	f100 0101 	add.w	r1, r0, #1
 8006086:	d012      	beq.n	80060ae <_strtod_l+0x236>
 8006088:	440a      	add	r2, r1
 800608a:	270a      	movs	r7, #10
 800608c:	4621      	mov	r1, r4
 800608e:	eb00 0c04 	add.w	ip, r0, r4
 8006092:	458c      	cmp	ip, r1
 8006094:	d113      	bne.n	80060be <_strtod_l+0x246>
 8006096:	1821      	adds	r1, r4, r0
 8006098:	2908      	cmp	r1, #8
 800609a:	f104 0401 	add.w	r4, r4, #1
 800609e:	4404      	add	r4, r0
 80060a0:	dc19      	bgt.n	80060d6 <_strtod_l+0x25e>
 80060a2:	210a      	movs	r1, #10
 80060a4:	9b06      	ldr	r3, [sp, #24]
 80060a6:	fb01 e303 	mla	r3, r1, r3, lr
 80060aa:	9306      	str	r3, [sp, #24]
 80060ac:	2100      	movs	r1, #0
 80060ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060b0:	1c58      	adds	r0, r3, #1
 80060b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	4608      	mov	r0, r1
 80060b8:	e7c9      	b.n	800604e <_strtod_l+0x1d6>
 80060ba:	9804      	ldr	r0, [sp, #16]
 80060bc:	e7d3      	b.n	8006066 <_strtod_l+0x1ee>
 80060be:	2908      	cmp	r1, #8
 80060c0:	f101 0101 	add.w	r1, r1, #1
 80060c4:	dc03      	bgt.n	80060ce <_strtod_l+0x256>
 80060c6:	9b06      	ldr	r3, [sp, #24]
 80060c8:	437b      	muls	r3, r7
 80060ca:	9306      	str	r3, [sp, #24]
 80060cc:	e7e1      	b.n	8006092 <_strtod_l+0x21a>
 80060ce:	2910      	cmp	r1, #16
 80060d0:	bfd8      	it	le
 80060d2:	437d      	mulle	r5, r7
 80060d4:	e7dd      	b.n	8006092 <_strtod_l+0x21a>
 80060d6:	2c10      	cmp	r4, #16
 80060d8:	bfdc      	itt	le
 80060da:	210a      	movle	r1, #10
 80060dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80060e0:	e7e4      	b.n	80060ac <_strtod_l+0x234>
 80060e2:	2301      	movs	r3, #1
 80060e4:	9305      	str	r3, [sp, #20]
 80060e6:	e781      	b.n	8005fec <_strtod_l+0x174>
 80060e8:	f04f 0c01 	mov.w	ip, #1
 80060ec:	1cb3      	adds	r3, r6, #2
 80060ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80060f0:	78b3      	ldrb	r3, [r6, #2]
 80060f2:	e78a      	b.n	800600a <_strtod_l+0x192>
 80060f4:	f04f 0c00 	mov.w	ip, #0
 80060f8:	e7f8      	b.n	80060ec <_strtod_l+0x274>
 80060fa:	bf00      	nop
 80060fc:	080092d4 	.word	0x080092d4
 8006100:	7ff00000 	.word	0x7ff00000
 8006104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006106:	1c5f      	adds	r7, r3, #1
 8006108:	971b      	str	r7, [sp, #108]	; 0x6c
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b30      	cmp	r3, #48	; 0x30
 800610e:	d0f9      	beq.n	8006104 <_strtod_l+0x28c>
 8006110:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006114:	2f08      	cmp	r7, #8
 8006116:	f63f af7d 	bhi.w	8006014 <_strtod_l+0x19c>
 800611a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800611e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006120:	9309      	str	r3, [sp, #36]	; 0x24
 8006122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006124:	1c5f      	adds	r7, r3, #1
 8006126:	971b      	str	r7, [sp, #108]	; 0x6c
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800612e:	f1b8 0f09 	cmp.w	r8, #9
 8006132:	d937      	bls.n	80061a4 <_strtod_l+0x32c>
 8006134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006136:	1a7f      	subs	r7, r7, r1
 8006138:	2f08      	cmp	r7, #8
 800613a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800613e:	dc37      	bgt.n	80061b0 <_strtod_l+0x338>
 8006140:	45be      	cmp	lr, r7
 8006142:	bfa8      	it	ge
 8006144:	46be      	movge	lr, r7
 8006146:	f1bc 0f00 	cmp.w	ip, #0
 800614a:	d001      	beq.n	8006150 <_strtod_l+0x2d8>
 800614c:	f1ce 0e00 	rsb	lr, lr, #0
 8006150:	2c00      	cmp	r4, #0
 8006152:	d151      	bne.n	80061f8 <_strtod_l+0x380>
 8006154:	2800      	cmp	r0, #0
 8006156:	f47f aece 	bne.w	8005ef6 <_strtod_l+0x7e>
 800615a:	9a07      	ldr	r2, [sp, #28]
 800615c:	2a00      	cmp	r2, #0
 800615e:	f47f aeca 	bne.w	8005ef6 <_strtod_l+0x7e>
 8006162:	9a05      	ldr	r2, [sp, #20]
 8006164:	2a00      	cmp	r2, #0
 8006166:	f47f aee4 	bne.w	8005f32 <_strtod_l+0xba>
 800616a:	2b4e      	cmp	r3, #78	; 0x4e
 800616c:	d027      	beq.n	80061be <_strtod_l+0x346>
 800616e:	dc21      	bgt.n	80061b4 <_strtod_l+0x33c>
 8006170:	2b49      	cmp	r3, #73	; 0x49
 8006172:	f47f aede 	bne.w	8005f32 <_strtod_l+0xba>
 8006176:	49a4      	ldr	r1, [pc, #656]	; (8006408 <_strtod_l+0x590>)
 8006178:	a81b      	add	r0, sp, #108	; 0x6c
 800617a:	f001 ff8f 	bl	800809c <__match>
 800617e:	2800      	cmp	r0, #0
 8006180:	f43f aed7 	beq.w	8005f32 <_strtod_l+0xba>
 8006184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006186:	49a1      	ldr	r1, [pc, #644]	; (800640c <_strtod_l+0x594>)
 8006188:	3b01      	subs	r3, #1
 800618a:	a81b      	add	r0, sp, #108	; 0x6c
 800618c:	931b      	str	r3, [sp, #108]	; 0x6c
 800618e:	f001 ff85 	bl	800809c <__match>
 8006192:	b910      	cbnz	r0, 800619a <_strtod_l+0x322>
 8006194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006196:	3301      	adds	r3, #1
 8006198:	931b      	str	r3, [sp, #108]	; 0x6c
 800619a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006420 <_strtod_l+0x5a8>
 800619e:	f04f 0900 	mov.w	r9, #0
 80061a2:	e6a8      	b.n	8005ef6 <_strtod_l+0x7e>
 80061a4:	210a      	movs	r1, #10
 80061a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80061aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80061ae:	e7b8      	b.n	8006122 <_strtod_l+0x2aa>
 80061b0:	46be      	mov	lr, r7
 80061b2:	e7c8      	b.n	8006146 <_strtod_l+0x2ce>
 80061b4:	2b69      	cmp	r3, #105	; 0x69
 80061b6:	d0de      	beq.n	8006176 <_strtod_l+0x2fe>
 80061b8:	2b6e      	cmp	r3, #110	; 0x6e
 80061ba:	f47f aeba 	bne.w	8005f32 <_strtod_l+0xba>
 80061be:	4994      	ldr	r1, [pc, #592]	; (8006410 <_strtod_l+0x598>)
 80061c0:	a81b      	add	r0, sp, #108	; 0x6c
 80061c2:	f001 ff6b 	bl	800809c <__match>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f43f aeb3 	beq.w	8005f32 <_strtod_l+0xba>
 80061cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b28      	cmp	r3, #40	; 0x28
 80061d2:	d10e      	bne.n	80061f2 <_strtod_l+0x37a>
 80061d4:	aa1e      	add	r2, sp, #120	; 0x78
 80061d6:	498f      	ldr	r1, [pc, #572]	; (8006414 <_strtod_l+0x59c>)
 80061d8:	a81b      	add	r0, sp, #108	; 0x6c
 80061da:	f001 ff73 	bl	80080c4 <__hexnan>
 80061de:	2805      	cmp	r0, #5
 80061e0:	d107      	bne.n	80061f2 <_strtod_l+0x37a>
 80061e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80061e4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80061e8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80061ec:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80061f0:	e681      	b.n	8005ef6 <_strtod_l+0x7e>
 80061f2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006428 <_strtod_l+0x5b0>
 80061f6:	e7d2      	b.n	800619e <_strtod_l+0x326>
 80061f8:	ebae 0302 	sub.w	r3, lr, r2
 80061fc:	9307      	str	r3, [sp, #28]
 80061fe:	9b04      	ldr	r3, [sp, #16]
 8006200:	9806      	ldr	r0, [sp, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	bf08      	it	eq
 8006206:	4623      	moveq	r3, r4
 8006208:	2c10      	cmp	r4, #16
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	46a0      	mov	r8, r4
 800620e:	bfa8      	it	ge
 8006210:	f04f 0810 	movge.w	r8, #16
 8006214:	f7fa f8e6 	bl	80003e4 <__aeabi_ui2d>
 8006218:	2c09      	cmp	r4, #9
 800621a:	4681      	mov	r9, r0
 800621c:	468a      	mov	sl, r1
 800621e:	dc13      	bgt.n	8006248 <_strtod_l+0x3d0>
 8006220:	9b07      	ldr	r3, [sp, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f43f ae67 	beq.w	8005ef6 <_strtod_l+0x7e>
 8006228:	9b07      	ldr	r3, [sp, #28]
 800622a:	dd7e      	ble.n	800632a <_strtod_l+0x4b2>
 800622c:	2b16      	cmp	r3, #22
 800622e:	dc65      	bgt.n	80062fc <_strtod_l+0x484>
 8006230:	4a79      	ldr	r2, [pc, #484]	; (8006418 <_strtod_l+0x5a0>)
 8006232:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006236:	464a      	mov	r2, r9
 8006238:	e9de 0100 	ldrd	r0, r1, [lr]
 800623c:	4653      	mov	r3, sl
 800623e:	f7fa f94b 	bl	80004d8 <__aeabi_dmul>
 8006242:	4681      	mov	r9, r0
 8006244:	468a      	mov	sl, r1
 8006246:	e656      	b.n	8005ef6 <_strtod_l+0x7e>
 8006248:	4b73      	ldr	r3, [pc, #460]	; (8006418 <_strtod_l+0x5a0>)
 800624a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800624e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006252:	f7fa f941 	bl	80004d8 <__aeabi_dmul>
 8006256:	4606      	mov	r6, r0
 8006258:	4628      	mov	r0, r5
 800625a:	460f      	mov	r7, r1
 800625c:	f7fa f8c2 	bl	80003e4 <__aeabi_ui2d>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4630      	mov	r0, r6
 8006266:	4639      	mov	r1, r7
 8006268:	f7f9 ff80 	bl	800016c <__adddf3>
 800626c:	2c0f      	cmp	r4, #15
 800626e:	4681      	mov	r9, r0
 8006270:	468a      	mov	sl, r1
 8006272:	ddd5      	ble.n	8006220 <_strtod_l+0x3a8>
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	eba4 0808 	sub.w	r8, r4, r8
 800627a:	4498      	add	r8, r3
 800627c:	f1b8 0f00 	cmp.w	r8, #0
 8006280:	f340 809a 	ble.w	80063b8 <_strtod_l+0x540>
 8006284:	f018 030f 	ands.w	r3, r8, #15
 8006288:	d00a      	beq.n	80062a0 <_strtod_l+0x428>
 800628a:	4963      	ldr	r1, [pc, #396]	; (8006418 <_strtod_l+0x5a0>)
 800628c:	464a      	mov	r2, r9
 800628e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006296:	4653      	mov	r3, sl
 8006298:	f7fa f91e 	bl	80004d8 <__aeabi_dmul>
 800629c:	4681      	mov	r9, r0
 800629e:	468a      	mov	sl, r1
 80062a0:	f038 080f 	bics.w	r8, r8, #15
 80062a4:	d077      	beq.n	8006396 <_strtod_l+0x51e>
 80062a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80062aa:	dd4b      	ble.n	8006344 <_strtod_l+0x4cc>
 80062ac:	f04f 0800 	mov.w	r8, #0
 80062b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80062b4:	f8cd 8020 	str.w	r8, [sp, #32]
 80062b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062bc:	2322      	movs	r3, #34	; 0x22
 80062be:	f04f 0900 	mov.w	r9, #0
 80062c2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006420 <_strtod_l+0x5a8>
 80062c6:	f8cb 3000 	str.w	r3, [fp]
 80062ca:	9b08      	ldr	r3, [sp, #32]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f43f ae12 	beq.w	8005ef6 <_strtod_l+0x7e>
 80062d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062d4:	4658      	mov	r0, fp
 80062d6:	f002 f860 	bl	800839a <_Bfree>
 80062da:	9906      	ldr	r1, [sp, #24]
 80062dc:	4658      	mov	r0, fp
 80062de:	f002 f85c 	bl	800839a <_Bfree>
 80062e2:	9904      	ldr	r1, [sp, #16]
 80062e4:	4658      	mov	r0, fp
 80062e6:	f002 f858 	bl	800839a <_Bfree>
 80062ea:	9908      	ldr	r1, [sp, #32]
 80062ec:	4658      	mov	r0, fp
 80062ee:	f002 f854 	bl	800839a <_Bfree>
 80062f2:	4641      	mov	r1, r8
 80062f4:	4658      	mov	r0, fp
 80062f6:	f002 f850 	bl	800839a <_Bfree>
 80062fa:	e5fc      	b.n	8005ef6 <_strtod_l+0x7e>
 80062fc:	9a07      	ldr	r2, [sp, #28]
 80062fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006302:	4293      	cmp	r3, r2
 8006304:	dbb6      	blt.n	8006274 <_strtod_l+0x3fc>
 8006306:	4d44      	ldr	r5, [pc, #272]	; (8006418 <_strtod_l+0x5a0>)
 8006308:	f1c4 040f 	rsb	r4, r4, #15
 800630c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006310:	464a      	mov	r2, r9
 8006312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006316:	4653      	mov	r3, sl
 8006318:	f7fa f8de 	bl	80004d8 <__aeabi_dmul>
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	1b1c      	subs	r4, r3, r4
 8006320:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006328:	e789      	b.n	800623e <_strtod_l+0x3c6>
 800632a:	f113 0f16 	cmn.w	r3, #22
 800632e:	dba1      	blt.n	8006274 <_strtod_l+0x3fc>
 8006330:	4a39      	ldr	r2, [pc, #228]	; (8006418 <_strtod_l+0x5a0>)
 8006332:	4648      	mov	r0, r9
 8006334:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006338:	e9d2 2300 	ldrd	r2, r3, [r2]
 800633c:	4651      	mov	r1, sl
 800633e:	f7fa f9f5 	bl	800072c <__aeabi_ddiv>
 8006342:	e77e      	b.n	8006242 <_strtod_l+0x3ca>
 8006344:	2300      	movs	r3, #0
 8006346:	4648      	mov	r0, r9
 8006348:	4651      	mov	r1, sl
 800634a:	461d      	mov	r5, r3
 800634c:	4e33      	ldr	r6, [pc, #204]	; (800641c <_strtod_l+0x5a4>)
 800634e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006352:	f1b8 0f01 	cmp.w	r8, #1
 8006356:	dc21      	bgt.n	800639c <_strtod_l+0x524>
 8006358:	b10b      	cbz	r3, 800635e <_strtod_l+0x4e6>
 800635a:	4681      	mov	r9, r0
 800635c:	468a      	mov	sl, r1
 800635e:	4b2f      	ldr	r3, [pc, #188]	; (800641c <_strtod_l+0x5a4>)
 8006360:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006364:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006368:	464a      	mov	r2, r9
 800636a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800636e:	4653      	mov	r3, sl
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	4b2a      	ldr	r3, [pc, #168]	; (8006420 <_strtod_l+0x5a8>)
 8006376:	460a      	mov	r2, r1
 8006378:	400b      	ands	r3, r1
 800637a:	492a      	ldr	r1, [pc, #168]	; (8006424 <_strtod_l+0x5ac>)
 800637c:	4681      	mov	r9, r0
 800637e:	428b      	cmp	r3, r1
 8006380:	d894      	bhi.n	80062ac <_strtod_l+0x434>
 8006382:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006386:	428b      	cmp	r3, r1
 8006388:	bf86      	itte	hi
 800638a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800638e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800642c <_strtod_l+0x5b4>
 8006392:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006396:	2300      	movs	r3, #0
 8006398:	9305      	str	r3, [sp, #20]
 800639a:	e07b      	b.n	8006494 <_strtod_l+0x61c>
 800639c:	f018 0f01 	tst.w	r8, #1
 80063a0:	d006      	beq.n	80063b0 <_strtod_l+0x538>
 80063a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7fa f895 	bl	80004d8 <__aeabi_dmul>
 80063ae:	2301      	movs	r3, #1
 80063b0:	3501      	adds	r5, #1
 80063b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063b6:	e7cc      	b.n	8006352 <_strtod_l+0x4da>
 80063b8:	d0ed      	beq.n	8006396 <_strtod_l+0x51e>
 80063ba:	f1c8 0800 	rsb	r8, r8, #0
 80063be:	f018 020f 	ands.w	r2, r8, #15
 80063c2:	d00a      	beq.n	80063da <_strtod_l+0x562>
 80063c4:	4b14      	ldr	r3, [pc, #80]	; (8006418 <_strtod_l+0x5a0>)
 80063c6:	4648      	mov	r0, r9
 80063c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063cc:	4651      	mov	r1, sl
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f7fa f9ab 	bl	800072c <__aeabi_ddiv>
 80063d6:	4681      	mov	r9, r0
 80063d8:	468a      	mov	sl, r1
 80063da:	ea5f 1828 	movs.w	r8, r8, asr #4
 80063de:	d0da      	beq.n	8006396 <_strtod_l+0x51e>
 80063e0:	f1b8 0f1f 	cmp.w	r8, #31
 80063e4:	dd24      	ble.n	8006430 <_strtod_l+0x5b8>
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80063ee:	f8cd 8020 	str.w	r8, [sp, #32]
 80063f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80063f6:	2322      	movs	r3, #34	; 0x22
 80063f8:	f04f 0900 	mov.w	r9, #0
 80063fc:	f04f 0a00 	mov.w	sl, #0
 8006400:	f8cb 3000 	str.w	r3, [fp]
 8006404:	e761      	b.n	80062ca <_strtod_l+0x452>
 8006406:	bf00      	nop
 8006408:	080092a5 	.word	0x080092a5
 800640c:	0800932b 	.word	0x0800932b
 8006410:	080092ad 	.word	0x080092ad
 8006414:	080092e8 	.word	0x080092e8
 8006418:	080093d0 	.word	0x080093d0
 800641c:	080093a8 	.word	0x080093a8
 8006420:	7ff00000 	.word	0x7ff00000
 8006424:	7ca00000 	.word	0x7ca00000
 8006428:	fff80000 	.word	0xfff80000
 800642c:	7fefffff 	.word	0x7fefffff
 8006430:	f018 0310 	ands.w	r3, r8, #16
 8006434:	bf18      	it	ne
 8006436:	236a      	movne	r3, #106	; 0x6a
 8006438:	4648      	mov	r0, r9
 800643a:	9305      	str	r3, [sp, #20]
 800643c:	4651      	mov	r1, sl
 800643e:	2300      	movs	r3, #0
 8006440:	4da1      	ldr	r5, [pc, #644]	; (80066c8 <_strtod_l+0x850>)
 8006442:	f1b8 0f00 	cmp.w	r8, #0
 8006446:	f300 8113 	bgt.w	8006670 <_strtod_l+0x7f8>
 800644a:	b10b      	cbz	r3, 8006450 <_strtod_l+0x5d8>
 800644c:	4681      	mov	r9, r0
 800644e:	468a      	mov	sl, r1
 8006450:	9b05      	ldr	r3, [sp, #20]
 8006452:	b1bb      	cbz	r3, 8006484 <_strtod_l+0x60c>
 8006454:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800645c:	2b00      	cmp	r3, #0
 800645e:	4651      	mov	r1, sl
 8006460:	dd10      	ble.n	8006484 <_strtod_l+0x60c>
 8006462:	2b1f      	cmp	r3, #31
 8006464:	f340 8110 	ble.w	8006688 <_strtod_l+0x810>
 8006468:	2b34      	cmp	r3, #52	; 0x34
 800646a:	bfd8      	it	le
 800646c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006470:	f04f 0900 	mov.w	r9, #0
 8006474:	bfcf      	iteee	gt
 8006476:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800647a:	3b20      	suble	r3, #32
 800647c:	fa02 f303 	lslle.w	r3, r2, r3
 8006480:	ea03 0a01 	andle.w	sl, r3, r1
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	4648      	mov	r0, r9
 800648a:	4651      	mov	r1, sl
 800648c:	f7fa fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006490:	2800      	cmp	r0, #0
 8006492:	d1a8      	bne.n	80063e6 <_strtod_l+0x56e>
 8006494:	9b06      	ldr	r3, [sp, #24]
 8006496:	9a04      	ldr	r2, [sp, #16]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	9908      	ldr	r1, [sp, #32]
 800649c:	4623      	mov	r3, r4
 800649e:	4658      	mov	r0, fp
 80064a0:	f001 ffcd 	bl	800843e <__s2b>
 80064a4:	9008      	str	r0, [sp, #32]
 80064a6:	2800      	cmp	r0, #0
 80064a8:	f43f af00 	beq.w	80062ac <_strtod_l+0x434>
 80064ac:	9a07      	ldr	r2, [sp, #28]
 80064ae:	9b07      	ldr	r3, [sp, #28]
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	f1c3 0300 	rsb	r3, r3, #0
 80064b6:	bfa8      	it	ge
 80064b8:	2300      	movge	r3, #0
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	930e      	str	r3, [sp, #56]	; 0x38
 80064c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80064c4:	9316      	str	r3, [sp, #88]	; 0x58
 80064c6:	f8cd 8010 	str.w	r8, [sp, #16]
 80064ca:	9b08      	ldr	r3, [sp, #32]
 80064cc:	4658      	mov	r0, fp
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	f001 ff2f 	bl	8008332 <_Balloc>
 80064d4:	9006      	str	r0, [sp, #24]
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f43f aef0 	beq.w	80062bc <_strtod_l+0x444>
 80064dc:	9b08      	ldr	r3, [sp, #32]
 80064de:	300c      	adds	r0, #12
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	f103 010c 	add.w	r1, r3, #12
 80064e6:	3202      	adds	r2, #2
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	f001 ff17 	bl	800831c <memcpy>
 80064ee:	ab1e      	add	r3, sp, #120	; 0x78
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	ab1d      	add	r3, sp, #116	; 0x74
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	464a      	mov	r2, r9
 80064f8:	4653      	mov	r3, sl
 80064fa:	4658      	mov	r0, fp
 80064fc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006500:	f002 fa58 	bl	80089b4 <__d2b>
 8006504:	901c      	str	r0, [sp, #112]	; 0x70
 8006506:	2800      	cmp	r0, #0
 8006508:	f43f aed8 	beq.w	80062bc <_strtod_l+0x444>
 800650c:	2101      	movs	r1, #1
 800650e:	4658      	mov	r0, fp
 8006510:	f002 f821 	bl	8008556 <__i2b>
 8006514:	9004      	str	r0, [sp, #16]
 8006516:	4603      	mov	r3, r0
 8006518:	2800      	cmp	r0, #0
 800651a:	f43f aecf 	beq.w	80062bc <_strtod_l+0x444>
 800651e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006520:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006522:	2d00      	cmp	r5, #0
 8006524:	bfab      	itete	ge
 8006526:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006528:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800652a:	18ee      	addge	r6, r5, r3
 800652c:	1b5c      	sublt	r4, r3, r5
 800652e:	9b05      	ldr	r3, [sp, #20]
 8006530:	bfa8      	it	ge
 8006532:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006534:	eba5 0503 	sub.w	r5, r5, r3
 8006538:	4415      	add	r5, r2
 800653a:	4b64      	ldr	r3, [pc, #400]	; (80066cc <_strtod_l+0x854>)
 800653c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006540:	bfb8      	it	lt
 8006542:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006544:	429d      	cmp	r5, r3
 8006546:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800654a:	f280 80af 	bge.w	80066ac <_strtod_l+0x834>
 800654e:	1b5b      	subs	r3, r3, r5
 8006550:	2b1f      	cmp	r3, #31
 8006552:	eba2 0203 	sub.w	r2, r2, r3
 8006556:	f04f 0701 	mov.w	r7, #1
 800655a:	f300 809c 	bgt.w	8006696 <_strtod_l+0x81e>
 800655e:	2500      	movs	r5, #0
 8006560:	fa07 f303 	lsl.w	r3, r7, r3
 8006564:	930f      	str	r3, [sp, #60]	; 0x3c
 8006566:	18b7      	adds	r7, r6, r2
 8006568:	9b05      	ldr	r3, [sp, #20]
 800656a:	42be      	cmp	r6, r7
 800656c:	4414      	add	r4, r2
 800656e:	441c      	add	r4, r3
 8006570:	4633      	mov	r3, r6
 8006572:	bfa8      	it	ge
 8006574:	463b      	movge	r3, r7
 8006576:	42a3      	cmp	r3, r4
 8006578:	bfa8      	it	ge
 800657a:	4623      	movge	r3, r4
 800657c:	2b00      	cmp	r3, #0
 800657e:	bfc2      	ittt	gt
 8006580:	1aff      	subgt	r7, r7, r3
 8006582:	1ae4      	subgt	r4, r4, r3
 8006584:	1af6      	subgt	r6, r6, r3
 8006586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006588:	b1bb      	cbz	r3, 80065ba <_strtod_l+0x742>
 800658a:	461a      	mov	r2, r3
 800658c:	9904      	ldr	r1, [sp, #16]
 800658e:	4658      	mov	r0, fp
 8006590:	f002 f880 	bl	8008694 <__pow5mult>
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	2800      	cmp	r0, #0
 8006598:	f43f ae90 	beq.w	80062bc <_strtod_l+0x444>
 800659c:	4601      	mov	r1, r0
 800659e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80065a0:	4658      	mov	r0, fp
 80065a2:	f001 ffe1 	bl	8008568 <__multiply>
 80065a6:	9009      	str	r0, [sp, #36]	; 0x24
 80065a8:	2800      	cmp	r0, #0
 80065aa:	f43f ae87 	beq.w	80062bc <_strtod_l+0x444>
 80065ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80065b0:	4658      	mov	r0, fp
 80065b2:	f001 fef2 	bl	800839a <_Bfree>
 80065b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b8:	931c      	str	r3, [sp, #112]	; 0x70
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	dc7a      	bgt.n	80066b4 <_strtod_l+0x83c>
 80065be:	9b07      	ldr	r3, [sp, #28]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dd08      	ble.n	80065d6 <_strtod_l+0x75e>
 80065c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80065c6:	9906      	ldr	r1, [sp, #24]
 80065c8:	4658      	mov	r0, fp
 80065ca:	f002 f863 	bl	8008694 <__pow5mult>
 80065ce:	9006      	str	r0, [sp, #24]
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f43f ae73 	beq.w	80062bc <_strtod_l+0x444>
 80065d6:	2c00      	cmp	r4, #0
 80065d8:	dd08      	ble.n	80065ec <_strtod_l+0x774>
 80065da:	4622      	mov	r2, r4
 80065dc:	9906      	ldr	r1, [sp, #24]
 80065de:	4658      	mov	r0, fp
 80065e0:	f002 f8a6 	bl	8008730 <__lshift>
 80065e4:	9006      	str	r0, [sp, #24]
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f43f ae68 	beq.w	80062bc <_strtod_l+0x444>
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	dd08      	ble.n	8006602 <_strtod_l+0x78a>
 80065f0:	4632      	mov	r2, r6
 80065f2:	9904      	ldr	r1, [sp, #16]
 80065f4:	4658      	mov	r0, fp
 80065f6:	f002 f89b 	bl	8008730 <__lshift>
 80065fa:	9004      	str	r0, [sp, #16]
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f43f ae5d 	beq.w	80062bc <_strtod_l+0x444>
 8006602:	9a06      	ldr	r2, [sp, #24]
 8006604:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006606:	4658      	mov	r0, fp
 8006608:	f002 f900 	bl	800880c <__mdiff>
 800660c:	4680      	mov	r8, r0
 800660e:	2800      	cmp	r0, #0
 8006610:	f43f ae54 	beq.w	80062bc <_strtod_l+0x444>
 8006614:	2400      	movs	r4, #0
 8006616:	68c3      	ldr	r3, [r0, #12]
 8006618:	9904      	ldr	r1, [sp, #16]
 800661a:	60c4      	str	r4, [r0, #12]
 800661c:	930c      	str	r3, [sp, #48]	; 0x30
 800661e:	f002 f8db 	bl	80087d8 <__mcmp>
 8006622:	42a0      	cmp	r0, r4
 8006624:	da54      	bge.n	80066d0 <_strtod_l+0x858>
 8006626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006628:	b9f3      	cbnz	r3, 8006668 <_strtod_l+0x7f0>
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	d11b      	bne.n	8006668 <_strtod_l+0x7f0>
 8006630:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006634:	b9c3      	cbnz	r3, 8006668 <_strtod_l+0x7f0>
 8006636:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800663a:	0d1b      	lsrs	r3, r3, #20
 800663c:	051b      	lsls	r3, r3, #20
 800663e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006642:	d911      	bls.n	8006668 <_strtod_l+0x7f0>
 8006644:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006648:	b91b      	cbnz	r3, 8006652 <_strtod_l+0x7da>
 800664a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800664e:	2b01      	cmp	r3, #1
 8006650:	dd0a      	ble.n	8006668 <_strtod_l+0x7f0>
 8006652:	4641      	mov	r1, r8
 8006654:	2201      	movs	r2, #1
 8006656:	4658      	mov	r0, fp
 8006658:	f002 f86a 	bl	8008730 <__lshift>
 800665c:	9904      	ldr	r1, [sp, #16]
 800665e:	4680      	mov	r8, r0
 8006660:	f002 f8ba 	bl	80087d8 <__mcmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	dc68      	bgt.n	800673a <_strtod_l+0x8c2>
 8006668:	9b05      	ldr	r3, [sp, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d172      	bne.n	8006754 <_strtod_l+0x8dc>
 800666e:	e630      	b.n	80062d2 <_strtod_l+0x45a>
 8006670:	f018 0f01 	tst.w	r8, #1
 8006674:	d004      	beq.n	8006680 <_strtod_l+0x808>
 8006676:	e9d5 2300 	ldrd	r2, r3, [r5]
 800667a:	f7f9 ff2d 	bl	80004d8 <__aeabi_dmul>
 800667e:	2301      	movs	r3, #1
 8006680:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006684:	3508      	adds	r5, #8
 8006686:	e6dc      	b.n	8006442 <_strtod_l+0x5ca>
 8006688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	ea03 0909 	and.w	r9, r3, r9
 8006694:	e6f6      	b.n	8006484 <_strtod_l+0x60c>
 8006696:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800669a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800669e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80066a2:	35e2      	adds	r5, #226	; 0xe2
 80066a4:	fa07 f505 	lsl.w	r5, r7, r5
 80066a8:	970f      	str	r7, [sp, #60]	; 0x3c
 80066aa:	e75c      	b.n	8006566 <_strtod_l+0x6ee>
 80066ac:	2301      	movs	r3, #1
 80066ae:	2500      	movs	r5, #0
 80066b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80066b2:	e758      	b.n	8006566 <_strtod_l+0x6ee>
 80066b4:	463a      	mov	r2, r7
 80066b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066b8:	4658      	mov	r0, fp
 80066ba:	f002 f839 	bl	8008730 <__lshift>
 80066be:	901c      	str	r0, [sp, #112]	; 0x70
 80066c0:	2800      	cmp	r0, #0
 80066c2:	f47f af7c 	bne.w	80065be <_strtod_l+0x746>
 80066c6:	e5f9      	b.n	80062bc <_strtod_l+0x444>
 80066c8:	08009300 	.word	0x08009300
 80066cc:	fffffc02 	.word	0xfffffc02
 80066d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80066d4:	f040 8089 	bne.w	80067ea <_strtod_l+0x972>
 80066d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066da:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80066de:	b342      	cbz	r2, 8006732 <_strtod_l+0x8ba>
 80066e0:	4aaf      	ldr	r2, [pc, #700]	; (80069a0 <_strtod_l+0xb28>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d156      	bne.n	8006794 <_strtod_l+0x91c>
 80066e6:	9b05      	ldr	r3, [sp, #20]
 80066e8:	4648      	mov	r0, r9
 80066ea:	b1eb      	cbz	r3, 8006728 <_strtod_l+0x8b0>
 80066ec:	4653      	mov	r3, sl
 80066ee:	4aad      	ldr	r2, [pc, #692]	; (80069a4 <_strtod_l+0xb2c>)
 80066f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066f4:	401a      	ands	r2, r3
 80066f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80066fa:	d818      	bhi.n	800672e <_strtod_l+0x8b6>
 80066fc:	0d12      	lsrs	r2, r2, #20
 80066fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006702:	fa01 f303 	lsl.w	r3, r1, r3
 8006706:	4298      	cmp	r0, r3
 8006708:	d144      	bne.n	8006794 <_strtod_l+0x91c>
 800670a:	4ba7      	ldr	r3, [pc, #668]	; (80069a8 <_strtod_l+0xb30>)
 800670c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800670e:	429a      	cmp	r2, r3
 8006710:	d102      	bne.n	8006718 <_strtod_l+0x8a0>
 8006712:	3001      	adds	r0, #1
 8006714:	f43f add2 	beq.w	80062bc <_strtod_l+0x444>
 8006718:	4ba2      	ldr	r3, [pc, #648]	; (80069a4 <_strtod_l+0xb2c>)
 800671a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800671c:	f04f 0900 	mov.w	r9, #0
 8006720:	401a      	ands	r2, r3
 8006722:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006726:	e79f      	b.n	8006668 <_strtod_l+0x7f0>
 8006728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800672c:	e7eb      	b.n	8006706 <_strtod_l+0x88e>
 800672e:	460b      	mov	r3, r1
 8006730:	e7e9      	b.n	8006706 <_strtod_l+0x88e>
 8006732:	bb7b      	cbnz	r3, 8006794 <_strtod_l+0x91c>
 8006734:	f1b9 0f00 	cmp.w	r9, #0
 8006738:	d12c      	bne.n	8006794 <_strtod_l+0x91c>
 800673a:	9905      	ldr	r1, [sp, #20]
 800673c:	4653      	mov	r3, sl
 800673e:	4a99      	ldr	r2, [pc, #612]	; (80069a4 <_strtod_l+0xb2c>)
 8006740:	b1f1      	cbz	r1, 8006780 <_strtod_l+0x908>
 8006742:	ea02 010a 	and.w	r1, r2, sl
 8006746:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800674a:	dc19      	bgt.n	8006780 <_strtod_l+0x908>
 800674c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006750:	f77f ae51 	ble.w	80063f6 <_strtod_l+0x57e>
 8006754:	2300      	movs	r3, #0
 8006756:	4a95      	ldr	r2, [pc, #596]	; (80069ac <_strtod_l+0xb34>)
 8006758:	4648      	mov	r0, r9
 800675a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800675e:	4651      	mov	r1, sl
 8006760:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006764:	f7f9 feb8 	bl	80004d8 <__aeabi_dmul>
 8006768:	4681      	mov	r9, r0
 800676a:	468a      	mov	sl, r1
 800676c:	2900      	cmp	r1, #0
 800676e:	f47f adb0 	bne.w	80062d2 <_strtod_l+0x45a>
 8006772:	2800      	cmp	r0, #0
 8006774:	f47f adad 	bne.w	80062d2 <_strtod_l+0x45a>
 8006778:	2322      	movs	r3, #34	; 0x22
 800677a:	f8cb 3000 	str.w	r3, [fp]
 800677e:	e5a8      	b.n	80062d2 <_strtod_l+0x45a>
 8006780:	4013      	ands	r3, r2
 8006782:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006786:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800678a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800678e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006792:	e769      	b.n	8006668 <_strtod_l+0x7f0>
 8006794:	b19d      	cbz	r5, 80067be <_strtod_l+0x946>
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	421d      	tst	r5, r3
 800679a:	f43f af65 	beq.w	8006668 <_strtod_l+0x7f0>
 800679e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067a0:	9a05      	ldr	r2, [sp, #20]
 80067a2:	4648      	mov	r0, r9
 80067a4:	4651      	mov	r1, sl
 80067a6:	b173      	cbz	r3, 80067c6 <_strtod_l+0x94e>
 80067a8:	f7ff fb42 	bl	8005e30 <sulp>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067b4:	f7f9 fcda 	bl	800016c <__adddf3>
 80067b8:	4681      	mov	r9, r0
 80067ba:	468a      	mov	sl, r1
 80067bc:	e754      	b.n	8006668 <_strtod_l+0x7f0>
 80067be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067c0:	ea13 0f09 	tst.w	r3, r9
 80067c4:	e7e9      	b.n	800679a <_strtod_l+0x922>
 80067c6:	f7ff fb33 	bl	8005e30 <sulp>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067d2:	f7f9 fcc9 	bl	8000168 <__aeabi_dsub>
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	4681      	mov	r9, r0
 80067dc:	468a      	mov	sl, r1
 80067de:	f7fa f8e3 	bl	80009a8 <__aeabi_dcmpeq>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	f47f ae07 	bne.w	80063f6 <_strtod_l+0x57e>
 80067e8:	e73e      	b.n	8006668 <_strtod_l+0x7f0>
 80067ea:	9904      	ldr	r1, [sp, #16]
 80067ec:	4640      	mov	r0, r8
 80067ee:	f002 f930 	bl	8008a52 <__ratio>
 80067f2:	2200      	movs	r2, #0
 80067f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067f8:	4606      	mov	r6, r0
 80067fa:	460f      	mov	r7, r1
 80067fc:	f7fa f8e8 	bl	80009d0 <__aeabi_dcmple>
 8006800:	2800      	cmp	r0, #0
 8006802:	d075      	beq.n	80068f0 <_strtod_l+0xa78>
 8006804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006806:	2b00      	cmp	r3, #0
 8006808:	d047      	beq.n	800689a <_strtod_l+0xa22>
 800680a:	2600      	movs	r6, #0
 800680c:	4f68      	ldr	r7, [pc, #416]	; (80069b0 <_strtod_l+0xb38>)
 800680e:	4d68      	ldr	r5, [pc, #416]	; (80069b0 <_strtod_l+0xb38>)
 8006810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006816:	0d1b      	lsrs	r3, r3, #20
 8006818:	051b      	lsls	r3, r3, #20
 800681a:	930f      	str	r3, [sp, #60]	; 0x3c
 800681c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800681e:	4b65      	ldr	r3, [pc, #404]	; (80069b4 <_strtod_l+0xb3c>)
 8006820:	429a      	cmp	r2, r3
 8006822:	f040 80cf 	bne.w	80069c4 <_strtod_l+0xb4c>
 8006826:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800682a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800682e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006830:	4648      	mov	r0, r9
 8006832:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006836:	4651      	mov	r1, sl
 8006838:	f002 f846 	bl	80088c8 <__ulp>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fe48 	bl	80004d8 <__aeabi_dmul>
 8006848:	464a      	mov	r2, r9
 800684a:	4653      	mov	r3, sl
 800684c:	f7f9 fc8e 	bl	800016c <__adddf3>
 8006850:	460b      	mov	r3, r1
 8006852:	4954      	ldr	r1, [pc, #336]	; (80069a4 <_strtod_l+0xb2c>)
 8006854:	4a58      	ldr	r2, [pc, #352]	; (80069b8 <_strtod_l+0xb40>)
 8006856:	4019      	ands	r1, r3
 8006858:	4291      	cmp	r1, r2
 800685a:	4681      	mov	r9, r0
 800685c:	d95e      	bls.n	800691c <_strtod_l+0xaa4>
 800685e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006860:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006864:	4293      	cmp	r3, r2
 8006866:	d103      	bne.n	8006870 <_strtod_l+0x9f8>
 8006868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686a:	3301      	adds	r3, #1
 800686c:	f43f ad26 	beq.w	80062bc <_strtod_l+0x444>
 8006870:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006874:	f8df a130 	ldr.w	sl, [pc, #304]	; 80069a8 <_strtod_l+0xb30>
 8006878:	991c      	ldr	r1, [sp, #112]	; 0x70
 800687a:	4658      	mov	r0, fp
 800687c:	f001 fd8d 	bl	800839a <_Bfree>
 8006880:	9906      	ldr	r1, [sp, #24]
 8006882:	4658      	mov	r0, fp
 8006884:	f001 fd89 	bl	800839a <_Bfree>
 8006888:	9904      	ldr	r1, [sp, #16]
 800688a:	4658      	mov	r0, fp
 800688c:	f001 fd85 	bl	800839a <_Bfree>
 8006890:	4641      	mov	r1, r8
 8006892:	4658      	mov	r0, fp
 8006894:	f001 fd81 	bl	800839a <_Bfree>
 8006898:	e617      	b.n	80064ca <_strtod_l+0x652>
 800689a:	f1b9 0f00 	cmp.w	r9, #0
 800689e:	d119      	bne.n	80068d4 <_strtod_l+0xa5c>
 80068a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a6:	b9e3      	cbnz	r3, 80068e2 <_strtod_l+0xa6a>
 80068a8:	2200      	movs	r2, #0
 80068aa:	4b41      	ldr	r3, [pc, #260]	; (80069b0 <_strtod_l+0xb38>)
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7fa f884 	bl	80009bc <__aeabi_dcmplt>
 80068b4:	b9c8      	cbnz	r0, 80068ea <_strtod_l+0xa72>
 80068b6:	2200      	movs	r2, #0
 80068b8:	4b40      	ldr	r3, [pc, #256]	; (80069bc <_strtod_l+0xb44>)
 80068ba:	4630      	mov	r0, r6
 80068bc:	4639      	mov	r1, r7
 80068be:	f7f9 fe0b 	bl	80004d8 <__aeabi_dmul>
 80068c2:	4604      	mov	r4, r0
 80068c4:	460d      	mov	r5, r1
 80068c6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80068ca:	9418      	str	r4, [sp, #96]	; 0x60
 80068cc:	9319      	str	r3, [sp, #100]	; 0x64
 80068ce:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80068d2:	e79d      	b.n	8006810 <_strtod_l+0x998>
 80068d4:	f1b9 0f01 	cmp.w	r9, #1
 80068d8:	d103      	bne.n	80068e2 <_strtod_l+0xa6a>
 80068da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f43f ad8a 	beq.w	80063f6 <_strtod_l+0x57e>
 80068e2:	2600      	movs	r6, #0
 80068e4:	4f36      	ldr	r7, [pc, #216]	; (80069c0 <_strtod_l+0xb48>)
 80068e6:	2400      	movs	r4, #0
 80068e8:	e791      	b.n	800680e <_strtod_l+0x996>
 80068ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80068ec:	4d33      	ldr	r5, [pc, #204]	; (80069bc <_strtod_l+0xb44>)
 80068ee:	e7ea      	b.n	80068c6 <_strtod_l+0xa4e>
 80068f0:	4b32      	ldr	r3, [pc, #200]	; (80069bc <_strtod_l+0xb44>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7f9 fdee 	bl	80004d8 <__aeabi_dmul>
 80068fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068fe:	4604      	mov	r4, r0
 8006900:	460d      	mov	r5, r1
 8006902:	b933      	cbnz	r3, 8006912 <_strtod_l+0xa9a>
 8006904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006908:	9010      	str	r0, [sp, #64]	; 0x40
 800690a:	9311      	str	r3, [sp, #68]	; 0x44
 800690c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006910:	e77e      	b.n	8006810 <_strtod_l+0x998>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800691a:	e7f7      	b.n	800690c <_strtod_l+0xa94>
 800691c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1a8      	bne.n	8006878 <_strtod_l+0xa00>
 8006926:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800692a:	0d1b      	lsrs	r3, r3, #20
 800692c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800692e:	051b      	lsls	r3, r3, #20
 8006930:	429a      	cmp	r2, r3
 8006932:	4656      	mov	r6, sl
 8006934:	d1a0      	bne.n	8006878 <_strtod_l+0xa00>
 8006936:	4629      	mov	r1, r5
 8006938:	4620      	mov	r0, r4
 800693a:	f7fa f87d 	bl	8000a38 <__aeabi_d2iz>
 800693e:	f7f9 fd61 	bl	8000404 <__aeabi_i2d>
 8006942:	460b      	mov	r3, r1
 8006944:	4602      	mov	r2, r0
 8006946:	4629      	mov	r1, r5
 8006948:	4620      	mov	r0, r4
 800694a:	f7f9 fc0d 	bl	8000168 <__aeabi_dsub>
 800694e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006950:	4604      	mov	r4, r0
 8006952:	460d      	mov	r5, r1
 8006954:	b933      	cbnz	r3, 8006964 <_strtod_l+0xaec>
 8006956:	f1b9 0f00 	cmp.w	r9, #0
 800695a:	d103      	bne.n	8006964 <_strtod_l+0xaec>
 800695c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006960:	2e00      	cmp	r6, #0
 8006962:	d06a      	beq.n	8006a3a <_strtod_l+0xbc2>
 8006964:	a30a      	add	r3, pc, #40	; (adr r3, 8006990 <_strtod_l+0xb18>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	f7fa f825 	bl	80009bc <__aeabi_dcmplt>
 8006972:	2800      	cmp	r0, #0
 8006974:	f47f acad 	bne.w	80062d2 <_strtod_l+0x45a>
 8006978:	a307      	add	r3, pc, #28	; (adr r3, 8006998 <_strtod_l+0xb20>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	f7fa f839 	bl	80009f8 <__aeabi_dcmpgt>
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f af76 	beq.w	8006878 <_strtod_l+0xa00>
 800698c:	e4a1      	b.n	80062d2 <_strtod_l+0x45a>
 800698e:	bf00      	nop
 8006990:	94a03595 	.word	0x94a03595
 8006994:	3fdfffff 	.word	0x3fdfffff
 8006998:	35afe535 	.word	0x35afe535
 800699c:	3fe00000 	.word	0x3fe00000
 80069a0:	000fffff 	.word	0x000fffff
 80069a4:	7ff00000 	.word	0x7ff00000
 80069a8:	7fefffff 	.word	0x7fefffff
 80069ac:	39500000 	.word	0x39500000
 80069b0:	3ff00000 	.word	0x3ff00000
 80069b4:	7fe00000 	.word	0x7fe00000
 80069b8:	7c9fffff 	.word	0x7c9fffff
 80069bc:	3fe00000 	.word	0x3fe00000
 80069c0:	bff00000 	.word	0xbff00000
 80069c4:	9b05      	ldr	r3, [sp, #20]
 80069c6:	b313      	cbz	r3, 8006a0e <_strtod_l+0xb96>
 80069c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80069ce:	d81e      	bhi.n	8006a0e <_strtod_l+0xb96>
 80069d0:	a325      	add	r3, pc, #148	; (adr r3, 8006a68 <_strtod_l+0xbf0>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	f7f9 fff9 	bl	80009d0 <__aeabi_dcmple>
 80069de:	b190      	cbz	r0, 8006a06 <_strtod_l+0xb8e>
 80069e0:	4629      	mov	r1, r5
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7fa f850 	bl	8000a88 <__aeabi_d2uiz>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	bf08      	it	eq
 80069ec:	2001      	moveq	r0, #1
 80069ee:	f7f9 fcf9 	bl	80003e4 <__aeabi_ui2d>
 80069f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069f4:	4604      	mov	r4, r0
 80069f6:	460d      	mov	r5, r1
 80069f8:	b9d3      	cbnz	r3, 8006a30 <_strtod_l+0xbb8>
 80069fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069fe:	9012      	str	r0, [sp, #72]	; 0x48
 8006a00:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a02:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a08:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006a0c:	1a9f      	subs	r7, r3, r2
 8006a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a12:	f001 ff59 	bl	80088c8 <__ulp>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7f9 fd5b 	bl	80004d8 <__aeabi_dmul>
 8006a22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a26:	f7f9 fba1 	bl	800016c <__adddf3>
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	468a      	mov	sl, r1
 8006a2e:	e777      	b.n	8006920 <_strtod_l+0xaa8>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006a38:	e7e3      	b.n	8006a02 <_strtod_l+0xb8a>
 8006a3a:	a30d      	add	r3, pc, #52	; (adr r3, 8006a70 <_strtod_l+0xbf8>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 ffbc 	bl	80009bc <__aeabi_dcmplt>
 8006a44:	e79f      	b.n	8006986 <_strtod_l+0xb0e>
 8006a46:	2300      	movs	r3, #0
 8006a48:	930d      	str	r3, [sp, #52]	; 0x34
 8006a4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	f7ff ba55 	b.w	8005efe <_strtod_l+0x86>
 8006a54:	2b65      	cmp	r3, #101	; 0x65
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f43f ab42 	beq.w	80060e2 <_strtod_l+0x26a>
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4614      	mov	r4, r2
 8006a62:	9105      	str	r1, [sp, #20]
 8006a64:	f7ff babf 	b.w	8005fe6 <_strtod_l+0x16e>
 8006a68:	ffc00000 	.word	0xffc00000
 8006a6c:	41dfffff 	.word	0x41dfffff
 8006a70:	94a03595 	.word	0x94a03595
 8006a74:	3fcfffff 	.word	0x3fcfffff

08006a78 <strtod>:
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <strtod+0x1c>)
 8006a7a:	b410      	push	{r4}
 8006a7c:	681c      	ldr	r4, [r3, #0]
 8006a7e:	4a06      	ldr	r2, [pc, #24]	; (8006a98 <strtod+0x20>)
 8006a80:	6a23      	ldr	r3, [r4, #32]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bf08      	it	eq
 8006a86:	4613      	moveq	r3, r2
 8006a88:	460a      	mov	r2, r1
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	bc10      	pop	{r4}
 8006a90:	f7ff b9f2 	b.w	8005e78 <_strtod_l>
 8006a94:	20000050 	.word	0x20000050
 8006a98:	200000b4 	.word	0x200000b4

08006a9c <__swbuf_r>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	460e      	mov	r6, r1
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	b118      	cbz	r0, 8006aae <__swbuf_r+0x12>
 8006aa6:	6983      	ldr	r3, [r0, #24]
 8006aa8:	b90b      	cbnz	r3, 8006aae <__swbuf_r+0x12>
 8006aaa:	f000 ffe9 	bl	8007a80 <__sinit>
 8006aae:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <__swbuf_r+0x98>)
 8006ab0:	429c      	cmp	r4, r3
 8006ab2:	d12a      	bne.n	8006b0a <__swbuf_r+0x6e>
 8006ab4:	686c      	ldr	r4, [r5, #4]
 8006ab6:	69a3      	ldr	r3, [r4, #24]
 8006ab8:	60a3      	str	r3, [r4, #8]
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	071a      	lsls	r2, r3, #28
 8006abe:	d52e      	bpl.n	8006b1e <__swbuf_r+0x82>
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	b363      	cbz	r3, 8006b1e <__swbuf_r+0x82>
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	6820      	ldr	r0, [r4, #0]
 8006ac8:	b2f6      	uxtb	r6, r6
 8006aca:	1ac0      	subs	r0, r0, r3
 8006acc:	6963      	ldr	r3, [r4, #20]
 8006ace:	4637      	mov	r7, r6
 8006ad0:	4283      	cmp	r3, r0
 8006ad2:	dc04      	bgt.n	8006ade <__swbuf_r+0x42>
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 ff68 	bl	80079ac <_fflush_r>
 8006adc:	bb28      	cbnz	r0, 8006b2a <__swbuf_r+0x8e>
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	60a3      	str	r3, [r4, #8]
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	6022      	str	r2, [r4, #0]
 8006aec:	701e      	strb	r6, [r3, #0]
 8006aee:	6963      	ldr	r3, [r4, #20]
 8006af0:	4283      	cmp	r3, r0
 8006af2:	d004      	beq.n	8006afe <__swbuf_r+0x62>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	07db      	lsls	r3, r3, #31
 8006af8:	d519      	bpl.n	8006b2e <__swbuf_r+0x92>
 8006afa:	2e0a      	cmp	r6, #10
 8006afc:	d117      	bne.n	8006b2e <__swbuf_r+0x92>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 ff53 	bl	80079ac <_fflush_r>
 8006b06:	b190      	cbz	r0, 8006b2e <__swbuf_r+0x92>
 8006b08:	e00f      	b.n	8006b2a <__swbuf_r+0x8e>
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <__swbuf_r+0x9c>)
 8006b0c:	429c      	cmp	r4, r3
 8006b0e:	d101      	bne.n	8006b14 <__swbuf_r+0x78>
 8006b10:	68ac      	ldr	r4, [r5, #8]
 8006b12:	e7d0      	b.n	8006ab6 <__swbuf_r+0x1a>
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <__swbuf_r+0xa0>)
 8006b16:	429c      	cmp	r4, r3
 8006b18:	bf08      	it	eq
 8006b1a:	68ec      	ldreq	r4, [r5, #12]
 8006b1c:	e7cb      	b.n	8006ab6 <__swbuf_r+0x1a>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 f80d 	bl	8006b40 <__swsetup_r>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0cc      	beq.n	8006ac4 <__swbuf_r+0x28>
 8006b2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006b2e:	4638      	mov	r0, r7
 8006b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b32:	bf00      	nop
 8006b34:	08009358 	.word	0x08009358
 8006b38:	08009378 	.word	0x08009378
 8006b3c:	08009338 	.word	0x08009338

08006b40 <__swsetup_r>:
 8006b40:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <__swsetup_r+0xcc>)
 8006b42:	b570      	push	{r4, r5, r6, lr}
 8006b44:	681d      	ldr	r5, [r3, #0]
 8006b46:	4606      	mov	r6, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	b125      	cbz	r5, 8006b56 <__swsetup_r+0x16>
 8006b4c:	69ab      	ldr	r3, [r5, #24]
 8006b4e:	b913      	cbnz	r3, 8006b56 <__swsetup_r+0x16>
 8006b50:	4628      	mov	r0, r5
 8006b52:	f000 ff95 	bl	8007a80 <__sinit>
 8006b56:	4b2e      	ldr	r3, [pc, #184]	; (8006c10 <__swsetup_r+0xd0>)
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	d10f      	bne.n	8006b7c <__swsetup_r+0x3c>
 8006b5c:	686c      	ldr	r4, [r5, #4]
 8006b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	0715      	lsls	r5, r2, #28
 8006b66:	d42c      	bmi.n	8006bc2 <__swsetup_r+0x82>
 8006b68:	06d0      	lsls	r0, r2, #27
 8006b6a:	d411      	bmi.n	8006b90 <__swsetup_r+0x50>
 8006b6c:	2209      	movs	r2, #9
 8006b6e:	6032      	str	r2, [r6, #0]
 8006b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b7a:	e03e      	b.n	8006bfa <__swsetup_r+0xba>
 8006b7c:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <__swsetup_r+0xd4>)
 8006b7e:	429c      	cmp	r4, r3
 8006b80:	d101      	bne.n	8006b86 <__swsetup_r+0x46>
 8006b82:	68ac      	ldr	r4, [r5, #8]
 8006b84:	e7eb      	b.n	8006b5e <__swsetup_r+0x1e>
 8006b86:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <__swsetup_r+0xd8>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	bf08      	it	eq
 8006b8c:	68ec      	ldreq	r4, [r5, #12]
 8006b8e:	e7e6      	b.n	8006b5e <__swsetup_r+0x1e>
 8006b90:	0751      	lsls	r1, r2, #29
 8006b92:	d512      	bpl.n	8006bba <__swsetup_r+0x7a>
 8006b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b96:	b141      	cbz	r1, 8006baa <__swsetup_r+0x6a>
 8006b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b9c:	4299      	cmp	r1, r3
 8006b9e:	d002      	beq.n	8006ba6 <__swsetup_r+0x66>
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f001 ffcd 	bl	8008b40 <_free_r>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6063      	str	r3, [r4, #4]
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f043 0308 	orr.w	r3, r3, #8
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	b94b      	cbnz	r3, 8006bda <__swsetup_r+0x9a>
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd0:	d003      	beq.n	8006bda <__swsetup_r+0x9a>
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f001 fb39 	bl	800824c <__smakebuf_r>
 8006bda:	89a2      	ldrh	r2, [r4, #12]
 8006bdc:	f012 0301 	ands.w	r3, r2, #1
 8006be0:	d00c      	beq.n	8006bfc <__swsetup_r+0xbc>
 8006be2:	2300      	movs	r3, #0
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	6963      	ldr	r3, [r4, #20]
 8006be8:	425b      	negs	r3, r3
 8006bea:	61a3      	str	r3, [r4, #24]
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	b953      	cbnz	r3, 8006c06 <__swsetup_r+0xc6>
 8006bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006bf8:	d1ba      	bne.n	8006b70 <__swsetup_r+0x30>
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	0792      	lsls	r2, r2, #30
 8006bfe:	bf58      	it	pl
 8006c00:	6963      	ldrpl	r3, [r4, #20]
 8006c02:	60a3      	str	r3, [r4, #8]
 8006c04:	e7f2      	b.n	8006bec <__swsetup_r+0xac>
 8006c06:	2000      	movs	r0, #0
 8006c08:	e7f7      	b.n	8006bfa <__swsetup_r+0xba>
 8006c0a:	bf00      	nop
 8006c0c:	20000050 	.word	0x20000050
 8006c10:	08009358 	.word	0x08009358
 8006c14:	08009378 	.word	0x08009378
 8006c18:	08009338 	.word	0x08009338

08006c1c <quorem>:
 8006c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	6903      	ldr	r3, [r0, #16]
 8006c22:	690c      	ldr	r4, [r1, #16]
 8006c24:	4680      	mov	r8, r0
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	f2c0 8084 	blt.w	8006d34 <quorem+0x118>
 8006c2c:	3c01      	subs	r4, #1
 8006c2e:	f101 0714 	add.w	r7, r1, #20
 8006c32:	f100 0614 	add.w	r6, r0, #20
 8006c36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006c3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006c3e:	3501      	adds	r5, #1
 8006c40:	fbb0 f5f5 	udiv	r5, r0, r5
 8006c44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006c48:	eb06 030c 	add.w	r3, r6, ip
 8006c4c:	eb07 090c 	add.w	r9, r7, ip
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	b39d      	cbz	r5, 8006cbc <quorem+0xa0>
 8006c54:	f04f 0a00 	mov.w	sl, #0
 8006c58:	4638      	mov	r0, r7
 8006c5a:	46b6      	mov	lr, r6
 8006c5c:	46d3      	mov	fp, sl
 8006c5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c62:	b293      	uxth	r3, r2
 8006c64:	fb05 a303 	mla	r3, r5, r3, sl
 8006c68:	0c12      	lsrs	r2, r2, #16
 8006c6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c6e:	fb05 a202 	mla	r2, r5, r2, sl
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ebab 0303 	sub.w	r3, fp, r3
 8006c78:	f8de b000 	ldr.w	fp, [lr]
 8006c7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006c80:	fa1f fb8b 	uxth.w	fp, fp
 8006c84:	445b      	add	r3, fp
 8006c86:	fa1f fb82 	uxth.w	fp, r2
 8006c8a:	f8de 2000 	ldr.w	r2, [lr]
 8006c8e:	4581      	cmp	r9, r0
 8006c90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006ca2:	f84e 3b04 	str.w	r3, [lr], #4
 8006ca6:	d2da      	bcs.n	8006c5e <quorem+0x42>
 8006ca8:	f856 300c 	ldr.w	r3, [r6, ip]
 8006cac:	b933      	cbnz	r3, 8006cbc <quorem+0xa0>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	429e      	cmp	r6, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	d331      	bcc.n	8006d1c <quorem+0x100>
 8006cb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	f001 fd8b 	bl	80087d8 <__mcmp>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	db26      	blt.n	8006d14 <quorem+0xf8>
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f04f 0c00 	mov.w	ip, #0
 8006ccc:	3501      	adds	r5, #1
 8006cce:	f857 1b04 	ldr.w	r1, [r7], #4
 8006cd2:	f8d0 e000 	ldr.w	lr, [r0]
 8006cd6:	b28b      	uxth	r3, r1
 8006cd8:	ebac 0303 	sub.w	r3, ip, r3
 8006cdc:	fa1f f28e 	uxth.w	r2, lr
 8006ce0:	4413      	add	r3, r2
 8006ce2:	0c0a      	lsrs	r2, r1, #16
 8006ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cf2:	45b9      	cmp	r9, r7
 8006cf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cf8:	f840 3b04 	str.w	r3, [r0], #4
 8006cfc:	d2e7      	bcs.n	8006cce <quorem+0xb2>
 8006cfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006d02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006d06:	b92a      	cbnz	r2, 8006d14 <quorem+0xf8>
 8006d08:	3b04      	subs	r3, #4
 8006d0a:	429e      	cmp	r6, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	d30b      	bcc.n	8006d28 <quorem+0x10c>
 8006d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8006d14:	4628      	mov	r0, r5
 8006d16:	b003      	add	sp, #12
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d1c9      	bne.n	8006cb8 <quorem+0x9c>
 8006d24:	3c01      	subs	r4, #1
 8006d26:	e7c4      	b.n	8006cb2 <quorem+0x96>
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	3b04      	subs	r3, #4
 8006d2c:	2a00      	cmp	r2, #0
 8006d2e:	d1ef      	bne.n	8006d10 <quorem+0xf4>
 8006d30:	3c01      	subs	r4, #1
 8006d32:	e7ea      	b.n	8006d0a <quorem+0xee>
 8006d34:	2000      	movs	r0, #0
 8006d36:	e7ee      	b.n	8006d16 <quorem+0xfa>

08006d38 <_dtoa_r>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	461f      	mov	r7, r3
 8006d40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d42:	b095      	sub	sp, #84	; 0x54
 8006d44:	4604      	mov	r4, r0
 8006d46:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006d4a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d4e:	b93d      	cbnz	r5, 8006d60 <_dtoa_r+0x28>
 8006d50:	2010      	movs	r0, #16
 8006d52:	f001 fabb 	bl	80082cc <malloc>
 8006d56:	6260      	str	r0, [r4, #36]	; 0x24
 8006d58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d5c:	6005      	str	r5, [r0, #0]
 8006d5e:	60c5      	str	r5, [r0, #12]
 8006d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	b151      	cbz	r1, 8006d7c <_dtoa_r+0x44>
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4093      	lsls	r3, r2
 8006d6c:	604a      	str	r2, [r1, #4]
 8006d6e:	608b      	str	r3, [r1, #8]
 8006d70:	4620      	mov	r0, r4
 8006d72:	f001 fb12 	bl	800839a <_Bfree>
 8006d76:	2200      	movs	r2, #0
 8006d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	1e3b      	subs	r3, r7, #0
 8006d7e:	bfaf      	iteee	ge
 8006d80:	2300      	movge	r3, #0
 8006d82:	2201      	movlt	r2, #1
 8006d84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d88:	9303      	strlt	r3, [sp, #12]
 8006d8a:	bfac      	ite	ge
 8006d8c:	f8c8 3000 	strge.w	r3, [r8]
 8006d90:	f8c8 2000 	strlt.w	r2, [r8]
 8006d94:	4bae      	ldr	r3, [pc, #696]	; (8007050 <_dtoa_r+0x318>)
 8006d96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d9a:	ea33 0308 	bics.w	r3, r3, r8
 8006d9e:	d11b      	bne.n	8006dd8 <_dtoa_r+0xa0>
 8006da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006da4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	9b02      	ldr	r3, [sp, #8]
 8006daa:	b923      	cbnz	r3, 8006db6 <_dtoa_r+0x7e>
 8006dac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006db0:	2800      	cmp	r0, #0
 8006db2:	f000 8545 	beq.w	8007840 <_dtoa_r+0xb08>
 8006db6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006db8:	b953      	cbnz	r3, 8006dd0 <_dtoa_r+0x98>
 8006dba:	4ba6      	ldr	r3, [pc, #664]	; (8007054 <_dtoa_r+0x31c>)
 8006dbc:	e021      	b.n	8006e02 <_dtoa_r+0xca>
 8006dbe:	4ba6      	ldr	r3, [pc, #664]	; (8007058 <_dtoa_r+0x320>)
 8006dc0:	9306      	str	r3, [sp, #24]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	9806      	ldr	r0, [sp, #24]
 8006dca:	b015      	add	sp, #84	; 0x54
 8006dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd0:	4ba0      	ldr	r3, [pc, #640]	; (8007054 <_dtoa_r+0x31c>)
 8006dd2:	9306      	str	r3, [sp, #24]
 8006dd4:	3303      	adds	r3, #3
 8006dd6:	e7f5      	b.n	8006dc4 <_dtoa_r+0x8c>
 8006dd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2300      	movs	r3, #0
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8006de8:	4682      	mov	sl, r0
 8006dea:	b160      	cbz	r0, 8006e06 <_dtoa_r+0xce>
 8006dec:	2301      	movs	r3, #1
 8006dee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8520 	beq.w	800783a <_dtoa_r+0xb02>
 8006dfa:	4b98      	ldr	r3, [pc, #608]	; (800705c <_dtoa_r+0x324>)
 8006dfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	9306      	str	r3, [sp, #24]
 8006e04:	e7e0      	b.n	8006dc8 <_dtoa_r+0x90>
 8006e06:	ab12      	add	r3, sp, #72	; 0x48
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	ab13      	add	r3, sp, #76	; 0x4c
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	4632      	mov	r2, r6
 8006e10:	463b      	mov	r3, r7
 8006e12:	4620      	mov	r0, r4
 8006e14:	f001 fdce 	bl	80089b4 <__d2b>
 8006e18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e1c:	4683      	mov	fp, r0
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	d07d      	beq.n	8006f1e <_dtoa_r+0x1e6>
 8006e22:	46b0      	mov	r8, r6
 8006e24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e28:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006e2c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006e30:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e34:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4b89      	ldr	r3, [pc, #548]	; (8007060 <_dtoa_r+0x328>)
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	4649      	mov	r1, r9
 8006e40:	f7f9 f992 	bl	8000168 <__aeabi_dsub>
 8006e44:	a37c      	add	r3, pc, #496	; (adr r3, 8007038 <_dtoa_r+0x300>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 fb45 	bl	80004d8 <__aeabi_dmul>
 8006e4e:	a37c      	add	r3, pc, #496	; (adr r3, 8007040 <_dtoa_r+0x308>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 f98a 	bl	800016c <__adddf3>
 8006e58:	4606      	mov	r6, r0
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	460f      	mov	r7, r1
 8006e5e:	f7f9 fad1 	bl	8000404 <__aeabi_i2d>
 8006e62:	a379      	add	r3, pc, #484	; (adr r3, 8007048 <_dtoa_r+0x310>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 fb36 	bl	80004d8 <__aeabi_dmul>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4630      	mov	r0, r6
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 f97a 	bl	800016c <__adddf3>
 8006e78:	4606      	mov	r6, r0
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	f7f9 fddc 	bl	8000a38 <__aeabi_d2iz>
 8006e80:	2200      	movs	r2, #0
 8006e82:	4682      	mov	sl, r0
 8006e84:	2300      	movs	r3, #0
 8006e86:	4630      	mov	r0, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	f7f9 fd97 	bl	80009bc <__aeabi_dcmplt>
 8006e8e:	b148      	cbz	r0, 8006ea4 <_dtoa_r+0x16c>
 8006e90:	4650      	mov	r0, sl
 8006e92:	f7f9 fab7 	bl	8000404 <__aeabi_i2d>
 8006e96:	4632      	mov	r2, r6
 8006e98:	463b      	mov	r3, r7
 8006e9a:	f7f9 fd85 	bl	80009a8 <__aeabi_dcmpeq>
 8006e9e:	b908      	cbnz	r0, 8006ea4 <_dtoa_r+0x16c>
 8006ea0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006ea4:	f1ba 0f16 	cmp.w	sl, #22
 8006ea8:	d85a      	bhi.n	8006f60 <_dtoa_r+0x228>
 8006eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eae:	496d      	ldr	r1, [pc, #436]	; (8007064 <_dtoa_r+0x32c>)
 8006eb0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb8:	f7f9 fd9e 	bl	80009f8 <__aeabi_dcmpgt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d051      	beq.n	8006f64 <_dtoa_r+0x22c>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eca:	1b5d      	subs	r5, r3, r5
 8006ecc:	1e6b      	subs	r3, r5, #1
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	bf43      	ittte	mi
 8006ed2:	2300      	movmi	r3, #0
 8006ed4:	f1c5 0901 	rsbmi	r9, r5, #1
 8006ed8:	9307      	strmi	r3, [sp, #28]
 8006eda:	f04f 0900 	movpl.w	r9, #0
 8006ede:	f1ba 0f00 	cmp.w	sl, #0
 8006ee2:	db41      	blt.n	8006f68 <_dtoa_r+0x230>
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006eea:	4453      	add	r3, sl
 8006eec:	9307      	str	r3, [sp, #28]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9308      	str	r3, [sp, #32]
 8006ef2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ef4:	2b09      	cmp	r3, #9
 8006ef6:	f200 808f 	bhi.w	8007018 <_dtoa_r+0x2e0>
 8006efa:	2b05      	cmp	r3, #5
 8006efc:	bfc4      	itt	gt
 8006efe:	3b04      	subgt	r3, #4
 8006f00:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006f02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f04:	bfc8      	it	gt
 8006f06:	2500      	movgt	r5, #0
 8006f08:	f1a3 0302 	sub.w	r3, r3, #2
 8006f0c:	bfd8      	it	le
 8006f0e:	2501      	movle	r5, #1
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	f200 808d 	bhi.w	8007030 <_dtoa_r+0x2f8>
 8006f16:	e8df f003 	tbb	[pc, r3]
 8006f1a:	7d7b      	.short	0x7d7b
 8006f1c:	6f2f      	.short	0x6f2f
 8006f1e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006f22:	441d      	add	r5, r3
 8006f24:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006f28:	2820      	cmp	r0, #32
 8006f2a:	dd13      	ble.n	8006f54 <_dtoa_r+0x21c>
 8006f2c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006f30:	9b02      	ldr	r3, [sp, #8]
 8006f32:	fa08 f800 	lsl.w	r8, r8, r0
 8006f36:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006f3a:	fa23 f000 	lsr.w	r0, r3, r0
 8006f3e:	ea48 0000 	orr.w	r0, r8, r0
 8006f42:	f7f9 fa4f 	bl	80003e4 <__aeabi_ui2d>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4680      	mov	r8, r0
 8006f4a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006f4e:	3d01      	subs	r5, #1
 8006f50:	9310      	str	r3, [sp, #64]	; 0x40
 8006f52:	e771      	b.n	8006e38 <_dtoa_r+0x100>
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	f1c0 0020 	rsb	r0, r0, #32
 8006f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f5e:	e7f0      	b.n	8006f42 <_dtoa_r+0x20a>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e7b0      	b.n	8006ec6 <_dtoa_r+0x18e>
 8006f64:	900d      	str	r0, [sp, #52]	; 0x34
 8006f66:	e7af      	b.n	8006ec8 <_dtoa_r+0x190>
 8006f68:	f1ca 0300 	rsb	r3, sl, #0
 8006f6c:	9308      	str	r3, [sp, #32]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	eba9 090a 	sub.w	r9, r9, sl
 8006f74:	930c      	str	r3, [sp, #48]	; 0x30
 8006f76:	e7bc      	b.n	8006ef2 <_dtoa_r+0x1ba>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dd74      	ble.n	800706c <_dtoa_r+0x334>
 8006f82:	4698      	mov	r8, r3
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	2200      	movs	r2, #0
 8006f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f8a:	6072      	str	r2, [r6, #4]
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	f102 0014 	add.w	r0, r2, #20
 8006f92:	4298      	cmp	r0, r3
 8006f94:	6871      	ldr	r1, [r6, #4]
 8006f96:	d96e      	bls.n	8007076 <_dtoa_r+0x33e>
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f001 f9ca 	bl	8008332 <_Balloc>
 8006f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa0:	6030      	str	r0, [r6, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f1b8 0f0e 	cmp.w	r8, #14
 8006fa8:	9306      	str	r3, [sp, #24]
 8006faa:	f200 80ed 	bhi.w	8007188 <_dtoa_r+0x450>
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	f000 80ea 	beq.w	8007188 <_dtoa_r+0x450>
 8006fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fb8:	f1ba 0f00 	cmp.w	sl, #0
 8006fbc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006fc0:	dd77      	ble.n	80070b2 <_dtoa_r+0x37a>
 8006fc2:	4a28      	ldr	r2, [pc, #160]	; (8007064 <_dtoa_r+0x32c>)
 8006fc4:	f00a 030f 	and.w	r3, sl, #15
 8006fc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006fcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fd0:	06f0      	lsls	r0, r6, #27
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006fda:	d568      	bpl.n	80070ae <_dtoa_r+0x376>
 8006fdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006fe0:	4b21      	ldr	r3, [pc, #132]	; (8007068 <_dtoa_r+0x330>)
 8006fe2:	2503      	movs	r5, #3
 8006fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fe8:	f7f9 fba0 	bl	800072c <__aeabi_ddiv>
 8006fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff0:	f006 060f 	and.w	r6, r6, #15
 8006ff4:	4f1c      	ldr	r7, [pc, #112]	; (8007068 <_dtoa_r+0x330>)
 8006ff6:	e04f      	b.n	8007098 <_dtoa_r+0x360>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ffe:	4453      	add	r3, sl
 8007000:	f103 0801 	add.w	r8, r3, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	4643      	mov	r3, r8
 8007008:	2b01      	cmp	r3, #1
 800700a:	bfb8      	it	lt
 800700c:	2301      	movlt	r3, #1
 800700e:	e7ba      	b.n	8006f86 <_dtoa_r+0x24e>
 8007010:	2300      	movs	r3, #0
 8007012:	e7b2      	b.n	8006f7a <_dtoa_r+0x242>
 8007014:	2300      	movs	r3, #0
 8007016:	e7f0      	b.n	8006ffa <_dtoa_r+0x2c2>
 8007018:	2501      	movs	r5, #1
 800701a:	2300      	movs	r3, #0
 800701c:	9509      	str	r5, [sp, #36]	; 0x24
 800701e:	931e      	str	r3, [sp, #120]	; 0x78
 8007020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007024:	2200      	movs	r2, #0
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	4698      	mov	r8, r3
 800702a:	2312      	movs	r3, #18
 800702c:	921f      	str	r2, [sp, #124]	; 0x7c
 800702e:	e7aa      	b.n	8006f86 <_dtoa_r+0x24e>
 8007030:	2301      	movs	r3, #1
 8007032:	9309      	str	r3, [sp, #36]	; 0x24
 8007034:	e7f4      	b.n	8007020 <_dtoa_r+0x2e8>
 8007036:	bf00      	nop
 8007038:	636f4361 	.word	0x636f4361
 800703c:	3fd287a7 	.word	0x3fd287a7
 8007040:	8b60c8b3 	.word	0x8b60c8b3
 8007044:	3fc68a28 	.word	0x3fc68a28
 8007048:	509f79fb 	.word	0x509f79fb
 800704c:	3fd34413 	.word	0x3fd34413
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	08009331 	.word	0x08009331
 8007058:	08009328 	.word	0x08009328
 800705c:	080092b1 	.word	0x080092b1
 8007060:	3ff80000 	.word	0x3ff80000
 8007064:	080093d0 	.word	0x080093d0
 8007068:	080093a8 	.word	0x080093a8
 800706c:	2301      	movs	r3, #1
 800706e:	9304      	str	r3, [sp, #16]
 8007070:	4698      	mov	r8, r3
 8007072:	461a      	mov	r2, r3
 8007074:	e7da      	b.n	800702c <_dtoa_r+0x2f4>
 8007076:	3101      	adds	r1, #1
 8007078:	6071      	str	r1, [r6, #4]
 800707a:	0052      	lsls	r2, r2, #1
 800707c:	e787      	b.n	8006f8e <_dtoa_r+0x256>
 800707e:	07f1      	lsls	r1, r6, #31
 8007080:	d508      	bpl.n	8007094 <_dtoa_r+0x35c>
 8007082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708a:	f7f9 fa25 	bl	80004d8 <__aeabi_dmul>
 800708e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007092:	3501      	adds	r5, #1
 8007094:	1076      	asrs	r6, r6, #1
 8007096:	3708      	adds	r7, #8
 8007098:	2e00      	cmp	r6, #0
 800709a:	d1f0      	bne.n	800707e <_dtoa_r+0x346>
 800709c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a4:	f7f9 fb42 	bl	800072c <__aeabi_ddiv>
 80070a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ac:	e01b      	b.n	80070e6 <_dtoa_r+0x3ae>
 80070ae:	2502      	movs	r5, #2
 80070b0:	e7a0      	b.n	8006ff4 <_dtoa_r+0x2bc>
 80070b2:	f000 80a4 	beq.w	80071fe <_dtoa_r+0x4c6>
 80070b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070ba:	f1ca 0600 	rsb	r6, sl, #0
 80070be:	4ba0      	ldr	r3, [pc, #640]	; (8007340 <_dtoa_r+0x608>)
 80070c0:	f006 020f 	and.w	r2, r6, #15
 80070c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f7f9 fa04 	bl	80004d8 <__aeabi_dmul>
 80070d0:	2502      	movs	r5, #2
 80070d2:	2300      	movs	r3, #0
 80070d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070d8:	4f9a      	ldr	r7, [pc, #616]	; (8007344 <_dtoa_r+0x60c>)
 80070da:	1136      	asrs	r6, r6, #4
 80070dc:	2e00      	cmp	r6, #0
 80070de:	f040 8083 	bne.w	80071e8 <_dtoa_r+0x4b0>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e0      	bne.n	80070a8 <_dtoa_r+0x370>
 80070e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 808a 	beq.w	8007202 <_dtoa_r+0x4ca>
 80070ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80070f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070fa:	2200      	movs	r2, #0
 80070fc:	4b92      	ldr	r3, [pc, #584]	; (8007348 <_dtoa_r+0x610>)
 80070fe:	f7f9 fc5d 	bl	80009bc <__aeabi_dcmplt>
 8007102:	2800      	cmp	r0, #0
 8007104:	d07d      	beq.n	8007202 <_dtoa_r+0x4ca>
 8007106:	f1b8 0f00 	cmp.w	r8, #0
 800710a:	d07a      	beq.n	8007202 <_dtoa_r+0x4ca>
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd36      	ble.n	8007180 <_dtoa_r+0x448>
 8007112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007116:	2200      	movs	r2, #0
 8007118:	4b8c      	ldr	r3, [pc, #560]	; (800734c <_dtoa_r+0x614>)
 800711a:	f7f9 f9dd 	bl	80004d8 <__aeabi_dmul>
 800711e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007122:	9e04      	ldr	r6, [sp, #16]
 8007124:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8007128:	3501      	adds	r5, #1
 800712a:	4628      	mov	r0, r5
 800712c:	f7f9 f96a 	bl	8000404 <__aeabi_i2d>
 8007130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007134:	f7f9 f9d0 	bl	80004d8 <__aeabi_dmul>
 8007138:	2200      	movs	r2, #0
 800713a:	4b85      	ldr	r3, [pc, #532]	; (8007350 <_dtoa_r+0x618>)
 800713c:	f7f9 f816 	bl	800016c <__adddf3>
 8007140:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007144:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007148:	950b      	str	r5, [sp, #44]	; 0x2c
 800714a:	2e00      	cmp	r6, #0
 800714c:	d15c      	bne.n	8007208 <_dtoa_r+0x4d0>
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	4b7f      	ldr	r3, [pc, #508]	; (8007354 <_dtoa_r+0x61c>)
 8007156:	f7f9 f807 	bl	8000168 <__aeabi_dsub>
 800715a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800715c:	462b      	mov	r3, r5
 800715e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007162:	f7f9 fc49 	bl	80009f8 <__aeabi_dcmpgt>
 8007166:	2800      	cmp	r0, #0
 8007168:	f040 8281 	bne.w	800766e <_dtoa_r+0x936>
 800716c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007172:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007176:	f7f9 fc21 	bl	80009bc <__aeabi_dcmplt>
 800717a:	2800      	cmp	r0, #0
 800717c:	f040 8275 	bne.w	800766a <_dtoa_r+0x932>
 8007180:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007188:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800718a:	2b00      	cmp	r3, #0
 800718c:	f2c0 814b 	blt.w	8007426 <_dtoa_r+0x6ee>
 8007190:	f1ba 0f0e 	cmp.w	sl, #14
 8007194:	f300 8147 	bgt.w	8007426 <_dtoa_r+0x6ee>
 8007198:	4b69      	ldr	r3, [pc, #420]	; (8007340 <_dtoa_r+0x608>)
 800719a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f280 80d7 	bge.w	800735c <_dtoa_r+0x624>
 80071ae:	f1b8 0f00 	cmp.w	r8, #0
 80071b2:	f300 80d3 	bgt.w	800735c <_dtoa_r+0x624>
 80071b6:	f040 8257 	bne.w	8007668 <_dtoa_r+0x930>
 80071ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071be:	2200      	movs	r2, #0
 80071c0:	4b64      	ldr	r3, [pc, #400]	; (8007354 <_dtoa_r+0x61c>)
 80071c2:	f7f9 f989 	bl	80004d8 <__aeabi_dmul>
 80071c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ca:	f7f9 fc0b 	bl	80009e4 <__aeabi_dcmpge>
 80071ce:	4646      	mov	r6, r8
 80071d0:	4647      	mov	r7, r8
 80071d2:	2800      	cmp	r0, #0
 80071d4:	f040 822d 	bne.w	8007632 <_dtoa_r+0x8fa>
 80071d8:	9b06      	ldr	r3, [sp, #24]
 80071da:	9a06      	ldr	r2, [sp, #24]
 80071dc:	1c5d      	adds	r5, r3, #1
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	f10a 0a01 	add.w	sl, sl, #1
 80071e4:	7013      	strb	r3, [r2, #0]
 80071e6:	e228      	b.n	800763a <_dtoa_r+0x902>
 80071e8:	07f2      	lsls	r2, r6, #31
 80071ea:	d505      	bpl.n	80071f8 <_dtoa_r+0x4c0>
 80071ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f0:	f7f9 f972 	bl	80004d8 <__aeabi_dmul>
 80071f4:	2301      	movs	r3, #1
 80071f6:	3501      	adds	r5, #1
 80071f8:	1076      	asrs	r6, r6, #1
 80071fa:	3708      	adds	r7, #8
 80071fc:	e76e      	b.n	80070dc <_dtoa_r+0x3a4>
 80071fe:	2502      	movs	r5, #2
 8007200:	e771      	b.n	80070e6 <_dtoa_r+0x3ae>
 8007202:	4657      	mov	r7, sl
 8007204:	4646      	mov	r6, r8
 8007206:	e790      	b.n	800712a <_dtoa_r+0x3f2>
 8007208:	4b4d      	ldr	r3, [pc, #308]	; (8007340 <_dtoa_r+0x608>)
 800720a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800720e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d048      	beq.n	80072aa <_dtoa_r+0x572>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	2000      	movs	r0, #0
 800721e:	494e      	ldr	r1, [pc, #312]	; (8007358 <_dtoa_r+0x620>)
 8007220:	f7f9 fa84 	bl	800072c <__aeabi_ddiv>
 8007224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007228:	f7f8 ff9e 	bl	8000168 <__aeabi_dsub>
 800722c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007230:	9d06      	ldr	r5, [sp, #24]
 8007232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007236:	f7f9 fbff 	bl	8000a38 <__aeabi_d2iz>
 800723a:	9011      	str	r0, [sp, #68]	; 0x44
 800723c:	f7f9 f8e2 	bl	8000404 <__aeabi_i2d>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007248:	f7f8 ff8e 	bl	8000168 <__aeabi_dsub>
 800724c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800724e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007252:	3330      	adds	r3, #48	; 0x30
 8007254:	f805 3b01 	strb.w	r3, [r5], #1
 8007258:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800725c:	f7f9 fbae 	bl	80009bc <__aeabi_dcmplt>
 8007260:	2800      	cmp	r0, #0
 8007262:	d163      	bne.n	800732c <_dtoa_r+0x5f4>
 8007264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007268:	2000      	movs	r0, #0
 800726a:	4937      	ldr	r1, [pc, #220]	; (8007348 <_dtoa_r+0x610>)
 800726c:	f7f8 ff7c 	bl	8000168 <__aeabi_dsub>
 8007270:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007274:	f7f9 fba2 	bl	80009bc <__aeabi_dcmplt>
 8007278:	2800      	cmp	r0, #0
 800727a:	f040 80b5 	bne.w	80073e8 <_dtoa_r+0x6b0>
 800727e:	9b06      	ldr	r3, [sp, #24]
 8007280:	1aeb      	subs	r3, r5, r3
 8007282:	429e      	cmp	r6, r3
 8007284:	f77f af7c 	ble.w	8007180 <_dtoa_r+0x448>
 8007288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800728c:	2200      	movs	r2, #0
 800728e:	4b2f      	ldr	r3, [pc, #188]	; (800734c <_dtoa_r+0x614>)
 8007290:	f7f9 f922 	bl	80004d8 <__aeabi_dmul>
 8007294:	2200      	movs	r2, #0
 8007296:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800729a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729e:	4b2b      	ldr	r3, [pc, #172]	; (800734c <_dtoa_r+0x614>)
 80072a0:	f7f9 f91a 	bl	80004d8 <__aeabi_dmul>
 80072a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a8:	e7c3      	b.n	8007232 <_dtoa_r+0x4fa>
 80072aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072ae:	f7f9 f913 	bl	80004d8 <__aeabi_dmul>
 80072b2:	9b06      	ldr	r3, [sp, #24]
 80072b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072b8:	199d      	adds	r5, r3, r6
 80072ba:	461e      	mov	r6, r3
 80072bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c0:	f7f9 fbba 	bl	8000a38 <__aeabi_d2iz>
 80072c4:	9011      	str	r0, [sp, #68]	; 0x44
 80072c6:	f7f9 f89d 	bl	8000404 <__aeabi_i2d>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d2:	f7f8 ff49 	bl	8000168 <__aeabi_dsub>
 80072d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072dc:	3330      	adds	r3, #48	; 0x30
 80072de:	f806 3b01 	strb.w	r3, [r6], #1
 80072e2:	42ae      	cmp	r6, r5
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	d124      	bne.n	8007334 <_dtoa_r+0x5fc>
 80072ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072ee:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <_dtoa_r+0x620>)
 80072f0:	f7f8 ff3c 	bl	800016c <__adddf3>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fc:	f7f9 fb7c 	bl	80009f8 <__aeabi_dcmpgt>
 8007300:	2800      	cmp	r0, #0
 8007302:	d171      	bne.n	80073e8 <_dtoa_r+0x6b0>
 8007304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007308:	2000      	movs	r0, #0
 800730a:	4913      	ldr	r1, [pc, #76]	; (8007358 <_dtoa_r+0x620>)
 800730c:	f7f8 ff2c 	bl	8000168 <__aeabi_dsub>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007318:	f7f9 fb50 	bl	80009bc <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	f43f af2f 	beq.w	8007180 <_dtoa_r+0x448>
 8007322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007326:	1e6a      	subs	r2, r5, #1
 8007328:	2b30      	cmp	r3, #48	; 0x30
 800732a:	d001      	beq.n	8007330 <_dtoa_r+0x5f8>
 800732c:	46ba      	mov	sl, r7
 800732e:	e04a      	b.n	80073c6 <_dtoa_r+0x68e>
 8007330:	4615      	mov	r5, r2
 8007332:	e7f6      	b.n	8007322 <_dtoa_r+0x5ea>
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <_dtoa_r+0x614>)
 8007336:	f7f9 f8cf 	bl	80004d8 <__aeabi_dmul>
 800733a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800733e:	e7bd      	b.n	80072bc <_dtoa_r+0x584>
 8007340:	080093d0 	.word	0x080093d0
 8007344:	080093a8 	.word	0x080093a8
 8007348:	3ff00000 	.word	0x3ff00000
 800734c:	40240000 	.word	0x40240000
 8007350:	401c0000 	.word	0x401c0000
 8007354:	40140000 	.word	0x40140000
 8007358:	3fe00000 	.word	0x3fe00000
 800735c:	9d06      	ldr	r5, [sp, #24]
 800735e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f9 f9df 	bl	800072c <__aeabi_ddiv>
 800736e:	f7f9 fb63 	bl	8000a38 <__aeabi_d2iz>
 8007372:	4681      	mov	r9, r0
 8007374:	f7f9 f846 	bl	8000404 <__aeabi_i2d>
 8007378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737c:	f7f9 f8ac 	bl	80004d8 <__aeabi_dmul>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	f7f8 feee 	bl	8000168 <__aeabi_dsub>
 800738c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007390:	f805 6b01 	strb.w	r6, [r5], #1
 8007394:	9e06      	ldr	r6, [sp, #24]
 8007396:	4602      	mov	r2, r0
 8007398:	1bae      	subs	r6, r5, r6
 800739a:	45b0      	cmp	r8, r6
 800739c:	460b      	mov	r3, r1
 800739e:	d135      	bne.n	800740c <_dtoa_r+0x6d4>
 80073a0:	f7f8 fee4 	bl	800016c <__adddf3>
 80073a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a8:	4606      	mov	r6, r0
 80073aa:	460f      	mov	r7, r1
 80073ac:	f7f9 fb24 	bl	80009f8 <__aeabi_dcmpgt>
 80073b0:	b9c8      	cbnz	r0, 80073e6 <_dtoa_r+0x6ae>
 80073b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b6:	4630      	mov	r0, r6
 80073b8:	4639      	mov	r1, r7
 80073ba:	f7f9 faf5 	bl	80009a8 <__aeabi_dcmpeq>
 80073be:	b110      	cbz	r0, 80073c6 <_dtoa_r+0x68e>
 80073c0:	f019 0f01 	tst.w	r9, #1
 80073c4:	d10f      	bne.n	80073e6 <_dtoa_r+0x6ae>
 80073c6:	4659      	mov	r1, fp
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 ffe6 	bl	800839a <_Bfree>
 80073ce:	2300      	movs	r3, #0
 80073d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073d2:	702b      	strb	r3, [r5, #0]
 80073d4:	f10a 0301 	add.w	r3, sl, #1
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f43f acf3 	beq.w	8006dc8 <_dtoa_r+0x90>
 80073e2:	601d      	str	r5, [r3, #0]
 80073e4:	e4f0      	b.n	8006dc8 <_dtoa_r+0x90>
 80073e6:	4657      	mov	r7, sl
 80073e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073ec:	1e6b      	subs	r3, r5, #1
 80073ee:	2a39      	cmp	r2, #57	; 0x39
 80073f0:	d106      	bne.n	8007400 <_dtoa_r+0x6c8>
 80073f2:	9a06      	ldr	r2, [sp, #24]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d107      	bne.n	8007408 <_dtoa_r+0x6d0>
 80073f8:	2330      	movs	r3, #48	; 0x30
 80073fa:	7013      	strb	r3, [r2, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	3701      	adds	r7, #1
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	3201      	adds	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e791      	b.n	800732c <_dtoa_r+0x5f4>
 8007408:	461d      	mov	r5, r3
 800740a:	e7ed      	b.n	80073e8 <_dtoa_r+0x6b0>
 800740c:	2200      	movs	r2, #0
 800740e:	4b99      	ldr	r3, [pc, #612]	; (8007674 <_dtoa_r+0x93c>)
 8007410:	f7f9 f862 	bl	80004d8 <__aeabi_dmul>
 8007414:	2200      	movs	r2, #0
 8007416:	2300      	movs	r3, #0
 8007418:	4606      	mov	r6, r0
 800741a:	460f      	mov	r7, r1
 800741c:	f7f9 fac4 	bl	80009a8 <__aeabi_dcmpeq>
 8007420:	2800      	cmp	r0, #0
 8007422:	d09e      	beq.n	8007362 <_dtoa_r+0x62a>
 8007424:	e7cf      	b.n	80073c6 <_dtoa_r+0x68e>
 8007426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007428:	2a00      	cmp	r2, #0
 800742a:	f000 8088 	beq.w	800753e <_dtoa_r+0x806>
 800742e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007430:	2a01      	cmp	r2, #1
 8007432:	dc6d      	bgt.n	8007510 <_dtoa_r+0x7d8>
 8007434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007436:	2a00      	cmp	r2, #0
 8007438:	d066      	beq.n	8007508 <_dtoa_r+0x7d0>
 800743a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800743e:	464d      	mov	r5, r9
 8007440:	9e08      	ldr	r6, [sp, #32]
 8007442:	9a07      	ldr	r2, [sp, #28]
 8007444:	2101      	movs	r1, #1
 8007446:	441a      	add	r2, r3
 8007448:	4620      	mov	r0, r4
 800744a:	4499      	add	r9, r3
 800744c:	9207      	str	r2, [sp, #28]
 800744e:	f001 f882 	bl	8008556 <__i2b>
 8007452:	4607      	mov	r7, r0
 8007454:	2d00      	cmp	r5, #0
 8007456:	dd0b      	ble.n	8007470 <_dtoa_r+0x738>
 8007458:	9b07      	ldr	r3, [sp, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dd08      	ble.n	8007470 <_dtoa_r+0x738>
 800745e:	42ab      	cmp	r3, r5
 8007460:	bfa8      	it	ge
 8007462:	462b      	movge	r3, r5
 8007464:	9a07      	ldr	r2, [sp, #28]
 8007466:	eba9 0903 	sub.w	r9, r9, r3
 800746a:	1aed      	subs	r5, r5, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	b1eb      	cbz	r3, 80074b0 <_dtoa_r+0x778>
 8007474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007476:	2b00      	cmp	r3, #0
 8007478:	d065      	beq.n	8007546 <_dtoa_r+0x80e>
 800747a:	b18e      	cbz	r6, 80074a0 <_dtoa_r+0x768>
 800747c:	4639      	mov	r1, r7
 800747e:	4632      	mov	r2, r6
 8007480:	4620      	mov	r0, r4
 8007482:	f001 f907 	bl	8008694 <__pow5mult>
 8007486:	465a      	mov	r2, fp
 8007488:	4601      	mov	r1, r0
 800748a:	4607      	mov	r7, r0
 800748c:	4620      	mov	r0, r4
 800748e:	f001 f86b 	bl	8008568 <__multiply>
 8007492:	4659      	mov	r1, fp
 8007494:	900a      	str	r0, [sp, #40]	; 0x28
 8007496:	4620      	mov	r0, r4
 8007498:	f000 ff7f 	bl	800839a <_Bfree>
 800749c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749e:	469b      	mov	fp, r3
 80074a0:	9b08      	ldr	r3, [sp, #32]
 80074a2:	1b9a      	subs	r2, r3, r6
 80074a4:	d004      	beq.n	80074b0 <_dtoa_r+0x778>
 80074a6:	4659      	mov	r1, fp
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 f8f3 	bl	8008694 <__pow5mult>
 80074ae:	4683      	mov	fp, r0
 80074b0:	2101      	movs	r1, #1
 80074b2:	4620      	mov	r0, r4
 80074b4:	f001 f84f 	bl	8008556 <__i2b>
 80074b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ba:	4606      	mov	r6, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 81c6 	beq.w	800784e <_dtoa_r+0xb16>
 80074c2:	461a      	mov	r2, r3
 80074c4:	4601      	mov	r1, r0
 80074c6:	4620      	mov	r0, r4
 80074c8:	f001 f8e4 	bl	8008694 <__pow5mult>
 80074cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80074ce:	4606      	mov	r6, r0
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	dc3e      	bgt.n	8007552 <_dtoa_r+0x81a>
 80074d4:	9b02      	ldr	r3, [sp, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d137      	bne.n	800754a <_dtoa_r+0x812>
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d134      	bne.n	800754e <_dtoa_r+0x816>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ea:	0d1b      	lsrs	r3, r3, #20
 80074ec:	051b      	lsls	r3, r3, #20
 80074ee:	b12b      	cbz	r3, 80074fc <_dtoa_r+0x7c4>
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	f109 0901 	add.w	r9, r9, #1
 80074f6:	3301      	adds	r3, #1
 80074f8:	9307      	str	r3, [sp, #28]
 80074fa:	2301      	movs	r3, #1
 80074fc:	9308      	str	r3, [sp, #32]
 80074fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d128      	bne.n	8007556 <_dtoa_r+0x81e>
 8007504:	2001      	movs	r0, #1
 8007506:	e02e      	b.n	8007566 <_dtoa_r+0x82e>
 8007508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800750a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800750e:	e796      	b.n	800743e <_dtoa_r+0x706>
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8007516:	42b3      	cmp	r3, r6
 8007518:	bfb7      	itett	lt
 800751a:	9b08      	ldrlt	r3, [sp, #32]
 800751c:	1b9e      	subge	r6, r3, r6
 800751e:	1af2      	sublt	r2, r6, r3
 8007520:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007522:	bfbf      	itttt	lt
 8007524:	9608      	strlt	r6, [sp, #32]
 8007526:	189b      	addlt	r3, r3, r2
 8007528:	930c      	strlt	r3, [sp, #48]	; 0x30
 800752a:	2600      	movlt	r6, #0
 800752c:	f1b8 0f00 	cmp.w	r8, #0
 8007530:	bfb9      	ittee	lt
 8007532:	eba9 0508 	sublt.w	r5, r9, r8
 8007536:	2300      	movlt	r3, #0
 8007538:	464d      	movge	r5, r9
 800753a:	4643      	movge	r3, r8
 800753c:	e781      	b.n	8007442 <_dtoa_r+0x70a>
 800753e:	9e08      	ldr	r6, [sp, #32]
 8007540:	464d      	mov	r5, r9
 8007542:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007544:	e786      	b.n	8007454 <_dtoa_r+0x71c>
 8007546:	9a08      	ldr	r2, [sp, #32]
 8007548:	e7ad      	b.n	80074a6 <_dtoa_r+0x76e>
 800754a:	2300      	movs	r3, #0
 800754c:	e7d6      	b.n	80074fc <_dtoa_r+0x7c4>
 800754e:	9b02      	ldr	r3, [sp, #8]
 8007550:	e7d4      	b.n	80074fc <_dtoa_r+0x7c4>
 8007552:	2300      	movs	r3, #0
 8007554:	9308      	str	r3, [sp, #32]
 8007556:	6933      	ldr	r3, [r6, #16]
 8007558:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800755c:	6918      	ldr	r0, [r3, #16]
 800755e:	f000 ffac 	bl	80084ba <__hi0bits>
 8007562:	f1c0 0020 	rsb	r0, r0, #32
 8007566:	9b07      	ldr	r3, [sp, #28]
 8007568:	4418      	add	r0, r3
 800756a:	f010 001f 	ands.w	r0, r0, #31
 800756e:	d047      	beq.n	8007600 <_dtoa_r+0x8c8>
 8007570:	f1c0 0320 	rsb	r3, r0, #32
 8007574:	2b04      	cmp	r3, #4
 8007576:	dd3b      	ble.n	80075f0 <_dtoa_r+0x8b8>
 8007578:	9b07      	ldr	r3, [sp, #28]
 800757a:	f1c0 001c 	rsb	r0, r0, #28
 800757e:	4481      	add	r9, r0
 8007580:	4405      	add	r5, r0
 8007582:	4403      	add	r3, r0
 8007584:	9307      	str	r3, [sp, #28]
 8007586:	f1b9 0f00 	cmp.w	r9, #0
 800758a:	dd05      	ble.n	8007598 <_dtoa_r+0x860>
 800758c:	4659      	mov	r1, fp
 800758e:	464a      	mov	r2, r9
 8007590:	4620      	mov	r0, r4
 8007592:	f001 f8cd 	bl	8008730 <__lshift>
 8007596:	4683      	mov	fp, r0
 8007598:	9b07      	ldr	r3, [sp, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	dd05      	ble.n	80075aa <_dtoa_r+0x872>
 800759e:	4631      	mov	r1, r6
 80075a0:	461a      	mov	r2, r3
 80075a2:	4620      	mov	r0, r4
 80075a4:	f001 f8c4 	bl	8008730 <__lshift>
 80075a8:	4606      	mov	r6, r0
 80075aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ac:	b353      	cbz	r3, 8007604 <_dtoa_r+0x8cc>
 80075ae:	4631      	mov	r1, r6
 80075b0:	4658      	mov	r0, fp
 80075b2:	f001 f911 	bl	80087d8 <__mcmp>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	da24      	bge.n	8007604 <_dtoa_r+0x8cc>
 80075ba:	2300      	movs	r3, #0
 80075bc:	4659      	mov	r1, fp
 80075be:	220a      	movs	r2, #10
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 ff01 	bl	80083c8 <__multadd>
 80075c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80075cc:	4683      	mov	fp, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 8144 	beq.w	800785c <_dtoa_r+0xb24>
 80075d4:	2300      	movs	r3, #0
 80075d6:	4639      	mov	r1, r7
 80075d8:	220a      	movs	r2, #10
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 fef4 	bl	80083c8 <__multadd>
 80075e0:	9b04      	ldr	r3, [sp, #16]
 80075e2:	4607      	mov	r7, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dc4d      	bgt.n	8007684 <_dtoa_r+0x94c>
 80075e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	dd4a      	ble.n	8007684 <_dtoa_r+0x94c>
 80075ee:	e011      	b.n	8007614 <_dtoa_r+0x8dc>
 80075f0:	d0c9      	beq.n	8007586 <_dtoa_r+0x84e>
 80075f2:	9a07      	ldr	r2, [sp, #28]
 80075f4:	331c      	adds	r3, #28
 80075f6:	441a      	add	r2, r3
 80075f8:	4499      	add	r9, r3
 80075fa:	441d      	add	r5, r3
 80075fc:	4613      	mov	r3, r2
 80075fe:	e7c1      	b.n	8007584 <_dtoa_r+0x84c>
 8007600:	4603      	mov	r3, r0
 8007602:	e7f6      	b.n	80075f2 <_dtoa_r+0x8ba>
 8007604:	f1b8 0f00 	cmp.w	r8, #0
 8007608:	dc36      	bgt.n	8007678 <_dtoa_r+0x940>
 800760a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800760c:	2b02      	cmp	r3, #2
 800760e:	dd33      	ble.n	8007678 <_dtoa_r+0x940>
 8007610:	f8cd 8010 	str.w	r8, [sp, #16]
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	b963      	cbnz	r3, 8007632 <_dtoa_r+0x8fa>
 8007618:	4631      	mov	r1, r6
 800761a:	2205      	movs	r2, #5
 800761c:	4620      	mov	r0, r4
 800761e:	f000 fed3 	bl	80083c8 <__multadd>
 8007622:	4601      	mov	r1, r0
 8007624:	4606      	mov	r6, r0
 8007626:	4658      	mov	r0, fp
 8007628:	f001 f8d6 	bl	80087d8 <__mcmp>
 800762c:	2800      	cmp	r0, #0
 800762e:	f73f add3 	bgt.w	80071d8 <_dtoa_r+0x4a0>
 8007632:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007634:	9d06      	ldr	r5, [sp, #24]
 8007636:	ea6f 0a03 	mvn.w	sl, r3
 800763a:	f04f 0900 	mov.w	r9, #0
 800763e:	4631      	mov	r1, r6
 8007640:	4620      	mov	r0, r4
 8007642:	f000 feaa 	bl	800839a <_Bfree>
 8007646:	2f00      	cmp	r7, #0
 8007648:	f43f aebd 	beq.w	80073c6 <_dtoa_r+0x68e>
 800764c:	f1b9 0f00 	cmp.w	r9, #0
 8007650:	d005      	beq.n	800765e <_dtoa_r+0x926>
 8007652:	45b9      	cmp	r9, r7
 8007654:	d003      	beq.n	800765e <_dtoa_r+0x926>
 8007656:	4649      	mov	r1, r9
 8007658:	4620      	mov	r0, r4
 800765a:	f000 fe9e 	bl	800839a <_Bfree>
 800765e:	4639      	mov	r1, r7
 8007660:	4620      	mov	r0, r4
 8007662:	f000 fe9a 	bl	800839a <_Bfree>
 8007666:	e6ae      	b.n	80073c6 <_dtoa_r+0x68e>
 8007668:	2600      	movs	r6, #0
 800766a:	4637      	mov	r7, r6
 800766c:	e7e1      	b.n	8007632 <_dtoa_r+0x8fa>
 800766e:	46ba      	mov	sl, r7
 8007670:	4637      	mov	r7, r6
 8007672:	e5b1      	b.n	80071d8 <_dtoa_r+0x4a0>
 8007674:	40240000 	.word	0x40240000
 8007678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767a:	f8cd 8010 	str.w	r8, [sp, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80f3 	beq.w	800786a <_dtoa_r+0xb32>
 8007684:	2d00      	cmp	r5, #0
 8007686:	dd05      	ble.n	8007694 <_dtoa_r+0x95c>
 8007688:	4639      	mov	r1, r7
 800768a:	462a      	mov	r2, r5
 800768c:	4620      	mov	r0, r4
 800768e:	f001 f84f 	bl	8008730 <__lshift>
 8007692:	4607      	mov	r7, r0
 8007694:	9b08      	ldr	r3, [sp, #32]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d04c      	beq.n	8007734 <_dtoa_r+0x9fc>
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fe48 	bl	8008332 <_Balloc>
 80076a2:	4605      	mov	r5, r0
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	f107 010c 	add.w	r1, r7, #12
 80076aa:	3202      	adds	r2, #2
 80076ac:	0092      	lsls	r2, r2, #2
 80076ae:	300c      	adds	r0, #12
 80076b0:	f000 fe34 	bl	800831c <memcpy>
 80076b4:	2201      	movs	r2, #1
 80076b6:	4629      	mov	r1, r5
 80076b8:	4620      	mov	r0, r4
 80076ba:	f001 f839 	bl	8008730 <__lshift>
 80076be:	46b9      	mov	r9, r7
 80076c0:	4607      	mov	r7, r0
 80076c2:	9b06      	ldr	r3, [sp, #24]
 80076c4:	9307      	str	r3, [sp, #28]
 80076c6:	9b02      	ldr	r3, [sp, #8]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	9308      	str	r3, [sp, #32]
 80076ce:	4631      	mov	r1, r6
 80076d0:	4658      	mov	r0, fp
 80076d2:	f7ff faa3 	bl	8006c1c <quorem>
 80076d6:	4649      	mov	r1, r9
 80076d8:	4605      	mov	r5, r0
 80076da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80076de:	4658      	mov	r0, fp
 80076e0:	f001 f87a 	bl	80087d8 <__mcmp>
 80076e4:	463a      	mov	r2, r7
 80076e6:	9002      	str	r0, [sp, #8]
 80076e8:	4631      	mov	r1, r6
 80076ea:	4620      	mov	r0, r4
 80076ec:	f001 f88e 	bl	800880c <__mdiff>
 80076f0:	68c3      	ldr	r3, [r0, #12]
 80076f2:	4602      	mov	r2, r0
 80076f4:	bb03      	cbnz	r3, 8007738 <_dtoa_r+0xa00>
 80076f6:	4601      	mov	r1, r0
 80076f8:	9009      	str	r0, [sp, #36]	; 0x24
 80076fa:	4658      	mov	r0, fp
 80076fc:	f001 f86c 	bl	80087d8 <__mcmp>
 8007700:	4603      	mov	r3, r0
 8007702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007704:	4611      	mov	r1, r2
 8007706:	4620      	mov	r0, r4
 8007708:	9309      	str	r3, [sp, #36]	; 0x24
 800770a:	f000 fe46 	bl	800839a <_Bfree>
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	b9a3      	cbnz	r3, 800773c <_dtoa_r+0xa04>
 8007712:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007714:	b992      	cbnz	r2, 800773c <_dtoa_r+0xa04>
 8007716:	9a08      	ldr	r2, [sp, #32]
 8007718:	b982      	cbnz	r2, 800773c <_dtoa_r+0xa04>
 800771a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800771e:	d029      	beq.n	8007774 <_dtoa_r+0xa3c>
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dd01      	ble.n	800772a <_dtoa_r+0x9f2>
 8007726:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800772a:	9b07      	ldr	r3, [sp, #28]
 800772c:	1c5d      	adds	r5, r3, #1
 800772e:	f883 8000 	strb.w	r8, [r3]
 8007732:	e784      	b.n	800763e <_dtoa_r+0x906>
 8007734:	4638      	mov	r0, r7
 8007736:	e7c2      	b.n	80076be <_dtoa_r+0x986>
 8007738:	2301      	movs	r3, #1
 800773a:	e7e3      	b.n	8007704 <_dtoa_r+0x9cc>
 800773c:	9a02      	ldr	r2, [sp, #8]
 800773e:	2a00      	cmp	r2, #0
 8007740:	db04      	blt.n	800774c <_dtoa_r+0xa14>
 8007742:	d123      	bne.n	800778c <_dtoa_r+0xa54>
 8007744:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007746:	bb0a      	cbnz	r2, 800778c <_dtoa_r+0xa54>
 8007748:	9a08      	ldr	r2, [sp, #32]
 800774a:	b9fa      	cbnz	r2, 800778c <_dtoa_r+0xa54>
 800774c:	2b00      	cmp	r3, #0
 800774e:	ddec      	ble.n	800772a <_dtoa_r+0x9f2>
 8007750:	4659      	mov	r1, fp
 8007752:	2201      	movs	r2, #1
 8007754:	4620      	mov	r0, r4
 8007756:	f000 ffeb 	bl	8008730 <__lshift>
 800775a:	4631      	mov	r1, r6
 800775c:	4683      	mov	fp, r0
 800775e:	f001 f83b 	bl	80087d8 <__mcmp>
 8007762:	2800      	cmp	r0, #0
 8007764:	dc03      	bgt.n	800776e <_dtoa_r+0xa36>
 8007766:	d1e0      	bne.n	800772a <_dtoa_r+0x9f2>
 8007768:	f018 0f01 	tst.w	r8, #1
 800776c:	d0dd      	beq.n	800772a <_dtoa_r+0x9f2>
 800776e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007772:	d1d8      	bne.n	8007726 <_dtoa_r+0x9ee>
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	9a07      	ldr	r2, [sp, #28]
 8007778:	1c5d      	adds	r5, r3, #1
 800777a:	2339      	movs	r3, #57	; 0x39
 800777c:	7013      	strb	r3, [r2, #0]
 800777e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007782:	1e6a      	subs	r2, r5, #1
 8007784:	2b39      	cmp	r3, #57	; 0x39
 8007786:	d04d      	beq.n	8007824 <_dtoa_r+0xaec>
 8007788:	3301      	adds	r3, #1
 800778a:	e052      	b.n	8007832 <_dtoa_r+0xafa>
 800778c:	9a07      	ldr	r2, [sp, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f102 0501 	add.w	r5, r2, #1
 8007794:	dd06      	ble.n	80077a4 <_dtoa_r+0xa6c>
 8007796:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800779a:	d0eb      	beq.n	8007774 <_dtoa_r+0xa3c>
 800779c:	f108 0801 	add.w	r8, r8, #1
 80077a0:	9b07      	ldr	r3, [sp, #28]
 80077a2:	e7c4      	b.n	800772e <_dtoa_r+0x9f6>
 80077a4:	9b06      	ldr	r3, [sp, #24]
 80077a6:	9a04      	ldr	r2, [sp, #16]
 80077a8:	1aeb      	subs	r3, r5, r3
 80077aa:	4293      	cmp	r3, r2
 80077ac:	f805 8c01 	strb.w	r8, [r5, #-1]
 80077b0:	d021      	beq.n	80077f6 <_dtoa_r+0xabe>
 80077b2:	4659      	mov	r1, fp
 80077b4:	2300      	movs	r3, #0
 80077b6:	220a      	movs	r2, #10
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fe05 	bl	80083c8 <__multadd>
 80077be:	45b9      	cmp	r9, r7
 80077c0:	4683      	mov	fp, r0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	f04f 020a 	mov.w	r2, #10
 80077ca:	4649      	mov	r1, r9
 80077cc:	4620      	mov	r0, r4
 80077ce:	d105      	bne.n	80077dc <_dtoa_r+0xaa4>
 80077d0:	f000 fdfa 	bl	80083c8 <__multadd>
 80077d4:	4681      	mov	r9, r0
 80077d6:	4607      	mov	r7, r0
 80077d8:	9507      	str	r5, [sp, #28]
 80077da:	e778      	b.n	80076ce <_dtoa_r+0x996>
 80077dc:	f000 fdf4 	bl	80083c8 <__multadd>
 80077e0:	4639      	mov	r1, r7
 80077e2:	4681      	mov	r9, r0
 80077e4:	2300      	movs	r3, #0
 80077e6:	220a      	movs	r2, #10
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fded 	bl	80083c8 <__multadd>
 80077ee:	4607      	mov	r7, r0
 80077f0:	e7f2      	b.n	80077d8 <_dtoa_r+0xaa0>
 80077f2:	f04f 0900 	mov.w	r9, #0
 80077f6:	4659      	mov	r1, fp
 80077f8:	2201      	movs	r2, #1
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 ff98 	bl	8008730 <__lshift>
 8007800:	4631      	mov	r1, r6
 8007802:	4683      	mov	fp, r0
 8007804:	f000 ffe8 	bl	80087d8 <__mcmp>
 8007808:	2800      	cmp	r0, #0
 800780a:	dcb8      	bgt.n	800777e <_dtoa_r+0xa46>
 800780c:	d102      	bne.n	8007814 <_dtoa_r+0xadc>
 800780e:	f018 0f01 	tst.w	r8, #1
 8007812:	d1b4      	bne.n	800777e <_dtoa_r+0xa46>
 8007814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007818:	1e6a      	subs	r2, r5, #1
 800781a:	2b30      	cmp	r3, #48	; 0x30
 800781c:	f47f af0f 	bne.w	800763e <_dtoa_r+0x906>
 8007820:	4615      	mov	r5, r2
 8007822:	e7f7      	b.n	8007814 <_dtoa_r+0xadc>
 8007824:	9b06      	ldr	r3, [sp, #24]
 8007826:	4293      	cmp	r3, r2
 8007828:	d105      	bne.n	8007836 <_dtoa_r+0xafe>
 800782a:	2331      	movs	r3, #49	; 0x31
 800782c:	9a06      	ldr	r2, [sp, #24]
 800782e:	f10a 0a01 	add.w	sl, sl, #1
 8007832:	7013      	strb	r3, [r2, #0]
 8007834:	e703      	b.n	800763e <_dtoa_r+0x906>
 8007836:	4615      	mov	r5, r2
 8007838:	e7a1      	b.n	800777e <_dtoa_r+0xa46>
 800783a:	4b17      	ldr	r3, [pc, #92]	; (8007898 <_dtoa_r+0xb60>)
 800783c:	f7ff bae1 	b.w	8006e02 <_dtoa_r+0xca>
 8007840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007842:	2b00      	cmp	r3, #0
 8007844:	f47f aabb 	bne.w	8006dbe <_dtoa_r+0x86>
 8007848:	4b14      	ldr	r3, [pc, #80]	; (800789c <_dtoa_r+0xb64>)
 800784a:	f7ff bada 	b.w	8006e02 <_dtoa_r+0xca>
 800784e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007850:	2b01      	cmp	r3, #1
 8007852:	f77f ae3f 	ble.w	80074d4 <_dtoa_r+0x79c>
 8007856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007858:	9308      	str	r3, [sp, #32]
 800785a:	e653      	b.n	8007504 <_dtoa_r+0x7cc>
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	dc03      	bgt.n	800786a <_dtoa_r+0xb32>
 8007862:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007864:	2b02      	cmp	r3, #2
 8007866:	f73f aed5 	bgt.w	8007614 <_dtoa_r+0x8dc>
 800786a:	9d06      	ldr	r5, [sp, #24]
 800786c:	4631      	mov	r1, r6
 800786e:	4658      	mov	r0, fp
 8007870:	f7ff f9d4 	bl	8006c1c <quorem>
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800787a:	f805 8b01 	strb.w	r8, [r5], #1
 800787e:	9a04      	ldr	r2, [sp, #16]
 8007880:	1aeb      	subs	r3, r5, r3
 8007882:	429a      	cmp	r2, r3
 8007884:	ddb5      	ble.n	80077f2 <_dtoa_r+0xaba>
 8007886:	4659      	mov	r1, fp
 8007888:	2300      	movs	r3, #0
 800788a:	220a      	movs	r2, #10
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fd9b 	bl	80083c8 <__multadd>
 8007892:	4683      	mov	fp, r0
 8007894:	e7ea      	b.n	800786c <_dtoa_r+0xb34>
 8007896:	bf00      	nop
 8007898:	080092b0 	.word	0x080092b0
 800789c:	08009328 	.word	0x08009328

080078a0 <__sflush_r>:
 80078a0:	898a      	ldrh	r2, [r1, #12]
 80078a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a6:	4605      	mov	r5, r0
 80078a8:	0710      	lsls	r0, r2, #28
 80078aa:	460c      	mov	r4, r1
 80078ac:	d458      	bmi.n	8007960 <__sflush_r+0xc0>
 80078ae:	684b      	ldr	r3, [r1, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc05      	bgt.n	80078c0 <__sflush_r+0x20>
 80078b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dc02      	bgt.n	80078c0 <__sflush_r+0x20>
 80078ba:	2000      	movs	r0, #0
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078c2:	2e00      	cmp	r6, #0
 80078c4:	d0f9      	beq.n	80078ba <__sflush_r+0x1a>
 80078c6:	2300      	movs	r3, #0
 80078c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078cc:	682f      	ldr	r7, [r5, #0]
 80078ce:	6a21      	ldr	r1, [r4, #32]
 80078d0:	602b      	str	r3, [r5, #0]
 80078d2:	d032      	beq.n	800793a <__sflush_r+0x9a>
 80078d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	075a      	lsls	r2, r3, #29
 80078da:	d505      	bpl.n	80078e8 <__sflush_r+0x48>
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	1ac0      	subs	r0, r0, r3
 80078e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078e2:	b10b      	cbz	r3, 80078e8 <__sflush_r+0x48>
 80078e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078e6:	1ac0      	subs	r0, r0, r3
 80078e8:	2300      	movs	r3, #0
 80078ea:	4602      	mov	r2, r0
 80078ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078ee:	6a21      	ldr	r1, [r4, #32]
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b0      	blx	r6
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	d106      	bne.n	8007908 <__sflush_r+0x68>
 80078fa:	6829      	ldr	r1, [r5, #0]
 80078fc:	291d      	cmp	r1, #29
 80078fe:	d848      	bhi.n	8007992 <__sflush_r+0xf2>
 8007900:	4a29      	ldr	r2, [pc, #164]	; (80079a8 <__sflush_r+0x108>)
 8007902:	40ca      	lsrs	r2, r1
 8007904:	07d6      	lsls	r6, r2, #31
 8007906:	d544      	bpl.n	8007992 <__sflush_r+0xf2>
 8007908:	2200      	movs	r2, #0
 800790a:	6062      	str	r2, [r4, #4]
 800790c:	6922      	ldr	r2, [r4, #16]
 800790e:	04d9      	lsls	r1, r3, #19
 8007910:	6022      	str	r2, [r4, #0]
 8007912:	d504      	bpl.n	800791e <__sflush_r+0x7e>
 8007914:	1c42      	adds	r2, r0, #1
 8007916:	d101      	bne.n	800791c <__sflush_r+0x7c>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b903      	cbnz	r3, 800791e <__sflush_r+0x7e>
 800791c:	6560      	str	r0, [r4, #84]	; 0x54
 800791e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007920:	602f      	str	r7, [r5, #0]
 8007922:	2900      	cmp	r1, #0
 8007924:	d0c9      	beq.n	80078ba <__sflush_r+0x1a>
 8007926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800792a:	4299      	cmp	r1, r3
 800792c:	d002      	beq.n	8007934 <__sflush_r+0x94>
 800792e:	4628      	mov	r0, r5
 8007930:	f001 f906 	bl	8008b40 <_free_r>
 8007934:	2000      	movs	r0, #0
 8007936:	6360      	str	r0, [r4, #52]	; 0x34
 8007938:	e7c0      	b.n	80078bc <__sflush_r+0x1c>
 800793a:	2301      	movs	r3, #1
 800793c:	4628      	mov	r0, r5
 800793e:	47b0      	blx	r6
 8007940:	1c41      	adds	r1, r0, #1
 8007942:	d1c8      	bne.n	80078d6 <__sflush_r+0x36>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0c5      	beq.n	80078d6 <__sflush_r+0x36>
 800794a:	2b1d      	cmp	r3, #29
 800794c:	d001      	beq.n	8007952 <__sflush_r+0xb2>
 800794e:	2b16      	cmp	r3, #22
 8007950:	d101      	bne.n	8007956 <__sflush_r+0xb6>
 8007952:	602f      	str	r7, [r5, #0]
 8007954:	e7b1      	b.n	80078ba <__sflush_r+0x1a>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	e7ad      	b.n	80078bc <__sflush_r+0x1c>
 8007960:	690f      	ldr	r7, [r1, #16]
 8007962:	2f00      	cmp	r7, #0
 8007964:	d0a9      	beq.n	80078ba <__sflush_r+0x1a>
 8007966:	0793      	lsls	r3, r2, #30
 8007968:	bf18      	it	ne
 800796a:	2300      	movne	r3, #0
 800796c:	680e      	ldr	r6, [r1, #0]
 800796e:	bf08      	it	eq
 8007970:	694b      	ldreq	r3, [r1, #20]
 8007972:	eba6 0807 	sub.w	r8, r6, r7
 8007976:	600f      	str	r7, [r1, #0]
 8007978:	608b      	str	r3, [r1, #8]
 800797a:	f1b8 0f00 	cmp.w	r8, #0
 800797e:	dd9c      	ble.n	80078ba <__sflush_r+0x1a>
 8007980:	4643      	mov	r3, r8
 8007982:	463a      	mov	r2, r7
 8007984:	6a21      	ldr	r1, [r4, #32]
 8007986:	4628      	mov	r0, r5
 8007988:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800798a:	47b0      	blx	r6
 800798c:	2800      	cmp	r0, #0
 800798e:	dc06      	bgt.n	800799e <__sflush_r+0xfe>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800799c:	e78e      	b.n	80078bc <__sflush_r+0x1c>
 800799e:	4407      	add	r7, r0
 80079a0:	eba8 0800 	sub.w	r8, r8, r0
 80079a4:	e7e9      	b.n	800797a <__sflush_r+0xda>
 80079a6:	bf00      	nop
 80079a8:	20400001 	.word	0x20400001

080079ac <_fflush_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	690b      	ldr	r3, [r1, #16]
 80079b0:	4605      	mov	r5, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	b1db      	cbz	r3, 80079ee <_fflush_r+0x42>
 80079b6:	b118      	cbz	r0, 80079c0 <_fflush_r+0x14>
 80079b8:	6983      	ldr	r3, [r0, #24]
 80079ba:	b90b      	cbnz	r3, 80079c0 <_fflush_r+0x14>
 80079bc:	f000 f860 	bl	8007a80 <__sinit>
 80079c0:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <_fflush_r+0x48>)
 80079c2:	429c      	cmp	r4, r3
 80079c4:	d109      	bne.n	80079da <_fflush_r+0x2e>
 80079c6:	686c      	ldr	r4, [r5, #4]
 80079c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079cc:	b17b      	cbz	r3, 80079ee <_fflush_r+0x42>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d6:	f7ff bf63 	b.w	80078a0 <__sflush_r>
 80079da:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <_fflush_r+0x4c>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d101      	bne.n	80079e4 <_fflush_r+0x38>
 80079e0:	68ac      	ldr	r4, [r5, #8]
 80079e2:	e7f1      	b.n	80079c8 <_fflush_r+0x1c>
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <_fflush_r+0x50>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	bf08      	it	eq
 80079ea:	68ec      	ldreq	r4, [r5, #12]
 80079ec:	e7ec      	b.n	80079c8 <_fflush_r+0x1c>
 80079ee:	2000      	movs	r0, #0
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	08009358 	.word	0x08009358
 80079f8:	08009378 	.word	0x08009378
 80079fc:	08009338 	.word	0x08009338

08007a00 <std>:
 8007a00:	2300      	movs	r3, #0
 8007a02:	b510      	push	{r4, lr}
 8007a04:	4604      	mov	r4, r0
 8007a06:	e9c0 3300 	strd	r3, r3, [r0]
 8007a0a:	6083      	str	r3, [r0, #8]
 8007a0c:	8181      	strh	r1, [r0, #12]
 8007a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a10:	81c2      	strh	r2, [r0, #14]
 8007a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a16:	6183      	str	r3, [r0, #24]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	305c      	adds	r0, #92	; 0x5c
 8007a1e:	f7fd fd33 	bl	8005488 <memset>
 8007a22:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <std+0x38>)
 8007a24:	6224      	str	r4, [r4, #32]
 8007a26:	6263      	str	r3, [r4, #36]	; 0x24
 8007a28:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <std+0x3c>)
 8007a2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <std+0x40>)
 8007a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <std+0x44>)
 8007a32:	6323      	str	r3, [r4, #48]	; 0x30
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	bf00      	nop
 8007a38:	08008f29 	.word	0x08008f29
 8007a3c:	08008f4b 	.word	0x08008f4b
 8007a40:	08008f83 	.word	0x08008f83
 8007a44:	08008fa7 	.word	0x08008fa7

08007a48 <_cleanup_r>:
 8007a48:	4901      	ldr	r1, [pc, #4]	; (8007a50 <_cleanup_r+0x8>)
 8007a4a:	f000 b885 	b.w	8007b58 <_fwalk_reent>
 8007a4e:	bf00      	nop
 8007a50:	080079ad 	.word	0x080079ad

08007a54 <__sfmoreglue>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	2568      	movs	r5, #104	; 0x68
 8007a58:	1e4a      	subs	r2, r1, #1
 8007a5a:	4355      	muls	r5, r2
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a62:	f001 f8b9 	bl	8008bd8 <_malloc_r>
 8007a66:	4604      	mov	r4, r0
 8007a68:	b140      	cbz	r0, 8007a7c <__sfmoreglue+0x28>
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007a70:	300c      	adds	r0, #12
 8007a72:	60a0      	str	r0, [r4, #8]
 8007a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a78:	f7fd fd06 	bl	8005488 <memset>
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}

08007a80 <__sinit>:
 8007a80:	6983      	ldr	r3, [r0, #24]
 8007a82:	b510      	push	{r4, lr}
 8007a84:	4604      	mov	r4, r0
 8007a86:	bb33      	cbnz	r3, 8007ad6 <__sinit+0x56>
 8007a88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007a8c:	6503      	str	r3, [r0, #80]	; 0x50
 8007a8e:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <__sinit+0x58>)
 8007a90:	4a12      	ldr	r2, [pc, #72]	; (8007adc <__sinit+0x5c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6282      	str	r2, [r0, #40]	; 0x28
 8007a96:	4298      	cmp	r0, r3
 8007a98:	bf04      	itt	eq
 8007a9a:	2301      	moveq	r3, #1
 8007a9c:	6183      	streq	r3, [r0, #24]
 8007a9e:	f000 f81f 	bl	8007ae0 <__sfp>
 8007aa2:	6060      	str	r0, [r4, #4]
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 f81b 	bl	8007ae0 <__sfp>
 8007aaa:	60a0      	str	r0, [r4, #8]
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 f817 	bl	8007ae0 <__sfp>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	60e0      	str	r0, [r4, #12]
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	6860      	ldr	r0, [r4, #4]
 8007aba:	f7ff ffa1 	bl	8007a00 <std>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	2109      	movs	r1, #9
 8007ac2:	68a0      	ldr	r0, [r4, #8]
 8007ac4:	f7ff ff9c 	bl	8007a00 <std>
 8007ac8:	2202      	movs	r2, #2
 8007aca:	2112      	movs	r1, #18
 8007acc:	68e0      	ldr	r0, [r4, #12]
 8007ace:	f7ff ff97 	bl	8007a00 <std>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	61a3      	str	r3, [r4, #24]
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	0800929c 	.word	0x0800929c
 8007adc:	08007a49 	.word	0x08007a49

08007ae0 <__sfp>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <__sfp+0x70>)
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	681e      	ldr	r6, [r3, #0]
 8007ae8:	69b3      	ldr	r3, [r6, #24]
 8007aea:	b913      	cbnz	r3, 8007af2 <__sfp+0x12>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ffc7 	bl	8007a80 <__sinit>
 8007af2:	3648      	adds	r6, #72	; 0x48
 8007af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	d503      	bpl.n	8007b04 <__sfp+0x24>
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	b133      	cbz	r3, 8007b0e <__sfp+0x2e>
 8007b00:	6836      	ldr	r6, [r6, #0]
 8007b02:	e7f7      	b.n	8007af4 <__sfp+0x14>
 8007b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b08:	b16d      	cbz	r5, 8007b26 <__sfp+0x46>
 8007b0a:	3468      	adds	r4, #104	; 0x68
 8007b0c:	e7f4      	b.n	8007af8 <__sfp+0x18>
 8007b0e:	2104      	movs	r1, #4
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7ff ff9f 	bl	8007a54 <__sfmoreglue>
 8007b16:	6030      	str	r0, [r6, #0]
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d1f1      	bne.n	8007b00 <__sfp+0x20>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	4604      	mov	r4, r0
 8007b20:	603b      	str	r3, [r7, #0]
 8007b22:	4620      	mov	r0, r4
 8007b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <__sfp+0x74>)
 8007b28:	6665      	str	r5, [r4, #100]	; 0x64
 8007b2a:	e9c4 5500 	strd	r5, r5, [r4]
 8007b2e:	60a5      	str	r5, [r4, #8]
 8007b30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007b34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007b38:	2208      	movs	r2, #8
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b40:	f7fd fca2 	bl	8005488 <memset>
 8007b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b4c:	e7e9      	b.n	8007b22 <__sfp+0x42>
 8007b4e:	bf00      	nop
 8007b50:	0800929c 	.word	0x0800929c
 8007b54:	ffff0001 	.word	0xffff0001

08007b58 <_fwalk_reent>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	4689      	mov	r9, r1
 8007b60:	2600      	movs	r6, #0
 8007b62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b66:	b914      	cbnz	r4, 8007b6e <_fwalk_reent+0x16>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007b72:	3f01      	subs	r7, #1
 8007b74:	d501      	bpl.n	8007b7a <_fwalk_reent+0x22>
 8007b76:	6824      	ldr	r4, [r4, #0]
 8007b78:	e7f5      	b.n	8007b66 <_fwalk_reent+0xe>
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d907      	bls.n	8007b90 <_fwalk_reent+0x38>
 8007b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b84:	3301      	adds	r3, #1
 8007b86:	d003      	beq.n	8007b90 <_fwalk_reent+0x38>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	47c8      	blx	r9
 8007b8e:	4306      	orrs	r6, r0
 8007b90:	3568      	adds	r5, #104	; 0x68
 8007b92:	e7ee      	b.n	8007b72 <_fwalk_reent+0x1a>

08007b94 <rshift>:
 8007b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b96:	6906      	ldr	r6, [r0, #16]
 8007b98:	114b      	asrs	r3, r1, #5
 8007b9a:	429e      	cmp	r6, r3
 8007b9c:	f100 0414 	add.w	r4, r0, #20
 8007ba0:	dd31      	ble.n	8007c06 <rshift+0x72>
 8007ba2:	f011 011f 	ands.w	r1, r1, #31
 8007ba6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007baa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007bae:	d108      	bne.n	8007bc2 <rshift+0x2e>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	42b2      	cmp	r2, r6
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	d211      	bcs.n	8007bdc <rshift+0x48>
 8007bb8:	f852 3b04 	ldr.w	r3, [r2], #4
 8007bbc:	f841 3b04 	str.w	r3, [r1], #4
 8007bc0:	e7f7      	b.n	8007bb2 <rshift+0x1e>
 8007bc2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007bc6:	4623      	mov	r3, r4
 8007bc8:	f1c1 0c20 	rsb	ip, r1, #32
 8007bcc:	40cd      	lsrs	r5, r1
 8007bce:	3204      	adds	r2, #4
 8007bd0:	42b2      	cmp	r2, r6
 8007bd2:	4617      	mov	r7, r2
 8007bd4:	d30d      	bcc.n	8007bf2 <rshift+0x5e>
 8007bd6:	601d      	str	r5, [r3, #0]
 8007bd8:	b105      	cbz	r5, 8007bdc <rshift+0x48>
 8007bda:	3304      	adds	r3, #4
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	eba3 0204 	sub.w	r2, r3, r4
 8007be2:	bf08      	it	eq
 8007be4:	2300      	moveq	r3, #0
 8007be6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bea:	6102      	str	r2, [r0, #16]
 8007bec:	bf08      	it	eq
 8007bee:	6143      	streq	r3, [r0, #20]
 8007bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf2:	683f      	ldr	r7, [r7, #0]
 8007bf4:	fa07 f70c 	lsl.w	r7, r7, ip
 8007bf8:	433d      	orrs	r5, r7
 8007bfa:	f843 5b04 	str.w	r5, [r3], #4
 8007bfe:	f852 5b04 	ldr.w	r5, [r2], #4
 8007c02:	40cd      	lsrs	r5, r1
 8007c04:	e7e4      	b.n	8007bd0 <rshift+0x3c>
 8007c06:	4623      	mov	r3, r4
 8007c08:	e7e8      	b.n	8007bdc <rshift+0x48>

08007c0a <__hexdig_fun>:
 8007c0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c0e:	2b09      	cmp	r3, #9
 8007c10:	d802      	bhi.n	8007c18 <__hexdig_fun+0xe>
 8007c12:	3820      	subs	r0, #32
 8007c14:	b2c0      	uxtb	r0, r0
 8007c16:	4770      	bx	lr
 8007c18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c1c:	2b05      	cmp	r3, #5
 8007c1e:	d801      	bhi.n	8007c24 <__hexdig_fun+0x1a>
 8007c20:	3847      	subs	r0, #71	; 0x47
 8007c22:	e7f7      	b.n	8007c14 <__hexdig_fun+0xa>
 8007c24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	d801      	bhi.n	8007c30 <__hexdig_fun+0x26>
 8007c2c:	3827      	subs	r0, #39	; 0x27
 8007c2e:	e7f1      	b.n	8007c14 <__hexdig_fun+0xa>
 8007c30:	2000      	movs	r0, #0
 8007c32:	4770      	bx	lr

08007c34 <__gethex>:
 8007c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	b08b      	sub	sp, #44	; 0x2c
 8007c3a:	9002      	str	r0, [sp, #8]
 8007c3c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007c3e:	468a      	mov	sl, r1
 8007c40:	4690      	mov	r8, r2
 8007c42:	9306      	str	r3, [sp, #24]
 8007c44:	f000 face 	bl	80081e4 <__localeconv_l>
 8007c48:	6803      	ldr	r3, [r0, #0]
 8007c4a:	f04f 0b00 	mov.w	fp, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	f7f8 fa7d 	bl	8000150 <strlen>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	9001      	str	r0, [sp, #4]
 8007c5a:	4403      	add	r3, r0
 8007c5c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	f8da 3000 	ldr.w	r3, [sl]
 8007c66:	3302      	adds	r3, #2
 8007c68:	461f      	mov	r7, r3
 8007c6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c6e:	2830      	cmp	r0, #48	; 0x30
 8007c70:	d06c      	beq.n	8007d4c <__gethex+0x118>
 8007c72:	f7ff ffca 	bl	8007c0a <__hexdig_fun>
 8007c76:	4604      	mov	r4, r0
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d16a      	bne.n	8007d52 <__gethex+0x11e>
 8007c7c:	9a01      	ldr	r2, [sp, #4]
 8007c7e:	9903      	ldr	r1, [sp, #12]
 8007c80:	4638      	mov	r0, r7
 8007c82:	f001 f994 	bl	8008fae <strncmp>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d166      	bne.n	8007d58 <__gethex+0x124>
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	5cf8      	ldrb	r0, [r7, r3]
 8007c8e:	18fe      	adds	r6, r7, r3
 8007c90:	f7ff ffbb 	bl	8007c0a <__hexdig_fun>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d062      	beq.n	8007d5e <__gethex+0x12a>
 8007c98:	4633      	mov	r3, r6
 8007c9a:	7818      	ldrb	r0, [r3, #0]
 8007c9c:	461f      	mov	r7, r3
 8007c9e:	2830      	cmp	r0, #48	; 0x30
 8007ca0:	f103 0301 	add.w	r3, r3, #1
 8007ca4:	d0f9      	beq.n	8007c9a <__gethex+0x66>
 8007ca6:	f7ff ffb0 	bl	8007c0a <__hexdig_fun>
 8007caa:	fab0 f580 	clz	r5, r0
 8007cae:	4634      	mov	r4, r6
 8007cb0:	f04f 0b01 	mov.w	fp, #1
 8007cb4:	096d      	lsrs	r5, r5, #5
 8007cb6:	463a      	mov	r2, r7
 8007cb8:	4616      	mov	r6, r2
 8007cba:	7830      	ldrb	r0, [r6, #0]
 8007cbc:	3201      	adds	r2, #1
 8007cbe:	f7ff ffa4 	bl	8007c0a <__hexdig_fun>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d1f8      	bne.n	8007cb8 <__gethex+0x84>
 8007cc6:	9a01      	ldr	r2, [sp, #4]
 8007cc8:	9903      	ldr	r1, [sp, #12]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f001 f96f 	bl	8008fae <strncmp>
 8007cd0:	b950      	cbnz	r0, 8007ce8 <__gethex+0xb4>
 8007cd2:	b954      	cbnz	r4, 8007cea <__gethex+0xb6>
 8007cd4:	9b01      	ldr	r3, [sp, #4]
 8007cd6:	18f4      	adds	r4, r6, r3
 8007cd8:	4622      	mov	r2, r4
 8007cda:	4616      	mov	r6, r2
 8007cdc:	7830      	ldrb	r0, [r6, #0]
 8007cde:	3201      	adds	r2, #1
 8007ce0:	f7ff ff93 	bl	8007c0a <__hexdig_fun>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d1f8      	bne.n	8007cda <__gethex+0xa6>
 8007ce8:	b10c      	cbz	r4, 8007cee <__gethex+0xba>
 8007cea:	1ba4      	subs	r4, r4, r6
 8007cec:	00a4      	lsls	r4, r4, #2
 8007cee:	7833      	ldrb	r3, [r6, #0]
 8007cf0:	2b50      	cmp	r3, #80	; 0x50
 8007cf2:	d001      	beq.n	8007cf8 <__gethex+0xc4>
 8007cf4:	2b70      	cmp	r3, #112	; 0x70
 8007cf6:	d140      	bne.n	8007d7a <__gethex+0x146>
 8007cf8:	7873      	ldrb	r3, [r6, #1]
 8007cfa:	2b2b      	cmp	r3, #43	; 0x2b
 8007cfc:	d031      	beq.n	8007d62 <__gethex+0x12e>
 8007cfe:	2b2d      	cmp	r3, #45	; 0x2d
 8007d00:	d033      	beq.n	8007d6a <__gethex+0x136>
 8007d02:	f04f 0900 	mov.w	r9, #0
 8007d06:	1c71      	adds	r1, r6, #1
 8007d08:	7808      	ldrb	r0, [r1, #0]
 8007d0a:	f7ff ff7e 	bl	8007c0a <__hexdig_fun>
 8007d0e:	1e43      	subs	r3, r0, #1
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b18      	cmp	r3, #24
 8007d14:	d831      	bhi.n	8007d7a <__gethex+0x146>
 8007d16:	f1a0 0210 	sub.w	r2, r0, #16
 8007d1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d1e:	f7ff ff74 	bl	8007c0a <__hexdig_fun>
 8007d22:	1e43      	subs	r3, r0, #1
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b18      	cmp	r3, #24
 8007d28:	d922      	bls.n	8007d70 <__gethex+0x13c>
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	d000      	beq.n	8007d32 <__gethex+0xfe>
 8007d30:	4252      	negs	r2, r2
 8007d32:	4414      	add	r4, r2
 8007d34:	f8ca 1000 	str.w	r1, [sl]
 8007d38:	b30d      	cbz	r5, 8007d7e <__gethex+0x14a>
 8007d3a:	f1bb 0f00 	cmp.w	fp, #0
 8007d3e:	bf0c      	ite	eq
 8007d40:	2706      	moveq	r7, #6
 8007d42:	2700      	movne	r7, #0
 8007d44:	4638      	mov	r0, r7
 8007d46:	b00b      	add	sp, #44	; 0x2c
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	f10b 0b01 	add.w	fp, fp, #1
 8007d50:	e78a      	b.n	8007c68 <__gethex+0x34>
 8007d52:	2500      	movs	r5, #0
 8007d54:	462c      	mov	r4, r5
 8007d56:	e7ae      	b.n	8007cb6 <__gethex+0x82>
 8007d58:	463e      	mov	r6, r7
 8007d5a:	2501      	movs	r5, #1
 8007d5c:	e7c7      	b.n	8007cee <__gethex+0xba>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	e7fb      	b.n	8007d5a <__gethex+0x126>
 8007d62:	f04f 0900 	mov.w	r9, #0
 8007d66:	1cb1      	adds	r1, r6, #2
 8007d68:	e7ce      	b.n	8007d08 <__gethex+0xd4>
 8007d6a:	f04f 0901 	mov.w	r9, #1
 8007d6e:	e7fa      	b.n	8007d66 <__gethex+0x132>
 8007d70:	230a      	movs	r3, #10
 8007d72:	fb03 0202 	mla	r2, r3, r2, r0
 8007d76:	3a10      	subs	r2, #16
 8007d78:	e7cf      	b.n	8007d1a <__gethex+0xe6>
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	e7da      	b.n	8007d34 <__gethex+0x100>
 8007d7e:	4629      	mov	r1, r5
 8007d80:	1bf3      	subs	r3, r6, r7
 8007d82:	3b01      	subs	r3, #1
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	dc49      	bgt.n	8007e1c <__gethex+0x1e8>
 8007d88:	9802      	ldr	r0, [sp, #8]
 8007d8a:	f000 fad2 	bl	8008332 <_Balloc>
 8007d8e:	f04f 0b00 	mov.w	fp, #0
 8007d92:	4605      	mov	r5, r0
 8007d94:	46da      	mov	sl, fp
 8007d96:	9b01      	ldr	r3, [sp, #4]
 8007d98:	f100 0914 	add.w	r9, r0, #20
 8007d9c:	f1c3 0301 	rsb	r3, r3, #1
 8007da0:	f8cd 9010 	str.w	r9, [sp, #16]
 8007da4:	9308      	str	r3, [sp, #32]
 8007da6:	42b7      	cmp	r7, r6
 8007da8:	d33b      	bcc.n	8007e22 <__gethex+0x1ee>
 8007daa:	9804      	ldr	r0, [sp, #16]
 8007dac:	f840 ab04 	str.w	sl, [r0], #4
 8007db0:	eba0 0009 	sub.w	r0, r0, r9
 8007db4:	1080      	asrs	r0, r0, #2
 8007db6:	6128      	str	r0, [r5, #16]
 8007db8:	0147      	lsls	r7, r0, #5
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f000 fb7d 	bl	80084ba <__hi0bits>
 8007dc0:	f8d8 6000 	ldr.w	r6, [r8]
 8007dc4:	1a3f      	subs	r7, r7, r0
 8007dc6:	42b7      	cmp	r7, r6
 8007dc8:	dd64      	ble.n	8007e94 <__gethex+0x260>
 8007dca:	1bbf      	subs	r7, r7, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 fe87 	bl	8008ae2 <__any_on>
 8007dd4:	4682      	mov	sl, r0
 8007dd6:	b178      	cbz	r0, 8007df8 <__gethex+0x1c4>
 8007dd8:	f04f 0a01 	mov.w	sl, #1
 8007ddc:	1e7b      	subs	r3, r7, #1
 8007dde:	1159      	asrs	r1, r3, #5
 8007de0:	f003 021f 	and.w	r2, r3, #31
 8007de4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007de8:	fa0a f202 	lsl.w	r2, sl, r2
 8007dec:	420a      	tst	r2, r1
 8007dee:	d003      	beq.n	8007df8 <__gethex+0x1c4>
 8007df0:	4553      	cmp	r3, sl
 8007df2:	dc46      	bgt.n	8007e82 <__gethex+0x24e>
 8007df4:	f04f 0a02 	mov.w	sl, #2
 8007df8:	4639      	mov	r1, r7
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f7ff feca 	bl	8007b94 <rshift>
 8007e00:	443c      	add	r4, r7
 8007e02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	da52      	bge.n	8007eb0 <__gethex+0x27c>
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	9802      	ldr	r0, [sp, #8]
 8007e0e:	f000 fac4 	bl	800839a <_Bfree>
 8007e12:	2300      	movs	r3, #0
 8007e14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e16:	27a3      	movs	r7, #163	; 0xa3
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	e793      	b.n	8007d44 <__gethex+0x110>
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	105b      	asrs	r3, r3, #1
 8007e20:	e7b0      	b.n	8007d84 <__gethex+0x150>
 8007e22:	1e73      	subs	r3, r6, #1
 8007e24:	9305      	str	r3, [sp, #20]
 8007e26:	9a07      	ldr	r2, [sp, #28]
 8007e28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d018      	beq.n	8007e62 <__gethex+0x22e>
 8007e30:	f1bb 0f20 	cmp.w	fp, #32
 8007e34:	d107      	bne.n	8007e46 <__gethex+0x212>
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	f8c3 a000 	str.w	sl, [r3]
 8007e3c:	f04f 0a00 	mov.w	sl, #0
 8007e40:	46d3      	mov	fp, sl
 8007e42:	3304      	adds	r3, #4
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007e4a:	f7ff fede 	bl	8007c0a <__hexdig_fun>
 8007e4e:	f000 000f 	and.w	r0, r0, #15
 8007e52:	fa00 f00b 	lsl.w	r0, r0, fp
 8007e56:	ea4a 0a00 	orr.w	sl, sl, r0
 8007e5a:	f10b 0b04 	add.w	fp, fp, #4
 8007e5e:	9b05      	ldr	r3, [sp, #20]
 8007e60:	e00d      	b.n	8007e7e <__gethex+0x24a>
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	9a08      	ldr	r2, [sp, #32]
 8007e66:	4413      	add	r3, r2
 8007e68:	42bb      	cmp	r3, r7
 8007e6a:	d3e1      	bcc.n	8007e30 <__gethex+0x1fc>
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	9a01      	ldr	r2, [sp, #4]
 8007e70:	9903      	ldr	r1, [sp, #12]
 8007e72:	9309      	str	r3, [sp, #36]	; 0x24
 8007e74:	f001 f89b 	bl	8008fae <strncmp>
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d1d8      	bne.n	8007e30 <__gethex+0x1fc>
 8007e7e:	461e      	mov	r6, r3
 8007e80:	e791      	b.n	8007da6 <__gethex+0x172>
 8007e82:	1eb9      	subs	r1, r7, #2
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 fe2c 	bl	8008ae2 <__any_on>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0b2      	beq.n	8007df4 <__gethex+0x1c0>
 8007e8e:	f04f 0a03 	mov.w	sl, #3
 8007e92:	e7b1      	b.n	8007df8 <__gethex+0x1c4>
 8007e94:	da09      	bge.n	8007eaa <__gethex+0x276>
 8007e96:	1bf7      	subs	r7, r6, r7
 8007e98:	4629      	mov	r1, r5
 8007e9a:	463a      	mov	r2, r7
 8007e9c:	9802      	ldr	r0, [sp, #8]
 8007e9e:	f000 fc47 	bl	8008730 <__lshift>
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	1be4      	subs	r4, r4, r7
 8007ea6:	f100 0914 	add.w	r9, r0, #20
 8007eaa:	f04f 0a00 	mov.w	sl, #0
 8007eae:	e7a8      	b.n	8007e02 <__gethex+0x1ce>
 8007eb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	dd6b      	ble.n	8007f90 <__gethex+0x35c>
 8007eb8:	1b04      	subs	r4, r0, r4
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	dc2e      	bgt.n	8007f1c <__gethex+0x2e8>
 8007ebe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d022      	beq.n	8007f0c <__gethex+0x2d8>
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d024      	beq.n	8007f14 <__gethex+0x2e0>
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d115      	bne.n	8007efa <__gethex+0x2c6>
 8007ece:	42a6      	cmp	r6, r4
 8007ed0:	d113      	bne.n	8007efa <__gethex+0x2c6>
 8007ed2:	2e01      	cmp	r6, #1
 8007ed4:	dc0b      	bgt.n	8007eee <__gethex+0x2ba>
 8007ed6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007eda:	9a06      	ldr	r2, [sp, #24]
 8007edc:	2762      	movs	r7, #98	; 0x62
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	612b      	str	r3, [r5, #16]
 8007ee4:	f8c9 3000 	str.w	r3, [r9]
 8007ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eea:	601d      	str	r5, [r3, #0]
 8007eec:	e72a      	b.n	8007d44 <__gethex+0x110>
 8007eee:	1e71      	subs	r1, r6, #1
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 fdf6 	bl	8008ae2 <__any_on>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d1ed      	bne.n	8007ed6 <__gethex+0x2a2>
 8007efa:	4629      	mov	r1, r5
 8007efc:	9802      	ldr	r0, [sp, #8]
 8007efe:	f000 fa4c 	bl	800839a <_Bfree>
 8007f02:	2300      	movs	r3, #0
 8007f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f06:	2750      	movs	r7, #80	; 0x50
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	e71b      	b.n	8007d44 <__gethex+0x110>
 8007f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0e1      	beq.n	8007ed6 <__gethex+0x2a2>
 8007f12:	e7f2      	b.n	8007efa <__gethex+0x2c6>
 8007f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1dd      	bne.n	8007ed6 <__gethex+0x2a2>
 8007f1a:	e7ee      	b.n	8007efa <__gethex+0x2c6>
 8007f1c:	1e67      	subs	r7, r4, #1
 8007f1e:	f1ba 0f00 	cmp.w	sl, #0
 8007f22:	d132      	bne.n	8007f8a <__gethex+0x356>
 8007f24:	b127      	cbz	r7, 8007f30 <__gethex+0x2fc>
 8007f26:	4639      	mov	r1, r7
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f000 fdda 	bl	8008ae2 <__any_on>
 8007f2e:	4682      	mov	sl, r0
 8007f30:	2301      	movs	r3, #1
 8007f32:	117a      	asrs	r2, r7, #5
 8007f34:	f007 071f 	and.w	r7, r7, #31
 8007f38:	fa03 f707 	lsl.w	r7, r3, r7
 8007f3c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007f40:	4621      	mov	r1, r4
 8007f42:	421f      	tst	r7, r3
 8007f44:	f04f 0702 	mov.w	r7, #2
 8007f48:	4628      	mov	r0, r5
 8007f4a:	bf18      	it	ne
 8007f4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007f50:	1b36      	subs	r6, r6, r4
 8007f52:	f7ff fe1f 	bl	8007b94 <rshift>
 8007f56:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007f5a:	f1ba 0f00 	cmp.w	sl, #0
 8007f5e:	d048      	beq.n	8007ff2 <__gethex+0x3be>
 8007f60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d015      	beq.n	8007f94 <__gethex+0x360>
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d017      	beq.n	8007f9c <__gethex+0x368>
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d109      	bne.n	8007f84 <__gethex+0x350>
 8007f70:	f01a 0f02 	tst.w	sl, #2
 8007f74:	d006      	beq.n	8007f84 <__gethex+0x350>
 8007f76:	f8d9 3000 	ldr.w	r3, [r9]
 8007f7a:	ea4a 0a03 	orr.w	sl, sl, r3
 8007f7e:	f01a 0f01 	tst.w	sl, #1
 8007f82:	d10e      	bne.n	8007fa2 <__gethex+0x36e>
 8007f84:	f047 0710 	orr.w	r7, r7, #16
 8007f88:	e033      	b.n	8007ff2 <__gethex+0x3be>
 8007f8a:	f04f 0a01 	mov.w	sl, #1
 8007f8e:	e7cf      	b.n	8007f30 <__gethex+0x2fc>
 8007f90:	2701      	movs	r7, #1
 8007f92:	e7e2      	b.n	8007f5a <__gethex+0x326>
 8007f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f96:	f1c3 0301 	rsb	r3, r3, #1
 8007f9a:	9315      	str	r3, [sp, #84]	; 0x54
 8007f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f0      	beq.n	8007f84 <__gethex+0x350>
 8007fa2:	f04f 0c00 	mov.w	ip, #0
 8007fa6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007faa:	f105 0314 	add.w	r3, r5, #20
 8007fae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007fb2:	eb03 010a 	add.w	r1, r3, sl
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fbc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007fc0:	d01c      	beq.n	8007ffc <__gethex+0x3c8>
 8007fc2:	3201      	adds	r2, #1
 8007fc4:	6002      	str	r2, [r0, #0]
 8007fc6:	2f02      	cmp	r7, #2
 8007fc8:	f105 0314 	add.w	r3, r5, #20
 8007fcc:	d138      	bne.n	8008040 <__gethex+0x40c>
 8007fce:	f8d8 2000 	ldr.w	r2, [r8]
 8007fd2:	3a01      	subs	r2, #1
 8007fd4:	42b2      	cmp	r2, r6
 8007fd6:	d10a      	bne.n	8007fee <__gethex+0x3ba>
 8007fd8:	2201      	movs	r2, #1
 8007fda:	1171      	asrs	r1, r6, #5
 8007fdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fe0:	f006 061f 	and.w	r6, r6, #31
 8007fe4:	fa02 f606 	lsl.w	r6, r2, r6
 8007fe8:	421e      	tst	r6, r3
 8007fea:	bf18      	it	ne
 8007fec:	4617      	movne	r7, r2
 8007fee:	f047 0720 	orr.w	r7, r7, #32
 8007ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ff4:	601d      	str	r5, [r3, #0]
 8007ff6:	9b06      	ldr	r3, [sp, #24]
 8007ff8:	601c      	str	r4, [r3, #0]
 8007ffa:	e6a3      	b.n	8007d44 <__gethex+0x110>
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	f843 cc04 	str.w	ip, [r3, #-4]
 8008002:	d8d8      	bhi.n	8007fb6 <__gethex+0x382>
 8008004:	68ab      	ldr	r3, [r5, #8]
 8008006:	4599      	cmp	r9, r3
 8008008:	db12      	blt.n	8008030 <__gethex+0x3fc>
 800800a:	6869      	ldr	r1, [r5, #4]
 800800c:	9802      	ldr	r0, [sp, #8]
 800800e:	3101      	adds	r1, #1
 8008010:	f000 f98f 	bl	8008332 <_Balloc>
 8008014:	4683      	mov	fp, r0
 8008016:	692a      	ldr	r2, [r5, #16]
 8008018:	f105 010c 	add.w	r1, r5, #12
 800801c:	3202      	adds	r2, #2
 800801e:	0092      	lsls	r2, r2, #2
 8008020:	300c      	adds	r0, #12
 8008022:	f000 f97b 	bl	800831c <memcpy>
 8008026:	4629      	mov	r1, r5
 8008028:	9802      	ldr	r0, [sp, #8]
 800802a:	f000 f9b6 	bl	800839a <_Bfree>
 800802e:	465d      	mov	r5, fp
 8008030:	692b      	ldr	r3, [r5, #16]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	612a      	str	r2, [r5, #16]
 8008036:	2201      	movs	r2, #1
 8008038:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800803c:	615a      	str	r2, [r3, #20]
 800803e:	e7c2      	b.n	8007fc6 <__gethex+0x392>
 8008040:	692a      	ldr	r2, [r5, #16]
 8008042:	454a      	cmp	r2, r9
 8008044:	dd0b      	ble.n	800805e <__gethex+0x42a>
 8008046:	2101      	movs	r1, #1
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff fda3 	bl	8007b94 <rshift>
 800804e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008052:	3401      	adds	r4, #1
 8008054:	42a3      	cmp	r3, r4
 8008056:	f6ff aed8 	blt.w	8007e0a <__gethex+0x1d6>
 800805a:	2701      	movs	r7, #1
 800805c:	e7c7      	b.n	8007fee <__gethex+0x3ba>
 800805e:	f016 061f 	ands.w	r6, r6, #31
 8008062:	d0fa      	beq.n	800805a <__gethex+0x426>
 8008064:	449a      	add	sl, r3
 8008066:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800806a:	f000 fa26 	bl	80084ba <__hi0bits>
 800806e:	f1c6 0620 	rsb	r6, r6, #32
 8008072:	42b0      	cmp	r0, r6
 8008074:	dbe7      	blt.n	8008046 <__gethex+0x412>
 8008076:	e7f0      	b.n	800805a <__gethex+0x426>

08008078 <L_shift>:
 8008078:	f1c2 0208 	rsb	r2, r2, #8
 800807c:	0092      	lsls	r2, r2, #2
 800807e:	b570      	push	{r4, r5, r6, lr}
 8008080:	f1c2 0620 	rsb	r6, r2, #32
 8008084:	6843      	ldr	r3, [r0, #4]
 8008086:	6804      	ldr	r4, [r0, #0]
 8008088:	fa03 f506 	lsl.w	r5, r3, r6
 800808c:	432c      	orrs	r4, r5
 800808e:	40d3      	lsrs	r3, r2
 8008090:	6004      	str	r4, [r0, #0]
 8008092:	f840 3f04 	str.w	r3, [r0, #4]!
 8008096:	4288      	cmp	r0, r1
 8008098:	d3f4      	bcc.n	8008084 <L_shift+0xc>
 800809a:	bd70      	pop	{r4, r5, r6, pc}

0800809c <__match>:
 800809c:	b530      	push	{r4, r5, lr}
 800809e:	6803      	ldr	r3, [r0, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080a6:	b914      	cbnz	r4, 80080ae <__match+0x12>
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	2001      	movs	r0, #1
 80080ac:	bd30      	pop	{r4, r5, pc}
 80080ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80080b6:	2d19      	cmp	r5, #25
 80080b8:	bf98      	it	ls
 80080ba:	3220      	addls	r2, #32
 80080bc:	42a2      	cmp	r2, r4
 80080be:	d0f0      	beq.n	80080a2 <__match+0x6>
 80080c0:	2000      	movs	r0, #0
 80080c2:	e7f3      	b.n	80080ac <__match+0x10>

080080c4 <__hexnan>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	2500      	movs	r5, #0
 80080ca:	680b      	ldr	r3, [r1, #0]
 80080cc:	4682      	mov	sl, r0
 80080ce:	115f      	asrs	r7, r3, #5
 80080d0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80080d4:	f013 031f 	ands.w	r3, r3, #31
 80080d8:	bf18      	it	ne
 80080da:	3704      	addne	r7, #4
 80080dc:	1f3e      	subs	r6, r7, #4
 80080de:	4690      	mov	r8, r2
 80080e0:	46b1      	mov	r9, r6
 80080e2:	4634      	mov	r4, r6
 80080e4:	46ab      	mov	fp, r5
 80080e6:	b087      	sub	sp, #28
 80080e8:	6801      	ldr	r1, [r0, #0]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	f847 5c04 	str.w	r5, [r7, #-4]
 80080f0:	9502      	str	r5, [sp, #8]
 80080f2:	784a      	ldrb	r2, [r1, #1]
 80080f4:	1c4b      	adds	r3, r1, #1
 80080f6:	9303      	str	r3, [sp, #12]
 80080f8:	b342      	cbz	r2, 800814c <__hexnan+0x88>
 80080fa:	4610      	mov	r0, r2
 80080fc:	9105      	str	r1, [sp, #20]
 80080fe:	9204      	str	r2, [sp, #16]
 8008100:	f7ff fd83 	bl	8007c0a <__hexdig_fun>
 8008104:	2800      	cmp	r0, #0
 8008106:	d143      	bne.n	8008190 <__hexnan+0xcc>
 8008108:	9a04      	ldr	r2, [sp, #16]
 800810a:	9905      	ldr	r1, [sp, #20]
 800810c:	2a20      	cmp	r2, #32
 800810e:	d818      	bhi.n	8008142 <__hexnan+0x7e>
 8008110:	9b02      	ldr	r3, [sp, #8]
 8008112:	459b      	cmp	fp, r3
 8008114:	dd13      	ble.n	800813e <__hexnan+0x7a>
 8008116:	454c      	cmp	r4, r9
 8008118:	d206      	bcs.n	8008128 <__hexnan+0x64>
 800811a:	2d07      	cmp	r5, #7
 800811c:	dc04      	bgt.n	8008128 <__hexnan+0x64>
 800811e:	462a      	mov	r2, r5
 8008120:	4649      	mov	r1, r9
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff ffa8 	bl	8008078 <L_shift>
 8008128:	4544      	cmp	r4, r8
 800812a:	d944      	bls.n	80081b6 <__hexnan+0xf2>
 800812c:	2300      	movs	r3, #0
 800812e:	f1a4 0904 	sub.w	r9, r4, #4
 8008132:	f844 3c04 	str.w	r3, [r4, #-4]
 8008136:	461d      	mov	r5, r3
 8008138:	464c      	mov	r4, r9
 800813a:	f8cd b008 	str.w	fp, [sp, #8]
 800813e:	9903      	ldr	r1, [sp, #12]
 8008140:	e7d7      	b.n	80080f2 <__hexnan+0x2e>
 8008142:	2a29      	cmp	r2, #41	; 0x29
 8008144:	d14a      	bne.n	80081dc <__hexnan+0x118>
 8008146:	3102      	adds	r1, #2
 8008148:	f8ca 1000 	str.w	r1, [sl]
 800814c:	f1bb 0f00 	cmp.w	fp, #0
 8008150:	d044      	beq.n	80081dc <__hexnan+0x118>
 8008152:	454c      	cmp	r4, r9
 8008154:	d206      	bcs.n	8008164 <__hexnan+0xa0>
 8008156:	2d07      	cmp	r5, #7
 8008158:	dc04      	bgt.n	8008164 <__hexnan+0xa0>
 800815a:	462a      	mov	r2, r5
 800815c:	4649      	mov	r1, r9
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff ff8a 	bl	8008078 <L_shift>
 8008164:	4544      	cmp	r4, r8
 8008166:	d928      	bls.n	80081ba <__hexnan+0xf6>
 8008168:	4643      	mov	r3, r8
 800816a:	f854 2b04 	ldr.w	r2, [r4], #4
 800816e:	42a6      	cmp	r6, r4
 8008170:	f843 2b04 	str.w	r2, [r3], #4
 8008174:	d2f9      	bcs.n	800816a <__hexnan+0xa6>
 8008176:	2200      	movs	r2, #0
 8008178:	f843 2b04 	str.w	r2, [r3], #4
 800817c:	429e      	cmp	r6, r3
 800817e:	d2fb      	bcs.n	8008178 <__hexnan+0xb4>
 8008180:	6833      	ldr	r3, [r6, #0]
 8008182:	b91b      	cbnz	r3, 800818c <__hexnan+0xc8>
 8008184:	4546      	cmp	r6, r8
 8008186:	d127      	bne.n	80081d8 <__hexnan+0x114>
 8008188:	2301      	movs	r3, #1
 800818a:	6033      	str	r3, [r6, #0]
 800818c:	2005      	movs	r0, #5
 800818e:	e026      	b.n	80081de <__hexnan+0x11a>
 8008190:	3501      	adds	r5, #1
 8008192:	2d08      	cmp	r5, #8
 8008194:	f10b 0b01 	add.w	fp, fp, #1
 8008198:	dd06      	ble.n	80081a8 <__hexnan+0xe4>
 800819a:	4544      	cmp	r4, r8
 800819c:	d9cf      	bls.n	800813e <__hexnan+0x7a>
 800819e:	2300      	movs	r3, #0
 80081a0:	2501      	movs	r5, #1
 80081a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80081a6:	3c04      	subs	r4, #4
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	f000 000f 	and.w	r0, r0, #15
 80081ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081b2:	6020      	str	r0, [r4, #0]
 80081b4:	e7c3      	b.n	800813e <__hexnan+0x7a>
 80081b6:	2508      	movs	r5, #8
 80081b8:	e7c1      	b.n	800813e <__hexnan+0x7a>
 80081ba:	9b01      	ldr	r3, [sp, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0df      	beq.n	8008180 <__hexnan+0xbc>
 80081c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081c4:	f1c3 0320 	rsb	r3, r3, #32
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
 80081cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80081d0:	401a      	ands	r2, r3
 80081d2:	f847 2c04 	str.w	r2, [r7, #-4]
 80081d6:	e7d3      	b.n	8008180 <__hexnan+0xbc>
 80081d8:	3e04      	subs	r6, #4
 80081da:	e7d1      	b.n	8008180 <__hexnan+0xbc>
 80081dc:	2004      	movs	r0, #4
 80081de:	b007      	add	sp, #28
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081e4 <__localeconv_l>:
 80081e4:	30f0      	adds	r0, #240	; 0xf0
 80081e6:	4770      	bx	lr

080081e8 <_localeconv_r>:
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <_localeconv_r+0x14>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6a18      	ldr	r0, [r3, #32]
 80081ee:	4b04      	ldr	r3, [pc, #16]	; (8008200 <_localeconv_r+0x18>)
 80081f0:	2800      	cmp	r0, #0
 80081f2:	bf08      	it	eq
 80081f4:	4618      	moveq	r0, r3
 80081f6:	30f0      	adds	r0, #240	; 0xf0
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000050 	.word	0x20000050
 8008200:	200000b4 	.word	0x200000b4

08008204 <__swhatbuf_r>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	460e      	mov	r6, r1
 8008208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820c:	b096      	sub	sp, #88	; 0x58
 800820e:	2900      	cmp	r1, #0
 8008210:	4614      	mov	r4, r2
 8008212:	461d      	mov	r5, r3
 8008214:	da07      	bge.n	8008226 <__swhatbuf_r+0x22>
 8008216:	2300      	movs	r3, #0
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	89b3      	ldrh	r3, [r6, #12]
 800821c:	061a      	lsls	r2, r3, #24
 800821e:	d410      	bmi.n	8008242 <__swhatbuf_r+0x3e>
 8008220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008224:	e00e      	b.n	8008244 <__swhatbuf_r+0x40>
 8008226:	466a      	mov	r2, sp
 8008228:	f000 ff02 	bl	8009030 <_fstat_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	dbf2      	blt.n	8008216 <__swhatbuf_r+0x12>
 8008230:	9a01      	ldr	r2, [sp, #4]
 8008232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008236:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800823a:	425a      	negs	r2, r3
 800823c:	415a      	adcs	r2, r3
 800823e:	602a      	str	r2, [r5, #0]
 8008240:	e7ee      	b.n	8008220 <__swhatbuf_r+0x1c>
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	2000      	movs	r0, #0
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	b016      	add	sp, #88	; 0x58
 800824a:	bd70      	pop	{r4, r5, r6, pc}

0800824c <__smakebuf_r>:
 800824c:	898b      	ldrh	r3, [r1, #12]
 800824e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008250:	079d      	lsls	r5, r3, #30
 8008252:	4606      	mov	r6, r0
 8008254:	460c      	mov	r4, r1
 8008256:	d507      	bpl.n	8008268 <__smakebuf_r+0x1c>
 8008258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	2301      	movs	r3, #1
 8008262:	6163      	str	r3, [r4, #20]
 8008264:	b002      	add	sp, #8
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	ab01      	add	r3, sp, #4
 800826a:	466a      	mov	r2, sp
 800826c:	f7ff ffca 	bl	8008204 <__swhatbuf_r>
 8008270:	9900      	ldr	r1, [sp, #0]
 8008272:	4605      	mov	r5, r0
 8008274:	4630      	mov	r0, r6
 8008276:	f000 fcaf 	bl	8008bd8 <_malloc_r>
 800827a:	b948      	cbnz	r0, 8008290 <__smakebuf_r+0x44>
 800827c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008280:	059a      	lsls	r2, r3, #22
 8008282:	d4ef      	bmi.n	8008264 <__smakebuf_r+0x18>
 8008284:	f023 0303 	bic.w	r3, r3, #3
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	e7e3      	b.n	8008258 <__smakebuf_r+0xc>
 8008290:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <__smakebuf_r+0x7c>)
 8008292:	62b3      	str	r3, [r6, #40]	; 0x28
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	6020      	str	r0, [r4, #0]
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	6120      	str	r0, [r4, #16]
 80082a2:	6163      	str	r3, [r4, #20]
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	b15b      	cbz	r3, 80082c0 <__smakebuf_r+0x74>
 80082a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ac:	4630      	mov	r0, r6
 80082ae:	f000 fed1 	bl	8009054 <_isatty_r>
 80082b2:	b128      	cbz	r0, 80082c0 <__smakebuf_r+0x74>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	431d      	orrs	r5, r3
 80082c4:	81a5      	strh	r5, [r4, #12]
 80082c6:	e7cd      	b.n	8008264 <__smakebuf_r+0x18>
 80082c8:	08007a49 	.word	0x08007a49

080082cc <malloc>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <malloc+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f000 bc81 	b.w	8008bd8 <_malloc_r>
 80082d6:	bf00      	nop
 80082d8:	20000050 	.word	0x20000050

080082dc <__ascii_mbtowc>:
 80082dc:	b082      	sub	sp, #8
 80082de:	b901      	cbnz	r1, 80082e2 <__ascii_mbtowc+0x6>
 80082e0:	a901      	add	r1, sp, #4
 80082e2:	b142      	cbz	r2, 80082f6 <__ascii_mbtowc+0x1a>
 80082e4:	b14b      	cbz	r3, 80082fa <__ascii_mbtowc+0x1e>
 80082e6:	7813      	ldrb	r3, [r2, #0]
 80082e8:	600b      	str	r3, [r1, #0]
 80082ea:	7812      	ldrb	r2, [r2, #0]
 80082ec:	1c10      	adds	r0, r2, #0
 80082ee:	bf18      	it	ne
 80082f0:	2001      	movne	r0, #1
 80082f2:	b002      	add	sp, #8
 80082f4:	4770      	bx	lr
 80082f6:	4610      	mov	r0, r2
 80082f8:	e7fb      	b.n	80082f2 <__ascii_mbtowc+0x16>
 80082fa:	f06f 0001 	mvn.w	r0, #1
 80082fe:	e7f8      	b.n	80082f2 <__ascii_mbtowc+0x16>

08008300 <memchr>:
 8008300:	b510      	push	{r4, lr}
 8008302:	b2c9      	uxtb	r1, r1
 8008304:	4402      	add	r2, r0
 8008306:	4290      	cmp	r0, r2
 8008308:	4603      	mov	r3, r0
 800830a:	d101      	bne.n	8008310 <memchr+0x10>
 800830c:	2300      	movs	r3, #0
 800830e:	e003      	b.n	8008318 <memchr+0x18>
 8008310:	781c      	ldrb	r4, [r3, #0]
 8008312:	3001      	adds	r0, #1
 8008314:	428c      	cmp	r4, r1
 8008316:	d1f6      	bne.n	8008306 <memchr+0x6>
 8008318:	4618      	mov	r0, r3
 800831a:	bd10      	pop	{r4, pc}

0800831c <memcpy>:
 800831c:	b510      	push	{r4, lr}
 800831e:	1e43      	subs	r3, r0, #1
 8008320:	440a      	add	r2, r1
 8008322:	4291      	cmp	r1, r2
 8008324:	d100      	bne.n	8008328 <memcpy+0xc>
 8008326:	bd10      	pop	{r4, pc}
 8008328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800832c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008330:	e7f7      	b.n	8008322 <memcpy+0x6>

08008332 <_Balloc>:
 8008332:	b570      	push	{r4, r5, r6, lr}
 8008334:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008336:	4604      	mov	r4, r0
 8008338:	460e      	mov	r6, r1
 800833a:	b93d      	cbnz	r5, 800834c <_Balloc+0x1a>
 800833c:	2010      	movs	r0, #16
 800833e:	f7ff ffc5 	bl	80082cc <malloc>
 8008342:	6260      	str	r0, [r4, #36]	; 0x24
 8008344:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008348:	6005      	str	r5, [r0, #0]
 800834a:	60c5      	str	r5, [r0, #12]
 800834c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800834e:	68eb      	ldr	r3, [r5, #12]
 8008350:	b183      	cbz	r3, 8008374 <_Balloc+0x42>
 8008352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800835a:	b9b8      	cbnz	r0, 800838c <_Balloc+0x5a>
 800835c:	2101      	movs	r1, #1
 800835e:	fa01 f506 	lsl.w	r5, r1, r6
 8008362:	1d6a      	adds	r2, r5, #5
 8008364:	0092      	lsls	r2, r2, #2
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fbdc 	bl	8008b24 <_calloc_r>
 800836c:	b160      	cbz	r0, 8008388 <_Balloc+0x56>
 800836e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008372:	e00e      	b.n	8008392 <_Balloc+0x60>
 8008374:	2221      	movs	r2, #33	; 0x21
 8008376:	2104      	movs	r1, #4
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fbd3 	bl	8008b24 <_calloc_r>
 800837e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008380:	60e8      	str	r0, [r5, #12]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e4      	bne.n	8008352 <_Balloc+0x20>
 8008388:	2000      	movs	r0, #0
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	6802      	ldr	r2, [r0, #0]
 800838e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008392:	2300      	movs	r3, #0
 8008394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008398:	e7f7      	b.n	800838a <_Balloc+0x58>

0800839a <_Bfree>:
 800839a:	b570      	push	{r4, r5, r6, lr}
 800839c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800839e:	4606      	mov	r6, r0
 80083a0:	460d      	mov	r5, r1
 80083a2:	b93c      	cbnz	r4, 80083b4 <_Bfree+0x1a>
 80083a4:	2010      	movs	r0, #16
 80083a6:	f7ff ff91 	bl	80082cc <malloc>
 80083aa:	6270      	str	r0, [r6, #36]	; 0x24
 80083ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083b0:	6004      	str	r4, [r0, #0]
 80083b2:	60c4      	str	r4, [r0, #12]
 80083b4:	b13d      	cbz	r5, 80083c6 <_Bfree+0x2c>
 80083b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80083b8:	686a      	ldr	r2, [r5, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083c0:	6029      	str	r1, [r5, #0]
 80083c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80083c6:	bd70      	pop	{r4, r5, r6, pc}

080083c8 <__multadd>:
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083cc:	461f      	mov	r7, r3
 80083ce:	4606      	mov	r6, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	2300      	movs	r3, #0
 80083d4:	690d      	ldr	r5, [r1, #16]
 80083d6:	f101 0c14 	add.w	ip, r1, #20
 80083da:	f8dc 0000 	ldr.w	r0, [ip]
 80083de:	3301      	adds	r3, #1
 80083e0:	b281      	uxth	r1, r0
 80083e2:	fb02 7101 	mla	r1, r2, r1, r7
 80083e6:	0c00      	lsrs	r0, r0, #16
 80083e8:	0c0f      	lsrs	r7, r1, #16
 80083ea:	fb02 7000 	mla	r0, r2, r0, r7
 80083ee:	b289      	uxth	r1, r1
 80083f0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80083f4:	429d      	cmp	r5, r3
 80083f6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80083fa:	f84c 1b04 	str.w	r1, [ip], #4
 80083fe:	dcec      	bgt.n	80083da <__multadd+0x12>
 8008400:	b1d7      	cbz	r7, 8008438 <__multadd+0x70>
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	42ab      	cmp	r3, r5
 8008406:	dc12      	bgt.n	800842e <__multadd+0x66>
 8008408:	6861      	ldr	r1, [r4, #4]
 800840a:	4630      	mov	r0, r6
 800840c:	3101      	adds	r1, #1
 800840e:	f7ff ff90 	bl	8008332 <_Balloc>
 8008412:	4680      	mov	r8, r0
 8008414:	6922      	ldr	r2, [r4, #16]
 8008416:	f104 010c 	add.w	r1, r4, #12
 800841a:	3202      	adds	r2, #2
 800841c:	0092      	lsls	r2, r2, #2
 800841e:	300c      	adds	r0, #12
 8008420:	f7ff ff7c 	bl	800831c <memcpy>
 8008424:	4621      	mov	r1, r4
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ffb7 	bl	800839a <_Bfree>
 800842c:	4644      	mov	r4, r8
 800842e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008432:	3501      	adds	r5, #1
 8008434:	615f      	str	r7, [r3, #20]
 8008436:	6125      	str	r5, [r4, #16]
 8008438:	4620      	mov	r0, r4
 800843a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800843e <__s2b>:
 800843e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008442:	4615      	mov	r5, r2
 8008444:	2209      	movs	r2, #9
 8008446:	461f      	mov	r7, r3
 8008448:	3308      	adds	r3, #8
 800844a:	460c      	mov	r4, r1
 800844c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008450:	4606      	mov	r6, r0
 8008452:	2201      	movs	r2, #1
 8008454:	2100      	movs	r1, #0
 8008456:	429a      	cmp	r2, r3
 8008458:	db20      	blt.n	800849c <__s2b+0x5e>
 800845a:	4630      	mov	r0, r6
 800845c:	f7ff ff69 	bl	8008332 <_Balloc>
 8008460:	9b08      	ldr	r3, [sp, #32]
 8008462:	2d09      	cmp	r5, #9
 8008464:	6143      	str	r3, [r0, #20]
 8008466:	f04f 0301 	mov.w	r3, #1
 800846a:	6103      	str	r3, [r0, #16]
 800846c:	dd19      	ble.n	80084a2 <__s2b+0x64>
 800846e:	f104 0809 	add.w	r8, r4, #9
 8008472:	46c1      	mov	r9, r8
 8008474:	442c      	add	r4, r5
 8008476:	f819 3b01 	ldrb.w	r3, [r9], #1
 800847a:	4601      	mov	r1, r0
 800847c:	3b30      	subs	r3, #48	; 0x30
 800847e:	220a      	movs	r2, #10
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff ffa1 	bl	80083c8 <__multadd>
 8008486:	45a1      	cmp	r9, r4
 8008488:	d1f5      	bne.n	8008476 <__s2b+0x38>
 800848a:	eb08 0405 	add.w	r4, r8, r5
 800848e:	3c08      	subs	r4, #8
 8008490:	1b2d      	subs	r5, r5, r4
 8008492:	1963      	adds	r3, r4, r5
 8008494:	42bb      	cmp	r3, r7
 8008496:	db07      	blt.n	80084a8 <__s2b+0x6a>
 8008498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849c:	0052      	lsls	r2, r2, #1
 800849e:	3101      	adds	r1, #1
 80084a0:	e7d9      	b.n	8008456 <__s2b+0x18>
 80084a2:	340a      	adds	r4, #10
 80084a4:	2509      	movs	r5, #9
 80084a6:	e7f3      	b.n	8008490 <__s2b+0x52>
 80084a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084ac:	4601      	mov	r1, r0
 80084ae:	3b30      	subs	r3, #48	; 0x30
 80084b0:	220a      	movs	r2, #10
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff ff88 	bl	80083c8 <__multadd>
 80084b8:	e7eb      	b.n	8008492 <__s2b+0x54>

080084ba <__hi0bits>:
 80084ba:	0c02      	lsrs	r2, r0, #16
 80084bc:	0412      	lsls	r2, r2, #16
 80084be:	4603      	mov	r3, r0
 80084c0:	b9b2      	cbnz	r2, 80084f0 <__hi0bits+0x36>
 80084c2:	0403      	lsls	r3, r0, #16
 80084c4:	2010      	movs	r0, #16
 80084c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084ca:	bf04      	itt	eq
 80084cc:	021b      	lsleq	r3, r3, #8
 80084ce:	3008      	addeq	r0, #8
 80084d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084d4:	bf04      	itt	eq
 80084d6:	011b      	lsleq	r3, r3, #4
 80084d8:	3004      	addeq	r0, #4
 80084da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80084de:	bf04      	itt	eq
 80084e0:	009b      	lsleq	r3, r3, #2
 80084e2:	3002      	addeq	r0, #2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	db06      	blt.n	80084f6 <__hi0bits+0x3c>
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	d503      	bpl.n	80084f4 <__hi0bits+0x3a>
 80084ec:	3001      	adds	r0, #1
 80084ee:	4770      	bx	lr
 80084f0:	2000      	movs	r0, #0
 80084f2:	e7e8      	b.n	80084c6 <__hi0bits+0xc>
 80084f4:	2020      	movs	r0, #32
 80084f6:	4770      	bx	lr

080084f8 <__lo0bits>:
 80084f8:	6803      	ldr	r3, [r0, #0]
 80084fa:	4601      	mov	r1, r0
 80084fc:	f013 0207 	ands.w	r2, r3, #7
 8008500:	d00b      	beq.n	800851a <__lo0bits+0x22>
 8008502:	07da      	lsls	r2, r3, #31
 8008504:	d423      	bmi.n	800854e <__lo0bits+0x56>
 8008506:	0798      	lsls	r0, r3, #30
 8008508:	bf49      	itett	mi
 800850a:	085b      	lsrmi	r3, r3, #1
 800850c:	089b      	lsrpl	r3, r3, #2
 800850e:	2001      	movmi	r0, #1
 8008510:	600b      	strmi	r3, [r1, #0]
 8008512:	bf5c      	itt	pl
 8008514:	600b      	strpl	r3, [r1, #0]
 8008516:	2002      	movpl	r0, #2
 8008518:	4770      	bx	lr
 800851a:	b298      	uxth	r0, r3
 800851c:	b9a8      	cbnz	r0, 800854a <__lo0bits+0x52>
 800851e:	2010      	movs	r0, #16
 8008520:	0c1b      	lsrs	r3, r3, #16
 8008522:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008526:	bf04      	itt	eq
 8008528:	0a1b      	lsreq	r3, r3, #8
 800852a:	3008      	addeq	r0, #8
 800852c:	071a      	lsls	r2, r3, #28
 800852e:	bf04      	itt	eq
 8008530:	091b      	lsreq	r3, r3, #4
 8008532:	3004      	addeq	r0, #4
 8008534:	079a      	lsls	r2, r3, #30
 8008536:	bf04      	itt	eq
 8008538:	089b      	lsreq	r3, r3, #2
 800853a:	3002      	addeq	r0, #2
 800853c:	07da      	lsls	r2, r3, #31
 800853e:	d402      	bmi.n	8008546 <__lo0bits+0x4e>
 8008540:	085b      	lsrs	r3, r3, #1
 8008542:	d006      	beq.n	8008552 <__lo0bits+0x5a>
 8008544:	3001      	adds	r0, #1
 8008546:	600b      	str	r3, [r1, #0]
 8008548:	4770      	bx	lr
 800854a:	4610      	mov	r0, r2
 800854c:	e7e9      	b.n	8008522 <__lo0bits+0x2a>
 800854e:	2000      	movs	r0, #0
 8008550:	4770      	bx	lr
 8008552:	2020      	movs	r0, #32
 8008554:	4770      	bx	lr

08008556 <__i2b>:
 8008556:	b510      	push	{r4, lr}
 8008558:	460c      	mov	r4, r1
 800855a:	2101      	movs	r1, #1
 800855c:	f7ff fee9 	bl	8008332 <_Balloc>
 8008560:	2201      	movs	r2, #1
 8008562:	6144      	str	r4, [r0, #20]
 8008564:	6102      	str	r2, [r0, #16]
 8008566:	bd10      	pop	{r4, pc}

08008568 <__multiply>:
 8008568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	4614      	mov	r4, r2
 800856e:	690a      	ldr	r2, [r1, #16]
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	4688      	mov	r8, r1
 8008574:	429a      	cmp	r2, r3
 8008576:	bfbe      	ittt	lt
 8008578:	460b      	movlt	r3, r1
 800857a:	46a0      	movlt	r8, r4
 800857c:	461c      	movlt	r4, r3
 800857e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008582:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008586:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800858a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800858e:	eb07 0609 	add.w	r6, r7, r9
 8008592:	42b3      	cmp	r3, r6
 8008594:	bfb8      	it	lt
 8008596:	3101      	addlt	r1, #1
 8008598:	f7ff fecb 	bl	8008332 <_Balloc>
 800859c:	f100 0514 	add.w	r5, r0, #20
 80085a0:	462b      	mov	r3, r5
 80085a2:	2200      	movs	r2, #0
 80085a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80085a8:	4573      	cmp	r3, lr
 80085aa:	d316      	bcc.n	80085da <__multiply+0x72>
 80085ac:	f104 0214 	add.w	r2, r4, #20
 80085b0:	f108 0114 	add.w	r1, r8, #20
 80085b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80085b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	9201      	str	r2, [sp, #4]
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d80c      	bhi.n	80085e0 <__multiply+0x78>
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	dd03      	ble.n	80085d2 <__multiply+0x6a>
 80085ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d05d      	beq.n	800868e <__multiply+0x126>
 80085d2:	6106      	str	r6, [r0, #16]
 80085d4:	b003      	add	sp, #12
 80085d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085da:	f843 2b04 	str.w	r2, [r3], #4
 80085de:	e7e3      	b.n	80085a8 <__multiply+0x40>
 80085e0:	f8b2 b000 	ldrh.w	fp, [r2]
 80085e4:	f1bb 0f00 	cmp.w	fp, #0
 80085e8:	d023      	beq.n	8008632 <__multiply+0xca>
 80085ea:	4689      	mov	r9, r1
 80085ec:	46ac      	mov	ip, r5
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	f859 4b04 	ldr.w	r4, [r9], #4
 80085f6:	f8dc a000 	ldr.w	sl, [ip]
 80085fa:	b2a3      	uxth	r3, r4
 80085fc:	fa1f fa8a 	uxth.w	sl, sl
 8008600:	fb0b a303 	mla	r3, fp, r3, sl
 8008604:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008608:	f8dc 4000 	ldr.w	r4, [ip]
 800860c:	4443      	add	r3, r8
 800860e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008612:	fb0b 840a 	mla	r4, fp, sl, r8
 8008616:	46e2      	mov	sl, ip
 8008618:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800861c:	b29b      	uxth	r3, r3
 800861e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008622:	454f      	cmp	r7, r9
 8008624:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008628:	f84a 3b04 	str.w	r3, [sl], #4
 800862c:	d82b      	bhi.n	8008686 <__multiply+0x11e>
 800862e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	3204      	adds	r2, #4
 8008636:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800863a:	f1ba 0f00 	cmp.w	sl, #0
 800863e:	d020      	beq.n	8008682 <__multiply+0x11a>
 8008640:	4689      	mov	r9, r1
 8008642:	46a8      	mov	r8, r5
 8008644:	f04f 0b00 	mov.w	fp, #0
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	f8b9 c000 	ldrh.w	ip, [r9]
 800864e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008652:	b29b      	uxth	r3, r3
 8008654:	fb0a 440c 	mla	r4, sl, ip, r4
 8008658:	46c4      	mov	ip, r8
 800865a:	445c      	add	r4, fp
 800865c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008660:	f84c 3b04 	str.w	r3, [ip], #4
 8008664:	f859 3b04 	ldr.w	r3, [r9], #4
 8008668:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800866c:	0c1b      	lsrs	r3, r3, #16
 800866e:	fb0a b303 	mla	r3, sl, r3, fp
 8008672:	454f      	cmp	r7, r9
 8008674:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008678:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800867c:	d805      	bhi.n	800868a <__multiply+0x122>
 800867e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008682:	3504      	adds	r5, #4
 8008684:	e79b      	b.n	80085be <__multiply+0x56>
 8008686:	46d4      	mov	ip, sl
 8008688:	e7b3      	b.n	80085f2 <__multiply+0x8a>
 800868a:	46e0      	mov	r8, ip
 800868c:	e7dd      	b.n	800864a <__multiply+0xe2>
 800868e:	3e01      	subs	r6, #1
 8008690:	e799      	b.n	80085c6 <__multiply+0x5e>
	...

08008694 <__pow5mult>:
 8008694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008698:	4615      	mov	r5, r2
 800869a:	f012 0203 	ands.w	r2, r2, #3
 800869e:	4606      	mov	r6, r0
 80086a0:	460f      	mov	r7, r1
 80086a2:	d007      	beq.n	80086b4 <__pow5mult+0x20>
 80086a4:	4c21      	ldr	r4, [pc, #132]	; (800872c <__pow5mult+0x98>)
 80086a6:	3a01      	subs	r2, #1
 80086a8:	2300      	movs	r3, #0
 80086aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086ae:	f7ff fe8b 	bl	80083c8 <__multadd>
 80086b2:	4607      	mov	r7, r0
 80086b4:	10ad      	asrs	r5, r5, #2
 80086b6:	d035      	beq.n	8008724 <__pow5mult+0x90>
 80086b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086ba:	b93c      	cbnz	r4, 80086cc <__pow5mult+0x38>
 80086bc:	2010      	movs	r0, #16
 80086be:	f7ff fe05 	bl	80082cc <malloc>
 80086c2:	6270      	str	r0, [r6, #36]	; 0x24
 80086c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c8:	6004      	str	r4, [r0, #0]
 80086ca:	60c4      	str	r4, [r0, #12]
 80086cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086d4:	b94c      	cbnz	r4, 80086ea <__pow5mult+0x56>
 80086d6:	f240 2171 	movw	r1, #625	; 0x271
 80086da:	4630      	mov	r0, r6
 80086dc:	f7ff ff3b 	bl	8008556 <__i2b>
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	f04f 0800 	mov.w	r8, #0
 80086ee:	07eb      	lsls	r3, r5, #31
 80086f0:	d50a      	bpl.n	8008708 <__pow5mult+0x74>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4622      	mov	r2, r4
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff ff36 	bl	8008568 <__multiply>
 80086fc:	4681      	mov	r9, r0
 80086fe:	4639      	mov	r1, r7
 8008700:	4630      	mov	r0, r6
 8008702:	f7ff fe4a 	bl	800839a <_Bfree>
 8008706:	464f      	mov	r7, r9
 8008708:	106d      	asrs	r5, r5, #1
 800870a:	d00b      	beq.n	8008724 <__pow5mult+0x90>
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	b938      	cbnz	r0, 8008720 <__pow5mult+0x8c>
 8008710:	4622      	mov	r2, r4
 8008712:	4621      	mov	r1, r4
 8008714:	4630      	mov	r0, r6
 8008716:	f7ff ff27 	bl	8008568 <__multiply>
 800871a:	6020      	str	r0, [r4, #0]
 800871c:	f8c0 8000 	str.w	r8, [r0]
 8008720:	4604      	mov	r4, r0
 8008722:	e7e4      	b.n	80086ee <__pow5mult+0x5a>
 8008724:	4638      	mov	r0, r7
 8008726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872a:	bf00      	nop
 800872c:	08009498 	.word	0x08009498

08008730 <__lshift>:
 8008730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008734:	460c      	mov	r4, r1
 8008736:	4607      	mov	r7, r0
 8008738:	4616      	mov	r6, r2
 800873a:	6923      	ldr	r3, [r4, #16]
 800873c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008740:	eb0a 0903 	add.w	r9, sl, r3
 8008744:	6849      	ldr	r1, [r1, #4]
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	f109 0501 	add.w	r5, r9, #1
 800874c:	42ab      	cmp	r3, r5
 800874e:	db32      	blt.n	80087b6 <__lshift+0x86>
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff fdee 	bl	8008332 <_Balloc>
 8008756:	2300      	movs	r3, #0
 8008758:	4680      	mov	r8, r0
 800875a:	461a      	mov	r2, r3
 800875c:	f100 0114 	add.w	r1, r0, #20
 8008760:	4553      	cmp	r3, sl
 8008762:	db2b      	blt.n	80087bc <__lshift+0x8c>
 8008764:	6920      	ldr	r0, [r4, #16]
 8008766:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800876a:	f104 0314 	add.w	r3, r4, #20
 800876e:	f016 021f 	ands.w	r2, r6, #31
 8008772:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008776:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800877a:	d025      	beq.n	80087c8 <__lshift+0x98>
 800877c:	2000      	movs	r0, #0
 800877e:	f1c2 0e20 	rsb	lr, r2, #32
 8008782:	468a      	mov	sl, r1
 8008784:	681e      	ldr	r6, [r3, #0]
 8008786:	4096      	lsls	r6, r2
 8008788:	4330      	orrs	r0, r6
 800878a:	f84a 0b04 	str.w	r0, [sl], #4
 800878e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008792:	459c      	cmp	ip, r3
 8008794:	fa20 f00e 	lsr.w	r0, r0, lr
 8008798:	d814      	bhi.n	80087c4 <__lshift+0x94>
 800879a:	6048      	str	r0, [r1, #4]
 800879c:	b108      	cbz	r0, 80087a2 <__lshift+0x72>
 800879e:	f109 0502 	add.w	r5, r9, #2
 80087a2:	3d01      	subs	r5, #1
 80087a4:	4638      	mov	r0, r7
 80087a6:	f8c8 5010 	str.w	r5, [r8, #16]
 80087aa:	4621      	mov	r1, r4
 80087ac:	f7ff fdf5 	bl	800839a <_Bfree>
 80087b0:	4640      	mov	r0, r8
 80087b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b6:	3101      	adds	r1, #1
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	e7c7      	b.n	800874c <__lshift+0x1c>
 80087bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80087c0:	3301      	adds	r3, #1
 80087c2:	e7cd      	b.n	8008760 <__lshift+0x30>
 80087c4:	4651      	mov	r1, sl
 80087c6:	e7dc      	b.n	8008782 <__lshift+0x52>
 80087c8:	3904      	subs	r1, #4
 80087ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ce:	459c      	cmp	ip, r3
 80087d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80087d4:	d8f9      	bhi.n	80087ca <__lshift+0x9a>
 80087d6:	e7e4      	b.n	80087a2 <__lshift+0x72>

080087d8 <__mcmp>:
 80087d8:	6903      	ldr	r3, [r0, #16]
 80087da:	690a      	ldr	r2, [r1, #16]
 80087dc:	b530      	push	{r4, r5, lr}
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	d10c      	bne.n	80087fc <__mcmp+0x24>
 80087e2:	0092      	lsls	r2, r2, #2
 80087e4:	3014      	adds	r0, #20
 80087e6:	3114      	adds	r1, #20
 80087e8:	1884      	adds	r4, r0, r2
 80087ea:	4411      	add	r1, r2
 80087ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087f4:	4295      	cmp	r5, r2
 80087f6:	d003      	beq.n	8008800 <__mcmp+0x28>
 80087f8:	d305      	bcc.n	8008806 <__mcmp+0x2e>
 80087fa:	2301      	movs	r3, #1
 80087fc:	4618      	mov	r0, r3
 80087fe:	bd30      	pop	{r4, r5, pc}
 8008800:	42a0      	cmp	r0, r4
 8008802:	d3f3      	bcc.n	80087ec <__mcmp+0x14>
 8008804:	e7fa      	b.n	80087fc <__mcmp+0x24>
 8008806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800880a:	e7f7      	b.n	80087fc <__mcmp+0x24>

0800880c <__mdiff>:
 800880c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008810:	460d      	mov	r5, r1
 8008812:	4607      	mov	r7, r0
 8008814:	4611      	mov	r1, r2
 8008816:	4628      	mov	r0, r5
 8008818:	4614      	mov	r4, r2
 800881a:	f7ff ffdd 	bl	80087d8 <__mcmp>
 800881e:	1e06      	subs	r6, r0, #0
 8008820:	d108      	bne.n	8008834 <__mdiff+0x28>
 8008822:	4631      	mov	r1, r6
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff fd84 	bl	8008332 <_Balloc>
 800882a:	2301      	movs	r3, #1
 800882c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008834:	bfa4      	itt	ge
 8008836:	4623      	movge	r3, r4
 8008838:	462c      	movge	r4, r5
 800883a:	4638      	mov	r0, r7
 800883c:	6861      	ldr	r1, [r4, #4]
 800883e:	bfa6      	itte	ge
 8008840:	461d      	movge	r5, r3
 8008842:	2600      	movge	r6, #0
 8008844:	2601      	movlt	r6, #1
 8008846:	f7ff fd74 	bl	8008332 <_Balloc>
 800884a:	f04f 0e00 	mov.w	lr, #0
 800884e:	60c6      	str	r6, [r0, #12]
 8008850:	692b      	ldr	r3, [r5, #16]
 8008852:	6926      	ldr	r6, [r4, #16]
 8008854:	f104 0214 	add.w	r2, r4, #20
 8008858:	f105 0914 	add.w	r9, r5, #20
 800885c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008860:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008864:	f100 0114 	add.w	r1, r0, #20
 8008868:	f852 ab04 	ldr.w	sl, [r2], #4
 800886c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008870:	fa1f f38a 	uxth.w	r3, sl
 8008874:	4473      	add	r3, lr
 8008876:	b2ac      	uxth	r4, r5
 8008878:	1b1b      	subs	r3, r3, r4
 800887a:	0c2c      	lsrs	r4, r5, #16
 800887c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008880:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008884:	b29b      	uxth	r3, r3
 8008886:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800888a:	45c8      	cmp	r8, r9
 800888c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008890:	4694      	mov	ip, r2
 8008892:	f841 4b04 	str.w	r4, [r1], #4
 8008896:	d8e7      	bhi.n	8008868 <__mdiff+0x5c>
 8008898:	45bc      	cmp	ip, r7
 800889a:	d304      	bcc.n	80088a6 <__mdiff+0x9a>
 800889c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80088a0:	b183      	cbz	r3, 80088c4 <__mdiff+0xb8>
 80088a2:	6106      	str	r6, [r0, #16]
 80088a4:	e7c4      	b.n	8008830 <__mdiff+0x24>
 80088a6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80088aa:	b2a2      	uxth	r2, r4
 80088ac:	4472      	add	r2, lr
 80088ae:	1413      	asrs	r3, r2, #16
 80088b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80088b4:	b292      	uxth	r2, r2
 80088b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088ba:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80088be:	f841 2b04 	str.w	r2, [r1], #4
 80088c2:	e7e9      	b.n	8008898 <__mdiff+0x8c>
 80088c4:	3e01      	subs	r6, #1
 80088c6:	e7e9      	b.n	800889c <__mdiff+0x90>

080088c8 <__ulp>:
 80088c8:	4b10      	ldr	r3, [pc, #64]	; (800890c <__ulp+0x44>)
 80088ca:	400b      	ands	r3, r1
 80088cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dd02      	ble.n	80088da <__ulp+0x12>
 80088d4:	2000      	movs	r0, #0
 80088d6:	4619      	mov	r1, r3
 80088d8:	4770      	bx	lr
 80088da:	425b      	negs	r3, r3
 80088dc:	151b      	asrs	r3, r3, #20
 80088de:	2b13      	cmp	r3, #19
 80088e0:	f04f 0000 	mov.w	r0, #0
 80088e4:	f04f 0100 	mov.w	r1, #0
 80088e8:	dc04      	bgt.n	80088f4 <__ulp+0x2c>
 80088ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80088ee:	fa42 f103 	asr.w	r1, r2, r3
 80088f2:	4770      	bx	lr
 80088f4:	2201      	movs	r2, #1
 80088f6:	3b14      	subs	r3, #20
 80088f8:	2b1e      	cmp	r3, #30
 80088fa:	bfce      	itee	gt
 80088fc:	4613      	movgt	r3, r2
 80088fe:	f1c3 031f 	rsble	r3, r3, #31
 8008902:	fa02 f303 	lslle.w	r3, r2, r3
 8008906:	4618      	mov	r0, r3
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	7ff00000 	.word	0x7ff00000

08008910 <__b2d>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	6907      	ldr	r7, [r0, #16]
 8008916:	f100 0914 	add.w	r9, r0, #20
 800891a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800891e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008922:	f1a7 0804 	sub.w	r8, r7, #4
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff fdc7 	bl	80084ba <__hi0bits>
 800892c:	f1c0 0320 	rsb	r3, r0, #32
 8008930:	280a      	cmp	r0, #10
 8008932:	600b      	str	r3, [r1, #0]
 8008934:	491e      	ldr	r1, [pc, #120]	; (80089b0 <__b2d+0xa0>)
 8008936:	dc17      	bgt.n	8008968 <__b2d+0x58>
 8008938:	45c1      	cmp	r9, r8
 800893a:	bf28      	it	cs
 800893c:	2200      	movcs	r2, #0
 800893e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008942:	fa26 f30c 	lsr.w	r3, r6, ip
 8008946:	bf38      	it	cc
 8008948:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800894c:	ea43 0501 	orr.w	r5, r3, r1
 8008950:	f100 0315 	add.w	r3, r0, #21
 8008954:	fa06 f303 	lsl.w	r3, r6, r3
 8008958:	fa22 f20c 	lsr.w	r2, r2, ip
 800895c:	ea43 0402 	orr.w	r4, r3, r2
 8008960:	4620      	mov	r0, r4
 8008962:	4629      	mov	r1, r5
 8008964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008968:	45c1      	cmp	r9, r8
 800896a:	bf3a      	itte	cc
 800896c:	f1a7 0808 	subcc.w	r8, r7, #8
 8008970:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008974:	2200      	movcs	r2, #0
 8008976:	f1b0 030b 	subs.w	r3, r0, #11
 800897a:	d015      	beq.n	80089a8 <__b2d+0x98>
 800897c:	409e      	lsls	r6, r3
 800897e:	f1c3 0720 	rsb	r7, r3, #32
 8008982:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008986:	fa22 f107 	lsr.w	r1, r2, r7
 800898a:	45c8      	cmp	r8, r9
 800898c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008990:	ea46 0501 	orr.w	r5, r6, r1
 8008994:	bf94      	ite	ls
 8008996:	2100      	movls	r1, #0
 8008998:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800899c:	fa02 f003 	lsl.w	r0, r2, r3
 80089a0:	40f9      	lsrs	r1, r7
 80089a2:	ea40 0401 	orr.w	r4, r0, r1
 80089a6:	e7db      	b.n	8008960 <__b2d+0x50>
 80089a8:	ea46 0501 	orr.w	r5, r6, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	e7d7      	b.n	8008960 <__b2d+0x50>
 80089b0:	3ff00000 	.word	0x3ff00000

080089b4 <__d2b>:
 80089b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80089b8:	461c      	mov	r4, r3
 80089ba:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80089be:	2101      	movs	r1, #1
 80089c0:	4690      	mov	r8, r2
 80089c2:	f7ff fcb6 	bl	8008332 <_Balloc>
 80089c6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80089ca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80089ce:	4607      	mov	r7, r0
 80089d0:	bb34      	cbnz	r4, 8008a20 <__d2b+0x6c>
 80089d2:	9201      	str	r2, [sp, #4]
 80089d4:	f1b8 0200 	subs.w	r2, r8, #0
 80089d8:	d027      	beq.n	8008a2a <__d2b+0x76>
 80089da:	a802      	add	r0, sp, #8
 80089dc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80089e0:	f7ff fd8a 	bl	80084f8 <__lo0bits>
 80089e4:	9900      	ldr	r1, [sp, #0]
 80089e6:	b1f0      	cbz	r0, 8008a26 <__d2b+0x72>
 80089e8:	9a01      	ldr	r2, [sp, #4]
 80089ea:	f1c0 0320 	rsb	r3, r0, #32
 80089ee:	fa02 f303 	lsl.w	r3, r2, r3
 80089f2:	430b      	orrs	r3, r1
 80089f4:	40c2      	lsrs	r2, r0
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	9201      	str	r2, [sp, #4]
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bf14      	ite	ne
 8008a00:	2102      	movne	r1, #2
 8008a02:	2101      	moveq	r1, #1
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	6139      	str	r1, [r7, #16]
 8008a08:	b1c4      	cbz	r4, 8008a3c <__d2b+0x88>
 8008a0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008a0e:	4404      	add	r4, r0
 8008a10:	6034      	str	r4, [r6, #0]
 8008a12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a16:	6028      	str	r0, [r5, #0]
 8008a18:	4638      	mov	r0, r7
 8008a1a:	b002      	add	sp, #8
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008a24:	e7d5      	b.n	80089d2 <__d2b+0x1e>
 8008a26:	6179      	str	r1, [r7, #20]
 8008a28:	e7e7      	b.n	80089fa <__d2b+0x46>
 8008a2a:	a801      	add	r0, sp, #4
 8008a2c:	f7ff fd64 	bl	80084f8 <__lo0bits>
 8008a30:	2101      	movs	r1, #1
 8008a32:	9b01      	ldr	r3, [sp, #4]
 8008a34:	6139      	str	r1, [r7, #16]
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	3020      	adds	r0, #32
 8008a3a:	e7e5      	b.n	8008a08 <__d2b+0x54>
 8008a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a44:	6030      	str	r0, [r6, #0]
 8008a46:	6918      	ldr	r0, [r3, #16]
 8008a48:	f7ff fd37 	bl	80084ba <__hi0bits>
 8008a4c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a50:	e7e1      	b.n	8008a16 <__d2b+0x62>

08008a52 <__ratio>:
 8008a52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a56:	4688      	mov	r8, r1
 8008a58:	4669      	mov	r1, sp
 8008a5a:	4681      	mov	r9, r0
 8008a5c:	f7ff ff58 	bl	8008910 <__b2d>
 8008a60:	468b      	mov	fp, r1
 8008a62:	4606      	mov	r6, r0
 8008a64:	460f      	mov	r7, r1
 8008a66:	4640      	mov	r0, r8
 8008a68:	a901      	add	r1, sp, #4
 8008a6a:	f7ff ff51 	bl	8008910 <__b2d>
 8008a6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008a76:	460d      	mov	r5, r1
 8008a78:	eba3 0c02 	sub.w	ip, r3, r2
 8008a7c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfd5      	itete	le
 8008a8a:	460a      	movle	r2, r1
 8008a8c:	463a      	movgt	r2, r7
 8008a8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a92:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008a96:	bfd8      	it	le
 8008a98:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7f7 fe42 	bl	800072c <__aeabi_ddiv>
 8008aa8:	b003      	add	sp, #12
 8008aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008aae <__copybits>:
 8008aae:	3901      	subs	r1, #1
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	1149      	asrs	r1, r1, #5
 8008ab4:	6914      	ldr	r4, [r2, #16]
 8008ab6:	3101      	adds	r1, #1
 8008ab8:	f102 0314 	add.w	r3, r2, #20
 8008abc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ac0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	d303      	bcc.n	8008ad2 <__copybits+0x24>
 8008aca:	2300      	movs	r3, #0
 8008acc:	428a      	cmp	r2, r1
 8008ace:	d305      	bcc.n	8008adc <__copybits+0x2e>
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad6:	f840 2b04 	str.w	r2, [r0], #4
 8008ada:	e7f3      	b.n	8008ac4 <__copybits+0x16>
 8008adc:	f842 3b04 	str.w	r3, [r2], #4
 8008ae0:	e7f4      	b.n	8008acc <__copybits+0x1e>

08008ae2 <__any_on>:
 8008ae2:	f100 0214 	add.w	r2, r0, #20
 8008ae6:	6900      	ldr	r0, [r0, #16]
 8008ae8:	114b      	asrs	r3, r1, #5
 8008aea:	4298      	cmp	r0, r3
 8008aec:	b510      	push	{r4, lr}
 8008aee:	db11      	blt.n	8008b14 <__any_on+0x32>
 8008af0:	dd0a      	ble.n	8008b08 <__any_on+0x26>
 8008af2:	f011 011f 	ands.w	r1, r1, #31
 8008af6:	d007      	beq.n	8008b08 <__any_on+0x26>
 8008af8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008afc:	fa24 f001 	lsr.w	r0, r4, r1
 8008b00:	fa00 f101 	lsl.w	r1, r0, r1
 8008b04:	428c      	cmp	r4, r1
 8008b06:	d10b      	bne.n	8008b20 <__any_on+0x3e>
 8008b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d803      	bhi.n	8008b18 <__any_on+0x36>
 8008b10:	2000      	movs	r0, #0
 8008b12:	bd10      	pop	{r4, pc}
 8008b14:	4603      	mov	r3, r0
 8008b16:	e7f7      	b.n	8008b08 <__any_on+0x26>
 8008b18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d0f5      	beq.n	8008b0c <__any_on+0x2a>
 8008b20:	2001      	movs	r0, #1
 8008b22:	e7f6      	b.n	8008b12 <__any_on+0x30>

08008b24 <_calloc_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	fb02 f401 	mul.w	r4, r2, r1
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	f000 f854 	bl	8008bd8 <_malloc_r>
 8008b30:	4605      	mov	r5, r0
 8008b32:	b118      	cbz	r0, 8008b3c <_calloc_r+0x18>
 8008b34:	4622      	mov	r2, r4
 8008b36:	2100      	movs	r1, #0
 8008b38:	f7fc fca6 	bl	8005488 <memset>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}

08008b40 <_free_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4605      	mov	r5, r0
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d043      	beq.n	8008bd0 <_free_r+0x90>
 8008b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b4c:	1f0c      	subs	r4, r1, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	bfb8      	it	lt
 8008b52:	18e4      	addlt	r4, r4, r3
 8008b54:	f000 faa0 	bl	8009098 <__malloc_lock>
 8008b58:	4a1e      	ldr	r2, [pc, #120]	; (8008bd4 <_free_r+0x94>)
 8008b5a:	6813      	ldr	r3, [r2, #0]
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	b933      	cbnz	r3, 8008b6e <_free_r+0x2e>
 8008b60:	6063      	str	r3, [r4, #4]
 8008b62:	6014      	str	r4, [r2, #0]
 8008b64:	4628      	mov	r0, r5
 8008b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b6a:	f000 ba96 	b.w	800909a <__malloc_unlock>
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	d90b      	bls.n	8008b8a <_free_r+0x4a>
 8008b72:	6821      	ldr	r1, [r4, #0]
 8008b74:	1862      	adds	r2, r4, r1
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bf01      	itttt	eq
 8008b7a:	681a      	ldreq	r2, [r3, #0]
 8008b7c:	685b      	ldreq	r3, [r3, #4]
 8008b7e:	1852      	addeq	r2, r2, r1
 8008b80:	6022      	streq	r2, [r4, #0]
 8008b82:	6063      	str	r3, [r4, #4]
 8008b84:	6004      	str	r4, [r0, #0]
 8008b86:	e7ed      	b.n	8008b64 <_free_r+0x24>
 8008b88:	4613      	mov	r3, r2
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	b10a      	cbz	r2, 8008b92 <_free_r+0x52>
 8008b8e:	42a2      	cmp	r2, r4
 8008b90:	d9fa      	bls.n	8008b88 <_free_r+0x48>
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	1858      	adds	r0, r3, r1
 8008b96:	42a0      	cmp	r0, r4
 8008b98:	d10b      	bne.n	8008bb2 <_free_r+0x72>
 8008b9a:	6820      	ldr	r0, [r4, #0]
 8008b9c:	4401      	add	r1, r0
 8008b9e:	1858      	adds	r0, r3, r1
 8008ba0:	4282      	cmp	r2, r0
 8008ba2:	6019      	str	r1, [r3, #0]
 8008ba4:	d1de      	bne.n	8008b64 <_free_r+0x24>
 8008ba6:	6810      	ldr	r0, [r2, #0]
 8008ba8:	6852      	ldr	r2, [r2, #4]
 8008baa:	4401      	add	r1, r0
 8008bac:	6019      	str	r1, [r3, #0]
 8008bae:	605a      	str	r2, [r3, #4]
 8008bb0:	e7d8      	b.n	8008b64 <_free_r+0x24>
 8008bb2:	d902      	bls.n	8008bba <_free_r+0x7a>
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	e7d4      	b.n	8008b64 <_free_r+0x24>
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	1821      	adds	r1, r4, r0
 8008bbe:	428a      	cmp	r2, r1
 8008bc0:	bf01      	itttt	eq
 8008bc2:	6811      	ldreq	r1, [r2, #0]
 8008bc4:	6852      	ldreq	r2, [r2, #4]
 8008bc6:	1809      	addeq	r1, r1, r0
 8008bc8:	6021      	streq	r1, [r4, #0]
 8008bca:	6062      	str	r2, [r4, #4]
 8008bcc:	605c      	str	r4, [r3, #4]
 8008bce:	e7c9      	b.n	8008b64 <_free_r+0x24>
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	bf00      	nop
 8008bd4:	200002fc 	.word	0x200002fc

08008bd8 <_malloc_r>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	1ccd      	adds	r5, r1, #3
 8008bdc:	f025 0503 	bic.w	r5, r5, #3
 8008be0:	3508      	adds	r5, #8
 8008be2:	2d0c      	cmp	r5, #12
 8008be4:	bf38      	it	cc
 8008be6:	250c      	movcc	r5, #12
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	4606      	mov	r6, r0
 8008bec:	db01      	blt.n	8008bf2 <_malloc_r+0x1a>
 8008bee:	42a9      	cmp	r1, r5
 8008bf0:	d903      	bls.n	8008bfa <_malloc_r+0x22>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6033      	str	r3, [r6, #0]
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	bd70      	pop	{r4, r5, r6, pc}
 8008bfa:	f000 fa4d 	bl	8009098 <__malloc_lock>
 8008bfe:	4a21      	ldr	r2, [pc, #132]	; (8008c84 <_malloc_r+0xac>)
 8008c00:	6814      	ldr	r4, [r2, #0]
 8008c02:	4621      	mov	r1, r4
 8008c04:	b991      	cbnz	r1, 8008c2c <_malloc_r+0x54>
 8008c06:	4c20      	ldr	r4, [pc, #128]	; (8008c88 <_malloc_r+0xb0>)
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	b91b      	cbnz	r3, 8008c14 <_malloc_r+0x3c>
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 f97b 	bl	8008f08 <_sbrk_r>
 8008c12:	6020      	str	r0, [r4, #0]
 8008c14:	4629      	mov	r1, r5
 8008c16:	4630      	mov	r0, r6
 8008c18:	f000 f976 	bl	8008f08 <_sbrk_r>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d124      	bne.n	8008c6a <_malloc_r+0x92>
 8008c20:	230c      	movs	r3, #12
 8008c22:	4630      	mov	r0, r6
 8008c24:	6033      	str	r3, [r6, #0]
 8008c26:	f000 fa38 	bl	800909a <__malloc_unlock>
 8008c2a:	e7e4      	b.n	8008bf6 <_malloc_r+0x1e>
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	1b5b      	subs	r3, r3, r5
 8008c30:	d418      	bmi.n	8008c64 <_malloc_r+0x8c>
 8008c32:	2b0b      	cmp	r3, #11
 8008c34:	d90f      	bls.n	8008c56 <_malloc_r+0x7e>
 8008c36:	600b      	str	r3, [r1, #0]
 8008c38:	18cc      	adds	r4, r1, r3
 8008c3a:	50cd      	str	r5, [r1, r3]
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 fa2c 	bl	800909a <__malloc_unlock>
 8008c42:	f104 000b 	add.w	r0, r4, #11
 8008c46:	1d23      	adds	r3, r4, #4
 8008c48:	f020 0007 	bic.w	r0, r0, #7
 8008c4c:	1ac3      	subs	r3, r0, r3
 8008c4e:	d0d3      	beq.n	8008bf8 <_malloc_r+0x20>
 8008c50:	425a      	negs	r2, r3
 8008c52:	50e2      	str	r2, [r4, r3]
 8008c54:	e7d0      	b.n	8008bf8 <_malloc_r+0x20>
 8008c56:	684b      	ldr	r3, [r1, #4]
 8008c58:	428c      	cmp	r4, r1
 8008c5a:	bf16      	itet	ne
 8008c5c:	6063      	strne	r3, [r4, #4]
 8008c5e:	6013      	streq	r3, [r2, #0]
 8008c60:	460c      	movne	r4, r1
 8008c62:	e7eb      	b.n	8008c3c <_malloc_r+0x64>
 8008c64:	460c      	mov	r4, r1
 8008c66:	6849      	ldr	r1, [r1, #4]
 8008c68:	e7cc      	b.n	8008c04 <_malloc_r+0x2c>
 8008c6a:	1cc4      	adds	r4, r0, #3
 8008c6c:	f024 0403 	bic.w	r4, r4, #3
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d005      	beq.n	8008c80 <_malloc_r+0xa8>
 8008c74:	1a21      	subs	r1, r4, r0
 8008c76:	4630      	mov	r0, r6
 8008c78:	f000 f946 	bl	8008f08 <_sbrk_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d0cf      	beq.n	8008c20 <_malloc_r+0x48>
 8008c80:	6025      	str	r5, [r4, #0]
 8008c82:	e7db      	b.n	8008c3c <_malloc_r+0x64>
 8008c84:	200002fc 	.word	0x200002fc
 8008c88:	20000300 	.word	0x20000300

08008c8c <__sfputc_r>:
 8008c8c:	6893      	ldr	r3, [r2, #8]
 8008c8e:	b410      	push	{r4}
 8008c90:	3b01      	subs	r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	6093      	str	r3, [r2, #8]
 8008c96:	da07      	bge.n	8008ca8 <__sfputc_r+0x1c>
 8008c98:	6994      	ldr	r4, [r2, #24]
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	db01      	blt.n	8008ca2 <__sfputc_r+0x16>
 8008c9e:	290a      	cmp	r1, #10
 8008ca0:	d102      	bne.n	8008ca8 <__sfputc_r+0x1c>
 8008ca2:	bc10      	pop	{r4}
 8008ca4:	f7fd befa 	b.w	8006a9c <__swbuf_r>
 8008ca8:	6813      	ldr	r3, [r2, #0]
 8008caa:	1c58      	adds	r0, r3, #1
 8008cac:	6010      	str	r0, [r2, #0]
 8008cae:	7019      	strb	r1, [r3, #0]
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	bc10      	pop	{r4}
 8008cb4:	4770      	bx	lr

08008cb6 <__sfputs_r>:
 8008cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb8:	4606      	mov	r6, r0
 8008cba:	460f      	mov	r7, r1
 8008cbc:	4614      	mov	r4, r2
 8008cbe:	18d5      	adds	r5, r2, r3
 8008cc0:	42ac      	cmp	r4, r5
 8008cc2:	d101      	bne.n	8008cc8 <__sfputs_r+0x12>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	e007      	b.n	8008cd8 <__sfputs_r+0x22>
 8008cc8:	463a      	mov	r2, r7
 8008cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f7ff ffdc 	bl	8008c8c <__sfputc_r>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d1f3      	bne.n	8008cc0 <__sfputs_r+0xa>
 8008cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cdc <_vfiprintf_r>:
 8008cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	b09d      	sub	sp, #116	; 0x74
 8008ce4:	4617      	mov	r7, r2
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	4606      	mov	r6, r0
 8008cea:	b118      	cbz	r0, 8008cf4 <_vfiprintf_r+0x18>
 8008cec:	6983      	ldr	r3, [r0, #24]
 8008cee:	b90b      	cbnz	r3, 8008cf4 <_vfiprintf_r+0x18>
 8008cf0:	f7fe fec6 	bl	8007a80 <__sinit>
 8008cf4:	4b7c      	ldr	r3, [pc, #496]	; (8008ee8 <_vfiprintf_r+0x20c>)
 8008cf6:	429c      	cmp	r4, r3
 8008cf8:	d158      	bne.n	8008dac <_vfiprintf_r+0xd0>
 8008cfa:	6874      	ldr	r4, [r6, #4]
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	0718      	lsls	r0, r3, #28
 8008d00:	d55e      	bpl.n	8008dc0 <_vfiprintf_r+0xe4>
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d05b      	beq.n	8008dc0 <_vfiprintf_r+0xe4>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0c:	2320      	movs	r3, #32
 8008d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d12:	2330      	movs	r3, #48	; 0x30
 8008d14:	f04f 0b01 	mov.w	fp, #1
 8008d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d1c:	9503      	str	r5, [sp, #12]
 8008d1e:	46b8      	mov	r8, r7
 8008d20:	4645      	mov	r5, r8
 8008d22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d26:	b10b      	cbz	r3, 8008d2c <_vfiprintf_r+0x50>
 8008d28:	2b25      	cmp	r3, #37	; 0x25
 8008d2a:	d154      	bne.n	8008dd6 <_vfiprintf_r+0xfa>
 8008d2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008d30:	d00b      	beq.n	8008d4a <_vfiprintf_r+0x6e>
 8008d32:	4653      	mov	r3, sl
 8008d34:	463a      	mov	r2, r7
 8008d36:	4621      	mov	r1, r4
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff ffbc 	bl	8008cb6 <__sfputs_r>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f000 80c2 	beq.w	8008ec8 <_vfiprintf_r+0x1ec>
 8008d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d46:	4453      	add	r3, sl
 8008d48:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4a:	f898 3000 	ldrb.w	r3, [r8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80ba 	beq.w	8008ec8 <_vfiprintf_r+0x1ec>
 8008d54:	2300      	movs	r3, #0
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5e:	9304      	str	r3, [sp, #16]
 8008d60:	9307      	str	r3, [sp, #28]
 8008d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d66:	931a      	str	r3, [sp, #104]	; 0x68
 8008d68:	46a8      	mov	r8, r5
 8008d6a:	2205      	movs	r2, #5
 8008d6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008d70:	485e      	ldr	r0, [pc, #376]	; (8008eec <_vfiprintf_r+0x210>)
 8008d72:	f7ff fac5 	bl	8008300 <memchr>
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	bb78      	cbnz	r0, 8008dda <_vfiprintf_r+0xfe>
 8008d7a:	06d9      	lsls	r1, r3, #27
 8008d7c:	bf44      	itt	mi
 8008d7e:	2220      	movmi	r2, #32
 8008d80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d84:	071a      	lsls	r2, r3, #28
 8008d86:	bf44      	itt	mi
 8008d88:	222b      	movmi	r2, #43	; 0x2b
 8008d8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d8e:	782a      	ldrb	r2, [r5, #0]
 8008d90:	2a2a      	cmp	r2, #42	; 0x2a
 8008d92:	d02a      	beq.n	8008dea <_vfiprintf_r+0x10e>
 8008d94:	46a8      	mov	r8, r5
 8008d96:	2000      	movs	r0, #0
 8008d98:	250a      	movs	r5, #10
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da2:	3b30      	subs	r3, #48	; 0x30
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	d969      	bls.n	8008e7c <_vfiprintf_r+0x1a0>
 8008da8:	b360      	cbz	r0, 8008e04 <_vfiprintf_r+0x128>
 8008daa:	e024      	b.n	8008df6 <_vfiprintf_r+0x11a>
 8008dac:	4b50      	ldr	r3, [pc, #320]	; (8008ef0 <_vfiprintf_r+0x214>)
 8008dae:	429c      	cmp	r4, r3
 8008db0:	d101      	bne.n	8008db6 <_vfiprintf_r+0xda>
 8008db2:	68b4      	ldr	r4, [r6, #8]
 8008db4:	e7a2      	b.n	8008cfc <_vfiprintf_r+0x20>
 8008db6:	4b4f      	ldr	r3, [pc, #316]	; (8008ef4 <_vfiprintf_r+0x218>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	bf08      	it	eq
 8008dbc:	68f4      	ldreq	r4, [r6, #12]
 8008dbe:	e79d      	b.n	8008cfc <_vfiprintf_r+0x20>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7fd febc 	bl	8006b40 <__swsetup_r>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d09d      	beq.n	8008d08 <_vfiprintf_r+0x2c>
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dd0:	b01d      	add	sp, #116	; 0x74
 8008dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd6:	46a8      	mov	r8, r5
 8008dd8:	e7a2      	b.n	8008d20 <_vfiprintf_r+0x44>
 8008dda:	4a44      	ldr	r2, [pc, #272]	; (8008eec <_vfiprintf_r+0x210>)
 8008ddc:	4645      	mov	r5, r8
 8008dde:	1a80      	subs	r0, r0, r2
 8008de0:	fa0b f000 	lsl.w	r0, fp, r0
 8008de4:	4318      	orrs	r0, r3
 8008de6:	9004      	str	r0, [sp, #16]
 8008de8:	e7be      	b.n	8008d68 <_vfiprintf_r+0x8c>
 8008dea:	9a03      	ldr	r2, [sp, #12]
 8008dec:	1d11      	adds	r1, r2, #4
 8008dee:	6812      	ldr	r2, [r2, #0]
 8008df0:	9103      	str	r1, [sp, #12]
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	db01      	blt.n	8008dfa <_vfiprintf_r+0x11e>
 8008df6:	9207      	str	r2, [sp, #28]
 8008df8:	e004      	b.n	8008e04 <_vfiprintf_r+0x128>
 8008dfa:	4252      	negs	r2, r2
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	9207      	str	r2, [sp, #28]
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	f898 3000 	ldrb.w	r3, [r8]
 8008e08:	2b2e      	cmp	r3, #46	; 0x2e
 8008e0a:	d10e      	bne.n	8008e2a <_vfiprintf_r+0x14e>
 8008e0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008e10:	2b2a      	cmp	r3, #42	; 0x2a
 8008e12:	d138      	bne.n	8008e86 <_vfiprintf_r+0x1aa>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	f108 0802 	add.w	r8, r8, #2
 8008e1a:	1d1a      	adds	r2, r3, #4
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	9203      	str	r2, [sp, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bfb8      	it	lt
 8008e24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	4d33      	ldr	r5, [pc, #204]	; (8008ef8 <_vfiprintf_r+0x21c>)
 8008e2c:	2203      	movs	r2, #3
 8008e2e:	f898 1000 	ldrb.w	r1, [r8]
 8008e32:	4628      	mov	r0, r5
 8008e34:	f7ff fa64 	bl	8008300 <memchr>
 8008e38:	b140      	cbz	r0, 8008e4c <_vfiprintf_r+0x170>
 8008e3a:	2340      	movs	r3, #64	; 0x40
 8008e3c:	1b40      	subs	r0, r0, r5
 8008e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	f108 0801 	add.w	r8, r8, #1
 8008e48:	4303      	orrs	r3, r0
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	f898 1000 	ldrb.w	r1, [r8]
 8008e50:	2206      	movs	r2, #6
 8008e52:	482a      	ldr	r0, [pc, #168]	; (8008efc <_vfiprintf_r+0x220>)
 8008e54:	f108 0701 	add.w	r7, r8, #1
 8008e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e5c:	f7ff fa50 	bl	8008300 <memchr>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d037      	beq.n	8008ed4 <_vfiprintf_r+0x1f8>
 8008e64:	4b26      	ldr	r3, [pc, #152]	; (8008f00 <_vfiprintf_r+0x224>)
 8008e66:	bb1b      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x1d4>
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	3307      	adds	r3, #7
 8008e6c:	f023 0307 	bic.w	r3, r3, #7
 8008e70:	3308      	adds	r3, #8
 8008e72:	9303      	str	r3, [sp, #12]
 8008e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e76:	444b      	add	r3, r9
 8008e78:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7a:	e750      	b.n	8008d1e <_vfiprintf_r+0x42>
 8008e7c:	fb05 3202 	mla	r2, r5, r2, r3
 8008e80:	2001      	movs	r0, #1
 8008e82:	4688      	mov	r8, r1
 8008e84:	e78a      	b.n	8008d9c <_vfiprintf_r+0xc0>
 8008e86:	2300      	movs	r3, #0
 8008e88:	250a      	movs	r5, #10
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f108 0801 	add.w	r8, r8, #1
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	4640      	mov	r0, r8
 8008e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e98:	3a30      	subs	r2, #48	; 0x30
 8008e9a:	2a09      	cmp	r2, #9
 8008e9c:	d903      	bls.n	8008ea6 <_vfiprintf_r+0x1ca>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0c3      	beq.n	8008e2a <_vfiprintf_r+0x14e>
 8008ea2:	9105      	str	r1, [sp, #20]
 8008ea4:	e7c1      	b.n	8008e2a <_vfiprintf_r+0x14e>
 8008ea6:	fb05 2101 	mla	r1, r5, r1, r2
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4680      	mov	r8, r0
 8008eae:	e7f0      	b.n	8008e92 <_vfiprintf_r+0x1b6>
 8008eb0:	ab03      	add	r3, sp, #12
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4b13      	ldr	r3, [pc, #76]	; (8008f04 <_vfiprintf_r+0x228>)
 8008eb8:	a904      	add	r1, sp, #16
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7fc fb7e 	bl	80055bc <_printf_float>
 8008ec0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008ec4:	4681      	mov	r9, r0
 8008ec6:	d1d5      	bne.n	8008e74 <_vfiprintf_r+0x198>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	065b      	lsls	r3, r3, #25
 8008ecc:	f53f af7e 	bmi.w	8008dcc <_vfiprintf_r+0xf0>
 8008ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed2:	e77d      	b.n	8008dd0 <_vfiprintf_r+0xf4>
 8008ed4:	ab03      	add	r3, sp, #12
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4622      	mov	r2, r4
 8008eda:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <_vfiprintf_r+0x228>)
 8008edc:	a904      	add	r1, sp, #16
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f7fc fe18 	bl	8005b14 <_printf_i>
 8008ee4:	e7ec      	b.n	8008ec0 <_vfiprintf_r+0x1e4>
 8008ee6:	bf00      	nop
 8008ee8:	08009358 	.word	0x08009358
 8008eec:	080094a4 	.word	0x080094a4
 8008ef0:	08009378 	.word	0x08009378
 8008ef4:	08009338 	.word	0x08009338
 8008ef8:	080094aa 	.word	0x080094aa
 8008efc:	080094ae 	.word	0x080094ae
 8008f00:	080055bd 	.word	0x080055bd
 8008f04:	08008cb7 	.word	0x08008cb7

08008f08 <_sbrk_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	4c05      	ldr	r4, [pc, #20]	; (8008f24 <_sbrk_r+0x1c>)
 8008f0e:	4605      	mov	r5, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	f7f9 fa0e 	bl	8002334 <_sbrk>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_sbrk_r+0x1a>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_sbrk_r+0x1a>
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	200004b0 	.word	0x200004b0

08008f28 <__sread>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f30:	f000 f8b4 	bl	800909c <_read_r>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	bfab      	itete	ge
 8008f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f3c:	181b      	addge	r3, r3, r0
 8008f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f42:	bfac      	ite	ge
 8008f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f46:	81a3      	strhlt	r3, [r4, #12]
 8008f48:	bd10      	pop	{r4, pc}

08008f4a <__swrite>:
 8008f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4e:	461f      	mov	r7, r3
 8008f50:	898b      	ldrh	r3, [r1, #12]
 8008f52:	4605      	mov	r5, r0
 8008f54:	05db      	lsls	r3, r3, #23
 8008f56:	460c      	mov	r4, r1
 8008f58:	4616      	mov	r6, r2
 8008f5a:	d505      	bpl.n	8008f68 <__swrite+0x1e>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f64:	f000 f886 	bl	8009074 <_lseek_r>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f76:	463b      	mov	r3, r7
 8008f78:	4628      	mov	r0, r5
 8008f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7e:	f000 b835 	b.w	8008fec <_write_r>

08008f82 <__sseek>:
 8008f82:	b510      	push	{r4, lr}
 8008f84:	460c      	mov	r4, r1
 8008f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8a:	f000 f873 	bl	8009074 <_lseek_r>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	bf15      	itete	ne
 8008f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f9e:	81a3      	strheq	r3, [r4, #12]
 8008fa0:	bf18      	it	ne
 8008fa2:	81a3      	strhne	r3, [r4, #12]
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <__sclose>:
 8008fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008faa:	f000 b831 	b.w	8009010 <_close_r>

08008fae <strncmp>:
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	b16a      	cbz	r2, 8008fce <strncmp+0x20>
 8008fb2:	3901      	subs	r1, #1
 8008fb4:	1884      	adds	r4, r0, r2
 8008fb6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008fba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d103      	bne.n	8008fca <strncmp+0x1c>
 8008fc2:	42a0      	cmp	r0, r4
 8008fc4:	d001      	beq.n	8008fca <strncmp+0x1c>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1f5      	bne.n	8008fb6 <strncmp+0x8>
 8008fca:	1a98      	subs	r0, r3, r2
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	4610      	mov	r0, r2
 8008fd0:	e7fc      	b.n	8008fcc <strncmp+0x1e>

08008fd2 <__ascii_wctomb>:
 8008fd2:	b149      	cbz	r1, 8008fe8 <__ascii_wctomb+0x16>
 8008fd4:	2aff      	cmp	r2, #255	; 0xff
 8008fd6:	bf8b      	itete	hi
 8008fd8:	238a      	movhi	r3, #138	; 0x8a
 8008fda:	700a      	strbls	r2, [r1, #0]
 8008fdc:	6003      	strhi	r3, [r0, #0]
 8008fde:	2001      	movls	r0, #1
 8008fe0:	bf88      	it	hi
 8008fe2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008fe6:	4770      	bx	lr
 8008fe8:	4608      	mov	r0, r1
 8008fea:	4770      	bx	lr

08008fec <_write_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4605      	mov	r5, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4c05      	ldr	r4, [pc, #20]	; (800900c <_write_r+0x20>)
 8008ff8:	6022      	str	r2, [r4, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f000 f888 	bl	8009110 <_write>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_write_r+0x1e>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	b103      	cbz	r3, 800900a <_write_r+0x1e>
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	200004b0 	.word	0x200004b0

08009010 <_close_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	2300      	movs	r3, #0
 8009014:	4c05      	ldr	r4, [pc, #20]	; (800902c <_close_r+0x1c>)
 8009016:	4605      	mov	r5, r0
 8009018:	4608      	mov	r0, r1
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	f000 f850 	bl	80090c0 <_close>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	d102      	bne.n	800902a <_close_r+0x1a>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	b103      	cbz	r3, 800902a <_close_r+0x1a>
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	200004b0 	.word	0x200004b0

08009030 <_fstat_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	2300      	movs	r3, #0
 8009034:	4c06      	ldr	r4, [pc, #24]	; (8009050 <_fstat_r+0x20>)
 8009036:	4605      	mov	r5, r0
 8009038:	4608      	mov	r0, r1
 800903a:	4611      	mov	r1, r2
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	f000 f847 	bl	80090d0 <_fstat>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d102      	bne.n	800904c <_fstat_r+0x1c>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	b103      	cbz	r3, 800904c <_fstat_r+0x1c>
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	200004b0 	.word	0x200004b0

08009054 <_isatty_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	2300      	movs	r3, #0
 8009058:	4c05      	ldr	r4, [pc, #20]	; (8009070 <_isatty_r+0x1c>)
 800905a:	4605      	mov	r5, r0
 800905c:	4608      	mov	r0, r1
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	f000 f83e 	bl	80090e0 <_isatty>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_isatty_r+0x1a>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	b103      	cbz	r3, 800906e <_isatty_r+0x1a>
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	200004b0 	.word	0x200004b0

08009074 <_lseek_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4605      	mov	r5, r0
 8009078:	4608      	mov	r0, r1
 800907a:	4611      	mov	r1, r2
 800907c:	2200      	movs	r2, #0
 800907e:	4c05      	ldr	r4, [pc, #20]	; (8009094 <_lseek_r+0x20>)
 8009080:	6022      	str	r2, [r4, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	f000 f834 	bl	80090f0 <_lseek>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_lseek_r+0x1e>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	b103      	cbz	r3, 8009092 <_lseek_r+0x1e>
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	200004b0 	.word	0x200004b0

08009098 <__malloc_lock>:
 8009098:	4770      	bx	lr

0800909a <__malloc_unlock>:
 800909a:	4770      	bx	lr

0800909c <_read_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4605      	mov	r5, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	2200      	movs	r2, #0
 80090a6:	4c05      	ldr	r4, [pc, #20]	; (80090bc <_read_r+0x20>)
 80090a8:	6022      	str	r2, [r4, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	f000 f828 	bl	8009100 <_read>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_read_r+0x1e>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_read_r+0x1e>
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	200004b0 	.word	0x200004b0

080090c0 <_close>:
 80090c0:	2258      	movs	r2, #88	; 0x58
 80090c2:	4b02      	ldr	r3, [pc, #8]	; (80090cc <_close+0xc>)
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	4770      	bx	lr
 80090cc:	200004b0 	.word	0x200004b0

080090d0 <_fstat>:
 80090d0:	2258      	movs	r2, #88	; 0x58
 80090d2:	4b02      	ldr	r3, [pc, #8]	; (80090dc <_fstat+0xc>)
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	4770      	bx	lr
 80090dc:	200004b0 	.word	0x200004b0

080090e0 <_isatty>:
 80090e0:	2258      	movs	r2, #88	; 0x58
 80090e2:	4b02      	ldr	r3, [pc, #8]	; (80090ec <_isatty+0xc>)
 80090e4:	2000      	movs	r0, #0
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	200004b0 	.word	0x200004b0

080090f0 <_lseek>:
 80090f0:	2258      	movs	r2, #88	; 0x58
 80090f2:	4b02      	ldr	r3, [pc, #8]	; (80090fc <_lseek+0xc>)
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	4770      	bx	lr
 80090fc:	200004b0 	.word	0x200004b0

08009100 <_read>:
 8009100:	2258      	movs	r2, #88	; 0x58
 8009102:	4b02      	ldr	r3, [pc, #8]	; (800910c <_read+0xc>)
 8009104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	4770      	bx	lr
 800910c:	200004b0 	.word	0x200004b0

08009110 <_write>:
 8009110:	2258      	movs	r2, #88	; 0x58
 8009112:	4b02      	ldr	r3, [pc, #8]	; (800911c <_write+0xc>)
 8009114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	4770      	bx	lr
 800911c:	200004b0 	.word	0x200004b0

08009120 <_init>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr

0800912c <_fini>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr
