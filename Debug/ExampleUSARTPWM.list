
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009290  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080093a0  080093a0  000193a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  08009820  08009820  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009820  08009820  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08009828  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000230  08009a58  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08009a58  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbba  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4d  00000000  00000000  0002be13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002d860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002e488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018614  00000000  00000000  0002efd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094d0  00000000  00000000  000475ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b7f0  00000000  00000000  00050abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc2ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  000dc328  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000e0720  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000e07bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08009388 	.word	0x08009388

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08009388 	.word	0x08009388

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <interpreteComando>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interpreteComando(){
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

	//uint32_t duty_cycle;
	double consigna;

	switch (buffer[0]) {
 8000b6e:	4bac      	ldr	r3, [pc, #688]	; (8000e20 <interpreteComando+0x2b8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b44      	subs	r3, #68	; 0x44
 8000b74:	2b33      	cmp	r3, #51	; 0x33
 8000b76:	f200 828a 	bhi.w	800108e <interpreteComando+0x526>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <interpreteComando+0x18>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	0800101f 	.word	0x0800101f
 8000b84:	0800108f 	.word	0x0800108f
 8000b88:	0800108f 	.word	0x0800108f
 8000b8c:	0800108f 	.word	0x0800108f
 8000b90:	0800108f 	.word	0x0800108f
 8000b94:	08000faf 	.word	0x08000faf
 8000b98:	0800108f 	.word	0x0800108f
 8000b9c:	0800108f 	.word	0x0800108f
 8000ba0:	0800108f 	.word	0x0800108f
 8000ba4:	0800108f 	.word	0x0800108f
 8000ba8:	0800108f 	.word	0x0800108f
 8000bac:	0800108f 	.word	0x0800108f
 8000bb0:	08000f3f 	.word	0x08000f3f
 8000bb4:	0800108f 	.word	0x0800108f
 8000bb8:	0800108f 	.word	0x0800108f
 8000bbc:	0800108f 	.word	0x0800108f
 8000bc0:	0800108f 	.word	0x0800108f
 8000bc4:	0800108f 	.word	0x0800108f
 8000bc8:	0800108f 	.word	0x0800108f
 8000bcc:	08000c51 	.word	0x08000c51
 8000bd0:	0800108f 	.word	0x0800108f
 8000bd4:	0800108f 	.word	0x0800108f
 8000bd8:	0800108f 	.word	0x0800108f
 8000bdc:	0800108f 	.word	0x0800108f
 8000be0:	0800108f 	.word	0x0800108f
 8000be4:	0800108f 	.word	0x0800108f
 8000be8:	0800108f 	.word	0x0800108f
 8000bec:	0800108f 	.word	0x0800108f
 8000bf0:	0800108f 	.word	0x0800108f
 8000bf4:	0800108f 	.word	0x0800108f
 8000bf8:	0800108f 	.word	0x0800108f
 8000bfc:	0800108f 	.word	0x0800108f
 8000c00:	0800101f 	.word	0x0800101f
 8000c04:	0800108f 	.word	0x0800108f
 8000c08:	0800108f 	.word	0x0800108f
 8000c0c:	0800108f 	.word	0x0800108f
 8000c10:	0800108f 	.word	0x0800108f
 8000c14:	08000faf 	.word	0x08000faf
 8000c18:	0800108f 	.word	0x0800108f
 8000c1c:	0800108f 	.word	0x0800108f
 8000c20:	0800108f 	.word	0x0800108f
 8000c24:	0800108f 	.word	0x0800108f
 8000c28:	0800108f 	.word	0x0800108f
 8000c2c:	0800108f 	.word	0x0800108f
 8000c30:	08000f3f 	.word	0x08000f3f
 8000c34:	0800108f 	.word	0x0800108f
 8000c38:	0800108f 	.word	0x0800108f
 8000c3c:	0800108f 	.word	0x0800108f
 8000c40:	0800108f 	.word	0x0800108f
 8000c44:	0800108f 	.word	0x0800108f
 8000c48:	0800108f 	.word	0x0800108f
 8000c4c:	08000c51 	.word	0x08000c51
	case 'W':
	case 'w':
		switch (buffer[1]) {
 8000c50:	4b73      	ldr	r3, [pc, #460]	; (8000e20 <interpreteComando+0x2b8>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	2b31      	cmp	r3, #49	; 0x31
 8000c56:	d003      	beq.n	8000c60 <interpreteComando+0xf8>
 8000c58:	2b32      	cmp	r3, #50	; 0x32
 8000c5a:	f000 80a0 	beq.w	8000d9e <interpreteComando+0x236>
					printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
				}
			}
			break;
		}
			break;
 8000c5e:	e216      	b.n	800108e <interpreteComando+0x526>
			if (buffer[2]) {
 8000c60:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <interpreteComando+0x2b8>)
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 8166 	beq.w	8000f36 <interpreteComando+0x3ce>
				if (buffer[2] == 43) {
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <interpreteComando+0x2b8>)
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b2b      	cmp	r3, #43	; 0x2b
 8000c70:	d135      	bne.n	8000cde <interpreteComando+0x176>
					stop1=0;
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <interpreteComando+0x2bc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	486a      	ldr	r0, [pc, #424]	; (8000e28 <interpreteComando+0x2c0>)
 8000c7e:	f001 ff39 	bl	8002af4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2120      	movs	r1, #32
 8000c86:	4868      	ldr	r0, [pc, #416]	; (8000e28 <interpreteComando+0x2c0>)
 8000c88:	f001 ff34 	bl	8002af4 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000c8c:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <interpreteComando+0x2b8>)
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 8150 	beq.w	8000f36 <interpreteComando+0x3ce>
						consigna = atof(&buffer[3]);
 8000c96:	4865      	ldr	r0, [pc, #404]	; (8000e2c <interpreteComando+0x2c4>)
 8000c98:	f004 fcfd 	bl	8005696 <atof>
 8000c9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	4b62      	ldr	r3, [pc, #392]	; (8000e30 <interpreteComando+0x2c8>)
 8000ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000caa:	f7ff fe87 	bl	80009bc <__aeabi_dcmplt>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <interpreteComando+0x158>
							velocidad_consigna = consigna;
 8000cb4:	4a5f      	ldr	r2, [pc, #380]	; (8000e34 <interpreteComando+0x2cc>)
 8000cb6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000cba:	e9c2 3400 	strd	r3, r4, [r2]
 8000cbe:	e005      	b.n	8000ccc <interpreteComando+0x164>
							velocidad_consigna = 35;
 8000cc0:	4a5c      	ldr	r2, [pc, #368]	; (8000e34 <interpreteComando+0x2cc>)
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	4c5a      	ldr	r4, [pc, #360]	; (8000e30 <interpreteComando+0x2c8>)
 8000cc8:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %s %5.3f \r\n","+", velocidad_consigna);
 8000ccc:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <interpreteComando+0x2cc>)
 8000cce:	cb18      	ldmia	r3, {r3, r4}
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	4958      	ldr	r1, [pc, #352]	; (8000e38 <interpreteComando+0x2d0>)
 8000cd6:	4859      	ldr	r0, [pc, #356]	; (8000e3c <interpreteComando+0x2d4>)
 8000cd8:	f005 f962 	bl	8005fa0 <iprintf>
			break;
 8000cdc:	e12b      	b.n	8000f36 <interpreteComando+0x3ce>
				} else if (buffer[2] == 45) {
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <interpreteComando+0x2b8>)
 8000ce0:	789b      	ldrb	r3, [r3, #2]
 8000ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8000ce4:	d13a      	bne.n	8000d5c <interpreteComando+0x1f4>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2110      	movs	r1, #16
 8000cea:	484f      	ldr	r0, [pc, #316]	; (8000e28 <interpreteComando+0x2c0>)
 8000cec:	f001 ff02 	bl	8002af4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	484c      	ldr	r0, [pc, #304]	; (8000e28 <interpreteComando+0x2c0>)
 8000cf6:	f001 fefd 	bl	8002af4 <HAL_GPIO_WritePin>
					stop1=0;
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <interpreteComando+0x2bc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000d00:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <interpreteComando+0x2b8>)
 8000d02:	78db      	ldrb	r3, [r3, #3]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8116 	beq.w	8000f36 <interpreteComando+0x3ce>
						consigna = atof(&buffer[3]);
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <interpreteComando+0x2c4>)
 8000d0c:	f004 fcc3 	bl	8005696 <atof>
 8000d10:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <interpreteComando+0x2c8>)
 8000d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d1e:	f7ff fe4d 	bl	80009bc <__aeabi_dcmplt>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00b      	beq.n	8000d40 <interpreteComando+0x1d8>
							velocidad_consigna = -consigna;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <interpreteComando+0x2cc>)
 8000d36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d3a:	e9c3 1200 	strd	r1, r2, [r3]
 8000d3e:	e005      	b.n	8000d4c <interpreteComando+0x1e4>
							velocidad_consigna = -35;
 8000d40:	4a3c      	ldr	r2, [pc, #240]	; (8000e34 <interpreteComando+0x2cc>)
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	4c3e      	ldr	r4, [pc, #248]	; (8000e40 <interpreteComando+0x2d8>)
 8000d48:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d4c:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <interpreteComando+0x2cc>)
 8000d4e:	cb18      	ldmia	r3, {r3, r4}
 8000d50:	461a      	mov	r2, r3
 8000d52:	4623      	mov	r3, r4
 8000d54:	483b      	ldr	r0, [pc, #236]	; (8000e44 <interpreteComando+0x2dc>)
 8000d56:	f005 f923 	bl	8005fa0 <iprintf>
			break;
 8000d5a:	e0ec      	b.n	8000f36 <interpreteComando+0x3ce>
				}else if(buffer[2] == 48){
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <interpreteComando+0x2b8>)
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	2b30      	cmp	r3, #48	; 0x30
 8000d62:	f040 80e8 	bne.w	8000f36 <interpreteComando+0x3ce>
					velocidad_consigna=0;
 8000d66:	4a33      	ldr	r2, [pc, #204]	; (8000e34 <interpreteComando+0x2cc>)
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	f04f 0400 	mov.w	r4, #0
 8000d70:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	482b      	ldr	r0, [pc, #172]	; (8000e28 <interpreteComando+0x2c0>)
 8000d7a:	f001 febb 	bl	8002af4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	4829      	ldr	r0, [pc, #164]	; (8000e28 <interpreteComando+0x2c0>)
 8000d84:	f001 feb6 	bl	8002af4 <HAL_GPIO_WritePin>
					stop1=1;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <interpreteComando+0x2bc>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <interpreteComando+0x2cc>)
 8000d90:	cb18      	ldmia	r3, {r3, r4}
 8000d92:	461a      	mov	r2, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	482b      	ldr	r0, [pc, #172]	; (8000e44 <interpreteComando+0x2dc>)
 8000d98:	f005 f902 	bl	8005fa0 <iprintf>
			break;
 8000d9c:	e0cb      	b.n	8000f36 <interpreteComando+0x3ce>
			if (buffer[2]) {
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <interpreteComando+0x2b8>)
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80c9 	beq.w	8000f3a <interpreteComando+0x3d2>
				if (buffer[2] == 43) {
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <interpreteComando+0x2b8>)
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	2b2b      	cmp	r3, #43	; 0x2b
 8000dae:	d151      	bne.n	8000e54 <interpreteComando+0x2ec>
					stop2=0;
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <interpreteComando+0x2e0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <interpreteComando+0x2c0>)
 8000dbe:	f001 fe99 	bl	8002af4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <interpreteComando+0x2c0>)
 8000dca:	f001 fe93 	bl	8002af4 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <interpreteComando+0x2b8>)
 8000dd0:	78db      	ldrb	r3, [r3, #3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <interpreteComando+0x3d2>
						consigna = atof(&buffer[3]);
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <interpreteComando+0x2c4>)
 8000dda:	f004 fc5c 	bl	8005696 <atof>
 8000dde:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <interpreteComando+0x2c8>)
 8000de8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dec:	f7ff fde6 	bl	80009bc <__aeabi_dcmplt>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d005      	beq.n	8000e02 <interpreteComando+0x29a>
							velocidad_consigna2 = consigna;
 8000df6:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <interpreteComando+0x2e4>)
 8000df8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000dfc:	e9c2 3400 	strd	r3, r4, [r2]
 8000e00:	e005      	b.n	8000e0e <interpreteComando+0x2a6>
							velocidad_consigna2 = 35;
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <interpreteComando+0x2e4>)
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	4c09      	ldr	r4, [pc, #36]	; (8000e30 <interpreteComando+0x2c8>)
 8000e0a:	e9c2 3400 	strd	r3, r4, [r2]
						printf(
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <interpreteComando+0x2e4>)
 8000e10:	cb18      	ldmia	r3, {r3, r4}
 8000e12:	461a      	mov	r2, r3
 8000e14:	4623      	mov	r3, r4
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <interpreteComando+0x2d0>)
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <interpreteComando+0x2e8>)
 8000e1a:	f005 f8c1 	bl	8005fa0 <iprintf>
			break;
 8000e1e:	e08c      	b.n	8000f3a <interpreteComando+0x3d2>
 8000e20:	20000400 	.word	0x20000400
 8000e24:	2000004c 	.word	0x2000004c
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	20000403 	.word	0x20000403
 8000e30:	40418000 	.word	0x40418000
 8000e34:	200002b0 	.word	0x200002b0
 8000e38:	080093a0 	.word	0x080093a0
 8000e3c:	080093a4 	.word	0x080093a4
 8000e40:	c0418000 	.word	0xc0418000
 8000e44:	080093d0 	.word	0x080093d0
 8000e48:	20000050 	.word	0x20000050
 8000e4c:	200002b8 	.word	0x200002b8
 8000e50:	080093fc 	.word	0x080093fc
				} else if (buffer[2] == 45) {
 8000e54:	4b90      	ldr	r3, [pc, #576]	; (8001098 <interpreteComando+0x530>)
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	2b2d      	cmp	r3, #45	; 0x2d
 8000e5a:	d14a      	bne.n	8000ef2 <interpreteComando+0x38a>
					stop2=0;
 8000e5c:	4b8f      	ldr	r3, [pc, #572]	; (800109c <interpreteComando+0x534>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e68:	488d      	ldr	r0, [pc, #564]	; (80010a0 <interpreteComando+0x538>)
 8000e6a:	f001 fe43 	bl	8002af4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e74:	488a      	ldr	r0, [pc, #552]	; (80010a0 <interpreteComando+0x538>)
 8000e76:	f001 fe3d 	bl	8002af4 <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000e7a:	4b87      	ldr	r3, [pc, #540]	; (8001098 <interpreteComando+0x530>)
 8000e7c:	78db      	ldrb	r3, [r3, #3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d05b      	beq.n	8000f3a <interpreteComando+0x3d2>
						consigna = atof(&buffer[3]);
 8000e82:	4888      	ldr	r0, [pc, #544]	; (80010a4 <interpreteComando+0x53c>)
 8000e84:	f004 fc07 	bl	8005696 <atof>
 8000e88:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if( consigna==0){
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e98:	f7ff fd86 	bl	80009a8 <__aeabi_dcmpeq>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <interpreteComando+0x34a>
							velocidad_consigna2=0;
 8000ea2:	4a81      	ldr	r2, [pc, #516]	; (80010a8 <interpreteComando+0x540>)
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	f04f 0400 	mov.w	r4, #0
 8000eac:	e9c2 3400 	strd	r3, r4, [r2]
 8000eb0:	e017      	b.n	8000ee2 <interpreteComando+0x37a>
						}else if (consigna < 35) {
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <interpreteComando+0x544>)
 8000eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ebc:	f7ff fd7e 	bl	80009bc <__aeabi_dcmplt>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <interpreteComando+0x36e>
							velocidad_consigna2 = -consigna;
 8000ec6:	68bc      	ldr	r4, [r7, #8]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000ece:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <interpreteComando+0x540>)
 8000ed0:	e9c3 4500 	strd	r4, r5, [r3]
 8000ed4:	e005      	b.n	8000ee2 <interpreteComando+0x37a>
							velocidad_consigna2 = -35;
 8000ed6:	4a74      	ldr	r2, [pc, #464]	; (80010a8 <interpreteComando+0x540>)
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	4c74      	ldr	r4, [pc, #464]	; (80010b0 <interpreteComando+0x548>)
 8000ede:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000ee2:	4b71      	ldr	r3, [pc, #452]	; (80010a8 <interpreteComando+0x540>)
 8000ee4:	cb18      	ldmia	r3, {r3, r4}
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4623      	mov	r3, r4
 8000eea:	4872      	ldr	r0, [pc, #456]	; (80010b4 <interpreteComando+0x54c>)
 8000eec:	f005 f858 	bl	8005fa0 <iprintf>
			break;
 8000ef0:	e023      	b.n	8000f3a <interpreteComando+0x3d2>
				}else if(buffer[2] == 48){
 8000ef2:	4b69      	ldr	r3, [pc, #420]	; (8001098 <interpreteComando+0x530>)
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	2b30      	cmp	r3, #48	; 0x30
 8000ef8:	d11f      	bne.n	8000f3a <interpreteComando+0x3d2>
					velocidad_consigna2=0;
 8000efa:	4a6b      	ldr	r2, [pc, #428]	; (80010a8 <interpreteComando+0x540>)
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	f04f 0400 	mov.w	r4, #0
 8000f04:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	4864      	ldr	r0, [pc, #400]	; (80010a0 <interpreteComando+0x538>)
 8000f10:	f001 fdf0 	bl	8002af4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1a:	4861      	ldr	r0, [pc, #388]	; (80010a0 <interpreteComando+0x538>)
 8000f1c:	f001 fdea 	bl	8002af4 <HAL_GPIO_WritePin>
					stop2=0;
 8000f20:	4b5e      	ldr	r3, [pc, #376]	; (800109c <interpreteComando+0x534>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000f26:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <interpreteComando+0x540>)
 8000f28:	cb18      	ldmia	r3, {r3, r4}
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4623      	mov	r3, r4
 8000f2e:	4861      	ldr	r0, [pc, #388]	; (80010b4 <interpreteComando+0x54c>)
 8000f30:	f005 f836 	bl	8005fa0 <iprintf>
			break;
 8000f34:	e001      	b.n	8000f3a <interpreteComando+0x3d2>
			break;
 8000f36:	bf00      	nop
 8000f38:	e0a9      	b.n	800108e <interpreteComando+0x526>
			break;
 8000f3a:	bf00      	nop
			break;
 8000f3c:	e0a7      	b.n	800108e <interpreteComando+0x526>
//		case 'C':
//			control=1;
//			break;
		case 'p':
		case 'P':
			switch (buffer[1]) {
 8000f3e:	4b56      	ldr	r3, [pc, #344]	; (8001098 <interpreteComando+0x530>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	2b31      	cmp	r3, #49	; 0x31
 8000f44:	d002      	beq.n	8000f4c <interpreteComando+0x3e4>
 8000f46:	2b32      	cmp	r3, #50	; 0x32
 8000f48:	d016      	beq.n	8000f78 <interpreteComando+0x410>
 8000f4a:	e02b      	b.n	8000fa4 <interpreteComando+0x43c>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000f4c:	485a      	ldr	r0, [pc, #360]	; (80010b8 <interpreteComando+0x550>)
 8000f4e:	f004 fba2 	bl	8005696 <atof>
 8000f52:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP1=(float) consigna;
 8000f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f5a:	f7ff fdb5 	bl	8000ac8 <__aeabi_d2f>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa61 	bl	8000428 <__aeabi_f2d>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	4a54      	ldr	r2, [pc, #336]	; (80010bc <interpreteComando+0x554>)
 8000f6c:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8000f70:	4853      	ldr	r0, [pc, #332]	; (80010c0 <interpreteComando+0x558>)
 8000f72:	f005 f889 	bl	8006088 <puts>
						break;
 8000f76:	e019      	b.n	8000fac <interpreteComando+0x444>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000f78:	484f      	ldr	r0, [pc, #316]	; (80010b8 <interpreteComando+0x550>)
 8000f7a:	f004 fb8c 	bl	8005696 <atof>
 8000f7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP2=(float) consigna;
 8000f82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f86:	f7ff fd9f 	bl	8000ac8 <__aeabi_d2f>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa4b 	bl	8000428 <__aeabi_f2d>
 8000f92:	4603      	mov	r3, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <interpreteComando+0x55c>)
 8000f98:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8000f9c:	4848      	ldr	r0, [pc, #288]	; (80010c0 <interpreteComando+0x558>)
 8000f9e:	f005 f873 	bl	8006088 <puts>
						break;
 8000fa2:	e003      	b.n	8000fac <interpreteComando+0x444>
					default:
					printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000fa4:	4848      	ldr	r0, [pc, #288]	; (80010c8 <interpreteComando+0x560>)
 8000fa6:	f005 f86f 	bl	8006088 <puts>
					break;
 8000faa:	bf00      	nop

			}
			break;
 8000fac:	e06f      	b.n	800108e <interpreteComando+0x526>
		case 'i':
		case 'I':
			switch (buffer[1]) {
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <interpreteComando+0x530>)
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	2b31      	cmp	r3, #49	; 0x31
 8000fb4:	d002      	beq.n	8000fbc <interpreteComando+0x454>
 8000fb6:	2b32      	cmp	r3, #50	; 0x32
 8000fb8:	d016      	beq.n	8000fe8 <interpreteComando+0x480>
 8000fba:	e02b      	b.n	8001014 <interpreteComando+0x4ac>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000fbc:	483e      	ldr	r0, [pc, #248]	; (80010b8 <interpreteComando+0x550>)
 8000fbe:	f004 fb6a 	bl	8005696 <atof>
 8000fc2:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI1=(float) consigna;
 8000fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fca:	f7ff fd7d 	bl	8000ac8 <__aeabi_d2f>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa29 	bl	8000428 <__aeabi_f2d>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <interpreteComando+0x564>)
 8000fdc:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8000fe0:	4837      	ldr	r0, [pc, #220]	; (80010c0 <interpreteComando+0x558>)
 8000fe2:	f005 f851 	bl	8006088 <puts>
						break;
 8000fe6:	e019      	b.n	800101c <interpreteComando+0x4b4>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000fe8:	4833      	ldr	r0, [pc, #204]	; (80010b8 <interpreteComando+0x550>)
 8000fea:	f004 fb54 	bl	8005696 <atof>
 8000fee:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI2=(float) consigna;
 8000ff2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ff6:	f7ff fd67 	bl	8000ac8 <__aeabi_d2f>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa13 	bl	8000428 <__aeabi_f2d>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <interpreteComando+0x568>)
 8001008:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 800100c:	482c      	ldr	r0, [pc, #176]	; (80010c0 <interpreteComando+0x558>)
 800100e:	f005 f83b 	bl	8006088 <puts>
						break;
 8001012:	e003      	b.n	800101c <interpreteComando+0x4b4>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8001014:	482c      	ldr	r0, [pc, #176]	; (80010c8 <interpreteComando+0x560>)
 8001016:	f005 f837 	bl	8006088 <puts>
						break;
 800101a:	bf00      	nop
			}
			break;
 800101c:	e037      	b.n	800108e <interpreteComando+0x526>
		case 'd':
		case 'D':
			switch (buffer[1]) {
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <interpreteComando+0x530>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	2b31      	cmp	r3, #49	; 0x31
 8001024:	d002      	beq.n	800102c <interpreteComando+0x4c4>
 8001026:	2b32      	cmp	r3, #50	; 0x32
 8001028:	d016      	beq.n	8001058 <interpreteComando+0x4f0>
 800102a:	e02b      	b.n	8001084 <interpreteComando+0x51c>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <interpreteComando+0x550>)
 800102e:	f004 fb32 	bl	8005696 <atof>
 8001032:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD1=(float) consigna;
 8001036:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800103a:	f7ff fd45 	bl	8000ac8 <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f9f1 	bl	8000428 <__aeabi_f2d>
 8001046:	4603      	mov	r3, r0
 8001048:	460c      	mov	r4, r1
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <interpreteComando+0x56c>)
 800104c:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 8001050:	481b      	ldr	r0, [pc, #108]	; (80010c0 <interpreteComando+0x558>)
 8001052:	f005 f819 	bl	8006088 <puts>
						break;
 8001056:	e019      	b.n	800108c <interpreteComando+0x524>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8001058:	4817      	ldr	r0, [pc, #92]	; (80010b8 <interpreteComando+0x550>)
 800105a:	f004 fb1c 	bl	8005696 <atof>
 800105e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD2=(float) consigna;
 8001062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001066:	f7ff fd2f 	bl	8000ac8 <__aeabi_d2f>
 800106a:	4603      	mov	r3, r0
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f9db 	bl	8000428 <__aeabi_f2d>
 8001072:	4603      	mov	r3, r0
 8001074:	460c      	mov	r4, r1
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <interpreteComando+0x570>)
 8001078:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n");
 800107c:	4810      	ldr	r0, [pc, #64]	; (80010c0 <interpreteComando+0x558>)
 800107e:	f005 f803 	bl	8006088 <puts>
						break;
 8001082:	e003      	b.n	800108c <interpreteComando+0x524>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <interpreteComando+0x560>)
 8001086:	f004 ffff 	bl	8006088 <puts>
						break;
 800108a:	bf00      	nop
			}
			break;
 800108c:	bf00      	nop
//			control=0;
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//			break;
	}

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	20000400 	.word	0x20000400
 800109c:	20000050 	.word	0x20000050
 80010a0:	40010800 	.word	0x40010800
 80010a4:	20000403 	.word	0x20000403
 80010a8:	200002b8 	.word	0x200002b8
 80010ac:	40418000 	.word	0x40418000
 80010b0:	c0418000 	.word	0xc0418000
 80010b4:	0800942c 	.word	0x0800942c
 80010b8:	20000402 	.word	0x20000402
 80010bc:	20000018 	.word	0x20000018
 80010c0:	08009458 	.word	0x08009458
 80010c4:	20000030 	.word	0x20000030
 80010c8:	0800945c 	.word	0x0800945c
 80010cc:	20000020 	.word	0x20000020
 80010d0:	20000038 	.word	0x20000038
 80010d4:	20000028 	.word	0x20000028
 80010d8:	20000040 	.word	0x20000040
 80010dc:	00000000 	.word	0x00000000

080010e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80010e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010e4:	b087      	sub	sp, #28
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6178      	str	r0, [r7, #20]
	if(htim->Instance == TIM1){
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a98      	ldr	r2, [pc, #608]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	f040 82f0 	bne.w	80016d6 <HAL_TIM_PeriodElapsedCallback+0x5f6>

		/*Transmit velocidad*/
		HAL_SPI_Transmit(&hspi2, out_buffer, 14, 1);
 80010f6:	2301      	movs	r3, #1
 80010f8:	220e      	movs	r2, #14
 80010fa:	4996      	ldr	r1, [pc, #600]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80010fc:	4896      	ldr	r0, [pc, #600]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80010fe:	f002 f97f 	bl	8003400 <HAL_SPI_Transmit>

		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 8001102:	4b96      	ldr	r3, [pc, #600]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	461a      	mov	r2, r3
 8001110:	4b93      	ldr	r3, [pc, #588]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	4413      	add	r3, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4b92      	ldr	r3, [pc, #584]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800111c:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 800111e:	4b91      	ldr	r3, [pc, #580]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b91      	ldr	r3, [pc, #580]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f96b 	bl	8000404 <__aeabi_i2d>
 800112e:	4b8f      	ldr	r3, [pc, #572]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001130:	cb18      	ldmia	r3, {r3, r4}
 8001132:	461a      	mov	r2, r3
 8001134:	4623      	mov	r3, r4
 8001136:	f7ff faf9 	bl	800072c <__aeabi_ddiv>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4a8c      	ldr	r2, [pc, #560]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001140:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 8001144:	4b8a      	ldr	r3, [pc, #552]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114a:	a37f      	add	r3, pc, #508	; (adr r3, 8001348 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff faec 	bl	800072c <__aeabi_ddiv>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	4618      	mov	r0, r3
 800115a:	4621      	mov	r1, r4
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b84      	ldr	r3, [pc, #528]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001162:	f7ff f9b9 	bl	80004d8 <__aeabi_dmul>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4a83      	ldr	r2, [pc, #524]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800116c:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8001170:	4b7c      	ldr	r3, [pc, #496]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a7c      	ldr	r2, [pc, #496]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001176:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 8001178:	4b80      	ldr	r3, [pc, #512]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001180:	fb02 f303 	mul.w	r3, r2, r3
 8001184:	461a      	mov	r2, r3
 8001186:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	4413      	add	r3, r2
 800118e:	461a      	mov	r2, r3
 8001190:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001192:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 8001194:	4b7b      	ldr	r3, [pc, #492]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f930 	bl	8000404 <__aeabi_i2d>
 80011a4:	4b71      	ldr	r3, [pc, #452]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011a6:	cb18      	ldmia	r3, {r3, r4}
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	f7ff fabe 	bl	800072c <__aeabi_ddiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	4a75      	ldr	r2, [pc, #468]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011b6:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c0:	a361      	add	r3, pc, #388	; (adr r3, 8001348 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fab1 	bl	800072c <__aeabi_ddiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80011d8:	f7ff f97e 	bl	80004d8 <__aeabi_dmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4a6b      	ldr	r2, [pc, #428]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011e2:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 80011e6:	4b67      	ldr	r3, [pc, #412]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a67      	ldr	r2, [pc, #412]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011ec:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 80011ee:	4b69      	ldr	r3, [pc, #420]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	f040 82ae 	bne.w	8001754 <HAL_TIM_PeriodElapsedCallback+0x674>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 80011f8:	4b67      	ldr	r3, [pc, #412]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001200:	cb18      	ldmia	r3, {r3, r4}
 8001202:	461a      	mov	r2, r3
 8001204:	4623      	mov	r3, r4
 8001206:	f7fe ffaf 	bl	8000168 <__aeabi_dsub>
 800120a:	4603      	mov	r3, r0
 800120c:	460c      	mov	r4, r1
 800120e:	4a63      	ldr	r2, [pc, #396]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001210:	e9c2 3400 	strd	r3, r4, [r2]
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
//			else if(error_vel_act==0){
//				Ui_anterior=0;
//			}
			if(stop1==1){
 8001214:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x14a>
			  Ui_anterior=0;
 800121c:	4a61      	ldr	r2, [pc, #388]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	f04f 0400 	mov.w	r4, #0
 8001226:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800122c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001230:	4b5a      	ldr	r3, [pc, #360]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001232:	cb18      	ldmia	r3, {r3, r4}
 8001234:	461a      	mov	r2, r3
 8001236:	4623      	mov	r3, r4
 8001238:	f7ff f94e 	bl	80004d8 <__aeabi_dmul>
 800123c:	4603      	mov	r3, r0
 800123e:	460c      	mov	r4, r1
 8001240:	4a5a      	ldr	r2, [pc, #360]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001242:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_ant);
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800124e:	cb18      	ldmia	r3, {r3, r4}
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	f7ff f940 	bl	80004d8 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4618      	mov	r0, r3
 800125e:	4621      	mov	r1, r4
 8001260:	4b54      	ldr	r3, [pc, #336]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001262:	cb18      	ldmia	r3, {r3, r4}
 8001264:	461a      	mov	r2, r3
 8001266:	4623      	mov	r3, r4
 8001268:	f7ff f936 	bl	80004d8 <__aeabi_dmul>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4618      	mov	r0, r3
 8001272:	4621      	mov	r1, r4
 8001274:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001276:	cb18      	ldmia	r3, {r3, r4}
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	f7fe ff76 	bl	800016c <__adddf3>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001286:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 800128a:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800128c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001292:	cb18      	ldmia	r3, {r3, r4}
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	f7ff fa48 	bl	800072c <__aeabi_ddiv>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	461d      	mov	r5, r3
 80012a2:	4626      	mov	r6, r4
 80012a4:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012ac:	cb18      	ldmia	r3, {r3, r4}
 80012ae:	461a      	mov	r2, r3
 80012b0:	4623      	mov	r3, r4
 80012b2:	f7fe ff59 	bl	8000168 <__aeabi_dsub>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	461a      	mov	r2, r3
 80012bc:	4623      	mov	r3, r4
 80012be:	4628      	mov	r0, r5
 80012c0:	4631      	mov	r1, r6
 80012c2:	f7ff f909 	bl	80004d8 <__aeabi_dmul>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	4a3d      	ldr	r2, [pc, #244]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80012cc:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna>0){
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80012d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	f7ff fb8b 	bl	80009f8 <__aeabi_dcmpgt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d06f      	beq.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid +(Up + Ui_actual + Ud));
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f879 	bl	80003e4 <__aeabi_ui2d>
 80012f2:	4605      	mov	r5, r0
 80012f4:	460e      	mov	r6, r1
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80012fe:	cb18      	ldmia	r3, {r3, r4}
 8001300:	461a      	mov	r2, r3
 8001302:	4623      	mov	r3, r4
 8001304:	f7fe ff32 	bl	800016c <__adddf3>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001312:	cb18      	ldmia	r3, {r3, r4}
 8001314:	461a      	mov	r2, r3
 8001316:	4623      	mov	r3, r4
 8001318:	f7fe ff28 	bl	800016c <__adddf3>
 800131c:	4603      	mov	r3, r0
 800131e:	460c      	mov	r4, r1
 8001320:	461a      	mov	r2, r3
 8001322:	4623      	mov	r3, r4
 8001324:	4628      	mov	r0, r5
 8001326:	4631      	mov	r1, r6
 8001328:	f7fe ff20 	bl	800016c <__adddf3>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	469a      	mov	sl, r3
 8001332:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8001336:	4650      	mov	r0, sl
 8001338:	4659      	mov	r1, fp
 800133a:	f7ff fba5 	bl	8000a88 <__aeabi_d2uiz>
 800133e:	4602      	mov	r2, r0
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e07e      	b.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x364>
 8001346:	bf00      	nop
 8001348:	00000000 	.word	0x00000000
 800134c:	40bce000 	.word	0x40bce000
 8001350:	40012c00 	.word	0x40012c00
 8001354:	20000008 	.word	0x20000008
 8001358:	20000314 	.word	0x20000314
 800135c:	20000250 	.word	0x20000250
 8001360:	200003b8 	.word	0x200003b8
 8001364:	20000258 	.word	0x20000258
 8001368:	20000254 	.word	0x20000254
 800136c:	20000000 	.word	0x20000000
 8001370:	20000268 	.word	0x20000268
 8001374:	404e0000 	.word	0x404e0000
 8001378:	20000270 	.word	0x20000270
 800137c:	2000025c 	.word	0x2000025c
 8001380:	2000036c 	.word	0x2000036c
 8001384:	20000264 	.word	0x20000264
 8001388:	20000260 	.word	0x20000260
 800138c:	20000278 	.word	0x20000278
 8001390:	20000280 	.word	0x20000280
 8001394:	20000048 	.word	0x20000048
 8001398:	200002b0 	.word	0x200002b0
 800139c:	20000290 	.word	0x20000290
 80013a0:	2000004c 	.word	0x2000004c
 80013a4:	200002c0 	.word	0x200002c0
 80013a8:	20000018 	.word	0x20000018
 80013ac:	200002d0 	.word	0x200002d0
 80013b0:	20000020 	.word	0x20000020
 80013b4:	20000298 	.word	0x20000298
 80013b8:	200002c8 	.word	0x200002c8
 80013bc:	20000028 	.word	0x20000028
 80013c0:	200002d8 	.word	0x200002d8
 80013c4:	20000300 	.word	0x20000300
			}else if(velocidad_consigna<0){
 80013c8:	4b9d      	ldr	r3, [pc, #628]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80013ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f7ff faf1 	bl	80009bc <__aeabi_dcmplt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02e      	beq.n	800143e <HAL_TIM_PeriodElapsedCallback+0x35e>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid -(Up + Ui_actual + Ud));
 80013e0:	4b98      	ldr	r3, [pc, #608]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe fffd 	bl	80003e4 <__aeabi_ui2d>
 80013ea:	4605      	mov	r5, r0
 80013ec:	460e      	mov	r6, r1
 80013ee:	4b96      	ldr	r3, [pc, #600]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80013f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f4:	4b95      	ldr	r3, [pc, #596]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80013f6:	cb18      	ldmia	r3, {r3, r4}
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	f7fe feb6 	bl	800016c <__adddf3>
 8001400:	4603      	mov	r3, r0
 8001402:	460c      	mov	r4, r1
 8001404:	4618      	mov	r0, r3
 8001406:	4621      	mov	r1, r4
 8001408:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800140a:	cb18      	ldmia	r3, {r3, r4}
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	f7fe feac 	bl	800016c <__adddf3>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	4628      	mov	r0, r5
 800141e:	4631      	mov	r1, r6
 8001420:	f7fe fea2 	bl	8000168 <__aeabi_dsub>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4698      	mov	r8, r3
 800142a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800142e:	4640      	mov	r0, r8
 8001430:	4649      	mov	r1, r9
 8001432:	f7ff fb29 	bl	8000a88 <__aeabi_d2uiz>
 8001436:	4602      	mov	r2, r0
 8001438:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e002      	b.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x364>
			}else{
				duty_cycle_pid = 0;
 800143e:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
			}

			if(duty_cycle_pid > 14000){
 8001444:	4b7f      	ldr	r3, [pc, #508]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800144c:	4293      	cmp	r3, r2
 800144e:	d903      	bls.n	8001458 <HAL_TIM_PeriodElapsedCallback+0x378>
				duty_cycle_pid=14000;
 8001450:	4b7c      	ldr	r3, [pc, #496]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001452:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001456:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8001458:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a79      	ldr	r2, [pc, #484]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8001462:	4b7a      	ldr	r3, [pc, #488]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001464:	cb18      	ldmia	r3, {r3, r4}
 8001466:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001468:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 800146c:	4b7b      	ldr	r3, [pc, #492]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800146e:	cb18      	ldmia	r3, {r3, r4}
 8001470:	4a7b      	ldr	r2, [pc, #492]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001472:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 8001476:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800147e:	cb18      	ldmia	r3, {r3, r4}
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	f7fe fe70 	bl	8000168 <__aeabi_dsub>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800148e:	e9c2 3400 	strd	r3, r4, [r2]
//			}
//			else if(error_vel_act2==0){
//				Ui_anterior2=0;
//			}
//			error_vel_act2= fabs(error_vel_act2);
			if(stop2==1){
 8001492:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d106      	bne.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x3c8>
				Ui_anterior2=0;
 800149a:	4a76      	ldr	r2, [pc, #472]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	f04f 0400 	mov.w	r4, #0
 80014a4:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2=KP2 * error_vel_act2;
 80014a8:	4b73      	ldr	r3, [pc, #460]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80014aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ae:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80014b0:	cb18      	ldmia	r3, {r3, r4}
 80014b2:	461a      	mov	r2, r3
 80014b4:	4623      	mov	r3, r4
 80014b6:	f7ff f80f 	bl	80004d8 <__aeabi_dmul>
 80014ba:	4603      	mov	r3, r0
 80014bc:	460c      	mov	r4, r1
 80014be:	4a6f      	ldr	r2, [pc, #444]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80014c0:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 80014c4:	4b6e      	ldr	r3, [pc, #440]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80014c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ca:	4b6e      	ldr	r3, [pc, #440]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80014cc:	cb18      	ldmia	r3, {r3, r4}
 80014ce:	461a      	mov	r2, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	f7ff f801 	bl	80004d8 <__aeabi_dmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	4618      	mov	r0, r3
 80014dc:	4621      	mov	r1, r4
 80014de:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80014e0:	cb18      	ldmia	r3, {r3, r4}
 80014e2:	461a      	mov	r2, r3
 80014e4:	4623      	mov	r3, r4
 80014e6:	f7fe fff7 	bl	80004d8 <__aeabi_dmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80014f4:	cb18      	ldmia	r3, {r3, r4}
 80014f6:	461a      	mov	r2, r3
 80014f8:	4623      	mov	r3, r4
 80014fa:	f7fe fe37 	bl	800016c <__adddf3>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	4a62      	ldr	r2, [pc, #392]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001504:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800150a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001510:	cb18      	ldmia	r3, {r3, r4}
 8001512:	461a      	mov	r2, r3
 8001514:	4623      	mov	r3, r4
 8001516:	f7ff f909 	bl	800072c <__aeabi_ddiv>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	461d      	mov	r5, r3
 8001520:	4626      	mov	r6, r4
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001528:	4b57      	ldr	r3, [pc, #348]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800152a:	cb18      	ldmia	r3, {r3, r4}
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	f7fe fe1a 	bl	8000168 <__aeabi_dsub>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	4628      	mov	r0, r5
 800153e:	4631      	mov	r1, r6
 8001540:	f7fe ffca 	bl	80004d8 <__aeabi_dmul>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800154a:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna2 > 0){
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f7ff fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d02f      	beq.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x4e6>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 +(Up2 + Ui_actual2 + Ud2));
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff3a 	bl	80003e4 <__aeabi_ui2d>
 8001570:	4605      	mov	r5, r0
 8001572:	460e      	mov	r6, r1
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800157c:	cb18      	ldmia	r3, {r3, r4}
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	f7fe fdf3 	bl	800016c <__adddf3>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	4618      	mov	r0, r3
 800158c:	4621      	mov	r1, r4
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001590:	cb18      	ldmia	r3, {r3, r4}
 8001592:	461a      	mov	r2, r3
 8001594:	4623      	mov	r3, r4
 8001596:	f7fe fde9 	bl	800016c <__adddf3>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	461a      	mov	r2, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	4628      	mov	r0, r5
 80015a4:	4631      	mov	r1, r6
 80015a6:	f7fe fde1 	bl	800016c <__adddf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ba:	f7ff fa65 	bl	8000a88 <__aeabi_d2uiz>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e06d      	b.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x5c2>
			}else if(velocidad_consigna2 < 0){
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f7ff f9f2 	bl	80009bc <__aeabi_dcmplt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d05e      	beq.n	800169c <HAL_TIM_PeriodElapsedCallback+0x5bc>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 -(Up2 + Ui_actual2 + Ud2));
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fefe 	bl	80003e4 <__aeabi_ui2d>
 80015e8:	4605      	mov	r5, r0
 80015ea:	460e      	mov	r6, r1
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80015ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80015f4:	cb18      	ldmia	r3, {r3, r4}
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	f7fe fdb7 	bl	800016c <__adddf3>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4618      	mov	r0, r3
 8001604:	4621      	mov	r1, r4
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001608:	cb18      	ldmia	r3, {r3, r4}
 800160a:	461a      	mov	r2, r3
 800160c:	4623      	mov	r3, r4
 800160e:	f7fe fdad 	bl	800016c <__adddf3>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	461a      	mov	r2, r3
 8001618:	4623      	mov	r3, r4
 800161a:	4628      	mov	r0, r5
 800161c:	4631      	mov	r1, r6
 800161e:	f7fe fda3 	bl	8000168 <__aeabi_dsub>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001632:	f7ff fa29 	bl	8000a88 <__aeabi_d2uiz>
 8001636:	4602      	mov	r2, r0
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e031      	b.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x5c2>
 800163e:	bf00      	nop
 8001640:	200002b0 	.word	0x200002b0
 8001644:	20000300 	.word	0x20000300
 8001648:	200002d0 	.word	0x200002d0
 800164c:	200002c8 	.word	0x200002c8
 8001650:	200002d8 	.word	0x200002d8
 8001654:	20000474 	.word	0x20000474
 8001658:	200002c0 	.word	0x200002c0
 800165c:	20000290 	.word	0x20000290
 8001660:	20000298 	.word	0x20000298
 8001664:	200002b8 	.word	0x200002b8
 8001668:	20000280 	.word	0x20000280
 800166c:	200002a0 	.word	0x200002a0
 8001670:	20000050 	.word	0x20000050
 8001674:	200002e0 	.word	0x200002e0
 8001678:	20000030 	.word	0x20000030
 800167c:	200002f0 	.word	0x200002f0
 8001680:	20000038 	.word	0x20000038
 8001684:	20000000 	.word	0x20000000
 8001688:	200002a8 	.word	0x200002a8
 800168c:	200002e8 	.word	0x200002e8
 8001690:	20000040 	.word	0x20000040
 8001694:	200002f8 	.word	0x200002f8
 8001698:	20000304 	.word	0x20000304
			}else{
				duty_cycle_pid2 = 0;
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
			}
			if(duty_cycle_pid2 > 14000){
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d903      	bls.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x5d6>
				duty_cycle_pid2=14000;
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80016b0:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80016b4:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a29      	ldr	r2, [pc, #164]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80016c2:	cb18      	ldmia	r3, {r3, r4}
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80016c6:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80016cc:	cb18      	ldmia	r3, {r3, r4}
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x694>)
 80016d0:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 80016d4:	e03e      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x674>
	}else if(htim->Instance == TIM3){
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d11a      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x636>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d908      	bls.n	8001704 <HAL_TIM_PeriodElapsedCallback+0x624>
			contOUFlow--;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80016fa:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 80016fc:	4821      	ldr	r0, [pc, #132]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80016fe:	f004 fcc3 	bl	8006088 <puts>
}
 8001702:	e027      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x674>
			contOUFlow++;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800170c:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001710:	f004 fcba 	bl	8006088 <puts>
}
 8001714:	e01e      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x674>
	}else if(htim->Instance == TIM4){
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d119      	bne.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x674>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	429a      	cmp	r2, r3
 8001730:	d908      	bls.n	8001744 <HAL_TIM_PeriodElapsedCallback+0x664>
			contOUFlow2--;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800173a:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 800173e:	f004 fca3 	bl	8006088 <puts>
}
 8001742:	e007      	b.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x674>
			contOUFlow2++;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800174c:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001750:	f004 fc9a 	bl	8006088 <puts>
}
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800175e:	bf00      	nop
 8001760:	20000304 	.word	0x20000304
 8001764:	20000474 	.word	0x20000474
 8001768:	200002e8 	.word	0x200002e8
 800176c:	200002e0 	.word	0x200002e0
 8001770:	200002a0 	.word	0x200002a0
 8001774:	200002a8 	.word	0x200002a8
 8001778:	40000400 	.word	0x40000400
 800177c:	200003b8 	.word	0x200003b8
 8001780:	20000250 	.word	0x20000250
 8001784:	08009490 	.word	0x08009490
 8001788:	080094a4 	.word	0x080094a4
 800178c:	40000800 	.word	0x40000800
 8001790:	2000036c 	.word	0x2000036c
 8001794:	2000025c 	.word	0x2000025c
 8001798:	080094b8 	.word	0x080094b8
 800179c:	080094cc 	.word	0x080094cc

080017a0 <HAL_SPI_RxCpltCallback>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	num_spi=num_spi+10;
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_SPI_RxCpltCallback+0xcc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	330a      	adds	r3, #10
 80017ae:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_SPI_RxCpltCallback+0xcc>)
 80017b0:	6013      	str	r3, [r2, #0]
	  if (hspi->Instance == SPI2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <HAL_SPI_RxCpltCallback+0xd0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d153      	bne.n	8001864 <HAL_SPI_RxCpltCallback+0xc4>
	  {
		  switch(byte){
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_SPI_RxCpltCallback+0xd4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b0d      	cmp	r3, #13
 80017c2:	d010      	beq.n	80017e6 <HAL_SPI_RxCpltCallback+0x46>
 80017c4:	2b0d      	cmp	r3, #13
 80017c6:	dc02      	bgt.n	80017ce <HAL_SPI_RxCpltCallback+0x2e>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d01c      	beq.n	8001806 <HAL_SPI_RxCpltCallback+0x66>
 80017cc:	e02a      	b.n	8001824 <HAL_SPI_RxCpltCallback+0x84>
 80017ce:	2b3a      	cmp	r3, #58	; 0x3a
 80017d0:	d002      	beq.n	80017d8 <HAL_SPI_RxCpltCallback+0x38>
 80017d2:	2b3b      	cmp	r3, #59	; 0x3b
 80017d4:	d007      	beq.n	80017e6 <HAL_SPI_RxCpltCallback+0x46>
 80017d6:	e025      	b.n	8001824 <HAL_SPI_RxCpltCallback+0x84>
		  	  case ':': //Comienzo de la trama
		  		  flagRx = 1;
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_SPI_RxCpltCallback+0xd8>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		  		  indRx = 0;
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		  		  break;
 80017e4:	e039      	b.n	800185a <HAL_SPI_RxCpltCallback+0xba>
		  	  case '\r': //Retorno, fin de trama.
		  	  case ';':  //Fin de trama.
		  		  if(flagRx){
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_SPI_RxCpltCallback+0xd8>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d030      	beq.n	8001850 <HAL_SPI_RxCpltCallback+0xb0>
		  			flagRx = 0;
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_SPI_RxCpltCallback+0xd8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
		  			buffer[indRx] = 0;
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_SPI_RxCpltCallback+0xe0>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	5499      	strb	r1, [r3, r2]
		  			interpreteComando();
 8001800:	f7ff f9b2 	bl	8000b68 <interpreteComando>
		  		  }
		  		  break;
 8001804:	e024      	b.n	8001850 <HAL_SPI_RxCpltCallback+0xb0>
		  	  case 8: //Retroceso es permitido de esta manera.
		  		  if(flagRx){
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_SPI_RxCpltCallback+0xd8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d022      	beq.n	8001854 <HAL_SPI_RxCpltCallback+0xb4>
		  			  if(indRx > 0){
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01e      	beq.n	8001854 <HAL_SPI_RxCpltCallback+0xb4>
		  				indRx--;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 8001820:	701a      	strb	r2, [r3, #0]
		  			  }
		  		  }
		  		  break;
 8001822:	e017      	b.n	8001854 <HAL_SPI_RxCpltCallback+0xb4>
		  	  default: //Almacenamiento de la trama.
		  		  if(flagRx){
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_SPI_RxCpltCallback+0xd8>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d015      	beq.n	8001858 <HAL_SPI_RxCpltCallback+0xb8>
		  			  buffer[indRx] = byte;
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_SPI_RxCpltCallback+0xd4>)
 8001834:	7819      	ldrb	r1, [r3, #0]
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_SPI_RxCpltCallback+0xe0>)
 8001838:	5499      	strb	r1, [r3, r2]
		  			  if(indRx < MAX_BUFFER - 1){
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b26      	cmp	r3, #38	; 0x26
 8001840:	d80a      	bhi.n	8001858 <HAL_SPI_RxCpltCallback+0xb8>
		  				indRx++;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_SPI_RxCpltCallback+0xdc>)
 800184c:	701a      	strb	r2, [r3, #0]
		  			  }

		  		  }
		  		break;
 800184e:	e003      	b.n	8001858 <HAL_SPI_RxCpltCallback+0xb8>
		  		  break;
 8001850:	bf00      	nop
 8001852:	e002      	b.n	800185a <HAL_SPI_RxCpltCallback+0xba>
		  		  break;
 8001854:	bf00      	nop
 8001856:	e000      	b.n	800185a <HAL_SPI_RxCpltCallback+0xba>
		  		break;
 8001858:	bf00      	nop
		  }

	    /* Receive one byte in interrupt mode */
		  HAL_SPI_Receive_IT(&hspi2, &byte, 1);
 800185a:	2201      	movs	r2, #1
 800185c:	4905      	ldr	r1, [pc, #20]	; (8001874 <HAL_SPI_RxCpltCallback+0xd4>)
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <HAL_SPI_RxCpltCallback+0xe4>)
 8001860:	f001 ff0a 	bl	8003678 <HAL_SPI_Receive_IT>
	  }
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000288 	.word	0x20000288
 8001870:	40003800 	.word	0x40003800
 8001874:	20000428 	.word	0x20000428
 8001878:	200003b5 	.word	0x200003b5
 800187c:	2000024c 	.word	0x2000024c
 8001880:	20000400 	.word	0x20000400
 8001884:	20000314 	.word	0x20000314

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188c:	f000 fdd0 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001890:	f000 f872 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f000 fab0 	bl	8001df8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001898:	f000 f986 	bl	8001ba8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800189c:	f000 f8e6 	bl	8001a6c <MX_TIM1_Init>
  MX_TIM3_Init();
 80018a0:	f000 fa02 	bl	8001ca8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018a4:	f000 fa54 	bl	8001d50 <MX_TIM4_Init>
  MX_SPI2_Init();
 80018a8:	f000 f8ac 	bl	8001a04 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	//HAL_UART_Receive_IT(&huart2, &byte, 1);
  	HAL_SPI_Receive_IT(&hspi2, &byte, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	492a      	ldr	r1, [pc, #168]	; (8001958 <main+0xd0>)
 80018b0:	482a      	ldr	r0, [pc, #168]	; (800195c <main+0xd4>)
 80018b2:	f001 fee1 	bl	8003678 <HAL_SPI_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 80018b6:	482a      	ldr	r0, [pc, #168]	; (8001960 <main+0xd8>)
 80018b8:	f002 fc6c 	bl	8004194 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80018bc:	2100      	movs	r1, #0
 80018be:	4828      	ldr	r0, [pc, #160]	; (8001960 <main+0xd8>)
 80018c0:	f002 fd12 	bl	80042e8 <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 80018c4:	4827      	ldr	r0, [pc, #156]	; (8001964 <main+0xdc>)
 80018c6:	f002 fc1b 	bl	8004100 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80018ca:	2100      	movs	r1, #0
 80018cc:	4825      	ldr	r0, [pc, #148]	; (8001964 <main+0xdc>)
 80018ce:	f002 fe4b 	bl	8004568 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80018d2:	2108      	movs	r1, #8
 80018d4:	4823      	ldr	r0, [pc, #140]	; (8001964 <main+0xdc>)
 80018d6:	f002 fe47 	bl	8004568 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80018da:	4823      	ldr	r0, [pc, #140]	; (8001968 <main+0xe0>)
 80018dc:	f002 fc5a 	bl	8004194 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80018e0:	213c      	movs	r1, #60	; 0x3c
 80018e2:	4821      	ldr	r0, [pc, #132]	; (8001968 <main+0xe0>)
 80018e4:	f002 ffca 	bl	800487c <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 80018e8:	4820      	ldr	r0, [pc, #128]	; (800196c <main+0xe4>)
 80018ea:	f002 fc53 	bl	8004194 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80018ee:	213c      	movs	r1, #60	; 0x3c
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <main+0xe4>)
 80018f2:	f002 ffc3 	bl	800487c <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2110      	movs	r1, #16
 80018fa:	481d      	ldr	r0, [pc, #116]	; (8001970 <main+0xe8>)
 80018fc:	f001 f8fa 	bl	8002af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2120      	movs	r1, #32
 8001904:	481a      	ldr	r0, [pc, #104]	; (8001970 <main+0xe8>)
 8001906:	f001 f8f5 	bl	8002af4 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001910:	4817      	ldr	r0, [pc, #92]	; (8001970 <main+0xe8>)
 8001912:	f001 f8ef 	bl	8002af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191c:	4814      	ldr	r0, [pc, #80]	; (8001970 <main+0xe8>)
 800191e:	f001 f8e9 	bl	8002af4 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <main+0xe0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <main+0xe4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001938:	480e      	ldr	r0, [pc, #56]	; (8001974 <main+0xec>)
 800193a:	f001 f8db 	bl	8002af4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800193e:	2064      	movs	r0, #100	; 0x64
 8001940:	f000 fdd8 	bl	80024f4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194a:	480a      	ldr	r0, [pc, #40]	; (8001974 <main+0xec>)
 800194c:	f001 f8d2 	bl	8002af4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001950:	2064      	movs	r0, #100	; 0x64
 8001952:	f000 fdcf 	bl	80024f4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001956:	e7ec      	b.n	8001932 <main+0xaa>
 8001958:	20000428 	.word	0x20000428
 800195c:	20000314 	.word	0x20000314
 8001960:	2000042c 	.word	0x2000042c
 8001964:	20000474 	.word	0x20000474
 8001968:	200003b8 	.word	0x200003b8
 800196c:	2000036c 	.word	0x2000036c
 8001970:	40010800 	.word	0x40010800
 8001974:	40011000 	.word	0x40011000

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b090      	sub	sp, #64	; 0x40
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0318 	add.w	r3, r7, #24
 8001982:	2228      	movs	r2, #40	; 0x28
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f003 feb2 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800199e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ac:	2302      	movs	r3, #2
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 f8af 	bl	8002b24 <HAL_RCC_OscConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019cc:	f000 fa82 	bl	8001ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	230f      	movs	r3, #15
 80019d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2302      	movs	r3, #2
 80019d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2102      	movs	r1, #2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fb1a 	bl	8003024 <HAL_RCC_ClockConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019f6:	f000 fa6d 	bl	8001ed4 <Error_Handler>
  }
}
 80019fa:	bf00      	nop
 80019fc:	3740      	adds	r7, #64	; 0x40
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a34:	2238      	movs	r2, #56	; 0x38
 8001a36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_SPI2_Init+0x60>)
 8001a52:	f001 fc51 	bl	80032f8 <HAL_SPI_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8001a5c:	f000 fa3a 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000314 	.word	0x20000314
 8001a68:	40003800 	.word	0x40003800

08001a6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b096      	sub	sp, #88	; 0x58
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fe23 	bl	80056f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001aac:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <MX_TIM1_Init+0x138>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001ab2:	220b      	movs	r2, #11
 8001ab4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001abc:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001abe:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001ac2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ad6:	4832      	ldr	r0, [pc, #200]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001ad8:	f002 fac3 	bl	8004062 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ae2:	f000 f9f7 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af0:	4619      	mov	r1, r3
 8001af2:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001af4:	f003 f98e 	bl	8004e14 <HAL_TIM_ConfigClockSource>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001afe:	f000 f9e9 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001b02:	4827      	ldr	r0, [pc, #156]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001b04:	f002 fb98 	bl	8004238 <HAL_TIM_OC_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b0e:	f000 f9e1 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481f      	ldr	r0, [pc, #124]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001b22:	f003 fcf7 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b2c:	f000 f9d2 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b50:	2200      	movs	r2, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001b56:	f003 f847 	bl	8004be8 <HAL_TIM_OC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b60:	f000 f9b8 	bl	8001ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <MX_TIM1_Init+0x134>)
 8001b88:	f003 fd22 	bl	80055d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b92:	f000 f99f 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3758      	adds	r7, #88	; 0x58
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000042c 	.word	0x2000042c
 8001ba4:	40012c00 	.word	0x40012c00

08001ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	; 0x38
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001bee:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001bf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c00:	4828      	ldr	r0, [pc, #160]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001c02:	f002 fa2e 	bl	8004062 <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c0c:	f000 f962 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4821      	ldr	r0, [pc, #132]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001c1e:	f003 f8f9 	bl	8004e14 <HAL_TIM_ConfigClockSource>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c28:	f000 f954 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c2c:	481d      	ldr	r0, [pc, #116]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001c2e:	f002 fc43 	bl	80044b8 <HAL_TIM_PWM_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c38:	f000 f94c 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001c4c:	f003 fc62 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c56:	f000 f93d 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001c72:	f003 f811 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c7c:	f000 f92a 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2208      	movs	r2, #8
 8001c84:	4619      	mov	r1, r3
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001c88:	f003 f806 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001c92:	f000 f91f 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_TIM2_Init+0xfc>)
 8001c98:	f000 fa74 	bl	8002184 <HAL_TIM_MspPostInit>

}
 8001c9c:	bf00      	nop
 8001c9e:	3738      	adds	r7, #56	; 0x38
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000474 	.word	0x20000474

08001ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2224      	movs	r2, #36	; 0x24
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fd1a 	bl	80056f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001cc6:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <MX_TIM3_Init+0xa4>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001cd8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001cdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cea:	2303      	movs	r3, #3
 8001cec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d02:	2301      	movs	r3, #1
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4619      	mov	r1, r3
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001d16:	f002 fd0f 	bl	8004738 <HAL_TIM_Encoder_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d20:	f000 f8d8 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_TIM3_Init+0xa0>)
 8001d32:	f003 fbef 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d3c:	f000 f8ca 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	3730      	adds	r7, #48	; 0x30
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200003b8 	.word	0x200003b8
 8001d4c:	40000400 	.word	0x40000400

08001d50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2224      	movs	r2, #36	; 0x24
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fcc6 	bl	80056f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <MX_TIM4_Init+0xa4>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001d80:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001d84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d92:	2303      	movs	r3, #3
 8001d94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001dbe:	f002 fcbb 	bl	8004738 <HAL_TIM_Encoder_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001dc8:	f000 f884 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_TIM4_Init+0xa0>)
 8001dda:	f003 fb9b 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001de4:	f000 f876 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000036c 	.word	0x2000036c
 8001df4:	40000800 	.word	0x40000800

08001df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 0310 	add.w	r3, r7, #16
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e12:	f043 0310 	orr.w	r3, r3, #16
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	6193      	str	r3, [r2, #24]
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_GPIO_Init+0xd0>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e72:	4816      	ldr	r0, [pc, #88]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e74:	f000 fe3e 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001e7e:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <MX_GPIO_Init+0xd8>)
 8001e80:	f000 fe38 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480b      	ldr	r0, [pc, #44]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e9e:	f000 fccf 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 8001ea2:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_GPIO_Init+0xd8>)
 8001ebc:	f000 fcc0 	bl	8002840 <HAL_GPIO_Init>

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_MspInit+0x5c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <HAL_MspInit+0x5c>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_MspInit+0x60>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_MspInit+0x60>)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010000 	.word	0x40010000

08001f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <HAL_SPI_MspInit+0x9c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d139      	bne.n	8001fd8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HAL_SPI_MspInit+0xa0>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_SPI_MspInit+0xa0>)
 8001f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6e:	61d3      	str	r3, [r2, #28]
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_SPI_MspInit+0xa0>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_SPI_MspInit+0xa0>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_SPI_MspInit+0xa0>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_SPI_MspInit+0xa0>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f94:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001f98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480f      	ldr	r0, [pc, #60]	; (8001fe8 <HAL_SPI_MspInit+0xa4>)
 8001faa:	f000 fc49 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <HAL_SPI_MspInit+0xa4>)
 8001fc4:	f000 fc3c 	bl	8002840 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2024      	movs	r0, #36	; 0x24
 8001fce:	f000 fb8a 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fd2:	2024      	movs	r0, #36	; 0x24
 8001fd4:	f000 fba3 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fd8:	bf00      	nop
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40003800 	.word	0x40003800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010c00 	.word	0x40010c00

08001fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_TIM_Base_MspInit+0x98>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d12c      	bne.n	8002058 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_TIM_Base_MspInit+0x9c>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_TIM_Base_MspInit+0x9c>)
 8002004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002008:	6193      	str	r3, [r2, #24]
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_TIM_Base_MspInit+0x9c>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2018      	movs	r0, #24
 800201c:	f000 fb63 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002020:	2018      	movs	r0, #24
 8002022:	f000 fb7c 	bl	800271e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2019      	movs	r0, #25
 800202c:	f000 fb5b 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002030:	2019      	movs	r0, #25
 8002032:	f000 fb74 	bl	800271e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	201a      	movs	r0, #26
 800203c:	f000 fb53 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002040:	201a      	movs	r0, #26
 8002042:	f000 fb6c 	bl	800271e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201b      	movs	r0, #27
 800204c:	f000 fb4b 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002050:	201b      	movs	r0, #27
 8002052:	f000 fb64 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002056:	e010      	b.n	800207a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d10b      	bne.n	800207a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_TIM_Base_MspInit+0x9c>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_TIM_Base_MspInit+0x9c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_TIM_Base_MspInit+0x9c>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0318 	add.w	r3, r7, #24
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a32      	ldr	r2, [pc, #200]	; (8002170 <HAL_TIM_Encoder_MspInit+0xe4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d12c      	bne.n	8002106 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	4a30      	ldr	r2, [pc, #192]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	61d3      	str	r3, [r2, #28]
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020dc:	23c0      	movs	r3, #192	; 0xc0
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 0318 	add.w	r3, r7, #24
 80020ec:	4619      	mov	r1, r3
 80020ee:	4822      	ldr	r0, [pc, #136]	; (8002178 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f0:	f000 fba6 	bl	8002840 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	201d      	movs	r0, #29
 80020fa:	f000 faf4 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020fe:	201d      	movs	r0, #29
 8002100:	f000 fb0d 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002104:	e030      	b.n	8002168 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_TIM_Encoder_MspInit+0xf0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d12b      	bne.n	8002168 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	61d3      	str	r3, [r2, #28]
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 800212e:	f043 0308 	orr.w	r3, r3, #8
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002140:	23c0      	movs	r3, #192	; 0xc0
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 0318 	add.w	r3, r7, #24
 8002150:	4619      	mov	r1, r3
 8002152:	480b      	ldr	r0, [pc, #44]	; (8002180 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002154:	f000 fb74 	bl	8002840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	201e      	movs	r0, #30
 800215e:	f000 fac2 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002162:	201e      	movs	r0, #30
 8002164:	f000 fadb 	bl	800271e <HAL_NVIC_EnableIRQ>
}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40000400 	.word	0x40000400
 8002174:	40021000 	.word	0x40021000
 8002178:	40010800 	.word	0x40010800
 800217c:	40000800 	.word	0x40000800
 8002180:	40010c00 	.word	0x40010c00

08002184 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d142      	bne.n	800222a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_TIM_MspPostInit+0xb0>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a22      	ldr	r2, [pc, #136]	; (8002234 <HAL_TIM_MspPostInit+0xb0>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_TIM_MspPostInit+0xb0>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_TIM_MspPostInit+0xb0>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_TIM_MspPostInit+0xb0>)
 80021c2:	f043 0308 	orr.w	r3, r3, #8
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_TIM_MspPostInit+0xb0>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d4:	2301      	movs	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <HAL_TIM_MspPostInit+0xb4>)
 80021e8:	f000 fb2a 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	480e      	ldr	r0, [pc, #56]	; (800223c <HAL_TIM_MspPostInit+0xb8>)
 8002202:	f000 fb1d 	bl	8002840 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_TIM_MspPostInit+0xbc>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_TIM_MspPostInit+0xbc>)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	40010800 	.word	0x40010800
 800223c:	40010c00 	.word	0x40010c00
 8002240:	40010000 	.word	0x40010000

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <HardFault_Handler+0x4>

08002256 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <MemManage_Handler+0x4>

0800225c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <BusFault_Handler+0x4>

08002262 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <UsageFault_Handler+0x4>

08002268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002290:	f000 f914 	bl	80024bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM1_BRK_IRQHandler+0x10>)
 800229e:	f002 fb9a 	bl	80049d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000042c 	.word	0x2000042c

080022ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_UP_IRQHandler+0x10>)
 80022b2:	f002 fb90 	bl	80049d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000042c 	.word	0x2000042c

080022c0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022c6:	f002 fb86 	bl	80049d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000042c 	.word	0x2000042c

080022d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM1_CC_IRQHandler+0x10>)
 80022da:	f002 fb7c 	bl	80049d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000042c 	.word	0x2000042c

080022e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM3_IRQHandler+0x10>)
 80022ee:	f002 fb72 	bl	80049d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200003b8 	.word	0x200003b8

080022fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM4_IRQHandler+0x10>)
 8002302:	f002 fb68 	bl	80049d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000036c 	.word	0x2000036c

08002310 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <SPI2_IRQHandler+0x10>)
 8002316:	f001 fae1 	bl	80038dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000314 	.word	0x20000314

08002324 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <_sbrk+0x50>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_sbrk+0x16>
		heap_end = &end;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <_sbrk+0x50>)
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <_sbrk+0x54>)
 8002338:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <_sbrk+0x50>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <_sbrk+0x50>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	466a      	mov	r2, sp
 800234a:	4293      	cmp	r3, r2
 800234c:	d907      	bls.n	800235e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800234e:	f003 f9a5 	bl	800569c <__errno>
 8002352:	4602      	mov	r2, r0
 8002354:	230c      	movs	r3, #12
 8002356:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800235c:	e006      	b.n	800236c <_sbrk+0x48>
	}

	heap_end += incr;
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <_sbrk+0x50>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	4a03      	ldr	r2, [pc, #12]	; (8002374 <_sbrk+0x50>)
 8002368:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000308 	.word	0x20000308
 8002378:	200004c8 	.word	0x200004c8

0800237c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <SystemInit+0x5c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <SystemInit+0x5c>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <SystemInit+0x5c>)
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4911      	ldr	r1, [pc, #68]	; (80023d8 <SystemInit+0x5c>)
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <SystemInit+0x60>)
 8002394:	4013      	ands	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <SystemInit+0x5c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <SystemInit+0x5c>)
 800239e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <SystemInit+0x5c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SystemInit+0x5c>)
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <SystemInit+0x5c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <SystemInit+0x5c>)
 80023ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SystemInit+0x5c>)
 80023c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SystemInit+0x64>)
 80023ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000
 80023dc:	f8ff0000 	.word	0xf8ff0000
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023e6:	e003      	b.n	80023f0 <LoopCopyDataInit>

080023e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023ee:	3104      	adds	r1, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023f0:	480a      	ldr	r0, [pc, #40]	; (800241c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023f8:	d3f6      	bcc.n	80023e8 <CopyDataInit>
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023fc:	e002      	b.n	8002404 <LoopFillZerobss>

080023fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002400:	f842 3b04 	str.w	r3, [r2], #4

08002404 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002406:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002408:	d3f9      	bcc.n	80023fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240a:	f7ff ffb7 	bl	800237c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240e:	f003 f94b 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002412:	f7ff fa39 	bl	8001888 <main>
  bx lr
 8002416:	4770      	bx	lr
  ldr r3, =_sidata
 8002418:	08009828 	.word	0x08009828
  ldr r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002420:	20000230 	.word	0x20000230
  ldr r2, =_sbss
 8002424:	20000230 	.word	0x20000230
  ldr r3, = _ebss
 8002428:	200004c4 	.word	0x200004c4

0800242c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC1_2_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_Init+0x28>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_Init+0x28>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 f945 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	2000      	movs	r0, #0
 8002448:	f000 f808 	bl	800245c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f7ff fd48 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x54>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_InitTick+0x58>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002472:	fbb3 f3f1 	udiv	r3, r3, r1
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f95d 	bl	800273a <HAL_SYSTICK_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e00e      	b.n	80024a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d80a      	bhi.n	80024a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002490:	2200      	movs	r2, #0
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002498:	f000 f925 	bl	80026e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <HAL_InitTick+0x5c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000054 	.word	0x20000054
 80024b4:	2000005c 	.word	0x2000005c
 80024b8:	20000058 	.word	0x20000058

080024bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_IncTick+0x1c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_IncTick+0x20>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <HAL_IncTick+0x20>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	2000005c 	.word	0x2000005c
 80024dc:	200004bc 	.word	0x200004bc

080024e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <HAL_GetTick+0x10>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	200004bc 	.word	0x200004bc

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_Delay+0x40>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffe0 	bl	80024e0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	2000005c 	.word	0x2000005c

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4906      	ldr	r1, [pc, #24]	; (80025d0 <__NVIC_EnableIRQ+0x34>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b0:	f7ff ff90 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff2d 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff42 	bl	8002580 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff90 	bl	8002628 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5f 	bl	80025d4 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff35 	bl	800259c <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002766:	2b02      	cmp	r3, #2
 8002768:	d005      	beq.n	8002776 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e051      	b.n	800281a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 020e 	bic.w	r2, r2, #14
 8002784:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a22      	ldr	r2, [pc, #136]	; (8002824 <HAL_DMA_Abort_IT+0xd0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d029      	beq.n	80027f4 <HAL_DMA_Abort_IT+0xa0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_DMA_Abort_IT+0xd4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d022      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x9c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1f      	ldr	r2, [pc, #124]	; (800282c <HAL_DMA_Abort_IT+0xd8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d01a      	beq.n	80027ea <HAL_DMA_Abort_IT+0x96>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_DMA_Abort_IT+0xdc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d012      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x90>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_DMA_Abort_IT+0xe0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00a      	beq.n	80027de <HAL_DMA_Abort_IT+0x8a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_DMA_Abort_IT+0xe4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d102      	bne.n	80027d8 <HAL_DMA_Abort_IT+0x84>
 80027d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027d6:	e00e      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027dc:	e00b      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e2:	e008      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e8:	e005      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ee:	e002      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027f0:	2310      	movs	r3, #16
 80027f2:	e000      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027f4:	2301      	movs	r3, #1
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_DMA_Abort_IT+0xe8>)
 80027f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
    } 
  }
  return status;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40020008 	.word	0x40020008
 8002828:	4002001c 	.word	0x4002001c
 800282c:	40020030 	.word	0x40020030
 8002830:	40020044 	.word	0x40020044
 8002834:	40020058 	.word	0x40020058
 8002838:	4002006c 	.word	0x4002006c
 800283c:	40020000 	.word	0x40020000

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002852:	e127      	b.n	8002aa4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002854:	2201      	movs	r2, #1
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8116 	bne.w	8002a9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b12      	cmp	r3, #18
 8002878:	d034      	beq.n	80028e4 <HAL_GPIO_Init+0xa4>
 800287a:	2b12      	cmp	r3, #18
 800287c:	d80d      	bhi.n	800289a <HAL_GPIO_Init+0x5a>
 800287e:	2b02      	cmp	r3, #2
 8002880:	d02b      	beq.n	80028da <HAL_GPIO_Init+0x9a>
 8002882:	2b02      	cmp	r3, #2
 8002884:	d804      	bhi.n	8002890 <HAL_GPIO_Init+0x50>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d031      	beq.n	80028ee <HAL_GPIO_Init+0xae>
 800288a:	2b01      	cmp	r3, #1
 800288c:	d01c      	beq.n	80028c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800288e:	e048      	b.n	8002922 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002890:	2b03      	cmp	r3, #3
 8002892:	d043      	beq.n	800291c <HAL_GPIO_Init+0xdc>
 8002894:	2b11      	cmp	r3, #17
 8002896:	d01b      	beq.n	80028d0 <HAL_GPIO_Init+0x90>
          break;
 8002898:	e043      	b.n	8002922 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800289a:	4a89      	ldr	r2, [pc, #548]	; (8002ac0 <HAL_GPIO_Init+0x280>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d026      	beq.n	80028ee <HAL_GPIO_Init+0xae>
 80028a0:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <HAL_GPIO_Init+0x280>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d806      	bhi.n	80028b4 <HAL_GPIO_Init+0x74>
 80028a6:	4a87      	ldr	r2, [pc, #540]	; (8002ac4 <HAL_GPIO_Init+0x284>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d020      	beq.n	80028ee <HAL_GPIO_Init+0xae>
 80028ac:	4a86      	ldr	r2, [pc, #536]	; (8002ac8 <HAL_GPIO_Init+0x288>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01d      	beq.n	80028ee <HAL_GPIO_Init+0xae>
          break;
 80028b2:	e036      	b.n	8002922 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028b4:	4a85      	ldr	r2, [pc, #532]	; (8002acc <HAL_GPIO_Init+0x28c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d019      	beq.n	80028ee <HAL_GPIO_Init+0xae>
 80028ba:	4a85      	ldr	r2, [pc, #532]	; (8002ad0 <HAL_GPIO_Init+0x290>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d016      	beq.n	80028ee <HAL_GPIO_Init+0xae>
 80028c0:	4a84      	ldr	r2, [pc, #528]	; (8002ad4 <HAL_GPIO_Init+0x294>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0xae>
          break;
 80028c6:	e02c      	b.n	8002922 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	623b      	str	r3, [r7, #32]
          break;
 80028ce:	e028      	b.n	8002922 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	3304      	adds	r3, #4
 80028d6:	623b      	str	r3, [r7, #32]
          break;
 80028d8:	e023      	b.n	8002922 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	3308      	adds	r3, #8
 80028e0:	623b      	str	r3, [r7, #32]
          break;
 80028e2:	e01e      	b.n	8002922 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	330c      	adds	r3, #12
 80028ea:	623b      	str	r3, [r7, #32]
          break;
 80028ec:	e019      	b.n	8002922 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028f6:	2304      	movs	r3, #4
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e012      	b.n	8002922 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002904:	2308      	movs	r3, #8
 8002906:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	611a      	str	r2, [r3, #16]
          break;
 800290e:	e008      	b.n	8002922 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002910:	2308      	movs	r3, #8
 8002912:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	615a      	str	r2, [r3, #20]
          break;
 800291a:	e002      	b.n	8002922 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800291c:	2300      	movs	r3, #0
 800291e:	623b      	str	r3, [r7, #32]
          break;
 8002920:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2bff      	cmp	r3, #255	; 0xff
 8002926:	d801      	bhi.n	800292c <HAL_GPIO_Init+0xec>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	e001      	b.n	8002930 <HAL_GPIO_Init+0xf0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2bff      	cmp	r3, #255	; 0xff
 8002936:	d802      	bhi.n	800293e <HAL_GPIO_Init+0xfe>
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	e002      	b.n	8002944 <HAL_GPIO_Init+0x104>
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	3b08      	subs	r3, #8
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	210f      	movs	r1, #15
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	401a      	ands	r2, r3
 8002956:	6a39      	ldr	r1, [r7, #32]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	431a      	orrs	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8096 	beq.w	8002a9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002972:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_GPIO_Init+0x298>)
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_GPIO_Init+0x298>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6193      	str	r3, [r2, #24]
 800297e:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <HAL_GPIO_Init+0x298>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800298a:	4a54      	ldr	r2, [pc, #336]	; (8002adc <HAL_GPIO_Init+0x29c>)
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0x19e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00d      	beq.n	80029da <HAL_GPIO_Init+0x19a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_Init+0x196>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a48      	ldr	r2, [pc, #288]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_GPIO_Init+0x192>
 80029ce:	2303      	movs	r3, #3
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x1a0>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e004      	b.n	80029e0 <HAL_GPIO_Init+0x1a0>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_Init+0x1a0>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_Init+0x1a0>
 80029de:	2300      	movs	r3, #0
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	f002 0203 	and.w	r2, r2, #3
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	4093      	lsls	r3, r2
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029f0:	493a      	ldr	r1, [pc, #232]	; (8002adc <HAL_GPIO_Init+0x29c>)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4938      	ldr	r1, [pc, #224]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
 8002a16:	e006      	b.n	8002a26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4933      	ldr	r1, [pc, #204]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	492e      	ldr	r1, [pc, #184]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
 8002a3e:	e006      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	4929      	ldr	r1, [pc, #164]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	4924      	ldr	r1, [pc, #144]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
 8002a66:	e006      	b.n	8002a76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	491f      	ldr	r1, [pc, #124]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	491a      	ldr	r1, [pc, #104]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
 8002a8e:	e006      	b.n	8002a9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	4915      	ldr	r1, [pc, #84]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f47f aed0 	bne.w	8002854 <HAL_GPIO_Init+0x14>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	372c      	adds	r7, #44	; 0x2c
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	10210000 	.word	0x10210000
 8002ac4:	10110000 	.word	0x10110000
 8002ac8:	10120000 	.word	0x10120000
 8002acc:	10310000 	.word	0x10310000
 8002ad0:	10320000 	.word	0x10320000
 8002ad4:	10220000 	.word	0x10220000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	40010c00 	.word	0x40010c00
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	40011400 	.word	0x40011400
 8002af0:	40010400 	.word	0x40010400

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e26c      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8087 	beq.w	8002c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b44:	4b92      	ldr	r3, [pc, #584]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d00c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b50:	4b8f      	ldr	r3, [pc, #572]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d112      	bne.n	8002b82 <HAL_RCC_OscConfig+0x5e>
 8002b5c:	4b8c      	ldr	r3, [pc, #560]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d10b      	bne.n	8002b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6a:	4b89      	ldr	r3, [pc, #548]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d06c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x12c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d168      	bne.n	8002c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e246      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x76>
 8002b8c:	4b80      	ldr	r3, [pc, #512]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a7f      	ldr	r2, [pc, #508]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e02e      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x98>
 8002ba2:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7a      	ldr	r2, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b78      	ldr	r3, [pc, #480]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a77      	ldr	r2, [pc, #476]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e01d      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0xbc>
 8002bc6:	4b72      	ldr	r3, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a71      	ldr	r2, [pc, #452]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd4>
 8002be0:	4b6b      	ldr	r3, [pc, #428]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b68      	ldr	r3, [pc, #416]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a67      	ldr	r2, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fc6e 	bl	80024e0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7ff fc6a 	bl	80024e0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1fa      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe4>
 8002c26:	e014      	b.n	8002c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fc5a 	bl	80024e0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff fc56 	bl	80024e0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1e6      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x10c>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c6a:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x18c>
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x176>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1ba      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4939      	ldr	r1, [pc, #228]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	e03a      	b.n	8002d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCC_OscConfig+0x270>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7ff fc0f 	bl	80024e0 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7ff fc0b 	bl	80024e0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e19b      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4927      	ldr	r1, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
 8002cf8:	e015      	b.n	8002d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7ff fbee 	bl	80024e0 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7ff fbea 	bl	80024e0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e17a      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03a      	beq.n	8002da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d019      	beq.n	8002d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7ff fbce 	bl	80024e0 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d48:	f7ff fbca 	bl	80024e0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e15a      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d66:	2001      	movs	r0, #1
 8002d68:	f000 faa8 	bl	80032bc <RCC_Delay>
 8002d6c:	e01c      	b.n	8002da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_RCC_OscConfig+0x274>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d74:	f7ff fbb4 	bl	80024e0 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7a:	e00f      	b.n	8002d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7ff fbb0 	bl	80024e0 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d908      	bls.n	8002d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e140      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	42420000 	.word	0x42420000
 8002d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	4b9e      	ldr	r3, [pc, #632]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e9      	bne.n	8002d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80a6 	beq.w	8002f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b97      	ldr	r3, [pc, #604]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b94      	ldr	r3, [pc, #592]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4a93      	ldr	r2, [pc, #588]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	61d3      	str	r3, [r2, #28]
 8002dd2:	4b91      	ldr	r3, [pc, #580]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b8e      	ldr	r3, [pc, #568]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d118      	bne.n	8002e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dee:	4b8b      	ldr	r3, [pc, #556]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a8a      	ldr	r2, [pc, #552]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff fb71 	bl	80024e0 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e02:	f7ff fb6d 	bl	80024e0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	; 0x64
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0fd      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x312>
 8002e28:	4b7b      	ldr	r3, [pc, #492]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4a7a      	ldr	r2, [pc, #488]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	e02d      	b.n	8002e92 <HAL_RCC_OscConfig+0x36e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x334>
 8002e3e:	4b76      	ldr	r3, [pc, #472]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a75      	ldr	r2, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a72      	ldr	r2, [pc, #456]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	e01c      	b.n	8002e92 <HAL_RCC_OscConfig+0x36e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x356>
 8002e60:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a6c      	ldr	r2, [pc, #432]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4a69      	ldr	r2, [pc, #420]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	e00b      	b.n	8002e92 <HAL_RCC_OscConfig+0x36e>
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a66      	ldr	r2, [pc, #408]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6213      	str	r3, [r2, #32]
 8002e86:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a63      	ldr	r2, [pc, #396]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d015      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7ff fb21 	bl	80024e0 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7ff fb1d 	bl	80024e0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0ab      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	4b57      	ldr	r3, [pc, #348]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ee      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x37e>
 8002ec4:	e014      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff fb0b 	bl	80024e0 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7ff fb07 	bl	80024e0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e095      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ee      	bne.n	8002ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b48      	ldr	r3, [pc, #288]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4a47      	ldr	r2, [pc, #284]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8081 	beq.w	800300e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d061      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d146      	bne.n	8002fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_OscConfig+0x4fc>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7ff fadb 	bl	80024e0 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7ff fad7 	bl	80024e0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e067      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	4b35      	ldr	r3, [pc, #212]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d108      	bne.n	8002f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	492d      	ldr	r1, [pc, #180]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a19      	ldr	r1, [r3, #32]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	4927      	ldr	r1, [pc, #156]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x4fc>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7ff faab 	bl	80024e0 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7ff faa7 	bl	80024e0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e037      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x46a>
 8002fac:	e02f      	b.n	800300e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_RCC_OscConfig+0x4fc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff fa94 	bl	80024e0 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7ff fa90 	bl	80024e0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e020      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x498>
 8002fda:	e018      	b.n	800300e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e013      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40007000 	.word	0x40007000
 8003020:	42420060 	.word	0x42420060

08003024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d0      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	4965      	ldr	r1, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800308a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d040      	beq.n	8003144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e073      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7ff f9e4 	bl	80024e0 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7ff f9e0 	bl	80024e0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e053      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d210      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4601      	mov	r1, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	5cd3      	ldrb	r3, [r2, r3]
 80031c6:	fa21 f303 	lsr.w	r3, r1, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1cc>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1d0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff f942 	bl	800245c <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080094f4 	.word	0x080094f4
 80031f0:	20000054 	.word	0x20000054
 80031f4:	20000058 	.word	0x20000058

080031f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b490      	push	{r4, r7}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003200:	1d3c      	adds	r4, r7, #4
 8003202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x46>
 8003236:	e02d      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003238:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800323a:	623b      	str	r3, [r7, #32]
      break;
 800323c:	e02d      	b.n	800329a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800324a:	4413      	add	r3, r2
 800324c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003250:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c5b      	lsrs	r3, r3, #17
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800326a:	4413      	add	r3, r2
 800326c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003270:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003276:	fb02 f203 	mul.w	r2, r2, r3
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	e004      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	623b      	str	r3, [r7, #32]
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003296:	623b      	str	r3, [r7, #32]
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	6a3b      	ldr	r3, [r7, #32]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3728      	adds	r7, #40	; 0x28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc90      	pop	{r4, r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	080094e0 	.word	0x080094e0
 80032ac:	080094f0 	.word	0x080094f0
 80032b0:	40021000 	.word	0x40021000
 80032b4:	007a1200 	.word	0x007a1200
 80032b8:	003d0900 	.word	0x003d0900

080032bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <RCC_Delay+0x34>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <RCC_Delay+0x38>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0a5b      	lsrs	r3, r3, #9
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032d8:	bf00      	nop
  }
  while (Delay --);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	60fa      	str	r2, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <RCC_Delay+0x1c>
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000054 	.word	0x20000054
 80032f4:	10624dd3 	.word	0x10624dd3

080032f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e076      	b.n	80033f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331a:	d009      	beq.n	8003330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
 8003322:	e005      	b.n	8003330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fdfa 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003366:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	ea42 0103 	orr.w	r1, r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	0c1a      	lsrs	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f002 0204 	and.w	r2, r2, #4
 80033d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_SPI_Transmit+0x22>
 800341e:	2302      	movs	r3, #2
 8003420:	e126      	b.n	8003670 <HAL_SPI_Transmit+0x270>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800342a:	f7ff f859 	bl	80024e0 <HAL_GetTick>
 800342e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d002      	beq.n	8003446 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003440:	2302      	movs	r3, #2
 8003442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003444:	e10b      	b.n	800365e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_SPI_Transmit+0x52>
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003456:	e102      	b.n	800365e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2203      	movs	r2, #3
 800345c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349e:	d10f      	bne.n	80034c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d007      	beq.n	80034de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e6:	d14b      	bne.n	8003580 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_SPI_Transmit+0xf6>
 80034f0:	8afb      	ldrh	r3, [r7, #22]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d13e      	bne.n	8003574 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	881a      	ldrh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	1c9a      	adds	r2, r3, #2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800351a:	e02b      	b.n	8003574 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d112      	bne.n	8003550 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	86da      	strh	r2, [r3, #54]	; 0x36
 800354e:	e011      	b.n	8003574 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003550:	f7fe ffc6 	bl	80024e0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d803      	bhi.n	8003568 <HAL_SPI_Transmit+0x168>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003566:	d102      	bne.n	800356e <HAL_SPI_Transmit+0x16e>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003572:	e074      	b.n	800365e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ce      	bne.n	800351c <HAL_SPI_Transmit+0x11c>
 800357e:	e04c      	b.n	800361a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_SPI_Transmit+0x18e>
 8003588:	8afb      	ldrh	r3, [r7, #22]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d140      	bne.n	8003610 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035b4:	e02c      	b.n	8003610 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d113      	bne.n	80035ec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ea:	e011      	b.n	8003610 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ec:	f7fe ff78 	bl	80024e0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d803      	bhi.n	8003604 <HAL_SPI_Transmit+0x204>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003602:	d102      	bne.n	800360a <HAL_SPI_Transmit+0x20a>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800360e:	e026      	b.n	800365e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1cd      	bne.n	80035b6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fc4e 	bl	8003ec0 <SPI_EndRxTxTransaction>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e000      	b.n	800365e <HAL_SPI_Transmit+0x25e>
  }

error:
 800365c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800366e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d110      	bne.n	80036b4 <HAL_SPI_Receive_IT+0x3c>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800369a:	d10b      	bne.n	80036b4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2204      	movs	r2, #4
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f882 	bl	80037b4 <HAL_SPI_TransmitReceive_IT>
 80036b0:	4603      	mov	r3, r0
 80036b2:	e076      	b.n	80037a2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_SPI_Receive_IT+0x4a>
 80036be:	2302      	movs	r3, #2
 80036c0:	e06f      	b.n	80037a2 <HAL_SPI_Receive_IT+0x12a>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036da:	e05d      	b.n	8003798 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_Receive_IT+0x70>
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036ec:	e054      	b.n	8003798 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2204      	movs	r2, #4
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	88fa      	ldrh	r2, [r7, #6]
 8003706:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_SPI_Receive_IT+0x134>)
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
 8003734:	e002      	b.n	800373c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a1d      	ldr	r2, [pc, #116]	; (80037b0 <HAL_SPI_Receive_IT+0x138>)
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003744:	d10f      	bne.n	8003766 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003764:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003774:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d008      	beq.n	8003796 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e000      	b.n	8003798 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8003796:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	08003cc5 	.word	0x08003cc5
 80037b0:	08003c7b 	.word	0x08003c7b

080037b4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_SPI_TransmitReceive_IT+0x20>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e075      	b.n	80038c0 <HAL_SPI_TransmitReceive_IT+0x10c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037ea:	7dbb      	ldrb	r3, [r7, #22]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d00d      	beq.n	800380c <HAL_SPI_TransmitReceive_IT+0x58>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f6:	d106      	bne.n	8003806 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <HAL_SPI_TransmitReceive_IT+0x52>
 8003800:	7dbb      	ldrb	r3, [r7, #22]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d002      	beq.n	800380c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003806:	2302      	movs	r3, #2
 8003808:	75fb      	strb	r3, [r7, #23]
    goto error;
 800380a:	e054      	b.n	80038b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_SPI_TransmitReceive_IT+0x6a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_TransmitReceive_IT+0x6a>
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003822:	e048      	b.n	80038b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b04      	cmp	r3, #4
 800382e:	d003      	beq.n	8003838 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2205      	movs	r2, #5
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	887a      	ldrh	r2, [r7, #2]
 800384e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	887a      	ldrh	r2, [r7, #2]
 800385a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d006      	beq.n	8003878 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_SPI_TransmitReceive_IT+0x118>)
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
 8003876:	e005      	b.n	8003884 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_SPI_TransmitReceive_IT+0x120>)
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003892:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d008      	beq.n	80038b4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e000      	b.n	80038b6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80038b4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	08003bbd 	.word	0x08003bbd
 80038d0:	08003c1d 	.word	0x08003c1d
 80038d4:	08003af9 	.word	0x08003af9
 80038d8:	08003b5d 	.word	0x08003b5d

080038dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10f      	bne.n	8003920 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
    return;
 800391e:	e0bf      	b.n	8003aa0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_SPI_IRQHandler+0x66>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d004      	beq.n	8003942 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
    return;
 8003940:	e0ae      	b.n	8003aa0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_SPI_IRQHandler+0x80>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a2 	beq.w	8003aa0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 809b 	beq.w	8003aa0 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d023      	beq.n	80039be <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b03      	cmp	r3, #3
 8003980:	d011      	beq.n	80039a6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	e00b      	b.n	80039be <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
        return;
 80039bc:	e070      	b.n	8003aa0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d014      	beq.n	80039f4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d050      	beq.n	8003a9e <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a0a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <HAL_SPI_IRQHandler+0x14c>
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d034      	beq.n	8003a92 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0203 	bic.w	r2, r2, #3
 8003a36:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d011      	beq.n	8003a64 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <HAL_SPI_IRQHandler+0x1cc>)
 8003a46:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fe81 	bl	8002754 <HAL_DMA_Abort_IT>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <HAL_SPI_IRQHandler+0x1cc>)
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fe6b 	bl	8002754 <HAL_DMA_Abort_IT>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003a90:	e003      	b.n	8003a9a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f813 	bl	8003abe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a98:	e000      	b.n	8003a9c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003a9a:	bf00      	nop
    return;
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
  }
}
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08003ad1 	.word	0x08003ad1

08003aac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ffe7 	bl	8003abe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f103 020c 	add.w	r2, r3, #12
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10f      	bne.n	8003b54 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b42:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9d4 	bl	8003efc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	7812      	ldrb	r2, [r2, #0]
 8003b70:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10f      	bne.n	8003bb4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9a4 	bl	8003efc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	b292      	uxth	r2, r2
 8003bd0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	1c9a      	adds	r2, r3, #2
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10f      	bne.n	8003c14 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c02:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f974 	bl	8003efc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	881a      	ldrh	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	1c9a      	adds	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c60:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f945 	bl	8003efc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f103 020c 	add.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	7812      	ldrb	r2, [r2, #0]
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f994 	bl	8003fe4 <SPI_CloseRx_ISR>
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f971 	bl	8003fe4 <SPI_CloseRx_ISR>
  }
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d1c:	f7fe fbe0 	bl	80024e0 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4413      	add	r3, r2
 8003d2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d2c:	f7fe fbd8 	bl	80024e0 <HAL_GetTick>
 8003d30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	015b      	lsls	r3, r3, #5
 8003d38:	0d1b      	lsrs	r3, r3, #20
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d42:	e054      	b.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4a:	d050      	beq.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d4c:	f7fe fbc8 	bl	80024e0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d902      	bls.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d13d      	bne.n	8003dde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7a:	d111      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	d004      	beq.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d107      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da8:	d10f      	bne.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e017      	b.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d19b      	bne.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000054 	.word	0x20000054

08003e1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e30:	d111      	bne.n	8003e56 <SPI_EndRxTransaction+0x3a>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3a:	d004      	beq.n	8003e46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e44:	d107      	bne.n	8003e56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e54:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5e:	d117      	bne.n	8003e90 <SPI_EndRxTransaction+0x74>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e68:	d112      	bne.n	8003e90 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2101      	movs	r1, #1
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff ff49 	bl	8003d0c <SPI_WaitFlagStateUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01a      	beq.n	8003eb6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e013      	b.n	8003eb8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff ff36 	bl	8003d0c <SPI_WaitFlagStateUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e000      	b.n	8003eb8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ff18 	bl	8003d0c <SPI_WaitFlagStateUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e000      	b.n	8003ef4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003f04:	4b35      	ldr	r3, [pc, #212]	; (8003fdc <SPI_CloseRxTx_ISR+0xe0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a35      	ldr	r2, [pc, #212]	; (8003fe0 <SPI_CloseRxTx_ISR+0xe4>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0a5b      	lsrs	r3, r3, #9
 8003f10:	2264      	movs	r2, #100	; 0x64
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f18:	f7fe fae2 	bl	80024e0 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0220 	bic.w	r2, r2, #32
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f40:	e009      	b.n	8003f56 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0eb      	beq.n	8003f2e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	2164      	movs	r1, #100	; 0x64
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ffb0 	bl	8003ec0 <SPI_EndRxTxTransaction>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d115      	bne.n	8003fc4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d107      	bne.n	8003fb4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fd fbf7 	bl	80017a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003fb2:	e00e      	b.n	8003fd2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fd75 	bl	8003aac <HAL_SPI_TxRxCpltCallback>
}
 8003fc2:	e006      	b.n	8003fd2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fd76 	bl	8003abe <HAL_SPI_ErrorCallback>
}
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000054 	.word	0x20000054
 8003fe0:	057619f1 	.word	0x057619f1

08003fe4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003ffc:	f7fe fa70 	bl	80024e0 <HAL_GetTick>
 8004000:	4603      	mov	r3, r0
 8004002:	461a      	mov	r2, r3
 8004004:	2164      	movs	r1, #100	; 0x64
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff08 	bl	8003e1c <SPI_EndRxTransaction>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fd fba7 	bl	80017a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004052:	e002      	b.n	800405a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fd32 	bl	8003abe <HAL_SPI_ErrorCallback>
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e041      	b.n	80040f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fd ffaf 	bl	8001fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 ff93 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_TIM_Base_Start+0x88>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004132:	d009      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <HAL_TIM_Base_Start+0x8c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIM_Base_Start+0x48>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a13      	ldr	r2, [pc, #76]	; (8004190 <HAL_TIM_Base_Start+0x90>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d111      	bne.n	800416c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d010      	beq.n	800417c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	e007      	b.n	800417c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800

08004194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e03a      	b.n	8004222 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_TIM_Base_Start_IT+0x98>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x58>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d009      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x58>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <HAL_TIM_Base_Start_IT+0x9c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x58>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_TIM_Base_Start_IT+0xa0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d111      	bne.n	8004210 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d010      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420e:	e007      	b.n	8004220 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800

08004238 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e041      	b.n	80042ce <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f839 	bl	80042d6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 fea8 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <HAL_TIM_OC_Start_IT+0x24>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e022      	b.n	8004352 <HAL_TIM_OC_Start_IT+0x6a>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d109      	bne.n	8004326 <HAL_TIM_OC_Start_IT+0x3e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e015      	b.n	8004352 <HAL_TIM_OC_Start_IT+0x6a>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d109      	bne.n	8004340 <HAL_TIM_OC_Start_IT+0x58>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e008      	b.n	8004352 <HAL_TIM_OC_Start_IT+0x6a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0a4      	b.n	80044a4 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <HAL_TIM_OC_Start_IT+0x82>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004368:	e013      	b.n	8004392 <HAL_TIM_OC_Start_IT+0xaa>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d104      	bne.n	800437a <HAL_TIM_OC_Start_IT+0x92>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004378:	e00b      	b.n	8004392 <HAL_TIM_OC_Start_IT+0xaa>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d104      	bne.n	800438a <HAL_TIM_OC_Start_IT+0xa2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	e003      	b.n	8004392 <HAL_TIM_OC_Start_IT+0xaa>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b0c      	cmp	r3, #12
 8004396:	d841      	bhi.n	800441c <HAL_TIM_OC_Start_IT+0x134>
 8004398:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <HAL_TIM_OC_Start_IT+0xb8>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	0800441d 	.word	0x0800441d
 80043a8:	0800441d 	.word	0x0800441d
 80043ac:	0800441d 	.word	0x0800441d
 80043b0:	080043e7 	.word	0x080043e7
 80043b4:	0800441d 	.word	0x0800441d
 80043b8:	0800441d 	.word	0x0800441d
 80043bc:	0800441d 	.word	0x0800441d
 80043c0:	080043f9 	.word	0x080043f9
 80043c4:	0800441d 	.word	0x0800441d
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	0800440b 	.word	0x0800440b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0202 	orr.w	r2, r2, #2
 80043e2:	60da      	str	r2, [r3, #12]
      break;
 80043e4:	e01b      	b.n	800441e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0204 	orr.w	r2, r2, #4
 80043f4:	60da      	str	r2, [r3, #12]
      break;
 80043f6:	e012      	b.n	800441e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0208 	orr.w	r2, r2, #8
 8004406:	60da      	str	r2, [r3, #12]
      break;
 8004408:	e009      	b.n	800441e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0210 	orr.w	r2, r2, #16
 8004418:	60da      	str	r2, [r3, #12]
      break;
 800441a:	e000      	b.n	800441e <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800441c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f001 f850 	bl	80054cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <HAL_TIM_OC_Start_IT+0x1c4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d107      	bne.n	8004446 <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_TIM_OC_Start_IT+0x1c4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_TIM_OC_Start_IT+0x186>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d009      	beq.n	800446e <HAL_TIM_OC_Start_IT+0x186>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <HAL_TIM_OC_Start_IT+0x1c8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIM_OC_Start_IT+0x186>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <HAL_TIM_OC_Start_IT+0x1cc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b06      	cmp	r3, #6
 800447e:	d010      	beq.n	80044a2 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	e007      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800

080044b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e041      	b.n	800454e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f839 	bl	8004556 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fd68 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <HAL_TIM_PWM_Start_IT+0x24>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e022      	b.n	80045d2 <HAL_TIM_PWM_Start_IT+0x6a>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b04      	cmp	r3, #4
 8004590:	d109      	bne.n	80045a6 <HAL_TIM_PWM_Start_IT+0x3e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e015      	b.n	80045d2 <HAL_TIM_PWM_Start_IT+0x6a>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d109      	bne.n	80045c0 <HAL_TIM_PWM_Start_IT+0x58>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e008      	b.n	80045d2 <HAL_TIM_PWM_Start_IT+0x6a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0a4      	b.n	8004724 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Start_IT+0x82>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e8:	e013      	b.n	8004612 <HAL_TIM_PWM_Start_IT+0xaa>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Start_IT+0x92>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f8:	e00b      	b.n	8004612 <HAL_TIM_PWM_Start_IT+0xaa>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d104      	bne.n	800460a <HAL_TIM_PWM_Start_IT+0xa2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004608:	e003      	b.n	8004612 <HAL_TIM_PWM_Start_IT+0xaa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d841      	bhi.n	800469c <HAL_TIM_PWM_Start_IT+0x134>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_TIM_PWM_Start_IT+0xb8>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004655 	.word	0x08004655
 8004624:	0800469d 	.word	0x0800469d
 8004628:	0800469d 	.word	0x0800469d
 800462c:	0800469d 	.word	0x0800469d
 8004630:	08004667 	.word	0x08004667
 8004634:	0800469d 	.word	0x0800469d
 8004638:	0800469d 	.word	0x0800469d
 800463c:	0800469d 	.word	0x0800469d
 8004640:	08004679 	.word	0x08004679
 8004644:	0800469d 	.word	0x0800469d
 8004648:	0800469d 	.word	0x0800469d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	0800468b 	.word	0x0800468b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0202 	orr.w	r2, r2, #2
 8004662:	60da      	str	r2, [r3, #12]
      break;
 8004664:	e01b      	b.n	800469e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0204 	orr.w	r2, r2, #4
 8004674:	60da      	str	r2, [r3, #12]
      break;
 8004676:	e012      	b.n	800469e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0208 	orr.w	r2, r2, #8
 8004686:	60da      	str	r2, [r3, #12]
      break;
 8004688:	e009      	b.n	800469e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0210 	orr.w	r2, r2, #16
 8004698:	60da      	str	r2, [r3, #12]
      break;
 800469a:	e000      	b.n	800469e <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 800469c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 ff10 	bl	80054cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1e      	ldr	r2, [pc, #120]	; (800472c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d107      	bne.n	80046c6 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_TIM_PWM_Start_IT+0x186>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d009      	beq.n	80046ee <HAL_TIM_PWM_Start_IT+0x186>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a14      	ldr	r2, [pc, #80]	; (8004730 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIM_PWM_Start_IT+0x186>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a12      	ldr	r2, [pc, #72]	; (8004734 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d111      	bne.n	8004712 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d010      	beq.n	8004722 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	e007      	b.n	8004722 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800

08004738 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e093      	b.n	8004874 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fd fc93 	bl	800208c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800477c:	f023 0307 	bic.w	r3, r3, #7
 8004780:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f000 fc1d 	bl	8004fcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	4313      	orrs	r3, r2
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80047d8:	f023 030c 	bic.w	r3, r3, #12
 80047dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	4313      	orrs	r3, r2
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	011a      	lsls	r2, r3, #4
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	031b      	lsls	r3, r3, #12
 8004808:	4313      	orrs	r3, r2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	4313      	orrs	r3, r2
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004894:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800489c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d110      	bne.n	80048ce <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d102      	bne.n	80048b8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048b2:	7b7b      	ldrb	r3, [r7, #13]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d001      	beq.n	80048bc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e088      	b.n	80049ce <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048cc:	e031      	b.n	8004932 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d110      	bne.n	80048f6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d4:	7bbb      	ldrb	r3, [r7, #14]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d102      	bne.n	80048e0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048da:	7b3b      	ldrb	r3, [r7, #12]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d001      	beq.n	80048e4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e074      	b.n	80049ce <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f4:	e01d      	b.n	8004932 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d108      	bne.n	800490e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d105      	bne.n	800490e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004902:	7b7b      	ldrb	r3, [r7, #13]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d102      	bne.n	800490e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004908:	7b3b      	ldrb	r3, [r7, #12]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d001      	beq.n	8004912 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e05d      	b.n	80049ce <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_TIM_Encoder_Start_IT+0xc2>
 8004938:	2b04      	cmp	r3, #4
 800493a:	d010      	beq.n	800495e <HAL_TIM_Encoder_Start_IT+0xe2>
 800493c:	e01f      	b.n	800497e <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fdc0 	bl	80054cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0202 	orr.w	r2, r2, #2
 800495a:	60da      	str	r2, [r3, #12]
      break;
 800495c:	e02e      	b.n	80049bc <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	2104      	movs	r1, #4
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fdb0 	bl	80054cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0204 	orr.w	r2, r2, #4
 800497a:	60da      	str	r2, [r3, #12]
      break;
 800497c:	e01e      	b.n	80049bc <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fda0 	bl	80054cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2201      	movs	r2, #1
 8004992:	2104      	movs	r1, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fd99 	bl	80054cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0202 	orr.w	r2, r2, #2
 80049a8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0204 	orr.w	r2, r2, #4
 80049b8:	60da      	str	r2, [r3, #12]
      break;
 80049ba:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d122      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d11b      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0202 	mvn.w	r2, #2
 8004a02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fabb 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 8004a1e:	e005      	b.n	8004a2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 faae 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fabd 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d122      	bne.n	8004a86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d11b      	bne.n	8004a86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f06f 0204 	mvn.w	r2, #4
 8004a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa91 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 8004a72:	e005      	b.n	8004a80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa84 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa93 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d122      	bne.n	8004ada <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d11b      	bne.n	8004ada <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0208 	mvn.w	r2, #8
 8004aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa67 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 8004ac6:	e005      	b.n	8004ad4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fa5a 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa69 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d122      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d11b      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f06f 0210 	mvn.w	r2, #16
 8004afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2208      	movs	r2, #8
 8004b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fa3d 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 8004b1a:	e005      	b.n	8004b28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa30 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa3f 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d10e      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f06f 0201 	mvn.w	r2, #1
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fc fac3 	bl	80010e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fd7f 	bl	8005684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa03 	bl	8004fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d10e      	bne.n	8004bde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0220 	mvn.w	r2, #32
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fd4a 	bl	8005672 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e046      	b.n	8004c90 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d839      	bhi.n	8004c84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004c85 	.word	0x08004c85
 8004c20:	08004c85 	.word	0x08004c85
 8004c24:	08004c85 	.word	0x08004c85
 8004c28:	08004c5b 	.word	0x08004c5b
 8004c2c:	08004c85 	.word	0x08004c85
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004c85 	.word	0x08004c85
 8004c38:	08004c69 	.word	0x08004c69
 8004c3c:	08004c85 	.word	0x08004c85
 8004c40:	08004c85 	.word	0x08004c85
 8004c44:	08004c85 	.word	0x08004c85
 8004c48:	08004c77 	.word	0x08004c77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa1c 	bl	8005090 <TIM_OC1_SetConfig>
      break;
 8004c58:	e015      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fa7b 	bl	800515c <TIM_OC2_SetConfig>
      break;
 8004c66:	e00e      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fade 	bl	8005230 <TIM_OC3_SetConfig>
      break;
 8004c74:	e007      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fb41 	bl	8005304 <TIM_OC4_SetConfig>
      break;
 8004c82:	e000      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e0ac      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	f200 809f 	bhi.w	8004e00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cfd 	.word	0x08004cfd
 8004ccc:	08004e01 	.word	0x08004e01
 8004cd0:	08004e01 	.word	0x08004e01
 8004cd4:	08004e01 	.word	0x08004e01
 8004cd8:	08004d3d 	.word	0x08004d3d
 8004cdc:	08004e01 	.word	0x08004e01
 8004ce0:	08004e01 	.word	0x08004e01
 8004ce4:	08004e01 	.word	0x08004e01
 8004ce8:	08004d7f 	.word	0x08004d7f
 8004cec:	08004e01 	.word	0x08004e01
 8004cf0:	08004e01 	.word	0x08004e01
 8004cf4:	08004e01 	.word	0x08004e01
 8004cf8:	08004dbf 	.word	0x08004dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f9c4 	bl	8005090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	619a      	str	r2, [r3, #24]
      break;
 8004d3a:	e062      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fa0a 	bl	800515c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	619a      	str	r2, [r3, #24]
      break;
 8004d7c:	e041      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fa53 	bl	8005230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0208 	orr.w	r2, r2, #8
 8004d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0204 	bic.w	r2, r2, #4
 8004da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69d9      	ldr	r1, [r3, #28]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	61da      	str	r2, [r3, #28]
      break;
 8004dbc:	e021      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fa9d 	bl	8005304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69d9      	ldr	r1, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	021a      	lsls	r2, r3, #8
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	61da      	str	r2, [r3, #28]
      break;
 8004dfe:	e000      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIM_ConfigClockSource+0x18>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e0a6      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x166>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d067      	beq.n	8004f34 <HAL_TIM_ConfigClockSource+0x120>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d80b      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x6c>
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d073      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x140>
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d802      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x62>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d06f      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e74:	e078      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d06c      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x140>
 8004e7a:	2b30      	cmp	r3, #48	; 0x30
 8004e7c:	d06a      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e7e:	e073      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e80:	2b70      	cmp	r3, #112	; 0x70
 8004e82:	d00d      	beq.n	8004ea0 <HAL_TIM_ConfigClockSource+0x8c>
 8004e84:	2b70      	cmp	r3, #112	; 0x70
 8004e86:	d804      	bhi.n	8004e92 <HAL_TIM_ConfigClockSource+0x7e>
 8004e88:	2b50      	cmp	r3, #80	; 0x50
 8004e8a:	d033      	beq.n	8004ef4 <HAL_TIM_ConfigClockSource+0xe0>
 8004e8c:	2b60      	cmp	r3, #96	; 0x60
 8004e8e:	d041      	beq.n	8004f14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e90:	e06a      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e96:	d066      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x152>
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9c:	d017      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e9e:	e063      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6899      	ldr	r1, [r3, #8]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f000 faed 	bl	800548e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ec2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
      break;
 8004ecc:	e04c      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6899      	ldr	r1, [r3, #8]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f000 fad6 	bl	800548e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef0:	609a      	str	r2, [r3, #8]
      break;
 8004ef2:	e039      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	461a      	mov	r2, r3
 8004f02:	f000 fa4d 	bl	80053a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2150      	movs	r1, #80	; 0x50
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 faa4 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8004f12:	e029      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6859      	ldr	r1, [r3, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	461a      	mov	r2, r3
 8004f22:	f000 fa6b 	bl	80053fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2160      	movs	r1, #96	; 0x60
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fa94 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8004f32:	e019      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6859      	ldr	r1, [r3, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	461a      	mov	r2, r3
 8004f42:	f000 fa2d 	bl	80053a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fa84 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8004f52:	e009      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 fa7b 	bl	800545a <TIM_ITRx_SetConfig>
        break;
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
	...

08004fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a29      	ldr	r2, [pc, #164]	; (8005084 <TIM_Base_SetConfig+0xb8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x30>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x30>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a26      	ldr	r2, [pc, #152]	; (8005088 <TIM_Base_SetConfig+0xbc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x30>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a25      	ldr	r2, [pc, #148]	; (800508c <TIM_Base_SetConfig+0xc0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <TIM_Base_SetConfig+0xb8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_Base_SetConfig+0x62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d007      	beq.n	800502e <TIM_Base_SetConfig+0x62>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <TIM_Base_SetConfig+0xbc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_Base_SetConfig+0x62>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <TIM_Base_SetConfig+0xc0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <TIM_Base_SetConfig+0xb8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	615a      	str	r2, [r3, #20]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800

08005090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0201 	bic.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f023 0302 	bic.w	r3, r3, #2
 80050d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <TIM_OC1_SetConfig+0xc8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10c      	bne.n	8005106 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0308 	bic.w	r3, r3, #8
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a13      	ldr	r2, [pc, #76]	; (8005158 <TIM_OC1_SetConfig+0xc8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d111      	bne.n	8005132 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40012c00 	.word	0x40012c00

0800515c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0210 	bic.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0320 	bic.w	r3, r3, #32
 80051a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <TIM_OC2_SetConfig+0xd0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d10d      	bne.n	80051d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a14      	ldr	r2, [pc, #80]	; (800522c <TIM_OC2_SetConfig+0xd0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d113      	bne.n	8005208 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	40012c00 	.word	0x40012c00

08005230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <TIM_OC3_SetConfig+0xd0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d10d      	bne.n	80052aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <TIM_OC3_SetConfig+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d113      	bne.n	80052da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	621a      	str	r2, [r3, #32]
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00

08005304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800534e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a0f      	ldr	r2, [pc, #60]	; (800539c <TIM_OC4_SetConfig+0x98>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d109      	bne.n	8005378 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	40012c00 	.word	0x40012c00

080053a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f023 0201 	bic.w	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f023 030a 	bic.w	r3, r3, #10
 80053dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f023 0210 	bic.w	r2, r3, #16
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005426:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	031b      	lsls	r3, r3, #12
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005438:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	f043 0307 	orr.w	r3, r3, #7
 800547c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800548e:	b480      	push	{r7}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	021a      	lsls	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	609a      	str	r2, [r3, #8]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2201      	movs	r2, #1
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1a      	ldr	r2, [r3, #32]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	401a      	ands	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1a      	ldr	r2, [r3, #32]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	fa01 f303 	lsl.w	r3, r1, r3
 8005504:	431a      	orrs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005528:	2302      	movs	r3, #2
 800552a:	e046      	b.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d009      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a10      	ldr	r2, [pc, #64]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d10c      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800

080055d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e03d      	b.n	8005668 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr

08005672 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <atof>:
 8005696:	2100      	movs	r1, #0
 8005698:	f001 bb22 	b.w	8006ce0 <strtod>

0800569c <__errno>:
 800569c:	4b01      	ldr	r3, [pc, #4]	; (80056a4 <__errno+0x8>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000060 	.word	0x20000060

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	2500      	movs	r5, #0
 80056ac:	4e0c      	ldr	r6, [pc, #48]	; (80056e0 <__libc_init_array+0x38>)
 80056ae:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056b0:	1ba4      	subs	r4, r4, r6
 80056b2:	10a4      	asrs	r4, r4, #2
 80056b4:	42a5      	cmp	r5, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	f003 fe66 	bl	8009388 <_init>
 80056bc:	2500      	movs	r5, #0
 80056be:	4e0a      	ldr	r6, [pc, #40]	; (80056e8 <__libc_init_array+0x40>)
 80056c0:	4c0a      	ldr	r4, [pc, #40]	; (80056ec <__libc_init_array+0x44>)
 80056c2:	1ba4      	subs	r4, r4, r6
 80056c4:	10a4      	asrs	r4, r4, #2
 80056c6:	42a5      	cmp	r5, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056d0:	4798      	blx	r3
 80056d2:	3501      	adds	r5, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056da:	4798      	blx	r3
 80056dc:	3501      	adds	r5, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	08009820 	.word	0x08009820
 80056e4:	08009820 	.word	0x08009820
 80056e8:	08009820 	.word	0x08009820
 80056ec:	08009824 	.word	0x08009824

080056f0 <memset>:
 80056f0:	4603      	mov	r3, r0
 80056f2:	4402      	add	r2, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <__cvt>:
 8005700:	2b00      	cmp	r3, #0
 8005702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005706:	461e      	mov	r6, r3
 8005708:	bfbb      	ittet	lt
 800570a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800570e:	461e      	movlt	r6, r3
 8005710:	2300      	movge	r3, #0
 8005712:	232d      	movlt	r3, #45	; 0x2d
 8005714:	b088      	sub	sp, #32
 8005716:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005718:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800571c:	f027 0720 	bic.w	r7, r7, #32
 8005720:	2f46      	cmp	r7, #70	; 0x46
 8005722:	4614      	mov	r4, r2
 8005724:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005726:	700b      	strb	r3, [r1, #0]
 8005728:	d004      	beq.n	8005734 <__cvt+0x34>
 800572a:	2f45      	cmp	r7, #69	; 0x45
 800572c:	d100      	bne.n	8005730 <__cvt+0x30>
 800572e:	3501      	adds	r5, #1
 8005730:	2302      	movs	r3, #2
 8005732:	e000      	b.n	8005736 <__cvt+0x36>
 8005734:	2303      	movs	r3, #3
 8005736:	aa07      	add	r2, sp, #28
 8005738:	9204      	str	r2, [sp, #16]
 800573a:	aa06      	add	r2, sp, #24
 800573c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005740:	e9cd 3500 	strd	r3, r5, [sp]
 8005744:	4622      	mov	r2, r4
 8005746:	4633      	mov	r3, r6
 8005748:	f001 fc2a 	bl	8006fa0 <_dtoa_r>
 800574c:	2f47      	cmp	r7, #71	; 0x47
 800574e:	4680      	mov	r8, r0
 8005750:	d102      	bne.n	8005758 <__cvt+0x58>
 8005752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005754:	07db      	lsls	r3, r3, #31
 8005756:	d526      	bpl.n	80057a6 <__cvt+0xa6>
 8005758:	2f46      	cmp	r7, #70	; 0x46
 800575a:	eb08 0905 	add.w	r9, r8, r5
 800575e:	d111      	bne.n	8005784 <__cvt+0x84>
 8005760:	f898 3000 	ldrb.w	r3, [r8]
 8005764:	2b30      	cmp	r3, #48	; 0x30
 8005766:	d10a      	bne.n	800577e <__cvt+0x7e>
 8005768:	2200      	movs	r2, #0
 800576a:	2300      	movs	r3, #0
 800576c:	4620      	mov	r0, r4
 800576e:	4631      	mov	r1, r6
 8005770:	f7fb f91a 	bl	80009a8 <__aeabi_dcmpeq>
 8005774:	b918      	cbnz	r0, 800577e <__cvt+0x7e>
 8005776:	f1c5 0501 	rsb	r5, r5, #1
 800577a:	f8ca 5000 	str.w	r5, [sl]
 800577e:	f8da 3000 	ldr.w	r3, [sl]
 8005782:	4499      	add	r9, r3
 8005784:	2200      	movs	r2, #0
 8005786:	2300      	movs	r3, #0
 8005788:	4620      	mov	r0, r4
 800578a:	4631      	mov	r1, r6
 800578c:	f7fb f90c 	bl	80009a8 <__aeabi_dcmpeq>
 8005790:	b938      	cbnz	r0, 80057a2 <__cvt+0xa2>
 8005792:	2230      	movs	r2, #48	; 0x30
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	454b      	cmp	r3, r9
 8005798:	d205      	bcs.n	80057a6 <__cvt+0xa6>
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	9107      	str	r1, [sp, #28]
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e7f8      	b.n	8005794 <__cvt+0x94>
 80057a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80057a6:	4640      	mov	r0, r8
 80057a8:	9b07      	ldr	r3, [sp, #28]
 80057aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057ac:	eba3 0308 	sub.w	r3, r3, r8
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	b008      	add	sp, #32
 80057b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080057b8 <__exponent>:
 80057b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ba:	2900      	cmp	r1, #0
 80057bc:	bfb4      	ite	lt
 80057be:	232d      	movlt	r3, #45	; 0x2d
 80057c0:	232b      	movge	r3, #43	; 0x2b
 80057c2:	4604      	mov	r4, r0
 80057c4:	bfb8      	it	lt
 80057c6:	4249      	neglt	r1, r1
 80057c8:	2909      	cmp	r1, #9
 80057ca:	f804 2b02 	strb.w	r2, [r4], #2
 80057ce:	7043      	strb	r3, [r0, #1]
 80057d0:	dd21      	ble.n	8005816 <__exponent+0x5e>
 80057d2:	f10d 0307 	add.w	r3, sp, #7
 80057d6:	461f      	mov	r7, r3
 80057d8:	260a      	movs	r6, #10
 80057da:	fb91 f5f6 	sdiv	r5, r1, r6
 80057de:	fb06 1115 	mls	r1, r6, r5, r1
 80057e2:	2d09      	cmp	r5, #9
 80057e4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80057e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057ec:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80057f0:	4629      	mov	r1, r5
 80057f2:	dc09      	bgt.n	8005808 <__exponent+0x50>
 80057f4:	3130      	adds	r1, #48	; 0x30
 80057f6:	3b02      	subs	r3, #2
 80057f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057fc:	42bb      	cmp	r3, r7
 80057fe:	4622      	mov	r2, r4
 8005800:	d304      	bcc.n	800580c <__exponent+0x54>
 8005802:	1a10      	subs	r0, r2, r0
 8005804:	b003      	add	sp, #12
 8005806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005808:	4613      	mov	r3, r2
 800580a:	e7e6      	b.n	80057da <__exponent+0x22>
 800580c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005810:	f804 2b01 	strb.w	r2, [r4], #1
 8005814:	e7f2      	b.n	80057fc <__exponent+0x44>
 8005816:	2330      	movs	r3, #48	; 0x30
 8005818:	4419      	add	r1, r3
 800581a:	7083      	strb	r3, [r0, #2]
 800581c:	1d02      	adds	r2, r0, #4
 800581e:	70c1      	strb	r1, [r0, #3]
 8005820:	e7ef      	b.n	8005802 <__exponent+0x4a>
	...

08005824 <_printf_float>:
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	b091      	sub	sp, #68	; 0x44
 800582a:	460c      	mov	r4, r1
 800582c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800582e:	4693      	mov	fp, r2
 8005830:	461e      	mov	r6, r3
 8005832:	4605      	mov	r5, r0
 8005834:	f002 fe0c 	bl	8008450 <_localeconv_r>
 8005838:	6803      	ldr	r3, [r0, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	9309      	str	r3, [sp, #36]	; 0x24
 800583e:	f7fa fc87 	bl	8000150 <strlen>
 8005842:	2300      	movs	r3, #0
 8005844:	930e      	str	r3, [sp, #56]	; 0x38
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	900a      	str	r0, [sp, #40]	; 0x28
 800584a:	3307      	adds	r3, #7
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	f103 0208 	add.w	r2, r3, #8
 8005854:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005858:	f8d4 a000 	ldr.w	sl, [r4]
 800585c:	603a      	str	r2, [r7, #0]
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005866:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800586a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800586e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005874:	4ba6      	ldr	r3, [pc, #664]	; (8005b10 <_printf_float+0x2ec>)
 8005876:	4638      	mov	r0, r7
 8005878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800587a:	f7fb f8c7 	bl	8000a0c <__aeabi_dcmpun>
 800587e:	bb68      	cbnz	r0, 80058dc <_printf_float+0xb8>
 8005880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005884:	4ba2      	ldr	r3, [pc, #648]	; (8005b10 <_printf_float+0x2ec>)
 8005886:	4638      	mov	r0, r7
 8005888:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800588a:	f7fb f8a1 	bl	80009d0 <__aeabi_dcmple>
 800588e:	bb28      	cbnz	r0, 80058dc <_printf_float+0xb8>
 8005890:	2200      	movs	r2, #0
 8005892:	2300      	movs	r3, #0
 8005894:	4638      	mov	r0, r7
 8005896:	4649      	mov	r1, r9
 8005898:	f7fb f890 	bl	80009bc <__aeabi_dcmplt>
 800589c:	b110      	cbz	r0, 80058a4 <_printf_float+0x80>
 800589e:	232d      	movs	r3, #45	; 0x2d
 80058a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a4:	4f9b      	ldr	r7, [pc, #620]	; (8005b14 <_printf_float+0x2f0>)
 80058a6:	4b9c      	ldr	r3, [pc, #624]	; (8005b18 <_printf_float+0x2f4>)
 80058a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058ac:	bf98      	it	ls
 80058ae:	461f      	movls	r7, r3
 80058b0:	2303      	movs	r3, #3
 80058b2:	f04f 0900 	mov.w	r9, #0
 80058b6:	6123      	str	r3, [r4, #16]
 80058b8:	f02a 0304 	bic.w	r3, sl, #4
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	9600      	str	r6, [sp, #0]
 80058c0:	465b      	mov	r3, fp
 80058c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f9e2 	bl	8005c90 <_printf_common>
 80058cc:	3001      	adds	r0, #1
 80058ce:	f040 8090 	bne.w	80059f2 <_printf_float+0x1ce>
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d6:	b011      	add	sp, #68	; 0x44
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	463a      	mov	r2, r7
 80058de:	464b      	mov	r3, r9
 80058e0:	4638      	mov	r0, r7
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fb f892 	bl	8000a0c <__aeabi_dcmpun>
 80058e8:	b110      	cbz	r0, 80058f0 <_printf_float+0xcc>
 80058ea:	4f8c      	ldr	r7, [pc, #560]	; (8005b1c <_printf_float+0x2f8>)
 80058ec:	4b8c      	ldr	r3, [pc, #560]	; (8005b20 <_printf_float+0x2fc>)
 80058ee:	e7db      	b.n	80058a8 <_printf_float+0x84>
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80058f6:	1c59      	adds	r1, r3, #1
 80058f8:	a80d      	add	r0, sp, #52	; 0x34
 80058fa:	a90e      	add	r1, sp, #56	; 0x38
 80058fc:	d140      	bne.n	8005980 <_printf_float+0x15c>
 80058fe:	2306      	movs	r3, #6
 8005900:	6063      	str	r3, [r4, #4]
 8005902:	f04f 0c00 	mov.w	ip, #0
 8005906:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800590a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	6022      	str	r2, [r4, #0]
 8005912:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	463a      	mov	r2, r7
 800591a:	464b      	mov	r3, r9
 800591c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005920:	4628      	mov	r0, r5
 8005922:	f7ff feed 	bl	8005700 <__cvt>
 8005926:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800592a:	2b47      	cmp	r3, #71	; 0x47
 800592c:	4607      	mov	r7, r0
 800592e:	d109      	bne.n	8005944 <_printf_float+0x120>
 8005930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005932:	1cd8      	adds	r0, r3, #3
 8005934:	db02      	blt.n	800593c <_printf_float+0x118>
 8005936:	6862      	ldr	r2, [r4, #4]
 8005938:	4293      	cmp	r3, r2
 800593a:	dd47      	ble.n	80059cc <_printf_float+0x1a8>
 800593c:	f1a8 0802 	sub.w	r8, r8, #2
 8005940:	fa5f f888 	uxtb.w	r8, r8
 8005944:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005948:	990d      	ldr	r1, [sp, #52]	; 0x34
 800594a:	d824      	bhi.n	8005996 <_printf_float+0x172>
 800594c:	3901      	subs	r1, #1
 800594e:	4642      	mov	r2, r8
 8005950:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005954:	910d      	str	r1, [sp, #52]	; 0x34
 8005956:	f7ff ff2f 	bl	80057b8 <__exponent>
 800595a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800595c:	4681      	mov	r9, r0
 800595e:	1813      	adds	r3, r2, r0
 8005960:	2a01      	cmp	r2, #1
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	dc02      	bgt.n	800596c <_printf_float+0x148>
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	07d1      	lsls	r1, r2, #31
 800596a:	d501      	bpl.n	8005970 <_printf_float+0x14c>
 800596c:	3301      	adds	r3, #1
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0a2      	beq.n	80058be <_printf_float+0x9a>
 8005978:	232d      	movs	r3, #45	; 0x2d
 800597a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597e:	e79e      	b.n	80058be <_printf_float+0x9a>
 8005980:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005984:	f000 816e 	beq.w	8005c64 <_printf_float+0x440>
 8005988:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800598c:	d1b9      	bne.n	8005902 <_printf_float+0xde>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1b7      	bne.n	8005902 <_printf_float+0xde>
 8005992:	2301      	movs	r3, #1
 8005994:	e7b4      	b.n	8005900 <_printf_float+0xdc>
 8005996:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800599a:	d119      	bne.n	80059d0 <_printf_float+0x1ac>
 800599c:	2900      	cmp	r1, #0
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	dd0c      	ble.n	80059bc <_printf_float+0x198>
 80059a2:	6121      	str	r1, [r4, #16]
 80059a4:	b913      	cbnz	r3, 80059ac <_printf_float+0x188>
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	07d2      	lsls	r2, r2, #31
 80059aa:	d502      	bpl.n	80059b2 <_printf_float+0x18e>
 80059ac:	3301      	adds	r3, #1
 80059ae:	440b      	add	r3, r1
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b4:	f04f 0900 	mov.w	r9, #0
 80059b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80059ba:	e7d9      	b.n	8005970 <_printf_float+0x14c>
 80059bc:	b913      	cbnz	r3, 80059c4 <_printf_float+0x1a0>
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	07d0      	lsls	r0, r2, #31
 80059c2:	d501      	bpl.n	80059c8 <_printf_float+0x1a4>
 80059c4:	3302      	adds	r3, #2
 80059c6:	e7f3      	b.n	80059b0 <_printf_float+0x18c>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e7f1      	b.n	80059b0 <_printf_float+0x18c>
 80059cc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80059d0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80059d4:	4293      	cmp	r3, r2
 80059d6:	db05      	blt.n	80059e4 <_printf_float+0x1c0>
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	07d1      	lsls	r1, r2, #31
 80059de:	d5e8      	bpl.n	80059b2 <_printf_float+0x18e>
 80059e0:	3301      	adds	r3, #1
 80059e2:	e7e5      	b.n	80059b0 <_printf_float+0x18c>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfcc      	ite	gt
 80059e8:	2301      	movgt	r3, #1
 80059ea:	f1c3 0302 	rsble	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	e7de      	b.n	80059b0 <_printf_float+0x18c>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	055a      	lsls	r2, r3, #21
 80059f6:	d407      	bmi.n	8005a08 <_printf_float+0x1e4>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	463a      	mov	r2, r7
 80059fc:	4659      	mov	r1, fp
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b0      	blx	r6
 8005a02:	3001      	adds	r0, #1
 8005a04:	d129      	bne.n	8005a5a <_printf_float+0x236>
 8005a06:	e764      	b.n	80058d2 <_printf_float+0xae>
 8005a08:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005a0c:	f240 80d7 	bls.w	8005bbe <_printf_float+0x39a>
 8005a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	f7fa ffc6 	bl	80009a8 <__aeabi_dcmpeq>
 8005a1c:	b388      	cbz	r0, 8005a82 <_printf_float+0x25e>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4a40      	ldr	r2, [pc, #256]	; (8005b24 <_printf_float+0x300>)
 8005a22:	4659      	mov	r1, fp
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b0      	blx	r6
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f43f af52 	beq.w	80058d2 <_printf_float+0xae>
 8005a2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a32:	429a      	cmp	r2, r3
 8005a34:	db02      	blt.n	8005a3c <_printf_float+0x218>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	07d8      	lsls	r0, r3, #31
 8005a3a:	d50e      	bpl.n	8005a5a <_printf_float+0x236>
 8005a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a40:	4659      	mov	r1, fp
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b0      	blx	r6
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af43 	beq.w	80058d2 <_printf_float+0xae>
 8005a4c:	2700      	movs	r7, #0
 8005a4e:	f104 081a 	add.w	r8, r4, #26
 8005a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a54:	3b01      	subs	r3, #1
 8005a56:	42bb      	cmp	r3, r7
 8005a58:	dc09      	bgt.n	8005a6e <_printf_float+0x24a>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	079f      	lsls	r7, r3, #30
 8005a5e:	f100 80fd 	bmi.w	8005c5c <_printf_float+0x438>
 8005a62:	68e0      	ldr	r0, [r4, #12]
 8005a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a66:	4298      	cmp	r0, r3
 8005a68:	bfb8      	it	lt
 8005a6a:	4618      	movlt	r0, r3
 8005a6c:	e733      	b.n	80058d6 <_printf_float+0xb2>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4642      	mov	r2, r8
 8005a72:	4659      	mov	r1, fp
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b0      	blx	r6
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f43f af2a 	beq.w	80058d2 <_printf_float+0xae>
 8005a7e:	3701      	adds	r7, #1
 8005a80:	e7e7      	b.n	8005a52 <_printf_float+0x22e>
 8005a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	dc2b      	bgt.n	8005ae0 <_printf_float+0x2bc>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <_printf_float+0x300>)
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b0      	blx	r6
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f af1d 	beq.w	80058d2 <_printf_float+0xae>
 8005a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a9a:	b923      	cbnz	r3, 8005aa6 <_printf_float+0x282>
 8005a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a9e:	b913      	cbnz	r3, 8005aa6 <_printf_float+0x282>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	07d9      	lsls	r1, r3, #31
 8005aa4:	d5d9      	bpl.n	8005a5a <_printf_float+0x236>
 8005aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aaa:	4659      	mov	r1, fp
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b0      	blx	r6
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f af0e 	beq.w	80058d2 <_printf_float+0xae>
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	f104 091a 	add.w	r9, r4, #26
 8005abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	4543      	cmp	r3, r8
 8005ac4:	dc01      	bgt.n	8005aca <_printf_float+0x2a6>
 8005ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac8:	e797      	b.n	80059fa <_printf_float+0x1d6>
 8005aca:	2301      	movs	r3, #1
 8005acc:	464a      	mov	r2, r9
 8005ace:	4659      	mov	r1, fp
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b0      	blx	r6
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f aefc 	beq.w	80058d2 <_printf_float+0xae>
 8005ada:	f108 0801 	add.w	r8, r8, #1
 8005ade:	e7ee      	b.n	8005abe <_printf_float+0x29a>
 8005ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	bfa8      	it	ge
 8005ae8:	461a      	movge	r2, r3
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	4690      	mov	r8, r2
 8005aee:	dd07      	ble.n	8005b00 <_printf_float+0x2dc>
 8005af0:	4613      	mov	r3, r2
 8005af2:	4659      	mov	r1, fp
 8005af4:	463a      	mov	r2, r7
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b0      	blx	r6
 8005afa:	3001      	adds	r0, #1
 8005afc:	f43f aee9 	beq.w	80058d2 <_printf_float+0xae>
 8005b00:	f104 031a 	add.w	r3, r4, #26
 8005b04:	f04f 0a00 	mov.w	sl, #0
 8005b08:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b0e:	e015      	b.n	8005b3c <_printf_float+0x318>
 8005b10:	7fefffff 	.word	0x7fefffff
 8005b14:	0800950c 	.word	0x0800950c
 8005b18:	08009508 	.word	0x08009508
 8005b1c:	08009514 	.word	0x08009514
 8005b20:	08009510 	.word	0x08009510
 8005b24:	08009518 	.word	0x08009518
 8005b28:	2301      	movs	r3, #1
 8005b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b0      	blx	r6
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f aecd 	beq.w	80058d2 <_printf_float+0xae>
 8005b38:	f10a 0a01 	add.w	sl, sl, #1
 8005b3c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005b40:	eba9 0308 	sub.w	r3, r9, r8
 8005b44:	4553      	cmp	r3, sl
 8005b46:	dcef      	bgt.n	8005b28 <_printf_float+0x304>
 8005b48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	444f      	add	r7, r9
 8005b50:	db14      	blt.n	8005b7c <_printf_float+0x358>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	07da      	lsls	r2, r3, #31
 8005b56:	d411      	bmi.n	8005b7c <_printf_float+0x358>
 8005b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b5c:	eba3 0209 	sub.w	r2, r3, r9
 8005b60:	eba3 0901 	sub.w	r9, r3, r1
 8005b64:	4591      	cmp	r9, r2
 8005b66:	bfa8      	it	ge
 8005b68:	4691      	movge	r9, r2
 8005b6a:	f1b9 0f00 	cmp.w	r9, #0
 8005b6e:	dc0d      	bgt.n	8005b8c <_printf_float+0x368>
 8005b70:	2700      	movs	r7, #0
 8005b72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b76:	f104 081a 	add.w	r8, r4, #26
 8005b7a:	e018      	b.n	8005bae <_printf_float+0x38a>
 8005b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b80:	4659      	mov	r1, fp
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b0      	blx	r6
 8005b86:	3001      	adds	r0, #1
 8005b88:	d1e6      	bne.n	8005b58 <_printf_float+0x334>
 8005b8a:	e6a2      	b.n	80058d2 <_printf_float+0xae>
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	463a      	mov	r2, r7
 8005b90:	4659      	mov	r1, fp
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b0      	blx	r6
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1ea      	bne.n	8005b70 <_printf_float+0x34c>
 8005b9a:	e69a      	b.n	80058d2 <_printf_float+0xae>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b0      	blx	r6
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f43f ae93 	beq.w	80058d2 <_printf_float+0xae>
 8005bac:	3701      	adds	r7, #1
 8005bae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	eba3 0309 	sub.w	r3, r3, r9
 8005bb8:	42bb      	cmp	r3, r7
 8005bba:	dcef      	bgt.n	8005b9c <_printf_float+0x378>
 8005bbc:	e74d      	b.n	8005a5a <_printf_float+0x236>
 8005bbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bc0:	2a01      	cmp	r2, #1
 8005bc2:	dc01      	bgt.n	8005bc8 <_printf_float+0x3a4>
 8005bc4:	07db      	lsls	r3, r3, #31
 8005bc6:	d538      	bpl.n	8005c3a <_printf_float+0x416>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4659      	mov	r1, fp
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b0      	blx	r6
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f ae7d 	beq.w	80058d2 <_printf_float+0xae>
 8005bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bdc:	4659      	mov	r1, fp
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b0      	blx	r6
 8005be2:	3001      	adds	r0, #1
 8005be4:	f107 0701 	add.w	r7, r7, #1
 8005be8:	f43f ae73 	beq.w	80058d2 <_printf_float+0xae>
 8005bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f7fa fed5 	bl	80009a8 <__aeabi_dcmpeq>
 8005bfe:	b9c0      	cbnz	r0, 8005c32 <_printf_float+0x40e>
 8005c00:	4643      	mov	r3, r8
 8005c02:	463a      	mov	r2, r7
 8005c04:	4659      	mov	r1, fp
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b0      	blx	r6
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d10d      	bne.n	8005c2a <_printf_float+0x406>
 8005c0e:	e660      	b.n	80058d2 <_printf_float+0xae>
 8005c10:	2301      	movs	r3, #1
 8005c12:	4642      	mov	r2, r8
 8005c14:	4659      	mov	r1, fp
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b0      	blx	r6
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f43f ae59 	beq.w	80058d2 <_printf_float+0xae>
 8005c20:	3701      	adds	r7, #1
 8005c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c24:	3b01      	subs	r3, #1
 8005c26:	42bb      	cmp	r3, r7
 8005c28:	dcf2      	bgt.n	8005c10 <_printf_float+0x3ec>
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c30:	e6e4      	b.n	80059fc <_printf_float+0x1d8>
 8005c32:	2700      	movs	r7, #0
 8005c34:	f104 081a 	add.w	r8, r4, #26
 8005c38:	e7f3      	b.n	8005c22 <_printf_float+0x3fe>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e7e1      	b.n	8005c02 <_printf_float+0x3de>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4642      	mov	r2, r8
 8005c42:	4659      	mov	r1, fp
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b0      	blx	r6
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f ae42 	beq.w	80058d2 <_printf_float+0xae>
 8005c4e:	3701      	adds	r7, #1
 8005c50:	68e3      	ldr	r3, [r4, #12]
 8005c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	42bb      	cmp	r3, r7
 8005c58:	dcf1      	bgt.n	8005c3e <_printf_float+0x41a>
 8005c5a:	e702      	b.n	8005a62 <_printf_float+0x23e>
 8005c5c:	2700      	movs	r7, #0
 8005c5e:	f104 0819 	add.w	r8, r4, #25
 8005c62:	e7f5      	b.n	8005c50 <_printf_float+0x42c>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f43f ae94 	beq.w	8005992 <_printf_float+0x16e>
 8005c6a:	f04f 0c00 	mov.w	ip, #0
 8005c6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005c72:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005c76:	6022      	str	r2, [r4, #0]
 8005c78:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005c7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	463a      	mov	r2, r7
 8005c84:	464b      	mov	r3, r9
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7ff fd3a 	bl	8005700 <__cvt>
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	e64f      	b.n	8005930 <_printf_float+0x10c>

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4691      	mov	r9, r2
 8005c96:	461f      	mov	r7, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bfb8      	it	lt
 8005ca2:	4613      	movlt	r3, r2
 8005ca4:	f8c9 3000 	str.w	r3, [r9]
 8005ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cac:	460c      	mov	r4, r1
 8005cae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cb2:	b112      	cbz	r2, 8005cba <_printf_common+0x2a>
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f8c9 3000 	str.w	r3, [r9]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	0699      	lsls	r1, r3, #26
 8005cbe:	bf42      	ittt	mi
 8005cc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cc4:	3302      	addmi	r3, #2
 8005cc6:	f8c9 3000 	strmi.w	r3, [r9]
 8005cca:	6825      	ldr	r5, [r4, #0]
 8005ccc:	f015 0506 	ands.w	r5, r5, #6
 8005cd0:	d107      	bne.n	8005ce2 <_printf_common+0x52>
 8005cd2:	f104 0a19 	add.w	sl, r4, #25
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	42ab      	cmp	r3, r5
 8005ce0:	dc29      	bgt.n	8005d36 <_printf_common+0xa6>
 8005ce2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	3300      	adds	r3, #0
 8005cea:	bf18      	it	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	0692      	lsls	r2, r2, #26
 8005cf0:	d42e      	bmi.n	8005d50 <_printf_common+0xc0>
 8005cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	47c0      	blx	r8
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d021      	beq.n	8005d44 <_printf_common+0xb4>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	68e5      	ldr	r5, [r4, #12]
 8005d04:	f003 0306 	and.w	r3, r3, #6
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	bf18      	it	ne
 8005d0c:	2500      	movne	r5, #0
 8005d0e:	f8d9 2000 	ldr.w	r2, [r9]
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	bf08      	it	eq
 8005d18:	1aad      	subeq	r5, r5, r2
 8005d1a:	68a3      	ldr	r3, [r4, #8]
 8005d1c:	6922      	ldr	r2, [r4, #16]
 8005d1e:	bf08      	it	eq
 8005d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bfc4      	itt	gt
 8005d28:	1a9b      	subgt	r3, r3, r2
 8005d2a:	18ed      	addgt	r5, r5, r3
 8005d2c:	341a      	adds	r4, #26
 8005d2e:	454d      	cmp	r5, r9
 8005d30:	d11a      	bne.n	8005d68 <_printf_common+0xd8>
 8005d32:	2000      	movs	r0, #0
 8005d34:	e008      	b.n	8005d48 <_printf_common+0xb8>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4652      	mov	r2, sl
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	47c0      	blx	r8
 8005d40:	3001      	adds	r0, #1
 8005d42:	d103      	bne.n	8005d4c <_printf_common+0xbc>
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4c:	3501      	adds	r5, #1
 8005d4e:	e7c2      	b.n	8005cd6 <_printf_common+0x46>
 8005d50:	2030      	movs	r0, #48	; 0x30
 8005d52:	18e1      	adds	r1, r4, r3
 8005d54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d5e:	4422      	add	r2, r4
 8005d60:	3302      	adds	r3, #2
 8005d62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d66:	e7c4      	b.n	8005cf2 <_printf_common+0x62>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	47c0      	blx	r8
 8005d72:	3001      	adds	r0, #1
 8005d74:	d0e6      	beq.n	8005d44 <_printf_common+0xb4>
 8005d76:	f109 0901 	add.w	r9, r9, #1
 8005d7a:	e7d8      	b.n	8005d2e <_printf_common+0x9e>

08005d7c <_printf_i>:
 8005d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d84:	460c      	mov	r4, r1
 8005d86:	7e09      	ldrb	r1, [r1, #24]
 8005d88:	b085      	sub	sp, #20
 8005d8a:	296e      	cmp	r1, #110	; 0x6e
 8005d8c:	4617      	mov	r7, r2
 8005d8e:	4606      	mov	r6, r0
 8005d90:	4698      	mov	r8, r3
 8005d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d94:	f000 80b3 	beq.w	8005efe <_printf_i+0x182>
 8005d98:	d822      	bhi.n	8005de0 <_printf_i+0x64>
 8005d9a:	2963      	cmp	r1, #99	; 0x63
 8005d9c:	d036      	beq.n	8005e0c <_printf_i+0x90>
 8005d9e:	d80a      	bhi.n	8005db6 <_printf_i+0x3a>
 8005da0:	2900      	cmp	r1, #0
 8005da2:	f000 80b9 	beq.w	8005f18 <_printf_i+0x19c>
 8005da6:	2958      	cmp	r1, #88	; 0x58
 8005da8:	f000 8083 	beq.w	8005eb2 <_printf_i+0x136>
 8005dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005db4:	e032      	b.n	8005e1c <_printf_i+0xa0>
 8005db6:	2964      	cmp	r1, #100	; 0x64
 8005db8:	d001      	beq.n	8005dbe <_printf_i+0x42>
 8005dba:	2969      	cmp	r1, #105	; 0x69
 8005dbc:	d1f6      	bne.n	8005dac <_printf_i+0x30>
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	6813      	ldr	r3, [r2, #0]
 8005dc2:	0605      	lsls	r5, r0, #24
 8005dc4:	f103 0104 	add.w	r1, r3, #4
 8005dc8:	d52a      	bpl.n	8005e20 <_printf_i+0xa4>
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da03      	bge.n	8005dda <_printf_i+0x5e>
 8005dd2:	222d      	movs	r2, #45	; 0x2d
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005dda:	486f      	ldr	r0, [pc, #444]	; (8005f98 <_printf_i+0x21c>)
 8005ddc:	220a      	movs	r2, #10
 8005dde:	e039      	b.n	8005e54 <_printf_i+0xd8>
 8005de0:	2973      	cmp	r1, #115	; 0x73
 8005de2:	f000 809d 	beq.w	8005f20 <_printf_i+0x1a4>
 8005de6:	d808      	bhi.n	8005dfa <_printf_i+0x7e>
 8005de8:	296f      	cmp	r1, #111	; 0x6f
 8005dea:	d020      	beq.n	8005e2e <_printf_i+0xb2>
 8005dec:	2970      	cmp	r1, #112	; 0x70
 8005dee:	d1dd      	bne.n	8005dac <_printf_i+0x30>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	f043 0320 	orr.w	r3, r3, #32
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	e003      	b.n	8005e02 <_printf_i+0x86>
 8005dfa:	2975      	cmp	r1, #117	; 0x75
 8005dfc:	d017      	beq.n	8005e2e <_printf_i+0xb2>
 8005dfe:	2978      	cmp	r1, #120	; 0x78
 8005e00:	d1d4      	bne.n	8005dac <_printf_i+0x30>
 8005e02:	2378      	movs	r3, #120	; 0x78
 8005e04:	4865      	ldr	r0, [pc, #404]	; (8005f9c <_printf_i+0x220>)
 8005e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e0a:	e055      	b.n	8005eb8 <_printf_i+0x13c>
 8005e0c:	6813      	ldr	r3, [r2, #0]
 8005e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e12:	1d19      	adds	r1, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6011      	str	r1, [r2, #0]
 8005e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e08c      	b.n	8005f3a <_printf_i+0x1be>
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e26:	6011      	str	r1, [r2, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	b21b      	sxthne	r3, r3
 8005e2c:	e7cf      	b.n	8005dce <_printf_i+0x52>
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	6825      	ldr	r5, [r4, #0]
 8005e32:	1d18      	adds	r0, r3, #4
 8005e34:	6010      	str	r0, [r2, #0]
 8005e36:	0628      	lsls	r0, r5, #24
 8005e38:	d501      	bpl.n	8005e3e <_printf_i+0xc2>
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	e002      	b.n	8005e44 <_printf_i+0xc8>
 8005e3e:	0668      	lsls	r0, r5, #25
 8005e40:	d5fb      	bpl.n	8005e3a <_printf_i+0xbe>
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	296f      	cmp	r1, #111	; 0x6f
 8005e46:	bf14      	ite	ne
 8005e48:	220a      	movne	r2, #10
 8005e4a:	2208      	moveq	r2, #8
 8005e4c:	4852      	ldr	r0, [pc, #328]	; (8005f98 <_printf_i+0x21c>)
 8005e4e:	2100      	movs	r1, #0
 8005e50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e54:	6865      	ldr	r5, [r4, #4]
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	f2c0 8095 	blt.w	8005f88 <_printf_i+0x20c>
 8005e5e:	6821      	ldr	r1, [r4, #0]
 8005e60:	f021 0104 	bic.w	r1, r1, #4
 8005e64:	6021      	str	r1, [r4, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d13d      	bne.n	8005ee6 <_printf_i+0x16a>
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	f040 808e 	bne.w	8005f8c <_printf_i+0x210>
 8005e70:	4665      	mov	r5, ip
 8005e72:	2a08      	cmp	r2, #8
 8005e74:	d10b      	bne.n	8005e8e <_printf_i+0x112>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	07db      	lsls	r3, r3, #31
 8005e7a:	d508      	bpl.n	8005e8e <_printf_i+0x112>
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	bfde      	ittt	le
 8005e84:	2330      	movle	r3, #48	; 0x30
 8005e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e8a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e8e:	ebac 0305 	sub.w	r3, ip, r5
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	f8cd 8000 	str.w	r8, [sp]
 8005e98:	463b      	mov	r3, r7
 8005e9a:	aa03      	add	r2, sp, #12
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f7ff fef6 	bl	8005c90 <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d14d      	bne.n	8005f44 <_printf_i+0x1c8>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eac:	b005      	add	sp, #20
 8005eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	4839      	ldr	r0, [pc, #228]	; (8005f98 <_printf_i+0x21c>)
 8005eb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	6821      	ldr	r1, [r4, #0]
 8005ebc:	1d1d      	adds	r5, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6015      	str	r5, [r2, #0]
 8005ec2:	060a      	lsls	r2, r1, #24
 8005ec4:	d50b      	bpl.n	8005ede <_printf_i+0x162>
 8005ec6:	07ca      	lsls	r2, r1, #31
 8005ec8:	bf44      	itt	mi
 8005eca:	f041 0120 	orrmi.w	r1, r1, #32
 8005ece:	6021      	strmi	r1, [r4, #0]
 8005ed0:	b91b      	cbnz	r3, 8005eda <_printf_i+0x15e>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	f022 0220 	bic.w	r2, r2, #32
 8005ed8:	6022      	str	r2, [r4, #0]
 8005eda:	2210      	movs	r2, #16
 8005edc:	e7b7      	b.n	8005e4e <_printf_i+0xd2>
 8005ede:	064d      	lsls	r5, r1, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b29b      	uxthmi	r3, r3
 8005ee4:	e7ef      	b.n	8005ec6 <_printf_i+0x14a>
 8005ee6:	4665      	mov	r5, ip
 8005ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eec:	fb02 3311 	mls	r3, r2, r1, r3
 8005ef0:	5cc3      	ldrb	r3, [r0, r3]
 8005ef2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	d1f5      	bne.n	8005ee8 <_printf_i+0x16c>
 8005efc:	e7b9      	b.n	8005e72 <_printf_i+0xf6>
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	6825      	ldr	r5, [r4, #0]
 8005f02:	1d18      	adds	r0, r3, #4
 8005f04:	6961      	ldr	r1, [r4, #20]
 8005f06:	6010      	str	r0, [r2, #0]
 8005f08:	0628      	lsls	r0, r5, #24
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	d501      	bpl.n	8005f12 <_printf_i+0x196>
 8005f0e:	6019      	str	r1, [r3, #0]
 8005f10:	e002      	b.n	8005f18 <_printf_i+0x19c>
 8005f12:	066a      	lsls	r2, r5, #25
 8005f14:	d5fb      	bpl.n	8005f0e <_printf_i+0x192>
 8005f16:	8019      	strh	r1, [r3, #0]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4665      	mov	r5, ip
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	e7b9      	b.n	8005e94 <_printf_i+0x118>
 8005f20:	6813      	ldr	r3, [r2, #0]
 8005f22:	1d19      	adds	r1, r3, #4
 8005f24:	6011      	str	r1, [r2, #0]
 8005f26:	681d      	ldr	r5, [r3, #0]
 8005f28:	6862      	ldr	r2, [r4, #4]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f002 fb1b 	bl	8008568 <memchr>
 8005f32:	b108      	cbz	r0, 8005f38 <_printf_i+0x1bc>
 8005f34:	1b40      	subs	r0, r0, r5
 8005f36:	6060      	str	r0, [r4, #4]
 8005f38:	6863      	ldr	r3, [r4, #4]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f42:	e7a7      	b.n	8005e94 <_printf_i+0x118>
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	462a      	mov	r2, r5
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	47c0      	blx	r8
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d0aa      	beq.n	8005ea8 <_printf_i+0x12c>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	079b      	lsls	r3, r3, #30
 8005f56:	d413      	bmi.n	8005f80 <_printf_i+0x204>
 8005f58:	68e0      	ldr	r0, [r4, #12]
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	4298      	cmp	r0, r3
 8005f5e:	bfb8      	it	lt
 8005f60:	4618      	movlt	r0, r3
 8005f62:	e7a3      	b.n	8005eac <_printf_i+0x130>
 8005f64:	2301      	movs	r3, #1
 8005f66:	464a      	mov	r2, r9
 8005f68:	4639      	mov	r1, r7
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	47c0      	blx	r8
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d09a      	beq.n	8005ea8 <_printf_i+0x12c>
 8005f72:	3501      	adds	r5, #1
 8005f74:	68e3      	ldr	r3, [r4, #12]
 8005f76:	9a03      	ldr	r2, [sp, #12]
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	42ab      	cmp	r3, r5
 8005f7c:	dcf2      	bgt.n	8005f64 <_printf_i+0x1e8>
 8005f7e:	e7eb      	b.n	8005f58 <_printf_i+0x1dc>
 8005f80:	2500      	movs	r5, #0
 8005f82:	f104 0919 	add.w	r9, r4, #25
 8005f86:	e7f5      	b.n	8005f74 <_printf_i+0x1f8>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ac      	bne.n	8005ee6 <_printf_i+0x16a>
 8005f8c:	7803      	ldrb	r3, [r0, #0]
 8005f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f96:	e76c      	b.n	8005e72 <_printf_i+0xf6>
 8005f98:	0800951a 	.word	0x0800951a
 8005f9c:	0800952b 	.word	0x0800952b

08005fa0 <iprintf>:
 8005fa0:	b40f      	push	{r0, r1, r2, r3}
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <iprintf+0x2c>)
 8005fa4:	b513      	push	{r0, r1, r4, lr}
 8005fa6:	681c      	ldr	r4, [r3, #0]
 8005fa8:	b124      	cbz	r4, 8005fb4 <iprintf+0x14>
 8005faa:	69a3      	ldr	r3, [r4, #24]
 8005fac:	b913      	cbnz	r3, 8005fb4 <iprintf+0x14>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f001 fe9a 	bl	8007ce8 <__sinit>
 8005fb4:	ab05      	add	r3, sp, #20
 8005fb6:	9a04      	ldr	r2, [sp, #16]
 8005fb8:	68a1      	ldr	r1, [r4, #8]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	f002 ffc1 	bl	8008f44 <_vfiprintf_r>
 8005fc2:	b002      	add	sp, #8
 8005fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc8:	b004      	add	sp, #16
 8005fca:	4770      	bx	lr
 8005fcc:	20000060 	.word	0x20000060

08005fd0 <_puts_r>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	460e      	mov	r6, r1
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	b118      	cbz	r0, 8005fe0 <_puts_r+0x10>
 8005fd8:	6983      	ldr	r3, [r0, #24]
 8005fda:	b90b      	cbnz	r3, 8005fe0 <_puts_r+0x10>
 8005fdc:	f001 fe84 	bl	8007ce8 <__sinit>
 8005fe0:	69ab      	ldr	r3, [r5, #24]
 8005fe2:	68ac      	ldr	r4, [r5, #8]
 8005fe4:	b913      	cbnz	r3, 8005fec <_puts_r+0x1c>
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f001 fe7e 	bl	8007ce8 <__sinit>
 8005fec:	4b23      	ldr	r3, [pc, #140]	; (800607c <_puts_r+0xac>)
 8005fee:	429c      	cmp	r4, r3
 8005ff0:	d117      	bne.n	8006022 <_puts_r+0x52>
 8005ff2:	686c      	ldr	r4, [r5, #4]
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	071b      	lsls	r3, r3, #28
 8005ff8:	d51d      	bpl.n	8006036 <_puts_r+0x66>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	b1db      	cbz	r3, 8006036 <_puts_r+0x66>
 8005ffe:	3e01      	subs	r6, #1
 8006000:	68a3      	ldr	r3, [r4, #8]
 8006002:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006006:	3b01      	subs	r3, #1
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	b9e9      	cbnz	r1, 8006048 <_puts_r+0x78>
 800600c:	2b00      	cmp	r3, #0
 800600e:	da2e      	bge.n	800606e <_puts_r+0x9e>
 8006010:	4622      	mov	r2, r4
 8006012:	210a      	movs	r1, #10
 8006014:	4628      	mov	r0, r5
 8006016:	f000 fe75 	bl	8006d04 <__swbuf_r>
 800601a:	3001      	adds	r0, #1
 800601c:	d011      	beq.n	8006042 <_puts_r+0x72>
 800601e:	200a      	movs	r0, #10
 8006020:	e011      	b.n	8006046 <_puts_r+0x76>
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <_puts_r+0xb0>)
 8006024:	429c      	cmp	r4, r3
 8006026:	d101      	bne.n	800602c <_puts_r+0x5c>
 8006028:	68ac      	ldr	r4, [r5, #8]
 800602a:	e7e3      	b.n	8005ff4 <_puts_r+0x24>
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <_puts_r+0xb4>)
 800602e:	429c      	cmp	r4, r3
 8006030:	bf08      	it	eq
 8006032:	68ec      	ldreq	r4, [r5, #12]
 8006034:	e7de      	b.n	8005ff4 <_puts_r+0x24>
 8006036:	4621      	mov	r1, r4
 8006038:	4628      	mov	r0, r5
 800603a:	f000 feb5 	bl	8006da8 <__swsetup_r>
 800603e:	2800      	cmp	r0, #0
 8006040:	d0dd      	beq.n	8005ffe <_puts_r+0x2e>
 8006042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	2b00      	cmp	r3, #0
 800604a:	da04      	bge.n	8006056 <_puts_r+0x86>
 800604c:	69a2      	ldr	r2, [r4, #24]
 800604e:	429a      	cmp	r2, r3
 8006050:	dc06      	bgt.n	8006060 <_puts_r+0x90>
 8006052:	290a      	cmp	r1, #10
 8006054:	d004      	beq.n	8006060 <_puts_r+0x90>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	6022      	str	r2, [r4, #0]
 800605c:	7019      	strb	r1, [r3, #0]
 800605e:	e7cf      	b.n	8006000 <_puts_r+0x30>
 8006060:	4622      	mov	r2, r4
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fe4e 	bl	8006d04 <__swbuf_r>
 8006068:	3001      	adds	r0, #1
 800606a:	d1c9      	bne.n	8006000 <_puts_r+0x30>
 800606c:	e7e9      	b.n	8006042 <_puts_r+0x72>
 800606e:	200a      	movs	r0, #10
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	6022      	str	r2, [r4, #0]
 8006076:	7018      	strb	r0, [r3, #0]
 8006078:	e7e5      	b.n	8006046 <_puts_r+0x76>
 800607a:	bf00      	nop
 800607c:	080095c0 	.word	0x080095c0
 8006080:	080095e0 	.word	0x080095e0
 8006084:	080095a0 	.word	0x080095a0

08006088 <puts>:
 8006088:	4b02      	ldr	r3, [pc, #8]	; (8006094 <puts+0xc>)
 800608a:	4601      	mov	r1, r0
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f7ff bf9f 	b.w	8005fd0 <_puts_r>
 8006092:	bf00      	nop
 8006094:	20000060 	.word	0x20000060

08006098 <sulp>:
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	460f      	mov	r7, r1
 800609e:	4690      	mov	r8, r2
 80060a0:	f002 fd46 	bl	8008b30 <__ulp>
 80060a4:	4604      	mov	r4, r0
 80060a6:	460d      	mov	r5, r1
 80060a8:	f1b8 0f00 	cmp.w	r8, #0
 80060ac:	d011      	beq.n	80060d2 <sulp+0x3a>
 80060ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80060b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dd0b      	ble.n	80060d2 <sulp+0x3a>
 80060ba:	2400      	movs	r4, #0
 80060bc:	051b      	lsls	r3, r3, #20
 80060be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80060c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80060c6:	4622      	mov	r2, r4
 80060c8:	462b      	mov	r3, r5
 80060ca:	f7fa fa05 	bl	80004d8 <__aeabi_dmul>
 80060ce:	4604      	mov	r4, r0
 80060d0:	460d      	mov	r5, r1
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060da:	0000      	movs	r0, r0
 80060dc:	0000      	movs	r0, r0
	...

080060e0 <_strtod_l>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	461f      	mov	r7, r3
 80060e6:	2300      	movs	r3, #0
 80060e8:	b0a1      	sub	sp, #132	; 0x84
 80060ea:	4683      	mov	fp, r0
 80060ec:	4638      	mov	r0, r7
 80060ee:	460e      	mov	r6, r1
 80060f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80060f2:	931c      	str	r3, [sp, #112]	; 0x70
 80060f4:	f002 f9aa 	bl	800844c <__localeconv_l>
 80060f8:	4680      	mov	r8, r0
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	f7fa f828 	bl	8000150 <strlen>
 8006100:	f04f 0900 	mov.w	r9, #0
 8006104:	4604      	mov	r4, r0
 8006106:	f04f 0a00 	mov.w	sl, #0
 800610a:	961b      	str	r6, [sp, #108]	; 0x6c
 800610c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800610e:	781a      	ldrb	r2, [r3, #0]
 8006110:	2a0d      	cmp	r2, #13
 8006112:	d832      	bhi.n	800617a <_strtod_l+0x9a>
 8006114:	2a09      	cmp	r2, #9
 8006116:	d236      	bcs.n	8006186 <_strtod_l+0xa6>
 8006118:	2a00      	cmp	r2, #0
 800611a:	d03e      	beq.n	800619a <_strtod_l+0xba>
 800611c:	2300      	movs	r3, #0
 800611e:	930d      	str	r3, [sp, #52]	; 0x34
 8006120:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006122:	782b      	ldrb	r3, [r5, #0]
 8006124:	2b30      	cmp	r3, #48	; 0x30
 8006126:	f040 80ac 	bne.w	8006282 <_strtod_l+0x1a2>
 800612a:	786b      	ldrb	r3, [r5, #1]
 800612c:	2b58      	cmp	r3, #88	; 0x58
 800612e:	d001      	beq.n	8006134 <_strtod_l+0x54>
 8006130:	2b78      	cmp	r3, #120	; 0x78
 8006132:	d167      	bne.n	8006204 <_strtod_l+0x124>
 8006134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006136:	9702      	str	r7, [sp, #8]
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	ab1c      	add	r3, sp, #112	; 0x70
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	4a89      	ldr	r2, [pc, #548]	; (8006364 <_strtod_l+0x284>)
 8006140:	ab1d      	add	r3, sp, #116	; 0x74
 8006142:	a91b      	add	r1, sp, #108	; 0x6c
 8006144:	4658      	mov	r0, fp
 8006146:	f001 fea9 	bl	8007e9c <__gethex>
 800614a:	f010 0407 	ands.w	r4, r0, #7
 800614e:	4606      	mov	r6, r0
 8006150:	d005      	beq.n	800615e <_strtod_l+0x7e>
 8006152:	2c06      	cmp	r4, #6
 8006154:	d12b      	bne.n	80061ae <_strtod_l+0xce>
 8006156:	2300      	movs	r3, #0
 8006158:	3501      	adds	r5, #1
 800615a:	951b      	str	r5, [sp, #108]	; 0x6c
 800615c:	930d      	str	r3, [sp, #52]	; 0x34
 800615e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 85a6 	bne.w	8006cb2 <_strtod_l+0xbd2>
 8006166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006168:	b1e3      	cbz	r3, 80061a4 <_strtod_l+0xc4>
 800616a:	464a      	mov	r2, r9
 800616c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	b021      	add	sp, #132	; 0x84
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	2a2b      	cmp	r2, #43	; 0x2b
 800617c:	d015      	beq.n	80061aa <_strtod_l+0xca>
 800617e:	2a2d      	cmp	r2, #45	; 0x2d
 8006180:	d004      	beq.n	800618c <_strtod_l+0xac>
 8006182:	2a20      	cmp	r2, #32
 8006184:	d1ca      	bne.n	800611c <_strtod_l+0x3c>
 8006186:	3301      	adds	r3, #1
 8006188:	931b      	str	r3, [sp, #108]	; 0x6c
 800618a:	e7bf      	b.n	800610c <_strtod_l+0x2c>
 800618c:	2201      	movs	r2, #1
 800618e:	920d      	str	r2, [sp, #52]	; 0x34
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	921b      	str	r2, [sp, #108]	; 0x6c
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1c2      	bne.n	8006120 <_strtod_l+0x40>
 800619a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800619c:	961b      	str	r6, [sp, #108]	; 0x6c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f040 8585 	bne.w	8006cae <_strtod_l+0xbce>
 80061a4:	464a      	mov	r2, r9
 80061a6:	4653      	mov	r3, sl
 80061a8:	e7e2      	b.n	8006170 <_strtod_l+0x90>
 80061aa:	2200      	movs	r2, #0
 80061ac:	e7ef      	b.n	800618e <_strtod_l+0xae>
 80061ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80061b0:	b13a      	cbz	r2, 80061c2 <_strtod_l+0xe2>
 80061b2:	2135      	movs	r1, #53	; 0x35
 80061b4:	a81e      	add	r0, sp, #120	; 0x78
 80061b6:	f002 fdae 	bl	8008d16 <__copybits>
 80061ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061bc:	4658      	mov	r0, fp
 80061be:	f002 fa20 	bl	8008602 <_Bfree>
 80061c2:	3c01      	subs	r4, #1
 80061c4:	2c04      	cmp	r4, #4
 80061c6:	d806      	bhi.n	80061d6 <_strtod_l+0xf6>
 80061c8:	e8df f004 	tbb	[pc, r4]
 80061cc:	1714030a 	.word	0x1714030a
 80061d0:	0a          	.byte	0x0a
 80061d1:	00          	.byte	0x00
 80061d2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80061d6:	0731      	lsls	r1, r6, #28
 80061d8:	d5c1      	bpl.n	800615e <_strtod_l+0x7e>
 80061da:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80061de:	e7be      	b.n	800615e <_strtod_l+0x7e>
 80061e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80061e2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80061e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80061ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80061ee:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80061f2:	e7f0      	b.n	80061d6 <_strtod_l+0xf6>
 80061f4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006368 <_strtod_l+0x288>
 80061f8:	e7ed      	b.n	80061d6 <_strtod_l+0xf6>
 80061fa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80061fe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006202:	e7e8      	b.n	80061d6 <_strtod_l+0xf6>
 8006204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	921b      	str	r2, [sp, #108]	; 0x6c
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b30      	cmp	r3, #48	; 0x30
 800620e:	d0f9      	beq.n	8006204 <_strtod_l+0x124>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0a4      	beq.n	800615e <_strtod_l+0x7e>
 8006214:	2301      	movs	r3, #1
 8006216:	2500      	movs	r5, #0
 8006218:	220a      	movs	r2, #10
 800621a:	9307      	str	r3, [sp, #28]
 800621c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800621e:	9506      	str	r5, [sp, #24]
 8006220:	9308      	str	r3, [sp, #32]
 8006222:	9504      	str	r5, [sp, #16]
 8006224:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006226:	7807      	ldrb	r7, [r0, #0]
 8006228:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800622c:	b2d9      	uxtb	r1, r3
 800622e:	2909      	cmp	r1, #9
 8006230:	d929      	bls.n	8006286 <_strtod_l+0x1a6>
 8006232:	4622      	mov	r2, r4
 8006234:	f8d8 1000 	ldr.w	r1, [r8]
 8006238:	f002 ffed 	bl	8009216 <strncmp>
 800623c:	2800      	cmp	r0, #0
 800623e:	d031      	beq.n	80062a4 <_strtod_l+0x1c4>
 8006240:	2000      	movs	r0, #0
 8006242:	463b      	mov	r3, r7
 8006244:	4602      	mov	r2, r0
 8006246:	9c04      	ldr	r4, [sp, #16]
 8006248:	9005      	str	r0, [sp, #20]
 800624a:	2b65      	cmp	r3, #101	; 0x65
 800624c:	d001      	beq.n	8006252 <_strtod_l+0x172>
 800624e:	2b45      	cmp	r3, #69	; 0x45
 8006250:	d114      	bne.n	800627c <_strtod_l+0x19c>
 8006252:	b924      	cbnz	r4, 800625e <_strtod_l+0x17e>
 8006254:	b910      	cbnz	r0, 800625c <_strtod_l+0x17c>
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d09e      	beq.n	800619a <_strtod_l+0xba>
 800625c:	2400      	movs	r4, #0
 800625e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006260:	1c73      	adds	r3, r6, #1
 8006262:	931b      	str	r3, [sp, #108]	; 0x6c
 8006264:	7873      	ldrb	r3, [r6, #1]
 8006266:	2b2b      	cmp	r3, #43	; 0x2b
 8006268:	d078      	beq.n	800635c <_strtod_l+0x27c>
 800626a:	2b2d      	cmp	r3, #45	; 0x2d
 800626c:	d070      	beq.n	8006350 <_strtod_l+0x270>
 800626e:	f04f 0c00 	mov.w	ip, #0
 8006272:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006276:	2f09      	cmp	r7, #9
 8006278:	d97c      	bls.n	8006374 <_strtod_l+0x294>
 800627a:	961b      	str	r6, [sp, #108]	; 0x6c
 800627c:	f04f 0e00 	mov.w	lr, #0
 8006280:	e09a      	b.n	80063b8 <_strtod_l+0x2d8>
 8006282:	2300      	movs	r3, #0
 8006284:	e7c7      	b.n	8006216 <_strtod_l+0x136>
 8006286:	9904      	ldr	r1, [sp, #16]
 8006288:	3001      	adds	r0, #1
 800628a:	2908      	cmp	r1, #8
 800628c:	bfd7      	itett	le
 800628e:	9906      	ldrle	r1, [sp, #24]
 8006290:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006294:	fb02 3301 	mlale	r3, r2, r1, r3
 8006298:	9306      	strle	r3, [sp, #24]
 800629a:	9b04      	ldr	r3, [sp, #16]
 800629c:	901b      	str	r0, [sp, #108]	; 0x6c
 800629e:	3301      	adds	r3, #1
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	e7bf      	b.n	8006224 <_strtod_l+0x144>
 80062a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062a6:	191a      	adds	r2, r3, r4
 80062a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80062aa:	9a04      	ldr	r2, [sp, #16]
 80062ac:	5d1b      	ldrb	r3, [r3, r4]
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d037      	beq.n	8006322 <_strtod_l+0x242>
 80062b2:	4602      	mov	r2, r0
 80062b4:	9c04      	ldr	r4, [sp, #16]
 80062b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80062ba:	2909      	cmp	r1, #9
 80062bc:	d913      	bls.n	80062e6 <_strtod_l+0x206>
 80062be:	2101      	movs	r1, #1
 80062c0:	9105      	str	r1, [sp, #20]
 80062c2:	e7c2      	b.n	800624a <_strtod_l+0x16a>
 80062c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062c6:	3001      	adds	r0, #1
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b30      	cmp	r3, #48	; 0x30
 80062d0:	d0f8      	beq.n	80062c4 <_strtod_l+0x1e4>
 80062d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80062d6:	2a08      	cmp	r2, #8
 80062d8:	f200 84f0 	bhi.w	8006cbc <_strtod_l+0xbdc>
 80062dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80062de:	9208      	str	r2, [sp, #32]
 80062e0:	4602      	mov	r2, r0
 80062e2:	2000      	movs	r0, #0
 80062e4:	4604      	mov	r4, r0
 80062e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80062ea:	f100 0101 	add.w	r1, r0, #1
 80062ee:	d012      	beq.n	8006316 <_strtod_l+0x236>
 80062f0:	440a      	add	r2, r1
 80062f2:	270a      	movs	r7, #10
 80062f4:	4621      	mov	r1, r4
 80062f6:	eb00 0c04 	add.w	ip, r0, r4
 80062fa:	458c      	cmp	ip, r1
 80062fc:	d113      	bne.n	8006326 <_strtod_l+0x246>
 80062fe:	1821      	adds	r1, r4, r0
 8006300:	2908      	cmp	r1, #8
 8006302:	f104 0401 	add.w	r4, r4, #1
 8006306:	4404      	add	r4, r0
 8006308:	dc19      	bgt.n	800633e <_strtod_l+0x25e>
 800630a:	210a      	movs	r1, #10
 800630c:	9b06      	ldr	r3, [sp, #24]
 800630e:	fb01 e303 	mla	r3, r1, r3, lr
 8006312:	9306      	str	r3, [sp, #24]
 8006314:	2100      	movs	r1, #0
 8006316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006318:	1c58      	adds	r0, r3, #1
 800631a:	901b      	str	r0, [sp, #108]	; 0x6c
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	4608      	mov	r0, r1
 8006320:	e7c9      	b.n	80062b6 <_strtod_l+0x1d6>
 8006322:	9804      	ldr	r0, [sp, #16]
 8006324:	e7d3      	b.n	80062ce <_strtod_l+0x1ee>
 8006326:	2908      	cmp	r1, #8
 8006328:	f101 0101 	add.w	r1, r1, #1
 800632c:	dc03      	bgt.n	8006336 <_strtod_l+0x256>
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	437b      	muls	r3, r7
 8006332:	9306      	str	r3, [sp, #24]
 8006334:	e7e1      	b.n	80062fa <_strtod_l+0x21a>
 8006336:	2910      	cmp	r1, #16
 8006338:	bfd8      	it	le
 800633a:	437d      	mulle	r5, r7
 800633c:	e7dd      	b.n	80062fa <_strtod_l+0x21a>
 800633e:	2c10      	cmp	r4, #16
 8006340:	bfdc      	itt	le
 8006342:	210a      	movle	r1, #10
 8006344:	fb01 e505 	mlale	r5, r1, r5, lr
 8006348:	e7e4      	b.n	8006314 <_strtod_l+0x234>
 800634a:	2301      	movs	r3, #1
 800634c:	9305      	str	r3, [sp, #20]
 800634e:	e781      	b.n	8006254 <_strtod_l+0x174>
 8006350:	f04f 0c01 	mov.w	ip, #1
 8006354:	1cb3      	adds	r3, r6, #2
 8006356:	931b      	str	r3, [sp, #108]	; 0x6c
 8006358:	78b3      	ldrb	r3, [r6, #2]
 800635a:	e78a      	b.n	8006272 <_strtod_l+0x192>
 800635c:	f04f 0c00 	mov.w	ip, #0
 8006360:	e7f8      	b.n	8006354 <_strtod_l+0x274>
 8006362:	bf00      	nop
 8006364:	0800953c 	.word	0x0800953c
 8006368:	7ff00000 	.word	0x7ff00000
 800636c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800636e:	1c5f      	adds	r7, r3, #1
 8006370:	971b      	str	r7, [sp, #108]	; 0x6c
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b30      	cmp	r3, #48	; 0x30
 8006376:	d0f9      	beq.n	800636c <_strtod_l+0x28c>
 8006378:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800637c:	2f08      	cmp	r7, #8
 800637e:	f63f af7d 	bhi.w	800627c <_strtod_l+0x19c>
 8006382:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006386:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006388:	9309      	str	r3, [sp, #36]	; 0x24
 800638a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800638c:	1c5f      	adds	r7, r3, #1
 800638e:	971b      	str	r7, [sp, #108]	; 0x6c
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006396:	f1b8 0f09 	cmp.w	r8, #9
 800639a:	d937      	bls.n	800640c <_strtod_l+0x32c>
 800639c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800639e:	1a7f      	subs	r7, r7, r1
 80063a0:	2f08      	cmp	r7, #8
 80063a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80063a6:	dc37      	bgt.n	8006418 <_strtod_l+0x338>
 80063a8:	45be      	cmp	lr, r7
 80063aa:	bfa8      	it	ge
 80063ac:	46be      	movge	lr, r7
 80063ae:	f1bc 0f00 	cmp.w	ip, #0
 80063b2:	d001      	beq.n	80063b8 <_strtod_l+0x2d8>
 80063b4:	f1ce 0e00 	rsb	lr, lr, #0
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	d151      	bne.n	8006460 <_strtod_l+0x380>
 80063bc:	2800      	cmp	r0, #0
 80063be:	f47f aece 	bne.w	800615e <_strtod_l+0x7e>
 80063c2:	9a07      	ldr	r2, [sp, #28]
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	f47f aeca 	bne.w	800615e <_strtod_l+0x7e>
 80063ca:	9a05      	ldr	r2, [sp, #20]
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	f47f aee4 	bne.w	800619a <_strtod_l+0xba>
 80063d2:	2b4e      	cmp	r3, #78	; 0x4e
 80063d4:	d027      	beq.n	8006426 <_strtod_l+0x346>
 80063d6:	dc21      	bgt.n	800641c <_strtod_l+0x33c>
 80063d8:	2b49      	cmp	r3, #73	; 0x49
 80063da:	f47f aede 	bne.w	800619a <_strtod_l+0xba>
 80063de:	49a4      	ldr	r1, [pc, #656]	; (8006670 <_strtod_l+0x590>)
 80063e0:	a81b      	add	r0, sp, #108	; 0x6c
 80063e2:	f001 ff8f 	bl	8008304 <__match>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f43f aed7 	beq.w	800619a <_strtod_l+0xba>
 80063ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ee:	49a1      	ldr	r1, [pc, #644]	; (8006674 <_strtod_l+0x594>)
 80063f0:	3b01      	subs	r3, #1
 80063f2:	a81b      	add	r0, sp, #108	; 0x6c
 80063f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80063f6:	f001 ff85 	bl	8008304 <__match>
 80063fa:	b910      	cbnz	r0, 8006402 <_strtod_l+0x322>
 80063fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063fe:	3301      	adds	r3, #1
 8006400:	931b      	str	r3, [sp, #108]	; 0x6c
 8006402:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006688 <_strtod_l+0x5a8>
 8006406:	f04f 0900 	mov.w	r9, #0
 800640a:	e6a8      	b.n	800615e <_strtod_l+0x7e>
 800640c:	210a      	movs	r1, #10
 800640e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006412:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006416:	e7b8      	b.n	800638a <_strtod_l+0x2aa>
 8006418:	46be      	mov	lr, r7
 800641a:	e7c8      	b.n	80063ae <_strtod_l+0x2ce>
 800641c:	2b69      	cmp	r3, #105	; 0x69
 800641e:	d0de      	beq.n	80063de <_strtod_l+0x2fe>
 8006420:	2b6e      	cmp	r3, #110	; 0x6e
 8006422:	f47f aeba 	bne.w	800619a <_strtod_l+0xba>
 8006426:	4994      	ldr	r1, [pc, #592]	; (8006678 <_strtod_l+0x598>)
 8006428:	a81b      	add	r0, sp, #108	; 0x6c
 800642a:	f001 ff6b 	bl	8008304 <__match>
 800642e:	2800      	cmp	r0, #0
 8006430:	f43f aeb3 	beq.w	800619a <_strtod_l+0xba>
 8006434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b28      	cmp	r3, #40	; 0x28
 800643a:	d10e      	bne.n	800645a <_strtod_l+0x37a>
 800643c:	aa1e      	add	r2, sp, #120	; 0x78
 800643e:	498f      	ldr	r1, [pc, #572]	; (800667c <_strtod_l+0x59c>)
 8006440:	a81b      	add	r0, sp, #108	; 0x6c
 8006442:	f001 ff73 	bl	800832c <__hexnan>
 8006446:	2805      	cmp	r0, #5
 8006448:	d107      	bne.n	800645a <_strtod_l+0x37a>
 800644a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800644c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006450:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8006454:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006458:	e681      	b.n	800615e <_strtod_l+0x7e>
 800645a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006690 <_strtod_l+0x5b0>
 800645e:	e7d2      	b.n	8006406 <_strtod_l+0x326>
 8006460:	ebae 0302 	sub.w	r3, lr, r2
 8006464:	9307      	str	r3, [sp, #28]
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	9806      	ldr	r0, [sp, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf08      	it	eq
 800646e:	4623      	moveq	r3, r4
 8006470:	2c10      	cmp	r4, #16
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	46a0      	mov	r8, r4
 8006476:	bfa8      	it	ge
 8006478:	f04f 0810 	movge.w	r8, #16
 800647c:	f7f9 ffb2 	bl	80003e4 <__aeabi_ui2d>
 8006480:	2c09      	cmp	r4, #9
 8006482:	4681      	mov	r9, r0
 8006484:	468a      	mov	sl, r1
 8006486:	dc13      	bgt.n	80064b0 <_strtod_l+0x3d0>
 8006488:	9b07      	ldr	r3, [sp, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f43f ae67 	beq.w	800615e <_strtod_l+0x7e>
 8006490:	9b07      	ldr	r3, [sp, #28]
 8006492:	dd7e      	ble.n	8006592 <_strtod_l+0x4b2>
 8006494:	2b16      	cmp	r3, #22
 8006496:	dc65      	bgt.n	8006564 <_strtod_l+0x484>
 8006498:	4a79      	ldr	r2, [pc, #484]	; (8006680 <_strtod_l+0x5a0>)
 800649a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800649e:	464a      	mov	r2, r9
 80064a0:	e9de 0100 	ldrd	r0, r1, [lr]
 80064a4:	4653      	mov	r3, sl
 80064a6:	f7fa f817 	bl	80004d8 <__aeabi_dmul>
 80064aa:	4681      	mov	r9, r0
 80064ac:	468a      	mov	sl, r1
 80064ae:	e656      	b.n	800615e <_strtod_l+0x7e>
 80064b0:	4b73      	ldr	r3, [pc, #460]	; (8006680 <_strtod_l+0x5a0>)
 80064b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80064b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80064ba:	f7fa f80d 	bl	80004d8 <__aeabi_dmul>
 80064be:	4606      	mov	r6, r0
 80064c0:	4628      	mov	r0, r5
 80064c2:	460f      	mov	r7, r1
 80064c4:	f7f9 ff8e 	bl	80003e4 <__aeabi_ui2d>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4630      	mov	r0, r6
 80064ce:	4639      	mov	r1, r7
 80064d0:	f7f9 fe4c 	bl	800016c <__adddf3>
 80064d4:	2c0f      	cmp	r4, #15
 80064d6:	4681      	mov	r9, r0
 80064d8:	468a      	mov	sl, r1
 80064da:	ddd5      	ble.n	8006488 <_strtod_l+0x3a8>
 80064dc:	9b07      	ldr	r3, [sp, #28]
 80064de:	eba4 0808 	sub.w	r8, r4, r8
 80064e2:	4498      	add	r8, r3
 80064e4:	f1b8 0f00 	cmp.w	r8, #0
 80064e8:	f340 809a 	ble.w	8006620 <_strtod_l+0x540>
 80064ec:	f018 030f 	ands.w	r3, r8, #15
 80064f0:	d00a      	beq.n	8006508 <_strtod_l+0x428>
 80064f2:	4963      	ldr	r1, [pc, #396]	; (8006680 <_strtod_l+0x5a0>)
 80064f4:	464a      	mov	r2, r9
 80064f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80064fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064fe:	4653      	mov	r3, sl
 8006500:	f7f9 ffea 	bl	80004d8 <__aeabi_dmul>
 8006504:	4681      	mov	r9, r0
 8006506:	468a      	mov	sl, r1
 8006508:	f038 080f 	bics.w	r8, r8, #15
 800650c:	d077      	beq.n	80065fe <_strtod_l+0x51e>
 800650e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006512:	dd4b      	ble.n	80065ac <_strtod_l+0x4cc>
 8006514:	f04f 0800 	mov.w	r8, #0
 8006518:	f8cd 8010 	str.w	r8, [sp, #16]
 800651c:	f8cd 8020 	str.w	r8, [sp, #32]
 8006520:	f8cd 8018 	str.w	r8, [sp, #24]
 8006524:	2322      	movs	r3, #34	; 0x22
 8006526:	f04f 0900 	mov.w	r9, #0
 800652a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006688 <_strtod_l+0x5a8>
 800652e:	f8cb 3000 	str.w	r3, [fp]
 8006532:	9b08      	ldr	r3, [sp, #32]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f43f ae12 	beq.w	800615e <_strtod_l+0x7e>
 800653a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800653c:	4658      	mov	r0, fp
 800653e:	f002 f860 	bl	8008602 <_Bfree>
 8006542:	9906      	ldr	r1, [sp, #24]
 8006544:	4658      	mov	r0, fp
 8006546:	f002 f85c 	bl	8008602 <_Bfree>
 800654a:	9904      	ldr	r1, [sp, #16]
 800654c:	4658      	mov	r0, fp
 800654e:	f002 f858 	bl	8008602 <_Bfree>
 8006552:	9908      	ldr	r1, [sp, #32]
 8006554:	4658      	mov	r0, fp
 8006556:	f002 f854 	bl	8008602 <_Bfree>
 800655a:	4641      	mov	r1, r8
 800655c:	4658      	mov	r0, fp
 800655e:	f002 f850 	bl	8008602 <_Bfree>
 8006562:	e5fc      	b.n	800615e <_strtod_l+0x7e>
 8006564:	9a07      	ldr	r2, [sp, #28]
 8006566:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800656a:	4293      	cmp	r3, r2
 800656c:	dbb6      	blt.n	80064dc <_strtod_l+0x3fc>
 800656e:	4d44      	ldr	r5, [pc, #272]	; (8006680 <_strtod_l+0x5a0>)
 8006570:	f1c4 040f 	rsb	r4, r4, #15
 8006574:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006578:	464a      	mov	r2, r9
 800657a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800657e:	4653      	mov	r3, sl
 8006580:	f7f9 ffaa 	bl	80004d8 <__aeabi_dmul>
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	1b1c      	subs	r4, r3, r4
 8006588:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800658c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006590:	e789      	b.n	80064a6 <_strtod_l+0x3c6>
 8006592:	f113 0f16 	cmn.w	r3, #22
 8006596:	dba1      	blt.n	80064dc <_strtod_l+0x3fc>
 8006598:	4a39      	ldr	r2, [pc, #228]	; (8006680 <_strtod_l+0x5a0>)
 800659a:	4648      	mov	r0, r9
 800659c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80065a0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80065a4:	4651      	mov	r1, sl
 80065a6:	f7fa f8c1 	bl	800072c <__aeabi_ddiv>
 80065aa:	e77e      	b.n	80064aa <_strtod_l+0x3ca>
 80065ac:	2300      	movs	r3, #0
 80065ae:	4648      	mov	r0, r9
 80065b0:	4651      	mov	r1, sl
 80065b2:	461d      	mov	r5, r3
 80065b4:	4e33      	ldr	r6, [pc, #204]	; (8006684 <_strtod_l+0x5a4>)
 80065b6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80065ba:	f1b8 0f01 	cmp.w	r8, #1
 80065be:	dc21      	bgt.n	8006604 <_strtod_l+0x524>
 80065c0:	b10b      	cbz	r3, 80065c6 <_strtod_l+0x4e6>
 80065c2:	4681      	mov	r9, r0
 80065c4:	468a      	mov	sl, r1
 80065c6:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <_strtod_l+0x5a4>)
 80065c8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80065cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80065d0:	464a      	mov	r2, r9
 80065d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80065d6:	4653      	mov	r3, sl
 80065d8:	f7f9 ff7e 	bl	80004d8 <__aeabi_dmul>
 80065dc:	4b2a      	ldr	r3, [pc, #168]	; (8006688 <_strtod_l+0x5a8>)
 80065de:	460a      	mov	r2, r1
 80065e0:	400b      	ands	r3, r1
 80065e2:	492a      	ldr	r1, [pc, #168]	; (800668c <_strtod_l+0x5ac>)
 80065e4:	4681      	mov	r9, r0
 80065e6:	428b      	cmp	r3, r1
 80065e8:	d894      	bhi.n	8006514 <_strtod_l+0x434>
 80065ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80065ee:	428b      	cmp	r3, r1
 80065f0:	bf86      	itte	hi
 80065f2:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80065f6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8006694 <_strtod_l+0x5b4>
 80065fa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80065fe:	2300      	movs	r3, #0
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	e07b      	b.n	80066fc <_strtod_l+0x61c>
 8006604:	f018 0f01 	tst.w	r8, #1
 8006608:	d006      	beq.n	8006618 <_strtod_l+0x538>
 800660a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 ff61 	bl	80004d8 <__aeabi_dmul>
 8006616:	2301      	movs	r3, #1
 8006618:	3501      	adds	r5, #1
 800661a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800661e:	e7cc      	b.n	80065ba <_strtod_l+0x4da>
 8006620:	d0ed      	beq.n	80065fe <_strtod_l+0x51e>
 8006622:	f1c8 0800 	rsb	r8, r8, #0
 8006626:	f018 020f 	ands.w	r2, r8, #15
 800662a:	d00a      	beq.n	8006642 <_strtod_l+0x562>
 800662c:	4b14      	ldr	r3, [pc, #80]	; (8006680 <_strtod_l+0x5a0>)
 800662e:	4648      	mov	r0, r9
 8006630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006634:	4651      	mov	r1, sl
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7fa f877 	bl	800072c <__aeabi_ddiv>
 800663e:	4681      	mov	r9, r0
 8006640:	468a      	mov	sl, r1
 8006642:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006646:	d0da      	beq.n	80065fe <_strtod_l+0x51e>
 8006648:	f1b8 0f1f 	cmp.w	r8, #31
 800664c:	dd24      	ble.n	8006698 <_strtod_l+0x5b8>
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	f8cd 8010 	str.w	r8, [sp, #16]
 8006656:	f8cd 8020 	str.w	r8, [sp, #32]
 800665a:	f8cd 8018 	str.w	r8, [sp, #24]
 800665e:	2322      	movs	r3, #34	; 0x22
 8006660:	f04f 0900 	mov.w	r9, #0
 8006664:	f04f 0a00 	mov.w	sl, #0
 8006668:	f8cb 3000 	str.w	r3, [fp]
 800666c:	e761      	b.n	8006532 <_strtod_l+0x452>
 800666e:	bf00      	nop
 8006670:	0800950d 	.word	0x0800950d
 8006674:	08009593 	.word	0x08009593
 8006678:	08009515 	.word	0x08009515
 800667c:	08009550 	.word	0x08009550
 8006680:	08009638 	.word	0x08009638
 8006684:	08009610 	.word	0x08009610
 8006688:	7ff00000 	.word	0x7ff00000
 800668c:	7ca00000 	.word	0x7ca00000
 8006690:	fff80000 	.word	0xfff80000
 8006694:	7fefffff 	.word	0x7fefffff
 8006698:	f018 0310 	ands.w	r3, r8, #16
 800669c:	bf18      	it	ne
 800669e:	236a      	movne	r3, #106	; 0x6a
 80066a0:	4648      	mov	r0, r9
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	4651      	mov	r1, sl
 80066a6:	2300      	movs	r3, #0
 80066a8:	4da1      	ldr	r5, [pc, #644]	; (8006930 <_strtod_l+0x850>)
 80066aa:	f1b8 0f00 	cmp.w	r8, #0
 80066ae:	f300 8113 	bgt.w	80068d8 <_strtod_l+0x7f8>
 80066b2:	b10b      	cbz	r3, 80066b8 <_strtod_l+0x5d8>
 80066b4:	4681      	mov	r9, r0
 80066b6:	468a      	mov	sl, r1
 80066b8:	9b05      	ldr	r3, [sp, #20]
 80066ba:	b1bb      	cbz	r3, 80066ec <_strtod_l+0x60c>
 80066bc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80066c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	4651      	mov	r1, sl
 80066c8:	dd10      	ble.n	80066ec <_strtod_l+0x60c>
 80066ca:	2b1f      	cmp	r3, #31
 80066cc:	f340 8110 	ble.w	80068f0 <_strtod_l+0x810>
 80066d0:	2b34      	cmp	r3, #52	; 0x34
 80066d2:	bfd8      	it	le
 80066d4:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80066d8:	f04f 0900 	mov.w	r9, #0
 80066dc:	bfcf      	iteee	gt
 80066de:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80066e2:	3b20      	suble	r3, #32
 80066e4:	fa02 f303 	lslle.w	r3, r2, r3
 80066e8:	ea03 0a01 	andle.w	sl, r3, r1
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	4648      	mov	r0, r9
 80066f2:	4651      	mov	r1, sl
 80066f4:	f7fa f958 	bl	80009a8 <__aeabi_dcmpeq>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1a8      	bne.n	800664e <_strtod_l+0x56e>
 80066fc:	9b06      	ldr	r3, [sp, #24]
 80066fe:	9a04      	ldr	r2, [sp, #16]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	9908      	ldr	r1, [sp, #32]
 8006704:	4623      	mov	r3, r4
 8006706:	4658      	mov	r0, fp
 8006708:	f001 ffcd 	bl	80086a6 <__s2b>
 800670c:	9008      	str	r0, [sp, #32]
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f af00 	beq.w	8006514 <_strtod_l+0x434>
 8006714:	9a07      	ldr	r2, [sp, #28]
 8006716:	9b07      	ldr	r3, [sp, #28]
 8006718:	2a00      	cmp	r2, #0
 800671a:	f1c3 0300 	rsb	r3, r3, #0
 800671e:	bfa8      	it	ge
 8006720:	2300      	movge	r3, #0
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	930e      	str	r3, [sp, #56]	; 0x38
 8006728:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800672c:	9316      	str	r3, [sp, #88]	; 0x58
 800672e:	f8cd 8010 	str.w	r8, [sp, #16]
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	4658      	mov	r0, fp
 8006736:	6859      	ldr	r1, [r3, #4]
 8006738:	f001 ff2f 	bl	800859a <_Balloc>
 800673c:	9006      	str	r0, [sp, #24]
 800673e:	2800      	cmp	r0, #0
 8006740:	f43f aef0 	beq.w	8006524 <_strtod_l+0x444>
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	300c      	adds	r0, #12
 8006748:	691a      	ldr	r2, [r3, #16]
 800674a:	f103 010c 	add.w	r1, r3, #12
 800674e:	3202      	adds	r2, #2
 8006750:	0092      	lsls	r2, r2, #2
 8006752:	f001 ff17 	bl	8008584 <memcpy>
 8006756:	ab1e      	add	r3, sp, #120	; 0x78
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	ab1d      	add	r3, sp, #116	; 0x74
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	464a      	mov	r2, r9
 8006760:	4653      	mov	r3, sl
 8006762:	4658      	mov	r0, fp
 8006764:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006768:	f002 fa58 	bl	8008c1c <__d2b>
 800676c:	901c      	str	r0, [sp, #112]	; 0x70
 800676e:	2800      	cmp	r0, #0
 8006770:	f43f aed8 	beq.w	8006524 <_strtod_l+0x444>
 8006774:	2101      	movs	r1, #1
 8006776:	4658      	mov	r0, fp
 8006778:	f002 f821 	bl	80087be <__i2b>
 800677c:	9004      	str	r0, [sp, #16]
 800677e:	4603      	mov	r3, r0
 8006780:	2800      	cmp	r0, #0
 8006782:	f43f aecf 	beq.w	8006524 <_strtod_l+0x444>
 8006786:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006788:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800678a:	2d00      	cmp	r5, #0
 800678c:	bfab      	itete	ge
 800678e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006790:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006792:	18ee      	addge	r6, r5, r3
 8006794:	1b5c      	sublt	r4, r3, r5
 8006796:	9b05      	ldr	r3, [sp, #20]
 8006798:	bfa8      	it	ge
 800679a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800679c:	eba5 0503 	sub.w	r5, r5, r3
 80067a0:	4415      	add	r5, r2
 80067a2:	4b64      	ldr	r3, [pc, #400]	; (8006934 <_strtod_l+0x854>)
 80067a4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80067a8:	bfb8      	it	lt
 80067aa:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80067ac:	429d      	cmp	r5, r3
 80067ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80067b2:	f280 80af 	bge.w	8006914 <_strtod_l+0x834>
 80067b6:	1b5b      	subs	r3, r3, r5
 80067b8:	2b1f      	cmp	r3, #31
 80067ba:	eba2 0203 	sub.w	r2, r2, r3
 80067be:	f04f 0701 	mov.w	r7, #1
 80067c2:	f300 809c 	bgt.w	80068fe <_strtod_l+0x81e>
 80067c6:	2500      	movs	r5, #0
 80067c8:	fa07 f303 	lsl.w	r3, r7, r3
 80067cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ce:	18b7      	adds	r7, r6, r2
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	42be      	cmp	r6, r7
 80067d4:	4414      	add	r4, r2
 80067d6:	441c      	add	r4, r3
 80067d8:	4633      	mov	r3, r6
 80067da:	bfa8      	it	ge
 80067dc:	463b      	movge	r3, r7
 80067de:	42a3      	cmp	r3, r4
 80067e0:	bfa8      	it	ge
 80067e2:	4623      	movge	r3, r4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bfc2      	ittt	gt
 80067e8:	1aff      	subgt	r7, r7, r3
 80067ea:	1ae4      	subgt	r4, r4, r3
 80067ec:	1af6      	subgt	r6, r6, r3
 80067ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f0:	b1bb      	cbz	r3, 8006822 <_strtod_l+0x742>
 80067f2:	461a      	mov	r2, r3
 80067f4:	9904      	ldr	r1, [sp, #16]
 80067f6:	4658      	mov	r0, fp
 80067f8:	f002 f880 	bl	80088fc <__pow5mult>
 80067fc:	9004      	str	r0, [sp, #16]
 80067fe:	2800      	cmp	r0, #0
 8006800:	f43f ae90 	beq.w	8006524 <_strtod_l+0x444>
 8006804:	4601      	mov	r1, r0
 8006806:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006808:	4658      	mov	r0, fp
 800680a:	f001 ffe1 	bl	80087d0 <__multiply>
 800680e:	9009      	str	r0, [sp, #36]	; 0x24
 8006810:	2800      	cmp	r0, #0
 8006812:	f43f ae87 	beq.w	8006524 <_strtod_l+0x444>
 8006816:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006818:	4658      	mov	r0, fp
 800681a:	f001 fef2 	bl	8008602 <_Bfree>
 800681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006820:	931c      	str	r3, [sp, #112]	; 0x70
 8006822:	2f00      	cmp	r7, #0
 8006824:	dc7a      	bgt.n	800691c <_strtod_l+0x83c>
 8006826:	9b07      	ldr	r3, [sp, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	dd08      	ble.n	800683e <_strtod_l+0x75e>
 800682c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800682e:	9906      	ldr	r1, [sp, #24]
 8006830:	4658      	mov	r0, fp
 8006832:	f002 f863 	bl	80088fc <__pow5mult>
 8006836:	9006      	str	r0, [sp, #24]
 8006838:	2800      	cmp	r0, #0
 800683a:	f43f ae73 	beq.w	8006524 <_strtod_l+0x444>
 800683e:	2c00      	cmp	r4, #0
 8006840:	dd08      	ble.n	8006854 <_strtod_l+0x774>
 8006842:	4622      	mov	r2, r4
 8006844:	9906      	ldr	r1, [sp, #24]
 8006846:	4658      	mov	r0, fp
 8006848:	f002 f8a6 	bl	8008998 <__lshift>
 800684c:	9006      	str	r0, [sp, #24]
 800684e:	2800      	cmp	r0, #0
 8006850:	f43f ae68 	beq.w	8006524 <_strtod_l+0x444>
 8006854:	2e00      	cmp	r6, #0
 8006856:	dd08      	ble.n	800686a <_strtod_l+0x78a>
 8006858:	4632      	mov	r2, r6
 800685a:	9904      	ldr	r1, [sp, #16]
 800685c:	4658      	mov	r0, fp
 800685e:	f002 f89b 	bl	8008998 <__lshift>
 8006862:	9004      	str	r0, [sp, #16]
 8006864:	2800      	cmp	r0, #0
 8006866:	f43f ae5d 	beq.w	8006524 <_strtod_l+0x444>
 800686a:	9a06      	ldr	r2, [sp, #24]
 800686c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800686e:	4658      	mov	r0, fp
 8006870:	f002 f900 	bl	8008a74 <__mdiff>
 8006874:	4680      	mov	r8, r0
 8006876:	2800      	cmp	r0, #0
 8006878:	f43f ae54 	beq.w	8006524 <_strtod_l+0x444>
 800687c:	2400      	movs	r4, #0
 800687e:	68c3      	ldr	r3, [r0, #12]
 8006880:	9904      	ldr	r1, [sp, #16]
 8006882:	60c4      	str	r4, [r0, #12]
 8006884:	930c      	str	r3, [sp, #48]	; 0x30
 8006886:	f002 f8db 	bl	8008a40 <__mcmp>
 800688a:	42a0      	cmp	r0, r4
 800688c:	da54      	bge.n	8006938 <_strtod_l+0x858>
 800688e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006890:	b9f3      	cbnz	r3, 80068d0 <_strtod_l+0x7f0>
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	d11b      	bne.n	80068d0 <_strtod_l+0x7f0>
 8006898:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800689c:	b9c3      	cbnz	r3, 80068d0 <_strtod_l+0x7f0>
 800689e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80068a2:	0d1b      	lsrs	r3, r3, #20
 80068a4:	051b      	lsls	r3, r3, #20
 80068a6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80068aa:	d911      	bls.n	80068d0 <_strtod_l+0x7f0>
 80068ac:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80068b0:	b91b      	cbnz	r3, 80068ba <_strtod_l+0x7da>
 80068b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	dd0a      	ble.n	80068d0 <_strtod_l+0x7f0>
 80068ba:	4641      	mov	r1, r8
 80068bc:	2201      	movs	r2, #1
 80068be:	4658      	mov	r0, fp
 80068c0:	f002 f86a 	bl	8008998 <__lshift>
 80068c4:	9904      	ldr	r1, [sp, #16]
 80068c6:	4680      	mov	r8, r0
 80068c8:	f002 f8ba 	bl	8008a40 <__mcmp>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	dc68      	bgt.n	80069a2 <_strtod_l+0x8c2>
 80068d0:	9b05      	ldr	r3, [sp, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d172      	bne.n	80069bc <_strtod_l+0x8dc>
 80068d6:	e630      	b.n	800653a <_strtod_l+0x45a>
 80068d8:	f018 0f01 	tst.w	r8, #1
 80068dc:	d004      	beq.n	80068e8 <_strtod_l+0x808>
 80068de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068e2:	f7f9 fdf9 	bl	80004d8 <__aeabi_dmul>
 80068e6:	2301      	movs	r3, #1
 80068e8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80068ec:	3508      	adds	r5, #8
 80068ee:	e6dc      	b.n	80066aa <_strtod_l+0x5ca>
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	ea03 0909 	and.w	r9, r3, r9
 80068fc:	e6f6      	b.n	80066ec <_strtod_l+0x60c>
 80068fe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006902:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006906:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800690a:	35e2      	adds	r5, #226	; 0xe2
 800690c:	fa07 f505 	lsl.w	r5, r7, r5
 8006910:	970f      	str	r7, [sp, #60]	; 0x3c
 8006912:	e75c      	b.n	80067ce <_strtod_l+0x6ee>
 8006914:	2301      	movs	r3, #1
 8006916:	2500      	movs	r5, #0
 8006918:	930f      	str	r3, [sp, #60]	; 0x3c
 800691a:	e758      	b.n	80067ce <_strtod_l+0x6ee>
 800691c:	463a      	mov	r2, r7
 800691e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006920:	4658      	mov	r0, fp
 8006922:	f002 f839 	bl	8008998 <__lshift>
 8006926:	901c      	str	r0, [sp, #112]	; 0x70
 8006928:	2800      	cmp	r0, #0
 800692a:	f47f af7c 	bne.w	8006826 <_strtod_l+0x746>
 800692e:	e5f9      	b.n	8006524 <_strtod_l+0x444>
 8006930:	08009568 	.word	0x08009568
 8006934:	fffffc02 	.word	0xfffffc02
 8006938:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800693c:	f040 8089 	bne.w	8006a52 <_strtod_l+0x972>
 8006940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006942:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006946:	b342      	cbz	r2, 800699a <_strtod_l+0x8ba>
 8006948:	4aaf      	ldr	r2, [pc, #700]	; (8006c08 <_strtod_l+0xb28>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d156      	bne.n	80069fc <_strtod_l+0x91c>
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	4648      	mov	r0, r9
 8006952:	b1eb      	cbz	r3, 8006990 <_strtod_l+0x8b0>
 8006954:	4653      	mov	r3, sl
 8006956:	4aad      	ldr	r2, [pc, #692]	; (8006c0c <_strtod_l+0xb2c>)
 8006958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800695c:	401a      	ands	r2, r3
 800695e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006962:	d818      	bhi.n	8006996 <_strtod_l+0x8b6>
 8006964:	0d12      	lsrs	r2, r2, #20
 8006966:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	4298      	cmp	r0, r3
 8006970:	d144      	bne.n	80069fc <_strtod_l+0x91c>
 8006972:	4ba7      	ldr	r3, [pc, #668]	; (8006c10 <_strtod_l+0xb30>)
 8006974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006976:	429a      	cmp	r2, r3
 8006978:	d102      	bne.n	8006980 <_strtod_l+0x8a0>
 800697a:	3001      	adds	r0, #1
 800697c:	f43f add2 	beq.w	8006524 <_strtod_l+0x444>
 8006980:	4ba2      	ldr	r3, [pc, #648]	; (8006c0c <_strtod_l+0xb2c>)
 8006982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006984:	f04f 0900 	mov.w	r9, #0
 8006988:	401a      	ands	r2, r3
 800698a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800698e:	e79f      	b.n	80068d0 <_strtod_l+0x7f0>
 8006990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006994:	e7eb      	b.n	800696e <_strtod_l+0x88e>
 8006996:	460b      	mov	r3, r1
 8006998:	e7e9      	b.n	800696e <_strtod_l+0x88e>
 800699a:	bb7b      	cbnz	r3, 80069fc <_strtod_l+0x91c>
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	d12c      	bne.n	80069fc <_strtod_l+0x91c>
 80069a2:	9905      	ldr	r1, [sp, #20]
 80069a4:	4653      	mov	r3, sl
 80069a6:	4a99      	ldr	r2, [pc, #612]	; (8006c0c <_strtod_l+0xb2c>)
 80069a8:	b1f1      	cbz	r1, 80069e8 <_strtod_l+0x908>
 80069aa:	ea02 010a 	and.w	r1, r2, sl
 80069ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80069b2:	dc19      	bgt.n	80069e8 <_strtod_l+0x908>
 80069b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80069b8:	f77f ae51 	ble.w	800665e <_strtod_l+0x57e>
 80069bc:	2300      	movs	r3, #0
 80069be:	4a95      	ldr	r2, [pc, #596]	; (8006c14 <_strtod_l+0xb34>)
 80069c0:	4648      	mov	r0, r9
 80069c2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80069c6:	4651      	mov	r1, sl
 80069c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80069cc:	f7f9 fd84 	bl	80004d8 <__aeabi_dmul>
 80069d0:	4681      	mov	r9, r0
 80069d2:	468a      	mov	sl, r1
 80069d4:	2900      	cmp	r1, #0
 80069d6:	f47f adb0 	bne.w	800653a <_strtod_l+0x45a>
 80069da:	2800      	cmp	r0, #0
 80069dc:	f47f adad 	bne.w	800653a <_strtod_l+0x45a>
 80069e0:	2322      	movs	r3, #34	; 0x22
 80069e2:	f8cb 3000 	str.w	r3, [fp]
 80069e6:	e5a8      	b.n	800653a <_strtod_l+0x45a>
 80069e8:	4013      	ands	r3, r2
 80069ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80069ee:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80069f2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80069f6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80069fa:	e769      	b.n	80068d0 <_strtod_l+0x7f0>
 80069fc:	b19d      	cbz	r5, 8006a26 <_strtod_l+0x946>
 80069fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a00:	421d      	tst	r5, r3
 8006a02:	f43f af65 	beq.w	80068d0 <_strtod_l+0x7f0>
 8006a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a08:	9a05      	ldr	r2, [sp, #20]
 8006a0a:	4648      	mov	r0, r9
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	b173      	cbz	r3, 8006a2e <_strtod_l+0x94e>
 8006a10:	f7ff fb42 	bl	8006098 <sulp>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a1c:	f7f9 fba6 	bl	800016c <__adddf3>
 8006a20:	4681      	mov	r9, r0
 8006a22:	468a      	mov	sl, r1
 8006a24:	e754      	b.n	80068d0 <_strtod_l+0x7f0>
 8006a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a28:	ea13 0f09 	tst.w	r3, r9
 8006a2c:	e7e9      	b.n	8006a02 <_strtod_l+0x922>
 8006a2e:	f7ff fb33 	bl	8006098 <sulp>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a3a:	f7f9 fb95 	bl	8000168 <__aeabi_dsub>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2300      	movs	r3, #0
 8006a42:	4681      	mov	r9, r0
 8006a44:	468a      	mov	sl, r1
 8006a46:	f7f9 ffaf 	bl	80009a8 <__aeabi_dcmpeq>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	f47f ae07 	bne.w	800665e <_strtod_l+0x57e>
 8006a50:	e73e      	b.n	80068d0 <_strtod_l+0x7f0>
 8006a52:	9904      	ldr	r1, [sp, #16]
 8006a54:	4640      	mov	r0, r8
 8006a56:	f002 f930 	bl	8008cba <__ratio>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a60:	4606      	mov	r6, r0
 8006a62:	460f      	mov	r7, r1
 8006a64:	f7f9 ffb4 	bl	80009d0 <__aeabi_dcmple>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d075      	beq.n	8006b58 <_strtod_l+0xa78>
 8006a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d047      	beq.n	8006b02 <_strtod_l+0xa22>
 8006a72:	2600      	movs	r6, #0
 8006a74:	4f68      	ldr	r7, [pc, #416]	; (8006c18 <_strtod_l+0xb38>)
 8006a76:	4d68      	ldr	r5, [pc, #416]	; (8006c18 <_strtod_l+0xb38>)
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a7e:	0d1b      	lsrs	r3, r3, #20
 8006a80:	051b      	lsls	r3, r3, #20
 8006a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a86:	4b65      	ldr	r3, [pc, #404]	; (8006c1c <_strtod_l+0xb3c>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	f040 80cf 	bne.w	8006c2c <_strtod_l+0xb4c>
 8006a8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a92:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a98:	4648      	mov	r0, r9
 8006a9a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	f002 f846 	bl	8008b30 <__ulp>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	4639      	mov	r1, r7
 8006aac:	f7f9 fd14 	bl	80004d8 <__aeabi_dmul>
 8006ab0:	464a      	mov	r2, r9
 8006ab2:	4653      	mov	r3, sl
 8006ab4:	f7f9 fb5a 	bl	800016c <__adddf3>
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4954      	ldr	r1, [pc, #336]	; (8006c0c <_strtod_l+0xb2c>)
 8006abc:	4a58      	ldr	r2, [pc, #352]	; (8006c20 <_strtod_l+0xb40>)
 8006abe:	4019      	ands	r1, r3
 8006ac0:	4291      	cmp	r1, r2
 8006ac2:	4681      	mov	r9, r0
 8006ac4:	d95e      	bls.n	8006b84 <_strtod_l+0xaa4>
 8006ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d103      	bne.n	8006ad8 <_strtod_l+0x9f8>
 8006ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f43f ad26 	beq.w	8006524 <_strtod_l+0x444>
 8006ad8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006adc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006c10 <_strtod_l+0xb30>
 8006ae0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ae2:	4658      	mov	r0, fp
 8006ae4:	f001 fd8d 	bl	8008602 <_Bfree>
 8006ae8:	9906      	ldr	r1, [sp, #24]
 8006aea:	4658      	mov	r0, fp
 8006aec:	f001 fd89 	bl	8008602 <_Bfree>
 8006af0:	9904      	ldr	r1, [sp, #16]
 8006af2:	4658      	mov	r0, fp
 8006af4:	f001 fd85 	bl	8008602 <_Bfree>
 8006af8:	4641      	mov	r1, r8
 8006afa:	4658      	mov	r0, fp
 8006afc:	f001 fd81 	bl	8008602 <_Bfree>
 8006b00:	e617      	b.n	8006732 <_strtod_l+0x652>
 8006b02:	f1b9 0f00 	cmp.w	r9, #0
 8006b06:	d119      	bne.n	8006b3c <_strtod_l+0xa5c>
 8006b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b0e:	b9e3      	cbnz	r3, 8006b4a <_strtod_l+0xa6a>
 8006b10:	2200      	movs	r2, #0
 8006b12:	4b41      	ldr	r3, [pc, #260]	; (8006c18 <_strtod_l+0xb38>)
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 ff50 	bl	80009bc <__aeabi_dcmplt>
 8006b1c:	b9c8      	cbnz	r0, 8006b52 <_strtod_l+0xa72>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	4b40      	ldr	r3, [pc, #256]	; (8006c24 <_strtod_l+0xb44>)
 8006b22:	4630      	mov	r0, r6
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7f9 fcd7 	bl	80004d8 <__aeabi_dmul>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b32:	9418      	str	r4, [sp, #96]	; 0x60
 8006b34:	9319      	str	r3, [sp, #100]	; 0x64
 8006b36:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006b3a:	e79d      	b.n	8006a78 <_strtod_l+0x998>
 8006b3c:	f1b9 0f01 	cmp.w	r9, #1
 8006b40:	d103      	bne.n	8006b4a <_strtod_l+0xa6a>
 8006b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f43f ad8a 	beq.w	800665e <_strtod_l+0x57e>
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	4f36      	ldr	r7, [pc, #216]	; (8006c28 <_strtod_l+0xb48>)
 8006b4e:	2400      	movs	r4, #0
 8006b50:	e791      	b.n	8006a76 <_strtod_l+0x996>
 8006b52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006b54:	4d33      	ldr	r5, [pc, #204]	; (8006c24 <_strtod_l+0xb44>)
 8006b56:	e7ea      	b.n	8006b2e <_strtod_l+0xa4e>
 8006b58:	4b32      	ldr	r3, [pc, #200]	; (8006c24 <_strtod_l+0xb44>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f7f9 fcba 	bl	80004d8 <__aeabi_dmul>
 8006b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	b933      	cbnz	r3, 8006b7a <_strtod_l+0xa9a>
 8006b6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b70:	9010      	str	r0, [sp, #64]	; 0x40
 8006b72:	9311      	str	r3, [sp, #68]	; 0x44
 8006b74:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b78:	e77e      	b.n	8006a78 <_strtod_l+0x998>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006b82:	e7f7      	b.n	8006b74 <_strtod_l+0xa94>
 8006b84:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006b88:	9b05      	ldr	r3, [sp, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1a8      	bne.n	8006ae0 <_strtod_l+0xa00>
 8006b8e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b92:	0d1b      	lsrs	r3, r3, #20
 8006b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b96:	051b      	lsls	r3, r3, #20
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	4656      	mov	r6, sl
 8006b9c:	d1a0      	bne.n	8006ae0 <_strtod_l+0xa00>
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7f9 ff49 	bl	8000a38 <__aeabi_d2iz>
 8006ba6:	f7f9 fc2d 	bl	8000404 <__aeabi_i2d>
 8006baa:	460b      	mov	r3, r1
 8006bac:	4602      	mov	r2, r0
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7f9 fad9 	bl	8000168 <__aeabi_dsub>
 8006bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bb8:	4604      	mov	r4, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	b933      	cbnz	r3, 8006bcc <_strtod_l+0xaec>
 8006bbe:	f1b9 0f00 	cmp.w	r9, #0
 8006bc2:	d103      	bne.n	8006bcc <_strtod_l+0xaec>
 8006bc4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006bc8:	2e00      	cmp	r6, #0
 8006bca:	d06a      	beq.n	8006ca2 <_strtod_l+0xbc2>
 8006bcc:	a30a      	add	r3, pc, #40	; (adr r3, 8006bf8 <_strtod_l+0xb18>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7f9 fef1 	bl	80009bc <__aeabi_dcmplt>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	f47f acad 	bne.w	800653a <_strtod_l+0x45a>
 8006be0:	a307      	add	r3, pc, #28	; (adr r3, 8006c00 <_strtod_l+0xb20>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 ff05 	bl	80009f8 <__aeabi_dcmpgt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f af76 	beq.w	8006ae0 <_strtod_l+0xa00>
 8006bf4:	e4a1      	b.n	800653a <_strtod_l+0x45a>
 8006bf6:	bf00      	nop
 8006bf8:	94a03595 	.word	0x94a03595
 8006bfc:	3fdfffff 	.word	0x3fdfffff
 8006c00:	35afe535 	.word	0x35afe535
 8006c04:	3fe00000 	.word	0x3fe00000
 8006c08:	000fffff 	.word	0x000fffff
 8006c0c:	7ff00000 	.word	0x7ff00000
 8006c10:	7fefffff 	.word	0x7fefffff
 8006c14:	39500000 	.word	0x39500000
 8006c18:	3ff00000 	.word	0x3ff00000
 8006c1c:	7fe00000 	.word	0x7fe00000
 8006c20:	7c9fffff 	.word	0x7c9fffff
 8006c24:	3fe00000 	.word	0x3fe00000
 8006c28:	bff00000 	.word	0xbff00000
 8006c2c:	9b05      	ldr	r3, [sp, #20]
 8006c2e:	b313      	cbz	r3, 8006c76 <_strtod_l+0xb96>
 8006c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c36:	d81e      	bhi.n	8006c76 <_strtod_l+0xb96>
 8006c38:	a325      	add	r3, pc, #148	; (adr r3, 8006cd0 <_strtod_l+0xbf0>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 fec5 	bl	80009d0 <__aeabi_dcmple>
 8006c46:	b190      	cbz	r0, 8006c6e <_strtod_l+0xb8e>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7f9 ff1c 	bl	8000a88 <__aeabi_d2uiz>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	bf08      	it	eq
 8006c54:	2001      	moveq	r0, #1
 8006c56:	f7f9 fbc5 	bl	80003e4 <__aeabi_ui2d>
 8006c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	b9d3      	cbnz	r3, 8006c98 <_strtod_l+0xbb8>
 8006c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c66:	9012      	str	r0, [sp, #72]	; 0x48
 8006c68:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c6a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c70:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006c74:	1a9f      	subs	r7, r3, r2
 8006c76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c7a:	f001 ff59 	bl	8008b30 <__ulp>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	f7f9 fc27 	bl	80004d8 <__aeabi_dmul>
 8006c8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c8e:	f7f9 fa6d 	bl	800016c <__adddf3>
 8006c92:	4681      	mov	r9, r0
 8006c94:	468a      	mov	sl, r1
 8006c96:	e777      	b.n	8006b88 <_strtod_l+0xaa8>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006ca0:	e7e3      	b.n	8006c6a <_strtod_l+0xb8a>
 8006ca2:	a30d      	add	r3, pc, #52	; (adr r3, 8006cd8 <_strtod_l+0xbf8>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fe88 	bl	80009bc <__aeabi_dcmplt>
 8006cac:	e79f      	b.n	8006bee <_strtod_l+0xb0e>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	930d      	str	r3, [sp, #52]	; 0x34
 8006cb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	f7ff ba55 	b.w	8006166 <_strtod_l+0x86>
 8006cbc:	2b65      	cmp	r3, #101	; 0x65
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f43f ab42 	beq.w	800634a <_strtod_l+0x26a>
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	9105      	str	r1, [sp, #20]
 8006ccc:	f7ff babf 	b.w	800624e <_strtod_l+0x16e>
 8006cd0:	ffc00000 	.word	0xffc00000
 8006cd4:	41dfffff 	.word	0x41dfffff
 8006cd8:	94a03595 	.word	0x94a03595
 8006cdc:	3fcfffff 	.word	0x3fcfffff

08006ce0 <strtod>:
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <strtod+0x1c>)
 8006ce2:	b410      	push	{r4}
 8006ce4:	681c      	ldr	r4, [r3, #0]
 8006ce6:	4a06      	ldr	r2, [pc, #24]	; (8006d00 <strtod+0x20>)
 8006ce8:	6a23      	ldr	r3, [r4, #32]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf08      	it	eq
 8006cee:	4613      	moveq	r3, r2
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	bc10      	pop	{r4}
 8006cf8:	f7ff b9f2 	b.w	80060e0 <_strtod_l>
 8006cfc:	20000060 	.word	0x20000060
 8006d00:	200000c4 	.word	0x200000c4

08006d04 <__swbuf_r>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	460e      	mov	r6, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	b118      	cbz	r0, 8006d16 <__swbuf_r+0x12>
 8006d0e:	6983      	ldr	r3, [r0, #24]
 8006d10:	b90b      	cbnz	r3, 8006d16 <__swbuf_r+0x12>
 8006d12:	f000 ffe9 	bl	8007ce8 <__sinit>
 8006d16:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <__swbuf_r+0x98>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d12a      	bne.n	8006d72 <__swbuf_r+0x6e>
 8006d1c:	686c      	ldr	r4, [r5, #4]
 8006d1e:	69a3      	ldr	r3, [r4, #24]
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	071a      	lsls	r2, r3, #28
 8006d26:	d52e      	bpl.n	8006d86 <__swbuf_r+0x82>
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	b363      	cbz	r3, 8006d86 <__swbuf_r+0x82>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	b2f6      	uxtb	r6, r6
 8006d32:	1ac0      	subs	r0, r0, r3
 8006d34:	6963      	ldr	r3, [r4, #20]
 8006d36:	4637      	mov	r7, r6
 8006d38:	4283      	cmp	r3, r0
 8006d3a:	dc04      	bgt.n	8006d46 <__swbuf_r+0x42>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 ff68 	bl	8007c14 <_fflush_r>
 8006d44:	bb28      	cbnz	r0, 8006d92 <__swbuf_r+0x8e>
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	3001      	adds	r0, #1
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	60a3      	str	r3, [r4, #8]
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	6022      	str	r2, [r4, #0]
 8006d54:	701e      	strb	r6, [r3, #0]
 8006d56:	6963      	ldr	r3, [r4, #20]
 8006d58:	4283      	cmp	r3, r0
 8006d5a:	d004      	beq.n	8006d66 <__swbuf_r+0x62>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	07db      	lsls	r3, r3, #31
 8006d60:	d519      	bpl.n	8006d96 <__swbuf_r+0x92>
 8006d62:	2e0a      	cmp	r6, #10
 8006d64:	d117      	bne.n	8006d96 <__swbuf_r+0x92>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 ff53 	bl	8007c14 <_fflush_r>
 8006d6e:	b190      	cbz	r0, 8006d96 <__swbuf_r+0x92>
 8006d70:	e00f      	b.n	8006d92 <__swbuf_r+0x8e>
 8006d72:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <__swbuf_r+0x9c>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	d101      	bne.n	8006d7c <__swbuf_r+0x78>
 8006d78:	68ac      	ldr	r4, [r5, #8]
 8006d7a:	e7d0      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d7c:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <__swbuf_r+0xa0>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	bf08      	it	eq
 8006d82:	68ec      	ldreq	r4, [r5, #12]
 8006d84:	e7cb      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d86:	4621      	mov	r1, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 f80d 	bl	8006da8 <__swsetup_r>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0cc      	beq.n	8006d2c <__swbuf_r+0x28>
 8006d92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d96:	4638      	mov	r0, r7
 8006d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	080095c0 	.word	0x080095c0
 8006da0:	080095e0 	.word	0x080095e0
 8006da4:	080095a0 	.word	0x080095a0

08006da8 <__swsetup_r>:
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <__swsetup_r+0xcc>)
 8006daa:	b570      	push	{r4, r5, r6, lr}
 8006dac:	681d      	ldr	r5, [r3, #0]
 8006dae:	4606      	mov	r6, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	b125      	cbz	r5, 8006dbe <__swsetup_r+0x16>
 8006db4:	69ab      	ldr	r3, [r5, #24]
 8006db6:	b913      	cbnz	r3, 8006dbe <__swsetup_r+0x16>
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 ff95 	bl	8007ce8 <__sinit>
 8006dbe:	4b2e      	ldr	r3, [pc, #184]	; (8006e78 <__swsetup_r+0xd0>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	d10f      	bne.n	8006de4 <__swsetup_r+0x3c>
 8006dc4:	686c      	ldr	r4, [r5, #4]
 8006dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	0715      	lsls	r5, r2, #28
 8006dce:	d42c      	bmi.n	8006e2a <__swsetup_r+0x82>
 8006dd0:	06d0      	lsls	r0, r2, #27
 8006dd2:	d411      	bmi.n	8006df8 <__swsetup_r+0x50>
 8006dd4:	2209      	movs	r2, #9
 8006dd6:	6032      	str	r2, [r6, #0]
 8006dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de2:	e03e      	b.n	8006e62 <__swsetup_r+0xba>
 8006de4:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <__swsetup_r+0xd4>)
 8006de6:	429c      	cmp	r4, r3
 8006de8:	d101      	bne.n	8006dee <__swsetup_r+0x46>
 8006dea:	68ac      	ldr	r4, [r5, #8]
 8006dec:	e7eb      	b.n	8006dc6 <__swsetup_r+0x1e>
 8006dee:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <__swsetup_r+0xd8>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	bf08      	it	eq
 8006df4:	68ec      	ldreq	r4, [r5, #12]
 8006df6:	e7e6      	b.n	8006dc6 <__swsetup_r+0x1e>
 8006df8:	0751      	lsls	r1, r2, #29
 8006dfa:	d512      	bpl.n	8006e22 <__swsetup_r+0x7a>
 8006dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dfe:	b141      	cbz	r1, 8006e12 <__swsetup_r+0x6a>
 8006e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d002      	beq.n	8006e0e <__swsetup_r+0x66>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f001 ffcd 	bl	8008da8 <_free_r>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6363      	str	r3, [r4, #52]	; 0x34
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6063      	str	r3, [r4, #4]
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f043 0308 	orr.w	r3, r3, #8
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	b94b      	cbnz	r3, 8006e42 <__swsetup_r+0x9a>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e38:	d003      	beq.n	8006e42 <__swsetup_r+0x9a>
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f001 fb39 	bl	80084b4 <__smakebuf_r>
 8006e42:	89a2      	ldrh	r2, [r4, #12]
 8006e44:	f012 0301 	ands.w	r3, r2, #1
 8006e48:	d00c      	beq.n	8006e64 <__swsetup_r+0xbc>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60a3      	str	r3, [r4, #8]
 8006e4e:	6963      	ldr	r3, [r4, #20]
 8006e50:	425b      	negs	r3, r3
 8006e52:	61a3      	str	r3, [r4, #24]
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	b953      	cbnz	r3, 8006e6e <__swsetup_r+0xc6>
 8006e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e60:	d1ba      	bne.n	8006dd8 <__swsetup_r+0x30>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	0792      	lsls	r2, r2, #30
 8006e66:	bf58      	it	pl
 8006e68:	6963      	ldrpl	r3, [r4, #20]
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	e7f2      	b.n	8006e54 <__swsetup_r+0xac>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e7f7      	b.n	8006e62 <__swsetup_r+0xba>
 8006e72:	bf00      	nop
 8006e74:	20000060 	.word	0x20000060
 8006e78:	080095c0 	.word	0x080095c0
 8006e7c:	080095e0 	.word	0x080095e0
 8006e80:	080095a0 	.word	0x080095a0

08006e84 <quorem>:
 8006e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	6903      	ldr	r3, [r0, #16]
 8006e8a:	690c      	ldr	r4, [r1, #16]
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	f2c0 8084 	blt.w	8006f9c <quorem+0x118>
 8006e94:	3c01      	subs	r4, #1
 8006e96:	f101 0714 	add.w	r7, r1, #20
 8006e9a:	f100 0614 	add.w	r6, r0, #20
 8006e9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006ea2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	fbb0 f5f5 	udiv	r5, r0, r5
 8006eac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006eb0:	eb06 030c 	add.w	r3, r6, ip
 8006eb4:	eb07 090c 	add.w	r9, r7, ip
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	b39d      	cbz	r5, 8006f24 <quorem+0xa0>
 8006ebc:	f04f 0a00 	mov.w	sl, #0
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	46b6      	mov	lr, r6
 8006ec4:	46d3      	mov	fp, sl
 8006ec6:	f850 2b04 	ldr.w	r2, [r0], #4
 8006eca:	b293      	uxth	r3, r2
 8006ecc:	fb05 a303 	mla	r3, r5, r3, sl
 8006ed0:	0c12      	lsrs	r2, r2, #16
 8006ed2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ed6:	fb05 a202 	mla	r2, r5, r2, sl
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ebab 0303 	sub.w	r3, fp, r3
 8006ee0:	f8de b000 	ldr.w	fp, [lr]
 8006ee4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006ee8:	fa1f fb8b 	uxth.w	fp, fp
 8006eec:	445b      	add	r3, fp
 8006eee:	fa1f fb82 	uxth.w	fp, r2
 8006ef2:	f8de 2000 	ldr.w	r2, [lr]
 8006ef6:	4581      	cmp	r9, r0
 8006ef8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f06:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006f0a:	f84e 3b04 	str.w	r3, [lr], #4
 8006f0e:	d2da      	bcs.n	8006ec6 <quorem+0x42>
 8006f10:	f856 300c 	ldr.w	r3, [r6, ip]
 8006f14:	b933      	cbnz	r3, 8006f24 <quorem+0xa0>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	429e      	cmp	r6, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	d331      	bcc.n	8006f84 <quorem+0x100>
 8006f20:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f24:	4640      	mov	r0, r8
 8006f26:	f001 fd8b 	bl	8008a40 <__mcmp>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	db26      	blt.n	8006f7c <quorem+0xf8>
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f04f 0c00 	mov.w	ip, #0
 8006f34:	3501      	adds	r5, #1
 8006f36:	f857 1b04 	ldr.w	r1, [r7], #4
 8006f3a:	f8d0 e000 	ldr.w	lr, [r0]
 8006f3e:	b28b      	uxth	r3, r1
 8006f40:	ebac 0303 	sub.w	r3, ip, r3
 8006f44:	fa1f f28e 	uxth.w	r2, lr
 8006f48:	4413      	add	r3, r2
 8006f4a:	0c0a      	lsrs	r2, r1, #16
 8006f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5a:	45b9      	cmp	r9, r7
 8006f5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f60:	f840 3b04 	str.w	r3, [r0], #4
 8006f64:	d2e7      	bcs.n	8006f36 <quorem+0xb2>
 8006f66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f6e:	b92a      	cbnz	r2, 8006f7c <quorem+0xf8>
 8006f70:	3b04      	subs	r3, #4
 8006f72:	429e      	cmp	r6, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	d30b      	bcc.n	8006f90 <quorem+0x10c>
 8006f78:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	b003      	add	sp, #12
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	3b04      	subs	r3, #4
 8006f88:	2a00      	cmp	r2, #0
 8006f8a:	d1c9      	bne.n	8006f20 <quorem+0x9c>
 8006f8c:	3c01      	subs	r4, #1
 8006f8e:	e7c4      	b.n	8006f1a <quorem+0x96>
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	3b04      	subs	r3, #4
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d1ef      	bne.n	8006f78 <quorem+0xf4>
 8006f98:	3c01      	subs	r4, #1
 8006f9a:	e7ea      	b.n	8006f72 <quorem+0xee>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e7ee      	b.n	8006f7e <quorem+0xfa>

08006fa0 <_dtoa_r>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006faa:	b095      	sub	sp, #84	; 0x54
 8006fac:	4604      	mov	r4, r0
 8006fae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006fb2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006fb6:	b93d      	cbnz	r5, 8006fc8 <_dtoa_r+0x28>
 8006fb8:	2010      	movs	r0, #16
 8006fba:	f001 fabb 	bl	8008534 <malloc>
 8006fbe:	6260      	str	r0, [r4, #36]	; 0x24
 8006fc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fc4:	6005      	str	r5, [r0, #0]
 8006fc6:	60c5      	str	r5, [r0, #12]
 8006fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fca:	6819      	ldr	r1, [r3, #0]
 8006fcc:	b151      	cbz	r1, 8006fe4 <_dtoa_r+0x44>
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4093      	lsls	r3, r2
 8006fd4:	604a      	str	r2, [r1, #4]
 8006fd6:	608b      	str	r3, [r1, #8]
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f001 fb12 	bl	8008602 <_Bfree>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	1e3b      	subs	r3, r7, #0
 8006fe6:	bfaf      	iteee	ge
 8006fe8:	2300      	movge	r3, #0
 8006fea:	2201      	movlt	r2, #1
 8006fec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	9303      	strlt	r3, [sp, #12]
 8006ff2:	bfac      	ite	ge
 8006ff4:	f8c8 3000 	strge.w	r3, [r8]
 8006ff8:	f8c8 2000 	strlt.w	r2, [r8]
 8006ffc:	4bae      	ldr	r3, [pc, #696]	; (80072b8 <_dtoa_r+0x318>)
 8006ffe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007002:	ea33 0308 	bics.w	r3, r3, r8
 8007006:	d11b      	bne.n	8007040 <_dtoa_r+0xa0>
 8007008:	f242 730f 	movw	r3, #9999	; 0x270f
 800700c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	b923      	cbnz	r3, 800701e <_dtoa_r+0x7e>
 8007014:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007018:	2800      	cmp	r0, #0
 800701a:	f000 8545 	beq.w	8007aa8 <_dtoa_r+0xb08>
 800701e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007020:	b953      	cbnz	r3, 8007038 <_dtoa_r+0x98>
 8007022:	4ba6      	ldr	r3, [pc, #664]	; (80072bc <_dtoa_r+0x31c>)
 8007024:	e021      	b.n	800706a <_dtoa_r+0xca>
 8007026:	4ba6      	ldr	r3, [pc, #664]	; (80072c0 <_dtoa_r+0x320>)
 8007028:	9306      	str	r3, [sp, #24]
 800702a:	3308      	adds	r3, #8
 800702c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	9806      	ldr	r0, [sp, #24]
 8007032:	b015      	add	sp, #84	; 0x54
 8007034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007038:	4ba0      	ldr	r3, [pc, #640]	; (80072bc <_dtoa_r+0x31c>)
 800703a:	9306      	str	r3, [sp, #24]
 800703c:	3303      	adds	r3, #3
 800703e:	e7f5      	b.n	800702c <_dtoa_r+0x8c>
 8007040:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	4630      	mov	r0, r6
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8007050:	4682      	mov	sl, r0
 8007052:	b160      	cbz	r0, 800706e <_dtoa_r+0xce>
 8007054:	2301      	movs	r3, #1
 8007056:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8520 	beq.w	8007aa2 <_dtoa_r+0xb02>
 8007062:	4b98      	ldr	r3, [pc, #608]	; (80072c4 <_dtoa_r+0x324>)
 8007064:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	3b01      	subs	r3, #1
 800706a:	9306      	str	r3, [sp, #24]
 800706c:	e7e0      	b.n	8007030 <_dtoa_r+0x90>
 800706e:	ab12      	add	r3, sp, #72	; 0x48
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	ab13      	add	r3, sp, #76	; 0x4c
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4632      	mov	r2, r6
 8007078:	463b      	mov	r3, r7
 800707a:	4620      	mov	r0, r4
 800707c:	f001 fdce 	bl	8008c1c <__d2b>
 8007080:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007084:	4683      	mov	fp, r0
 8007086:	2d00      	cmp	r5, #0
 8007088:	d07d      	beq.n	8007186 <_dtoa_r+0x1e6>
 800708a:	46b0      	mov	r8, r6
 800708c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007090:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007094:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007098:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800709c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80070a0:	2200      	movs	r2, #0
 80070a2:	4b89      	ldr	r3, [pc, #548]	; (80072c8 <_dtoa_r+0x328>)
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 f85e 	bl	8000168 <__aeabi_dsub>
 80070ac:	a37c      	add	r3, pc, #496	; (adr r3, 80072a0 <_dtoa_r+0x300>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 fa11 	bl	80004d8 <__aeabi_dmul>
 80070b6:	a37c      	add	r3, pc, #496	; (adr r3, 80072a8 <_dtoa_r+0x308>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f7f9 f856 	bl	800016c <__adddf3>
 80070c0:	4606      	mov	r6, r0
 80070c2:	4628      	mov	r0, r5
 80070c4:	460f      	mov	r7, r1
 80070c6:	f7f9 f99d 	bl	8000404 <__aeabi_i2d>
 80070ca:	a379      	add	r3, pc, #484	; (adr r3, 80072b0 <_dtoa_r+0x310>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f7f9 fa02 	bl	80004d8 <__aeabi_dmul>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4630      	mov	r0, r6
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 f846 	bl	800016c <__adddf3>
 80070e0:	4606      	mov	r6, r0
 80070e2:	460f      	mov	r7, r1
 80070e4:	f7f9 fca8 	bl	8000a38 <__aeabi_d2iz>
 80070e8:	2200      	movs	r2, #0
 80070ea:	4682      	mov	sl, r0
 80070ec:	2300      	movs	r3, #0
 80070ee:	4630      	mov	r0, r6
 80070f0:	4639      	mov	r1, r7
 80070f2:	f7f9 fc63 	bl	80009bc <__aeabi_dcmplt>
 80070f6:	b148      	cbz	r0, 800710c <_dtoa_r+0x16c>
 80070f8:	4650      	mov	r0, sl
 80070fa:	f7f9 f983 	bl	8000404 <__aeabi_i2d>
 80070fe:	4632      	mov	r2, r6
 8007100:	463b      	mov	r3, r7
 8007102:	f7f9 fc51 	bl	80009a8 <__aeabi_dcmpeq>
 8007106:	b908      	cbnz	r0, 800710c <_dtoa_r+0x16c>
 8007108:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800710c:	f1ba 0f16 	cmp.w	sl, #22
 8007110:	d85a      	bhi.n	80071c8 <_dtoa_r+0x228>
 8007112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007116:	496d      	ldr	r1, [pc, #436]	; (80072cc <_dtoa_r+0x32c>)
 8007118:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800711c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007120:	f7f9 fc6a 	bl	80009f8 <__aeabi_dcmpgt>
 8007124:	2800      	cmp	r0, #0
 8007126:	d051      	beq.n	80071cc <_dtoa_r+0x22c>
 8007128:	2300      	movs	r3, #0
 800712a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800712e:	930d      	str	r3, [sp, #52]	; 0x34
 8007130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007132:	1b5d      	subs	r5, r3, r5
 8007134:	1e6b      	subs	r3, r5, #1
 8007136:	9307      	str	r3, [sp, #28]
 8007138:	bf43      	ittte	mi
 800713a:	2300      	movmi	r3, #0
 800713c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007140:	9307      	strmi	r3, [sp, #28]
 8007142:	f04f 0900 	movpl.w	r9, #0
 8007146:	f1ba 0f00 	cmp.w	sl, #0
 800714a:	db41      	blt.n	80071d0 <_dtoa_r+0x230>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007152:	4453      	add	r3, sl
 8007154:	9307      	str	r3, [sp, #28]
 8007156:	2300      	movs	r3, #0
 8007158:	9308      	str	r3, [sp, #32]
 800715a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800715c:	2b09      	cmp	r3, #9
 800715e:	f200 808f 	bhi.w	8007280 <_dtoa_r+0x2e0>
 8007162:	2b05      	cmp	r3, #5
 8007164:	bfc4      	itt	gt
 8007166:	3b04      	subgt	r3, #4
 8007168:	931e      	strgt	r3, [sp, #120]	; 0x78
 800716a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800716c:	bfc8      	it	gt
 800716e:	2500      	movgt	r5, #0
 8007170:	f1a3 0302 	sub.w	r3, r3, #2
 8007174:	bfd8      	it	le
 8007176:	2501      	movle	r5, #1
 8007178:	2b03      	cmp	r3, #3
 800717a:	f200 808d 	bhi.w	8007298 <_dtoa_r+0x2f8>
 800717e:	e8df f003 	tbb	[pc, r3]
 8007182:	7d7b      	.short	0x7d7b
 8007184:	6f2f      	.short	0x6f2f
 8007186:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800718a:	441d      	add	r5, r3
 800718c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007190:	2820      	cmp	r0, #32
 8007192:	dd13      	ble.n	80071bc <_dtoa_r+0x21c>
 8007194:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007198:	9b02      	ldr	r3, [sp, #8]
 800719a:	fa08 f800 	lsl.w	r8, r8, r0
 800719e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80071a2:	fa23 f000 	lsr.w	r0, r3, r0
 80071a6:	ea48 0000 	orr.w	r0, r8, r0
 80071aa:	f7f9 f91b 	bl	80003e4 <__aeabi_ui2d>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4680      	mov	r8, r0
 80071b2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80071b6:	3d01      	subs	r5, #1
 80071b8:	9310      	str	r3, [sp, #64]	; 0x40
 80071ba:	e771      	b.n	80070a0 <_dtoa_r+0x100>
 80071bc:	9b02      	ldr	r3, [sp, #8]
 80071be:	f1c0 0020 	rsb	r0, r0, #32
 80071c2:	fa03 f000 	lsl.w	r0, r3, r0
 80071c6:	e7f0      	b.n	80071aa <_dtoa_r+0x20a>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e7b0      	b.n	800712e <_dtoa_r+0x18e>
 80071cc:	900d      	str	r0, [sp, #52]	; 0x34
 80071ce:	e7af      	b.n	8007130 <_dtoa_r+0x190>
 80071d0:	f1ca 0300 	rsb	r3, sl, #0
 80071d4:	9308      	str	r3, [sp, #32]
 80071d6:	2300      	movs	r3, #0
 80071d8:	eba9 090a 	sub.w	r9, r9, sl
 80071dc:	930c      	str	r3, [sp, #48]	; 0x30
 80071de:	e7bc      	b.n	800715a <_dtoa_r+0x1ba>
 80071e0:	2301      	movs	r3, #1
 80071e2:	9309      	str	r3, [sp, #36]	; 0x24
 80071e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	dd74      	ble.n	80072d4 <_dtoa_r+0x334>
 80071ea:	4698      	mov	r8, r3
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	2200      	movs	r2, #0
 80071f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071f2:	6072      	str	r2, [r6, #4]
 80071f4:	2204      	movs	r2, #4
 80071f6:	f102 0014 	add.w	r0, r2, #20
 80071fa:	4298      	cmp	r0, r3
 80071fc:	6871      	ldr	r1, [r6, #4]
 80071fe:	d96e      	bls.n	80072de <_dtoa_r+0x33e>
 8007200:	4620      	mov	r0, r4
 8007202:	f001 f9ca 	bl	800859a <_Balloc>
 8007206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007208:	6030      	str	r0, [r6, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f1b8 0f0e 	cmp.w	r8, #14
 8007210:	9306      	str	r3, [sp, #24]
 8007212:	f200 80ed 	bhi.w	80073f0 <_dtoa_r+0x450>
 8007216:	2d00      	cmp	r5, #0
 8007218:	f000 80ea 	beq.w	80073f0 <_dtoa_r+0x450>
 800721c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007220:	f1ba 0f00 	cmp.w	sl, #0
 8007224:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007228:	dd77      	ble.n	800731a <_dtoa_r+0x37a>
 800722a:	4a28      	ldr	r2, [pc, #160]	; (80072cc <_dtoa_r+0x32c>)
 800722c:	f00a 030f 	and.w	r3, sl, #15
 8007230:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007234:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007238:	06f0      	lsls	r0, r6, #27
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007242:	d568      	bpl.n	8007316 <_dtoa_r+0x376>
 8007244:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007248:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <_dtoa_r+0x330>)
 800724a:	2503      	movs	r5, #3
 800724c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007250:	f7f9 fa6c 	bl	800072c <__aeabi_ddiv>
 8007254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007258:	f006 060f 	and.w	r6, r6, #15
 800725c:	4f1c      	ldr	r7, [pc, #112]	; (80072d0 <_dtoa_r+0x330>)
 800725e:	e04f      	b.n	8007300 <_dtoa_r+0x360>
 8007260:	2301      	movs	r3, #1
 8007262:	9309      	str	r3, [sp, #36]	; 0x24
 8007264:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007266:	4453      	add	r3, sl
 8007268:	f103 0801 	add.w	r8, r3, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	4643      	mov	r3, r8
 8007270:	2b01      	cmp	r3, #1
 8007272:	bfb8      	it	lt
 8007274:	2301      	movlt	r3, #1
 8007276:	e7ba      	b.n	80071ee <_dtoa_r+0x24e>
 8007278:	2300      	movs	r3, #0
 800727a:	e7b2      	b.n	80071e2 <_dtoa_r+0x242>
 800727c:	2300      	movs	r3, #0
 800727e:	e7f0      	b.n	8007262 <_dtoa_r+0x2c2>
 8007280:	2501      	movs	r5, #1
 8007282:	2300      	movs	r3, #0
 8007284:	9509      	str	r5, [sp, #36]	; 0x24
 8007286:	931e      	str	r3, [sp, #120]	; 0x78
 8007288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800728c:	2200      	movs	r2, #0
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	4698      	mov	r8, r3
 8007292:	2312      	movs	r3, #18
 8007294:	921f      	str	r2, [sp, #124]	; 0x7c
 8007296:	e7aa      	b.n	80071ee <_dtoa_r+0x24e>
 8007298:	2301      	movs	r3, #1
 800729a:	9309      	str	r3, [sp, #36]	; 0x24
 800729c:	e7f4      	b.n	8007288 <_dtoa_r+0x2e8>
 800729e:	bf00      	nop
 80072a0:	636f4361 	.word	0x636f4361
 80072a4:	3fd287a7 	.word	0x3fd287a7
 80072a8:	8b60c8b3 	.word	0x8b60c8b3
 80072ac:	3fc68a28 	.word	0x3fc68a28
 80072b0:	509f79fb 	.word	0x509f79fb
 80072b4:	3fd34413 	.word	0x3fd34413
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	08009599 	.word	0x08009599
 80072c0:	08009590 	.word	0x08009590
 80072c4:	08009519 	.word	0x08009519
 80072c8:	3ff80000 	.word	0x3ff80000
 80072cc:	08009638 	.word	0x08009638
 80072d0:	08009610 	.word	0x08009610
 80072d4:	2301      	movs	r3, #1
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	4698      	mov	r8, r3
 80072da:	461a      	mov	r2, r3
 80072dc:	e7da      	b.n	8007294 <_dtoa_r+0x2f4>
 80072de:	3101      	adds	r1, #1
 80072e0:	6071      	str	r1, [r6, #4]
 80072e2:	0052      	lsls	r2, r2, #1
 80072e4:	e787      	b.n	80071f6 <_dtoa_r+0x256>
 80072e6:	07f1      	lsls	r1, r6, #31
 80072e8:	d508      	bpl.n	80072fc <_dtoa_r+0x35c>
 80072ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f2:	f7f9 f8f1 	bl	80004d8 <__aeabi_dmul>
 80072f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072fa:	3501      	adds	r5, #1
 80072fc:	1076      	asrs	r6, r6, #1
 80072fe:	3708      	adds	r7, #8
 8007300:	2e00      	cmp	r6, #0
 8007302:	d1f0      	bne.n	80072e6 <_dtoa_r+0x346>
 8007304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800730c:	f7f9 fa0e 	bl	800072c <__aeabi_ddiv>
 8007310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007314:	e01b      	b.n	800734e <_dtoa_r+0x3ae>
 8007316:	2502      	movs	r5, #2
 8007318:	e7a0      	b.n	800725c <_dtoa_r+0x2bc>
 800731a:	f000 80a4 	beq.w	8007466 <_dtoa_r+0x4c6>
 800731e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007322:	f1ca 0600 	rsb	r6, sl, #0
 8007326:	4ba0      	ldr	r3, [pc, #640]	; (80075a8 <_dtoa_r+0x608>)
 8007328:	f006 020f 	and.w	r2, r6, #15
 800732c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f9 f8d0 	bl	80004d8 <__aeabi_dmul>
 8007338:	2502      	movs	r5, #2
 800733a:	2300      	movs	r3, #0
 800733c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007340:	4f9a      	ldr	r7, [pc, #616]	; (80075ac <_dtoa_r+0x60c>)
 8007342:	1136      	asrs	r6, r6, #4
 8007344:	2e00      	cmp	r6, #0
 8007346:	f040 8083 	bne.w	8007450 <_dtoa_r+0x4b0>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e0      	bne.n	8007310 <_dtoa_r+0x370>
 800734e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 808a 	beq.w	800746a <_dtoa_r+0x4ca>
 8007356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800735a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800735e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007362:	2200      	movs	r2, #0
 8007364:	4b92      	ldr	r3, [pc, #584]	; (80075b0 <_dtoa_r+0x610>)
 8007366:	f7f9 fb29 	bl	80009bc <__aeabi_dcmplt>
 800736a:	2800      	cmp	r0, #0
 800736c:	d07d      	beq.n	800746a <_dtoa_r+0x4ca>
 800736e:	f1b8 0f00 	cmp.w	r8, #0
 8007372:	d07a      	beq.n	800746a <_dtoa_r+0x4ca>
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	dd36      	ble.n	80073e8 <_dtoa_r+0x448>
 800737a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800737e:	2200      	movs	r2, #0
 8007380:	4b8c      	ldr	r3, [pc, #560]	; (80075b4 <_dtoa_r+0x614>)
 8007382:	f7f9 f8a9 	bl	80004d8 <__aeabi_dmul>
 8007386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800738a:	9e04      	ldr	r6, [sp, #16]
 800738c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8007390:	3501      	adds	r5, #1
 8007392:	4628      	mov	r0, r5
 8007394:	f7f9 f836 	bl	8000404 <__aeabi_i2d>
 8007398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800739c:	f7f9 f89c 	bl	80004d8 <__aeabi_dmul>
 80073a0:	2200      	movs	r2, #0
 80073a2:	4b85      	ldr	r3, [pc, #532]	; (80075b8 <_dtoa_r+0x618>)
 80073a4:	f7f8 fee2 	bl	800016c <__adddf3>
 80073a8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80073ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80073b0:	950b      	str	r5, [sp, #44]	; 0x2c
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d15c      	bne.n	8007470 <_dtoa_r+0x4d0>
 80073b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	4b7f      	ldr	r3, [pc, #508]	; (80075bc <_dtoa_r+0x61c>)
 80073be:	f7f8 fed3 	bl	8000168 <__aeabi_dsub>
 80073c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c4:	462b      	mov	r3, r5
 80073c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ca:	f7f9 fb15 	bl	80009f8 <__aeabi_dcmpgt>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	f040 8281 	bne.w	80078d6 <_dtoa_r+0x936>
 80073d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073da:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80073de:	f7f9 faed 	bl	80009bc <__aeabi_dcmplt>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f040 8275 	bne.w	80078d2 <_dtoa_r+0x932>
 80073e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f2c0 814b 	blt.w	800768e <_dtoa_r+0x6ee>
 80073f8:	f1ba 0f0e 	cmp.w	sl, #14
 80073fc:	f300 8147 	bgt.w	800768e <_dtoa_r+0x6ee>
 8007400:	4b69      	ldr	r3, [pc, #420]	; (80075a8 <_dtoa_r+0x608>)
 8007402:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800740e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007410:	2b00      	cmp	r3, #0
 8007412:	f280 80d7 	bge.w	80075c4 <_dtoa_r+0x624>
 8007416:	f1b8 0f00 	cmp.w	r8, #0
 800741a:	f300 80d3 	bgt.w	80075c4 <_dtoa_r+0x624>
 800741e:	f040 8257 	bne.w	80078d0 <_dtoa_r+0x930>
 8007422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007426:	2200      	movs	r2, #0
 8007428:	4b64      	ldr	r3, [pc, #400]	; (80075bc <_dtoa_r+0x61c>)
 800742a:	f7f9 f855 	bl	80004d8 <__aeabi_dmul>
 800742e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007432:	f7f9 fad7 	bl	80009e4 <__aeabi_dcmpge>
 8007436:	4646      	mov	r6, r8
 8007438:	4647      	mov	r7, r8
 800743a:	2800      	cmp	r0, #0
 800743c:	f040 822d 	bne.w	800789a <_dtoa_r+0x8fa>
 8007440:	9b06      	ldr	r3, [sp, #24]
 8007442:	9a06      	ldr	r2, [sp, #24]
 8007444:	1c5d      	adds	r5, r3, #1
 8007446:	2331      	movs	r3, #49	; 0x31
 8007448:	f10a 0a01 	add.w	sl, sl, #1
 800744c:	7013      	strb	r3, [r2, #0]
 800744e:	e228      	b.n	80078a2 <_dtoa_r+0x902>
 8007450:	07f2      	lsls	r2, r6, #31
 8007452:	d505      	bpl.n	8007460 <_dtoa_r+0x4c0>
 8007454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007458:	f7f9 f83e 	bl	80004d8 <__aeabi_dmul>
 800745c:	2301      	movs	r3, #1
 800745e:	3501      	adds	r5, #1
 8007460:	1076      	asrs	r6, r6, #1
 8007462:	3708      	adds	r7, #8
 8007464:	e76e      	b.n	8007344 <_dtoa_r+0x3a4>
 8007466:	2502      	movs	r5, #2
 8007468:	e771      	b.n	800734e <_dtoa_r+0x3ae>
 800746a:	4657      	mov	r7, sl
 800746c:	4646      	mov	r6, r8
 800746e:	e790      	b.n	8007392 <_dtoa_r+0x3f2>
 8007470:	4b4d      	ldr	r3, [pc, #308]	; (80075a8 <_dtoa_r+0x608>)
 8007472:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007476:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800747a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	d048      	beq.n	8007512 <_dtoa_r+0x572>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	2000      	movs	r0, #0
 8007486:	494e      	ldr	r1, [pc, #312]	; (80075c0 <_dtoa_r+0x620>)
 8007488:	f7f9 f950 	bl	800072c <__aeabi_ddiv>
 800748c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007490:	f7f8 fe6a 	bl	8000168 <__aeabi_dsub>
 8007494:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007498:	9d06      	ldr	r5, [sp, #24]
 800749a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749e:	f7f9 facb 	bl	8000a38 <__aeabi_d2iz>
 80074a2:	9011      	str	r0, [sp, #68]	; 0x44
 80074a4:	f7f8 ffae 	bl	8000404 <__aeabi_i2d>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b0:	f7f8 fe5a 	bl	8000168 <__aeabi_dsub>
 80074b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ba:	3330      	adds	r3, #48	; 0x30
 80074bc:	f805 3b01 	strb.w	r3, [r5], #1
 80074c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074c4:	f7f9 fa7a 	bl	80009bc <__aeabi_dcmplt>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d163      	bne.n	8007594 <_dtoa_r+0x5f4>
 80074cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074d0:	2000      	movs	r0, #0
 80074d2:	4937      	ldr	r1, [pc, #220]	; (80075b0 <_dtoa_r+0x610>)
 80074d4:	f7f8 fe48 	bl	8000168 <__aeabi_dsub>
 80074d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074dc:	f7f9 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	f040 80b5 	bne.w	8007650 <_dtoa_r+0x6b0>
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	1aeb      	subs	r3, r5, r3
 80074ea:	429e      	cmp	r6, r3
 80074ec:	f77f af7c 	ble.w	80073e8 <_dtoa_r+0x448>
 80074f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074f4:	2200      	movs	r2, #0
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <_dtoa_r+0x614>)
 80074f8:	f7f8 ffee 	bl	80004d8 <__aeabi_dmul>
 80074fc:	2200      	movs	r2, #0
 80074fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007506:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <_dtoa_r+0x614>)
 8007508:	f7f8 ffe6 	bl	80004d8 <__aeabi_dmul>
 800750c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007510:	e7c3      	b.n	800749a <_dtoa_r+0x4fa>
 8007512:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007516:	f7f8 ffdf 	bl	80004d8 <__aeabi_dmul>
 800751a:	9b06      	ldr	r3, [sp, #24]
 800751c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007520:	199d      	adds	r5, r3, r6
 8007522:	461e      	mov	r6, r3
 8007524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007528:	f7f9 fa86 	bl	8000a38 <__aeabi_d2iz>
 800752c:	9011      	str	r0, [sp, #68]	; 0x44
 800752e:	f7f8 ff69 	bl	8000404 <__aeabi_i2d>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800753a:	f7f8 fe15 	bl	8000168 <__aeabi_dsub>
 800753e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007544:	3330      	adds	r3, #48	; 0x30
 8007546:	f806 3b01 	strb.w	r3, [r6], #1
 800754a:	42ae      	cmp	r6, r5
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	d124      	bne.n	800759c <_dtoa_r+0x5fc>
 8007552:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007556:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <_dtoa_r+0x620>)
 8007558:	f7f8 fe08 	bl	800016c <__adddf3>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007564:	f7f9 fa48 	bl	80009f8 <__aeabi_dcmpgt>
 8007568:	2800      	cmp	r0, #0
 800756a:	d171      	bne.n	8007650 <_dtoa_r+0x6b0>
 800756c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007570:	2000      	movs	r0, #0
 8007572:	4913      	ldr	r1, [pc, #76]	; (80075c0 <_dtoa_r+0x620>)
 8007574:	f7f8 fdf8 	bl	8000168 <__aeabi_dsub>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007580:	f7f9 fa1c 	bl	80009bc <__aeabi_dcmplt>
 8007584:	2800      	cmp	r0, #0
 8007586:	f43f af2f 	beq.w	80073e8 <_dtoa_r+0x448>
 800758a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800758e:	1e6a      	subs	r2, r5, #1
 8007590:	2b30      	cmp	r3, #48	; 0x30
 8007592:	d001      	beq.n	8007598 <_dtoa_r+0x5f8>
 8007594:	46ba      	mov	sl, r7
 8007596:	e04a      	b.n	800762e <_dtoa_r+0x68e>
 8007598:	4615      	mov	r5, r2
 800759a:	e7f6      	b.n	800758a <_dtoa_r+0x5ea>
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <_dtoa_r+0x614>)
 800759e:	f7f8 ff9b 	bl	80004d8 <__aeabi_dmul>
 80075a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a6:	e7bd      	b.n	8007524 <_dtoa_r+0x584>
 80075a8:	08009638 	.word	0x08009638
 80075ac:	08009610 	.word	0x08009610
 80075b0:	3ff00000 	.word	0x3ff00000
 80075b4:	40240000 	.word	0x40240000
 80075b8:	401c0000 	.word	0x401c0000
 80075bc:	40140000 	.word	0x40140000
 80075c0:	3fe00000 	.word	0x3fe00000
 80075c4:	9d06      	ldr	r5, [sp, #24]
 80075c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ce:	4630      	mov	r0, r6
 80075d0:	4639      	mov	r1, r7
 80075d2:	f7f9 f8ab 	bl	800072c <__aeabi_ddiv>
 80075d6:	f7f9 fa2f 	bl	8000a38 <__aeabi_d2iz>
 80075da:	4681      	mov	r9, r0
 80075dc:	f7f8 ff12 	bl	8000404 <__aeabi_i2d>
 80075e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e4:	f7f8 ff78 	bl	80004d8 <__aeabi_dmul>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4630      	mov	r0, r6
 80075ee:	4639      	mov	r1, r7
 80075f0:	f7f8 fdba 	bl	8000168 <__aeabi_dsub>
 80075f4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80075f8:	f805 6b01 	strb.w	r6, [r5], #1
 80075fc:	9e06      	ldr	r6, [sp, #24]
 80075fe:	4602      	mov	r2, r0
 8007600:	1bae      	subs	r6, r5, r6
 8007602:	45b0      	cmp	r8, r6
 8007604:	460b      	mov	r3, r1
 8007606:	d135      	bne.n	8007674 <_dtoa_r+0x6d4>
 8007608:	f7f8 fdb0 	bl	800016c <__adddf3>
 800760c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007610:	4606      	mov	r6, r0
 8007612:	460f      	mov	r7, r1
 8007614:	f7f9 f9f0 	bl	80009f8 <__aeabi_dcmpgt>
 8007618:	b9c8      	cbnz	r0, 800764e <_dtoa_r+0x6ae>
 800761a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800761e:	4630      	mov	r0, r6
 8007620:	4639      	mov	r1, r7
 8007622:	f7f9 f9c1 	bl	80009a8 <__aeabi_dcmpeq>
 8007626:	b110      	cbz	r0, 800762e <_dtoa_r+0x68e>
 8007628:	f019 0f01 	tst.w	r9, #1
 800762c:	d10f      	bne.n	800764e <_dtoa_r+0x6ae>
 800762e:	4659      	mov	r1, fp
 8007630:	4620      	mov	r0, r4
 8007632:	f000 ffe6 	bl	8008602 <_Bfree>
 8007636:	2300      	movs	r3, #0
 8007638:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800763a:	702b      	strb	r3, [r5, #0]
 800763c:	f10a 0301 	add.w	r3, sl, #1
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007644:	2b00      	cmp	r3, #0
 8007646:	f43f acf3 	beq.w	8007030 <_dtoa_r+0x90>
 800764a:	601d      	str	r5, [r3, #0]
 800764c:	e4f0      	b.n	8007030 <_dtoa_r+0x90>
 800764e:	4657      	mov	r7, sl
 8007650:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007654:	1e6b      	subs	r3, r5, #1
 8007656:	2a39      	cmp	r2, #57	; 0x39
 8007658:	d106      	bne.n	8007668 <_dtoa_r+0x6c8>
 800765a:	9a06      	ldr	r2, [sp, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	d107      	bne.n	8007670 <_dtoa_r+0x6d0>
 8007660:	2330      	movs	r3, #48	; 0x30
 8007662:	7013      	strb	r3, [r2, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	3701      	adds	r7, #1
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	3201      	adds	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e791      	b.n	8007594 <_dtoa_r+0x5f4>
 8007670:	461d      	mov	r5, r3
 8007672:	e7ed      	b.n	8007650 <_dtoa_r+0x6b0>
 8007674:	2200      	movs	r2, #0
 8007676:	4b99      	ldr	r3, [pc, #612]	; (80078dc <_dtoa_r+0x93c>)
 8007678:	f7f8 ff2e 	bl	80004d8 <__aeabi_dmul>
 800767c:	2200      	movs	r2, #0
 800767e:	2300      	movs	r3, #0
 8007680:	4606      	mov	r6, r0
 8007682:	460f      	mov	r7, r1
 8007684:	f7f9 f990 	bl	80009a8 <__aeabi_dcmpeq>
 8007688:	2800      	cmp	r0, #0
 800768a:	d09e      	beq.n	80075ca <_dtoa_r+0x62a>
 800768c:	e7cf      	b.n	800762e <_dtoa_r+0x68e>
 800768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007690:	2a00      	cmp	r2, #0
 8007692:	f000 8088 	beq.w	80077a6 <_dtoa_r+0x806>
 8007696:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007698:	2a01      	cmp	r2, #1
 800769a:	dc6d      	bgt.n	8007778 <_dtoa_r+0x7d8>
 800769c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800769e:	2a00      	cmp	r2, #0
 80076a0:	d066      	beq.n	8007770 <_dtoa_r+0x7d0>
 80076a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076a6:	464d      	mov	r5, r9
 80076a8:	9e08      	ldr	r6, [sp, #32]
 80076aa:	9a07      	ldr	r2, [sp, #28]
 80076ac:	2101      	movs	r1, #1
 80076ae:	441a      	add	r2, r3
 80076b0:	4620      	mov	r0, r4
 80076b2:	4499      	add	r9, r3
 80076b4:	9207      	str	r2, [sp, #28]
 80076b6:	f001 f882 	bl	80087be <__i2b>
 80076ba:	4607      	mov	r7, r0
 80076bc:	2d00      	cmp	r5, #0
 80076be:	dd0b      	ble.n	80076d8 <_dtoa_r+0x738>
 80076c0:	9b07      	ldr	r3, [sp, #28]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd08      	ble.n	80076d8 <_dtoa_r+0x738>
 80076c6:	42ab      	cmp	r3, r5
 80076c8:	bfa8      	it	ge
 80076ca:	462b      	movge	r3, r5
 80076cc:	9a07      	ldr	r2, [sp, #28]
 80076ce:	eba9 0903 	sub.w	r9, r9, r3
 80076d2:	1aed      	subs	r5, r5, r3
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	9307      	str	r3, [sp, #28]
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	b1eb      	cbz	r3, 8007718 <_dtoa_r+0x778>
 80076dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d065      	beq.n	80077ae <_dtoa_r+0x80e>
 80076e2:	b18e      	cbz	r6, 8007708 <_dtoa_r+0x768>
 80076e4:	4639      	mov	r1, r7
 80076e6:	4632      	mov	r2, r6
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 f907 	bl	80088fc <__pow5mult>
 80076ee:	465a      	mov	r2, fp
 80076f0:	4601      	mov	r1, r0
 80076f2:	4607      	mov	r7, r0
 80076f4:	4620      	mov	r0, r4
 80076f6:	f001 f86b 	bl	80087d0 <__multiply>
 80076fa:	4659      	mov	r1, fp
 80076fc:	900a      	str	r0, [sp, #40]	; 0x28
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 ff7f 	bl	8008602 <_Bfree>
 8007704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007706:	469b      	mov	fp, r3
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	1b9a      	subs	r2, r3, r6
 800770c:	d004      	beq.n	8007718 <_dtoa_r+0x778>
 800770e:	4659      	mov	r1, fp
 8007710:	4620      	mov	r0, r4
 8007712:	f001 f8f3 	bl	80088fc <__pow5mult>
 8007716:	4683      	mov	fp, r0
 8007718:	2101      	movs	r1, #1
 800771a:	4620      	mov	r0, r4
 800771c:	f001 f84f 	bl	80087be <__i2b>
 8007720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007722:	4606      	mov	r6, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 81c6 	beq.w	8007ab6 <_dtoa_r+0xb16>
 800772a:	461a      	mov	r2, r3
 800772c:	4601      	mov	r1, r0
 800772e:	4620      	mov	r0, r4
 8007730:	f001 f8e4 	bl	80088fc <__pow5mult>
 8007734:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007736:	4606      	mov	r6, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	dc3e      	bgt.n	80077ba <_dtoa_r+0x81a>
 800773c:	9b02      	ldr	r3, [sp, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d137      	bne.n	80077b2 <_dtoa_r+0x812>
 8007742:	9b03      	ldr	r3, [sp, #12]
 8007744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007748:	2b00      	cmp	r3, #0
 800774a:	d134      	bne.n	80077b6 <_dtoa_r+0x816>
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007752:	0d1b      	lsrs	r3, r3, #20
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	b12b      	cbz	r3, 8007764 <_dtoa_r+0x7c4>
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	f109 0901 	add.w	r9, r9, #1
 800775e:	3301      	adds	r3, #1
 8007760:	9307      	str	r3, [sp, #28]
 8007762:	2301      	movs	r3, #1
 8007764:	9308      	str	r3, [sp, #32]
 8007766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007768:	2b00      	cmp	r3, #0
 800776a:	d128      	bne.n	80077be <_dtoa_r+0x81e>
 800776c:	2001      	movs	r0, #1
 800776e:	e02e      	b.n	80077ce <_dtoa_r+0x82e>
 8007770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007772:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007776:	e796      	b.n	80076a6 <_dtoa_r+0x706>
 8007778:	9b08      	ldr	r3, [sp, #32]
 800777a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800777e:	42b3      	cmp	r3, r6
 8007780:	bfb7      	itett	lt
 8007782:	9b08      	ldrlt	r3, [sp, #32]
 8007784:	1b9e      	subge	r6, r3, r6
 8007786:	1af2      	sublt	r2, r6, r3
 8007788:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800778a:	bfbf      	itttt	lt
 800778c:	9608      	strlt	r6, [sp, #32]
 800778e:	189b      	addlt	r3, r3, r2
 8007790:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007792:	2600      	movlt	r6, #0
 8007794:	f1b8 0f00 	cmp.w	r8, #0
 8007798:	bfb9      	ittee	lt
 800779a:	eba9 0508 	sublt.w	r5, r9, r8
 800779e:	2300      	movlt	r3, #0
 80077a0:	464d      	movge	r5, r9
 80077a2:	4643      	movge	r3, r8
 80077a4:	e781      	b.n	80076aa <_dtoa_r+0x70a>
 80077a6:	9e08      	ldr	r6, [sp, #32]
 80077a8:	464d      	mov	r5, r9
 80077aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077ac:	e786      	b.n	80076bc <_dtoa_r+0x71c>
 80077ae:	9a08      	ldr	r2, [sp, #32]
 80077b0:	e7ad      	b.n	800770e <_dtoa_r+0x76e>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e7d6      	b.n	8007764 <_dtoa_r+0x7c4>
 80077b6:	9b02      	ldr	r3, [sp, #8]
 80077b8:	e7d4      	b.n	8007764 <_dtoa_r+0x7c4>
 80077ba:	2300      	movs	r3, #0
 80077bc:	9308      	str	r3, [sp, #32]
 80077be:	6933      	ldr	r3, [r6, #16]
 80077c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077c4:	6918      	ldr	r0, [r3, #16]
 80077c6:	f000 ffac 	bl	8008722 <__hi0bits>
 80077ca:	f1c0 0020 	rsb	r0, r0, #32
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	4418      	add	r0, r3
 80077d2:	f010 001f 	ands.w	r0, r0, #31
 80077d6:	d047      	beq.n	8007868 <_dtoa_r+0x8c8>
 80077d8:	f1c0 0320 	rsb	r3, r0, #32
 80077dc:	2b04      	cmp	r3, #4
 80077de:	dd3b      	ble.n	8007858 <_dtoa_r+0x8b8>
 80077e0:	9b07      	ldr	r3, [sp, #28]
 80077e2:	f1c0 001c 	rsb	r0, r0, #28
 80077e6:	4481      	add	r9, r0
 80077e8:	4405      	add	r5, r0
 80077ea:	4403      	add	r3, r0
 80077ec:	9307      	str	r3, [sp, #28]
 80077ee:	f1b9 0f00 	cmp.w	r9, #0
 80077f2:	dd05      	ble.n	8007800 <_dtoa_r+0x860>
 80077f4:	4659      	mov	r1, fp
 80077f6:	464a      	mov	r2, r9
 80077f8:	4620      	mov	r0, r4
 80077fa:	f001 f8cd 	bl	8008998 <__lshift>
 80077fe:	4683      	mov	fp, r0
 8007800:	9b07      	ldr	r3, [sp, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	dd05      	ble.n	8007812 <_dtoa_r+0x872>
 8007806:	4631      	mov	r1, r6
 8007808:	461a      	mov	r2, r3
 800780a:	4620      	mov	r0, r4
 800780c:	f001 f8c4 	bl	8008998 <__lshift>
 8007810:	4606      	mov	r6, r0
 8007812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007814:	b353      	cbz	r3, 800786c <_dtoa_r+0x8cc>
 8007816:	4631      	mov	r1, r6
 8007818:	4658      	mov	r0, fp
 800781a:	f001 f911 	bl	8008a40 <__mcmp>
 800781e:	2800      	cmp	r0, #0
 8007820:	da24      	bge.n	800786c <_dtoa_r+0x8cc>
 8007822:	2300      	movs	r3, #0
 8007824:	4659      	mov	r1, fp
 8007826:	220a      	movs	r2, #10
 8007828:	4620      	mov	r0, r4
 800782a:	f000 ff01 	bl	8008630 <__multadd>
 800782e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007830:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007834:	4683      	mov	fp, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 8144 	beq.w	8007ac4 <_dtoa_r+0xb24>
 800783c:	2300      	movs	r3, #0
 800783e:	4639      	mov	r1, r7
 8007840:	220a      	movs	r2, #10
 8007842:	4620      	mov	r0, r4
 8007844:	f000 fef4 	bl	8008630 <__multadd>
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	4607      	mov	r7, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc4d      	bgt.n	80078ec <_dtoa_r+0x94c>
 8007850:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007852:	2b02      	cmp	r3, #2
 8007854:	dd4a      	ble.n	80078ec <_dtoa_r+0x94c>
 8007856:	e011      	b.n	800787c <_dtoa_r+0x8dc>
 8007858:	d0c9      	beq.n	80077ee <_dtoa_r+0x84e>
 800785a:	9a07      	ldr	r2, [sp, #28]
 800785c:	331c      	adds	r3, #28
 800785e:	441a      	add	r2, r3
 8007860:	4499      	add	r9, r3
 8007862:	441d      	add	r5, r3
 8007864:	4613      	mov	r3, r2
 8007866:	e7c1      	b.n	80077ec <_dtoa_r+0x84c>
 8007868:	4603      	mov	r3, r0
 800786a:	e7f6      	b.n	800785a <_dtoa_r+0x8ba>
 800786c:	f1b8 0f00 	cmp.w	r8, #0
 8007870:	dc36      	bgt.n	80078e0 <_dtoa_r+0x940>
 8007872:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007874:	2b02      	cmp	r3, #2
 8007876:	dd33      	ble.n	80078e0 <_dtoa_r+0x940>
 8007878:	f8cd 8010 	str.w	r8, [sp, #16]
 800787c:	9b04      	ldr	r3, [sp, #16]
 800787e:	b963      	cbnz	r3, 800789a <_dtoa_r+0x8fa>
 8007880:	4631      	mov	r1, r6
 8007882:	2205      	movs	r2, #5
 8007884:	4620      	mov	r0, r4
 8007886:	f000 fed3 	bl	8008630 <__multadd>
 800788a:	4601      	mov	r1, r0
 800788c:	4606      	mov	r6, r0
 800788e:	4658      	mov	r0, fp
 8007890:	f001 f8d6 	bl	8008a40 <__mcmp>
 8007894:	2800      	cmp	r0, #0
 8007896:	f73f add3 	bgt.w	8007440 <_dtoa_r+0x4a0>
 800789a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800789c:	9d06      	ldr	r5, [sp, #24]
 800789e:	ea6f 0a03 	mvn.w	sl, r3
 80078a2:	f04f 0900 	mov.w	r9, #0
 80078a6:	4631      	mov	r1, r6
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 feaa 	bl	8008602 <_Bfree>
 80078ae:	2f00      	cmp	r7, #0
 80078b0:	f43f aebd 	beq.w	800762e <_dtoa_r+0x68e>
 80078b4:	f1b9 0f00 	cmp.w	r9, #0
 80078b8:	d005      	beq.n	80078c6 <_dtoa_r+0x926>
 80078ba:	45b9      	cmp	r9, r7
 80078bc:	d003      	beq.n	80078c6 <_dtoa_r+0x926>
 80078be:	4649      	mov	r1, r9
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 fe9e 	bl	8008602 <_Bfree>
 80078c6:	4639      	mov	r1, r7
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fe9a 	bl	8008602 <_Bfree>
 80078ce:	e6ae      	b.n	800762e <_dtoa_r+0x68e>
 80078d0:	2600      	movs	r6, #0
 80078d2:	4637      	mov	r7, r6
 80078d4:	e7e1      	b.n	800789a <_dtoa_r+0x8fa>
 80078d6:	46ba      	mov	sl, r7
 80078d8:	4637      	mov	r7, r6
 80078da:	e5b1      	b.n	8007440 <_dtoa_r+0x4a0>
 80078dc:	40240000 	.word	0x40240000
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80f3 	beq.w	8007ad2 <_dtoa_r+0xb32>
 80078ec:	2d00      	cmp	r5, #0
 80078ee:	dd05      	ble.n	80078fc <_dtoa_r+0x95c>
 80078f0:	4639      	mov	r1, r7
 80078f2:	462a      	mov	r2, r5
 80078f4:	4620      	mov	r0, r4
 80078f6:	f001 f84f 	bl	8008998 <__lshift>
 80078fa:	4607      	mov	r7, r0
 80078fc:	9b08      	ldr	r3, [sp, #32]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04c      	beq.n	800799c <_dtoa_r+0x9fc>
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fe48 	bl	800859a <_Balloc>
 800790a:	4605      	mov	r5, r0
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	f107 010c 	add.w	r1, r7, #12
 8007912:	3202      	adds	r2, #2
 8007914:	0092      	lsls	r2, r2, #2
 8007916:	300c      	adds	r0, #12
 8007918:	f000 fe34 	bl	8008584 <memcpy>
 800791c:	2201      	movs	r2, #1
 800791e:	4629      	mov	r1, r5
 8007920:	4620      	mov	r0, r4
 8007922:	f001 f839 	bl	8008998 <__lshift>
 8007926:	46b9      	mov	r9, r7
 8007928:	4607      	mov	r7, r0
 800792a:	9b06      	ldr	r3, [sp, #24]
 800792c:	9307      	str	r3, [sp, #28]
 800792e:	9b02      	ldr	r3, [sp, #8]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	9308      	str	r3, [sp, #32]
 8007936:	4631      	mov	r1, r6
 8007938:	4658      	mov	r0, fp
 800793a:	f7ff faa3 	bl	8006e84 <quorem>
 800793e:	4649      	mov	r1, r9
 8007940:	4605      	mov	r5, r0
 8007942:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007946:	4658      	mov	r0, fp
 8007948:	f001 f87a 	bl	8008a40 <__mcmp>
 800794c:	463a      	mov	r2, r7
 800794e:	9002      	str	r0, [sp, #8]
 8007950:	4631      	mov	r1, r6
 8007952:	4620      	mov	r0, r4
 8007954:	f001 f88e 	bl	8008a74 <__mdiff>
 8007958:	68c3      	ldr	r3, [r0, #12]
 800795a:	4602      	mov	r2, r0
 800795c:	bb03      	cbnz	r3, 80079a0 <_dtoa_r+0xa00>
 800795e:	4601      	mov	r1, r0
 8007960:	9009      	str	r0, [sp, #36]	; 0x24
 8007962:	4658      	mov	r0, fp
 8007964:	f001 f86c 	bl	8008a40 <__mcmp>
 8007968:	4603      	mov	r3, r0
 800796a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796c:	4611      	mov	r1, r2
 800796e:	4620      	mov	r0, r4
 8007970:	9309      	str	r3, [sp, #36]	; 0x24
 8007972:	f000 fe46 	bl	8008602 <_Bfree>
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	b9a3      	cbnz	r3, 80079a4 <_dtoa_r+0xa04>
 800797a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800797c:	b992      	cbnz	r2, 80079a4 <_dtoa_r+0xa04>
 800797e:	9a08      	ldr	r2, [sp, #32]
 8007980:	b982      	cbnz	r2, 80079a4 <_dtoa_r+0xa04>
 8007982:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007986:	d029      	beq.n	80079dc <_dtoa_r+0xa3c>
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	dd01      	ble.n	8007992 <_dtoa_r+0x9f2>
 800798e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007992:	9b07      	ldr	r3, [sp, #28]
 8007994:	1c5d      	adds	r5, r3, #1
 8007996:	f883 8000 	strb.w	r8, [r3]
 800799a:	e784      	b.n	80078a6 <_dtoa_r+0x906>
 800799c:	4638      	mov	r0, r7
 800799e:	e7c2      	b.n	8007926 <_dtoa_r+0x986>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e7e3      	b.n	800796c <_dtoa_r+0x9cc>
 80079a4:	9a02      	ldr	r2, [sp, #8]
 80079a6:	2a00      	cmp	r2, #0
 80079a8:	db04      	blt.n	80079b4 <_dtoa_r+0xa14>
 80079aa:	d123      	bne.n	80079f4 <_dtoa_r+0xa54>
 80079ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079ae:	bb0a      	cbnz	r2, 80079f4 <_dtoa_r+0xa54>
 80079b0:	9a08      	ldr	r2, [sp, #32]
 80079b2:	b9fa      	cbnz	r2, 80079f4 <_dtoa_r+0xa54>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	ddec      	ble.n	8007992 <_dtoa_r+0x9f2>
 80079b8:	4659      	mov	r1, fp
 80079ba:	2201      	movs	r2, #1
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 ffeb 	bl	8008998 <__lshift>
 80079c2:	4631      	mov	r1, r6
 80079c4:	4683      	mov	fp, r0
 80079c6:	f001 f83b 	bl	8008a40 <__mcmp>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	dc03      	bgt.n	80079d6 <_dtoa_r+0xa36>
 80079ce:	d1e0      	bne.n	8007992 <_dtoa_r+0x9f2>
 80079d0:	f018 0f01 	tst.w	r8, #1
 80079d4:	d0dd      	beq.n	8007992 <_dtoa_r+0x9f2>
 80079d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079da:	d1d8      	bne.n	800798e <_dtoa_r+0x9ee>
 80079dc:	9b07      	ldr	r3, [sp, #28]
 80079de:	9a07      	ldr	r2, [sp, #28]
 80079e0:	1c5d      	adds	r5, r3, #1
 80079e2:	2339      	movs	r3, #57	; 0x39
 80079e4:	7013      	strb	r3, [r2, #0]
 80079e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ea:	1e6a      	subs	r2, r5, #1
 80079ec:	2b39      	cmp	r3, #57	; 0x39
 80079ee:	d04d      	beq.n	8007a8c <_dtoa_r+0xaec>
 80079f0:	3301      	adds	r3, #1
 80079f2:	e052      	b.n	8007a9a <_dtoa_r+0xafa>
 80079f4:	9a07      	ldr	r2, [sp, #28]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f102 0501 	add.w	r5, r2, #1
 80079fc:	dd06      	ble.n	8007a0c <_dtoa_r+0xa6c>
 80079fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a02:	d0eb      	beq.n	80079dc <_dtoa_r+0xa3c>
 8007a04:	f108 0801 	add.w	r8, r8, #1
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	e7c4      	b.n	8007996 <_dtoa_r+0x9f6>
 8007a0c:	9b06      	ldr	r3, [sp, #24]
 8007a0e:	9a04      	ldr	r2, [sp, #16]
 8007a10:	1aeb      	subs	r3, r5, r3
 8007a12:	4293      	cmp	r3, r2
 8007a14:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007a18:	d021      	beq.n	8007a5e <_dtoa_r+0xabe>
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	220a      	movs	r2, #10
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fe05 	bl	8008630 <__multadd>
 8007a26:	45b9      	cmp	r9, r7
 8007a28:	4683      	mov	fp, r0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	f04f 020a 	mov.w	r2, #10
 8007a32:	4649      	mov	r1, r9
 8007a34:	4620      	mov	r0, r4
 8007a36:	d105      	bne.n	8007a44 <_dtoa_r+0xaa4>
 8007a38:	f000 fdfa 	bl	8008630 <__multadd>
 8007a3c:	4681      	mov	r9, r0
 8007a3e:	4607      	mov	r7, r0
 8007a40:	9507      	str	r5, [sp, #28]
 8007a42:	e778      	b.n	8007936 <_dtoa_r+0x996>
 8007a44:	f000 fdf4 	bl	8008630 <__multadd>
 8007a48:	4639      	mov	r1, r7
 8007a4a:	4681      	mov	r9, r0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	220a      	movs	r2, #10
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 fded 	bl	8008630 <__multadd>
 8007a56:	4607      	mov	r7, r0
 8007a58:	e7f2      	b.n	8007a40 <_dtoa_r+0xaa0>
 8007a5a:	f04f 0900 	mov.w	r9, #0
 8007a5e:	4659      	mov	r1, fp
 8007a60:	2201      	movs	r2, #1
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 ff98 	bl	8008998 <__lshift>
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4683      	mov	fp, r0
 8007a6c:	f000 ffe8 	bl	8008a40 <__mcmp>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	dcb8      	bgt.n	80079e6 <_dtoa_r+0xa46>
 8007a74:	d102      	bne.n	8007a7c <_dtoa_r+0xadc>
 8007a76:	f018 0f01 	tst.w	r8, #1
 8007a7a:	d1b4      	bne.n	80079e6 <_dtoa_r+0xa46>
 8007a7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a80:	1e6a      	subs	r2, r5, #1
 8007a82:	2b30      	cmp	r3, #48	; 0x30
 8007a84:	f47f af0f 	bne.w	80078a6 <_dtoa_r+0x906>
 8007a88:	4615      	mov	r5, r2
 8007a8a:	e7f7      	b.n	8007a7c <_dtoa_r+0xadc>
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d105      	bne.n	8007a9e <_dtoa_r+0xafe>
 8007a92:	2331      	movs	r3, #49	; 0x31
 8007a94:	9a06      	ldr	r2, [sp, #24]
 8007a96:	f10a 0a01 	add.w	sl, sl, #1
 8007a9a:	7013      	strb	r3, [r2, #0]
 8007a9c:	e703      	b.n	80078a6 <_dtoa_r+0x906>
 8007a9e:	4615      	mov	r5, r2
 8007aa0:	e7a1      	b.n	80079e6 <_dtoa_r+0xa46>
 8007aa2:	4b17      	ldr	r3, [pc, #92]	; (8007b00 <_dtoa_r+0xb60>)
 8007aa4:	f7ff bae1 	b.w	800706a <_dtoa_r+0xca>
 8007aa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f47f aabb 	bne.w	8007026 <_dtoa_r+0x86>
 8007ab0:	4b14      	ldr	r3, [pc, #80]	; (8007b04 <_dtoa_r+0xb64>)
 8007ab2:	f7ff bada 	b.w	800706a <_dtoa_r+0xca>
 8007ab6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	f77f ae3f 	ble.w	800773c <_dtoa_r+0x79c>
 8007abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac0:	9308      	str	r3, [sp, #32]
 8007ac2:	e653      	b.n	800776c <_dtoa_r+0x7cc>
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dc03      	bgt.n	8007ad2 <_dtoa_r+0xb32>
 8007aca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	f73f aed5 	bgt.w	800787c <_dtoa_r+0x8dc>
 8007ad2:	9d06      	ldr	r5, [sp, #24]
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4658      	mov	r0, fp
 8007ad8:	f7ff f9d4 	bl	8006e84 <quorem>
 8007adc:	9b06      	ldr	r3, [sp, #24]
 8007ade:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ae2:	f805 8b01 	strb.w	r8, [r5], #1
 8007ae6:	9a04      	ldr	r2, [sp, #16]
 8007ae8:	1aeb      	subs	r3, r5, r3
 8007aea:	429a      	cmp	r2, r3
 8007aec:	ddb5      	ble.n	8007a5a <_dtoa_r+0xaba>
 8007aee:	4659      	mov	r1, fp
 8007af0:	2300      	movs	r3, #0
 8007af2:	220a      	movs	r2, #10
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fd9b 	bl	8008630 <__multadd>
 8007afa:	4683      	mov	fp, r0
 8007afc:	e7ea      	b.n	8007ad4 <_dtoa_r+0xb34>
 8007afe:	bf00      	nop
 8007b00:	08009518 	.word	0x08009518
 8007b04:	08009590 	.word	0x08009590

08007b08 <__sflush_r>:
 8007b08:	898a      	ldrh	r2, [r1, #12]
 8007b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0e:	4605      	mov	r5, r0
 8007b10:	0710      	lsls	r0, r2, #28
 8007b12:	460c      	mov	r4, r1
 8007b14:	d458      	bmi.n	8007bc8 <__sflush_r+0xc0>
 8007b16:	684b      	ldr	r3, [r1, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dc05      	bgt.n	8007b28 <__sflush_r+0x20>
 8007b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dc02      	bgt.n	8007b28 <__sflush_r+0x20>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b2a:	2e00      	cmp	r6, #0
 8007b2c:	d0f9      	beq.n	8007b22 <__sflush_r+0x1a>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b34:	682f      	ldr	r7, [r5, #0]
 8007b36:	6a21      	ldr	r1, [r4, #32]
 8007b38:	602b      	str	r3, [r5, #0]
 8007b3a:	d032      	beq.n	8007ba2 <__sflush_r+0x9a>
 8007b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	075a      	lsls	r2, r3, #29
 8007b42:	d505      	bpl.n	8007b50 <__sflush_r+0x48>
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	1ac0      	subs	r0, r0, r3
 8007b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b4a:	b10b      	cbz	r3, 8007b50 <__sflush_r+0x48>
 8007b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b4e:	1ac0      	subs	r0, r0, r3
 8007b50:	2300      	movs	r3, #0
 8007b52:	4602      	mov	r2, r0
 8007b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b56:	6a21      	ldr	r1, [r4, #32]
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b0      	blx	r6
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	d106      	bne.n	8007b70 <__sflush_r+0x68>
 8007b62:	6829      	ldr	r1, [r5, #0]
 8007b64:	291d      	cmp	r1, #29
 8007b66:	d848      	bhi.n	8007bfa <__sflush_r+0xf2>
 8007b68:	4a29      	ldr	r2, [pc, #164]	; (8007c10 <__sflush_r+0x108>)
 8007b6a:	40ca      	lsrs	r2, r1
 8007b6c:	07d6      	lsls	r6, r2, #31
 8007b6e:	d544      	bpl.n	8007bfa <__sflush_r+0xf2>
 8007b70:	2200      	movs	r2, #0
 8007b72:	6062      	str	r2, [r4, #4]
 8007b74:	6922      	ldr	r2, [r4, #16]
 8007b76:	04d9      	lsls	r1, r3, #19
 8007b78:	6022      	str	r2, [r4, #0]
 8007b7a:	d504      	bpl.n	8007b86 <__sflush_r+0x7e>
 8007b7c:	1c42      	adds	r2, r0, #1
 8007b7e:	d101      	bne.n	8007b84 <__sflush_r+0x7c>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b903      	cbnz	r3, 8007b86 <__sflush_r+0x7e>
 8007b84:	6560      	str	r0, [r4, #84]	; 0x54
 8007b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b88:	602f      	str	r7, [r5, #0]
 8007b8a:	2900      	cmp	r1, #0
 8007b8c:	d0c9      	beq.n	8007b22 <__sflush_r+0x1a>
 8007b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b92:	4299      	cmp	r1, r3
 8007b94:	d002      	beq.n	8007b9c <__sflush_r+0x94>
 8007b96:	4628      	mov	r0, r5
 8007b98:	f001 f906 	bl	8008da8 <_free_r>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8007ba0:	e7c0      	b.n	8007b24 <__sflush_r+0x1c>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b0      	blx	r6
 8007ba8:	1c41      	adds	r1, r0, #1
 8007baa:	d1c8      	bne.n	8007b3e <__sflush_r+0x36>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0c5      	beq.n	8007b3e <__sflush_r+0x36>
 8007bb2:	2b1d      	cmp	r3, #29
 8007bb4:	d001      	beq.n	8007bba <__sflush_r+0xb2>
 8007bb6:	2b16      	cmp	r3, #22
 8007bb8:	d101      	bne.n	8007bbe <__sflush_r+0xb6>
 8007bba:	602f      	str	r7, [r5, #0]
 8007bbc:	e7b1      	b.n	8007b22 <__sflush_r+0x1a>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	e7ad      	b.n	8007b24 <__sflush_r+0x1c>
 8007bc8:	690f      	ldr	r7, [r1, #16]
 8007bca:	2f00      	cmp	r7, #0
 8007bcc:	d0a9      	beq.n	8007b22 <__sflush_r+0x1a>
 8007bce:	0793      	lsls	r3, r2, #30
 8007bd0:	bf18      	it	ne
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	680e      	ldr	r6, [r1, #0]
 8007bd6:	bf08      	it	eq
 8007bd8:	694b      	ldreq	r3, [r1, #20]
 8007bda:	eba6 0807 	sub.w	r8, r6, r7
 8007bde:	600f      	str	r7, [r1, #0]
 8007be0:	608b      	str	r3, [r1, #8]
 8007be2:	f1b8 0f00 	cmp.w	r8, #0
 8007be6:	dd9c      	ble.n	8007b22 <__sflush_r+0x1a>
 8007be8:	4643      	mov	r3, r8
 8007bea:	463a      	mov	r2, r7
 8007bec:	6a21      	ldr	r1, [r4, #32]
 8007bee:	4628      	mov	r0, r5
 8007bf0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bf2:	47b0      	blx	r6
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	dc06      	bgt.n	8007c06 <__sflush_r+0xfe>
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c04:	e78e      	b.n	8007b24 <__sflush_r+0x1c>
 8007c06:	4407      	add	r7, r0
 8007c08:	eba8 0800 	sub.w	r8, r8, r0
 8007c0c:	e7e9      	b.n	8007be2 <__sflush_r+0xda>
 8007c0e:	bf00      	nop
 8007c10:	20400001 	.word	0x20400001

08007c14 <_fflush_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	690b      	ldr	r3, [r1, #16]
 8007c18:	4605      	mov	r5, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	b1db      	cbz	r3, 8007c56 <_fflush_r+0x42>
 8007c1e:	b118      	cbz	r0, 8007c28 <_fflush_r+0x14>
 8007c20:	6983      	ldr	r3, [r0, #24]
 8007c22:	b90b      	cbnz	r3, 8007c28 <_fflush_r+0x14>
 8007c24:	f000 f860 	bl	8007ce8 <__sinit>
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <_fflush_r+0x48>)
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	d109      	bne.n	8007c42 <_fflush_r+0x2e>
 8007c2e:	686c      	ldr	r4, [r5, #4]
 8007c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c34:	b17b      	cbz	r3, 8007c56 <_fflush_r+0x42>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3e:	f7ff bf63 	b.w	8007b08 <__sflush_r>
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <_fflush_r+0x4c>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d101      	bne.n	8007c4c <_fflush_r+0x38>
 8007c48:	68ac      	ldr	r4, [r5, #8]
 8007c4a:	e7f1      	b.n	8007c30 <_fflush_r+0x1c>
 8007c4c:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <_fflush_r+0x50>)
 8007c4e:	429c      	cmp	r4, r3
 8007c50:	bf08      	it	eq
 8007c52:	68ec      	ldreq	r4, [r5, #12]
 8007c54:	e7ec      	b.n	8007c30 <_fflush_r+0x1c>
 8007c56:	2000      	movs	r0, #0
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	080095c0 	.word	0x080095c0
 8007c60:	080095e0 	.word	0x080095e0
 8007c64:	080095a0 	.word	0x080095a0

08007c68 <std>:
 8007c68:	2300      	movs	r3, #0
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c72:	6083      	str	r3, [r0, #8]
 8007c74:	8181      	strh	r1, [r0, #12]
 8007c76:	6643      	str	r3, [r0, #100]	; 0x64
 8007c78:	81c2      	strh	r2, [r0, #14]
 8007c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c7e:	6183      	str	r3, [r0, #24]
 8007c80:	4619      	mov	r1, r3
 8007c82:	2208      	movs	r2, #8
 8007c84:	305c      	adds	r0, #92	; 0x5c
 8007c86:	f7fd fd33 	bl	80056f0 <memset>
 8007c8a:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <std+0x38>)
 8007c8c:	6224      	str	r4, [r4, #32]
 8007c8e:	6263      	str	r3, [r4, #36]	; 0x24
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <std+0x3c>)
 8007c92:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <std+0x40>)
 8007c96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <std+0x44>)
 8007c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c9c:	bd10      	pop	{r4, pc}
 8007c9e:	bf00      	nop
 8007ca0:	08009191 	.word	0x08009191
 8007ca4:	080091b3 	.word	0x080091b3
 8007ca8:	080091eb 	.word	0x080091eb
 8007cac:	0800920f 	.word	0x0800920f

08007cb0 <_cleanup_r>:
 8007cb0:	4901      	ldr	r1, [pc, #4]	; (8007cb8 <_cleanup_r+0x8>)
 8007cb2:	f000 b885 	b.w	8007dc0 <_fwalk_reent>
 8007cb6:	bf00      	nop
 8007cb8:	08007c15 	.word	0x08007c15

08007cbc <__sfmoreglue>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	2568      	movs	r5, #104	; 0x68
 8007cc0:	1e4a      	subs	r2, r1, #1
 8007cc2:	4355      	muls	r5, r2
 8007cc4:	460e      	mov	r6, r1
 8007cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cca:	f001 f8b9 	bl	8008e40 <_malloc_r>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	b140      	cbz	r0, 8007ce4 <__sfmoreglue+0x28>
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007cd8:	300c      	adds	r0, #12
 8007cda:	60a0      	str	r0, [r4, #8]
 8007cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ce0:	f7fd fd06 	bl	80056f0 <memset>
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}

08007ce8 <__sinit>:
 8007ce8:	6983      	ldr	r3, [r0, #24]
 8007cea:	b510      	push	{r4, lr}
 8007cec:	4604      	mov	r4, r0
 8007cee:	bb33      	cbnz	r3, 8007d3e <__sinit+0x56>
 8007cf0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007cf4:	6503      	str	r3, [r0, #80]	; 0x50
 8007cf6:	4b12      	ldr	r3, [pc, #72]	; (8007d40 <__sinit+0x58>)
 8007cf8:	4a12      	ldr	r2, [pc, #72]	; (8007d44 <__sinit+0x5c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6282      	str	r2, [r0, #40]	; 0x28
 8007cfe:	4298      	cmp	r0, r3
 8007d00:	bf04      	itt	eq
 8007d02:	2301      	moveq	r3, #1
 8007d04:	6183      	streq	r3, [r0, #24]
 8007d06:	f000 f81f 	bl	8007d48 <__sfp>
 8007d0a:	6060      	str	r0, [r4, #4]
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 f81b 	bl	8007d48 <__sfp>
 8007d12:	60a0      	str	r0, [r4, #8]
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 f817 	bl	8007d48 <__sfp>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	60e0      	str	r0, [r4, #12]
 8007d1e:	2104      	movs	r1, #4
 8007d20:	6860      	ldr	r0, [r4, #4]
 8007d22:	f7ff ffa1 	bl	8007c68 <std>
 8007d26:	2201      	movs	r2, #1
 8007d28:	2109      	movs	r1, #9
 8007d2a:	68a0      	ldr	r0, [r4, #8]
 8007d2c:	f7ff ff9c 	bl	8007c68 <std>
 8007d30:	2202      	movs	r2, #2
 8007d32:	2112      	movs	r1, #18
 8007d34:	68e0      	ldr	r0, [r4, #12]
 8007d36:	f7ff ff97 	bl	8007c68 <std>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	61a3      	str	r3, [r4, #24]
 8007d3e:	bd10      	pop	{r4, pc}
 8007d40:	08009504 	.word	0x08009504
 8007d44:	08007cb1 	.word	0x08007cb1

08007d48 <__sfp>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <__sfp+0x70>)
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	681e      	ldr	r6, [r3, #0]
 8007d50:	69b3      	ldr	r3, [r6, #24]
 8007d52:	b913      	cbnz	r3, 8007d5a <__sfp+0x12>
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff ffc7 	bl	8007ce8 <__sinit>
 8007d5a:	3648      	adds	r6, #72	; 0x48
 8007d5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	d503      	bpl.n	8007d6c <__sfp+0x24>
 8007d64:	6833      	ldr	r3, [r6, #0]
 8007d66:	b133      	cbz	r3, 8007d76 <__sfp+0x2e>
 8007d68:	6836      	ldr	r6, [r6, #0]
 8007d6a:	e7f7      	b.n	8007d5c <__sfp+0x14>
 8007d6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d70:	b16d      	cbz	r5, 8007d8e <__sfp+0x46>
 8007d72:	3468      	adds	r4, #104	; 0x68
 8007d74:	e7f4      	b.n	8007d60 <__sfp+0x18>
 8007d76:	2104      	movs	r1, #4
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f7ff ff9f 	bl	8007cbc <__sfmoreglue>
 8007d7e:	6030      	str	r0, [r6, #0]
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1f1      	bne.n	8007d68 <__sfp+0x20>
 8007d84:	230c      	movs	r3, #12
 8007d86:	4604      	mov	r4, r0
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8e:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <__sfp+0x74>)
 8007d90:	6665      	str	r5, [r4, #100]	; 0x64
 8007d92:	e9c4 5500 	strd	r5, r5, [r4]
 8007d96:	60a5      	str	r5, [r4, #8]
 8007d98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007d9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007da0:	2208      	movs	r2, #8
 8007da2:	4629      	mov	r1, r5
 8007da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007da8:	f7fd fca2 	bl	80056f0 <memset>
 8007dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007db4:	e7e9      	b.n	8007d8a <__sfp+0x42>
 8007db6:	bf00      	nop
 8007db8:	08009504 	.word	0x08009504
 8007dbc:	ffff0001 	.word	0xffff0001

08007dc0 <_fwalk_reent>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	4689      	mov	r9, r1
 8007dc8:	2600      	movs	r6, #0
 8007dca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dce:	b914      	cbnz	r4, 8007dd6 <_fwalk_reent+0x16>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007dda:	3f01      	subs	r7, #1
 8007ddc:	d501      	bpl.n	8007de2 <_fwalk_reent+0x22>
 8007dde:	6824      	ldr	r4, [r4, #0]
 8007de0:	e7f5      	b.n	8007dce <_fwalk_reent+0xe>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d907      	bls.n	8007df8 <_fwalk_reent+0x38>
 8007de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dec:	3301      	adds	r3, #1
 8007dee:	d003      	beq.n	8007df8 <_fwalk_reent+0x38>
 8007df0:	4629      	mov	r1, r5
 8007df2:	4640      	mov	r0, r8
 8007df4:	47c8      	blx	r9
 8007df6:	4306      	orrs	r6, r0
 8007df8:	3568      	adds	r5, #104	; 0x68
 8007dfa:	e7ee      	b.n	8007dda <_fwalk_reent+0x1a>

08007dfc <rshift>:
 8007dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfe:	6906      	ldr	r6, [r0, #16]
 8007e00:	114b      	asrs	r3, r1, #5
 8007e02:	429e      	cmp	r6, r3
 8007e04:	f100 0414 	add.w	r4, r0, #20
 8007e08:	dd31      	ble.n	8007e6e <rshift+0x72>
 8007e0a:	f011 011f 	ands.w	r1, r1, #31
 8007e0e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e12:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e16:	d108      	bne.n	8007e2a <rshift+0x2e>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	42b2      	cmp	r2, r6
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	d211      	bcs.n	8007e44 <rshift+0x48>
 8007e20:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e24:	f841 3b04 	str.w	r3, [r1], #4
 8007e28:	e7f7      	b.n	8007e1a <rshift+0x1e>
 8007e2a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e2e:	4623      	mov	r3, r4
 8007e30:	f1c1 0c20 	rsb	ip, r1, #32
 8007e34:	40cd      	lsrs	r5, r1
 8007e36:	3204      	adds	r2, #4
 8007e38:	42b2      	cmp	r2, r6
 8007e3a:	4617      	mov	r7, r2
 8007e3c:	d30d      	bcc.n	8007e5a <rshift+0x5e>
 8007e3e:	601d      	str	r5, [r3, #0]
 8007e40:	b105      	cbz	r5, 8007e44 <rshift+0x48>
 8007e42:	3304      	adds	r3, #4
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	eba3 0204 	sub.w	r2, r3, r4
 8007e4a:	bf08      	it	eq
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e52:	6102      	str	r2, [r0, #16]
 8007e54:	bf08      	it	eq
 8007e56:	6143      	streq	r3, [r0, #20]
 8007e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5a:	683f      	ldr	r7, [r7, #0]
 8007e5c:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e60:	433d      	orrs	r5, r7
 8007e62:	f843 5b04 	str.w	r5, [r3], #4
 8007e66:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e6a:	40cd      	lsrs	r5, r1
 8007e6c:	e7e4      	b.n	8007e38 <rshift+0x3c>
 8007e6e:	4623      	mov	r3, r4
 8007e70:	e7e8      	b.n	8007e44 <rshift+0x48>

08007e72 <__hexdig_fun>:
 8007e72:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e76:	2b09      	cmp	r3, #9
 8007e78:	d802      	bhi.n	8007e80 <__hexdig_fun+0xe>
 8007e7a:	3820      	subs	r0, #32
 8007e7c:	b2c0      	uxtb	r0, r0
 8007e7e:	4770      	bx	lr
 8007e80:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e84:	2b05      	cmp	r3, #5
 8007e86:	d801      	bhi.n	8007e8c <__hexdig_fun+0x1a>
 8007e88:	3847      	subs	r0, #71	; 0x47
 8007e8a:	e7f7      	b.n	8007e7c <__hexdig_fun+0xa>
 8007e8c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e90:	2b05      	cmp	r3, #5
 8007e92:	d801      	bhi.n	8007e98 <__hexdig_fun+0x26>
 8007e94:	3827      	subs	r0, #39	; 0x27
 8007e96:	e7f1      	b.n	8007e7c <__hexdig_fun+0xa>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	4770      	bx	lr

08007e9c <__gethex>:
 8007e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	b08b      	sub	sp, #44	; 0x2c
 8007ea2:	9002      	str	r0, [sp, #8]
 8007ea4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007ea6:	468a      	mov	sl, r1
 8007ea8:	4690      	mov	r8, r2
 8007eaa:	9306      	str	r3, [sp, #24]
 8007eac:	f000 face 	bl	800844c <__localeconv_l>
 8007eb0:	6803      	ldr	r3, [r0, #0]
 8007eb2:	f04f 0b00 	mov.w	fp, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	9303      	str	r3, [sp, #12]
 8007eba:	f7f8 f949 	bl	8000150 <strlen>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	9001      	str	r0, [sp, #4]
 8007ec2:	4403      	add	r3, r0
 8007ec4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ec8:	9307      	str	r3, [sp, #28]
 8007eca:	f8da 3000 	ldr.w	r3, [sl]
 8007ece:	3302      	adds	r3, #2
 8007ed0:	461f      	mov	r7, r3
 8007ed2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ed6:	2830      	cmp	r0, #48	; 0x30
 8007ed8:	d06c      	beq.n	8007fb4 <__gethex+0x118>
 8007eda:	f7ff ffca 	bl	8007e72 <__hexdig_fun>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d16a      	bne.n	8007fba <__gethex+0x11e>
 8007ee4:	9a01      	ldr	r2, [sp, #4]
 8007ee6:	9903      	ldr	r1, [sp, #12]
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f001 f994 	bl	8009216 <strncmp>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d166      	bne.n	8007fc0 <__gethex+0x124>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	5cf8      	ldrb	r0, [r7, r3]
 8007ef6:	18fe      	adds	r6, r7, r3
 8007ef8:	f7ff ffbb 	bl	8007e72 <__hexdig_fun>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d062      	beq.n	8007fc6 <__gethex+0x12a>
 8007f00:	4633      	mov	r3, r6
 8007f02:	7818      	ldrb	r0, [r3, #0]
 8007f04:	461f      	mov	r7, r3
 8007f06:	2830      	cmp	r0, #48	; 0x30
 8007f08:	f103 0301 	add.w	r3, r3, #1
 8007f0c:	d0f9      	beq.n	8007f02 <__gethex+0x66>
 8007f0e:	f7ff ffb0 	bl	8007e72 <__hexdig_fun>
 8007f12:	fab0 f580 	clz	r5, r0
 8007f16:	4634      	mov	r4, r6
 8007f18:	f04f 0b01 	mov.w	fp, #1
 8007f1c:	096d      	lsrs	r5, r5, #5
 8007f1e:	463a      	mov	r2, r7
 8007f20:	4616      	mov	r6, r2
 8007f22:	7830      	ldrb	r0, [r6, #0]
 8007f24:	3201      	adds	r2, #1
 8007f26:	f7ff ffa4 	bl	8007e72 <__hexdig_fun>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d1f8      	bne.n	8007f20 <__gethex+0x84>
 8007f2e:	9a01      	ldr	r2, [sp, #4]
 8007f30:	9903      	ldr	r1, [sp, #12]
 8007f32:	4630      	mov	r0, r6
 8007f34:	f001 f96f 	bl	8009216 <strncmp>
 8007f38:	b950      	cbnz	r0, 8007f50 <__gethex+0xb4>
 8007f3a:	b954      	cbnz	r4, 8007f52 <__gethex+0xb6>
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	18f4      	adds	r4, r6, r3
 8007f40:	4622      	mov	r2, r4
 8007f42:	4616      	mov	r6, r2
 8007f44:	7830      	ldrb	r0, [r6, #0]
 8007f46:	3201      	adds	r2, #1
 8007f48:	f7ff ff93 	bl	8007e72 <__hexdig_fun>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d1f8      	bne.n	8007f42 <__gethex+0xa6>
 8007f50:	b10c      	cbz	r4, 8007f56 <__gethex+0xba>
 8007f52:	1ba4      	subs	r4, r4, r6
 8007f54:	00a4      	lsls	r4, r4, #2
 8007f56:	7833      	ldrb	r3, [r6, #0]
 8007f58:	2b50      	cmp	r3, #80	; 0x50
 8007f5a:	d001      	beq.n	8007f60 <__gethex+0xc4>
 8007f5c:	2b70      	cmp	r3, #112	; 0x70
 8007f5e:	d140      	bne.n	8007fe2 <__gethex+0x146>
 8007f60:	7873      	ldrb	r3, [r6, #1]
 8007f62:	2b2b      	cmp	r3, #43	; 0x2b
 8007f64:	d031      	beq.n	8007fca <__gethex+0x12e>
 8007f66:	2b2d      	cmp	r3, #45	; 0x2d
 8007f68:	d033      	beq.n	8007fd2 <__gethex+0x136>
 8007f6a:	f04f 0900 	mov.w	r9, #0
 8007f6e:	1c71      	adds	r1, r6, #1
 8007f70:	7808      	ldrb	r0, [r1, #0]
 8007f72:	f7ff ff7e 	bl	8007e72 <__hexdig_fun>
 8007f76:	1e43      	subs	r3, r0, #1
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b18      	cmp	r3, #24
 8007f7c:	d831      	bhi.n	8007fe2 <__gethex+0x146>
 8007f7e:	f1a0 0210 	sub.w	r2, r0, #16
 8007f82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f86:	f7ff ff74 	bl	8007e72 <__hexdig_fun>
 8007f8a:	1e43      	subs	r3, r0, #1
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b18      	cmp	r3, #24
 8007f90:	d922      	bls.n	8007fd8 <__gethex+0x13c>
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	d000      	beq.n	8007f9a <__gethex+0xfe>
 8007f98:	4252      	negs	r2, r2
 8007f9a:	4414      	add	r4, r2
 8007f9c:	f8ca 1000 	str.w	r1, [sl]
 8007fa0:	b30d      	cbz	r5, 8007fe6 <__gethex+0x14a>
 8007fa2:	f1bb 0f00 	cmp.w	fp, #0
 8007fa6:	bf0c      	ite	eq
 8007fa8:	2706      	moveq	r7, #6
 8007faa:	2700      	movne	r7, #0
 8007fac:	4638      	mov	r0, r7
 8007fae:	b00b      	add	sp, #44	; 0x2c
 8007fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb4:	f10b 0b01 	add.w	fp, fp, #1
 8007fb8:	e78a      	b.n	8007ed0 <__gethex+0x34>
 8007fba:	2500      	movs	r5, #0
 8007fbc:	462c      	mov	r4, r5
 8007fbe:	e7ae      	b.n	8007f1e <__gethex+0x82>
 8007fc0:	463e      	mov	r6, r7
 8007fc2:	2501      	movs	r5, #1
 8007fc4:	e7c7      	b.n	8007f56 <__gethex+0xba>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	e7fb      	b.n	8007fc2 <__gethex+0x126>
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	1cb1      	adds	r1, r6, #2
 8007fd0:	e7ce      	b.n	8007f70 <__gethex+0xd4>
 8007fd2:	f04f 0901 	mov.w	r9, #1
 8007fd6:	e7fa      	b.n	8007fce <__gethex+0x132>
 8007fd8:	230a      	movs	r3, #10
 8007fda:	fb03 0202 	mla	r2, r3, r2, r0
 8007fde:	3a10      	subs	r2, #16
 8007fe0:	e7cf      	b.n	8007f82 <__gethex+0xe6>
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	e7da      	b.n	8007f9c <__gethex+0x100>
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	1bf3      	subs	r3, r6, r7
 8007fea:	3b01      	subs	r3, #1
 8007fec:	2b07      	cmp	r3, #7
 8007fee:	dc49      	bgt.n	8008084 <__gethex+0x1e8>
 8007ff0:	9802      	ldr	r0, [sp, #8]
 8007ff2:	f000 fad2 	bl	800859a <_Balloc>
 8007ff6:	f04f 0b00 	mov.w	fp, #0
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	46da      	mov	sl, fp
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	f100 0914 	add.w	r9, r0, #20
 8008004:	f1c3 0301 	rsb	r3, r3, #1
 8008008:	f8cd 9010 	str.w	r9, [sp, #16]
 800800c:	9308      	str	r3, [sp, #32]
 800800e:	42b7      	cmp	r7, r6
 8008010:	d33b      	bcc.n	800808a <__gethex+0x1ee>
 8008012:	9804      	ldr	r0, [sp, #16]
 8008014:	f840 ab04 	str.w	sl, [r0], #4
 8008018:	eba0 0009 	sub.w	r0, r0, r9
 800801c:	1080      	asrs	r0, r0, #2
 800801e:	6128      	str	r0, [r5, #16]
 8008020:	0147      	lsls	r7, r0, #5
 8008022:	4650      	mov	r0, sl
 8008024:	f000 fb7d 	bl	8008722 <__hi0bits>
 8008028:	f8d8 6000 	ldr.w	r6, [r8]
 800802c:	1a3f      	subs	r7, r7, r0
 800802e:	42b7      	cmp	r7, r6
 8008030:	dd64      	ble.n	80080fc <__gethex+0x260>
 8008032:	1bbf      	subs	r7, r7, r6
 8008034:	4639      	mov	r1, r7
 8008036:	4628      	mov	r0, r5
 8008038:	f000 fe87 	bl	8008d4a <__any_on>
 800803c:	4682      	mov	sl, r0
 800803e:	b178      	cbz	r0, 8008060 <__gethex+0x1c4>
 8008040:	f04f 0a01 	mov.w	sl, #1
 8008044:	1e7b      	subs	r3, r7, #1
 8008046:	1159      	asrs	r1, r3, #5
 8008048:	f003 021f 	and.w	r2, r3, #31
 800804c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008050:	fa0a f202 	lsl.w	r2, sl, r2
 8008054:	420a      	tst	r2, r1
 8008056:	d003      	beq.n	8008060 <__gethex+0x1c4>
 8008058:	4553      	cmp	r3, sl
 800805a:	dc46      	bgt.n	80080ea <__gethex+0x24e>
 800805c:	f04f 0a02 	mov.w	sl, #2
 8008060:	4639      	mov	r1, r7
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff feca 	bl	8007dfc <rshift>
 8008068:	443c      	add	r4, r7
 800806a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800806e:	42a3      	cmp	r3, r4
 8008070:	da52      	bge.n	8008118 <__gethex+0x27c>
 8008072:	4629      	mov	r1, r5
 8008074:	9802      	ldr	r0, [sp, #8]
 8008076:	f000 fac4 	bl	8008602 <_Bfree>
 800807a:	2300      	movs	r3, #0
 800807c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800807e:	27a3      	movs	r7, #163	; 0xa3
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	e793      	b.n	8007fac <__gethex+0x110>
 8008084:	3101      	adds	r1, #1
 8008086:	105b      	asrs	r3, r3, #1
 8008088:	e7b0      	b.n	8007fec <__gethex+0x150>
 800808a:	1e73      	subs	r3, r6, #1
 800808c:	9305      	str	r3, [sp, #20]
 800808e:	9a07      	ldr	r2, [sp, #28]
 8008090:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008094:	4293      	cmp	r3, r2
 8008096:	d018      	beq.n	80080ca <__gethex+0x22e>
 8008098:	f1bb 0f20 	cmp.w	fp, #32
 800809c:	d107      	bne.n	80080ae <__gethex+0x212>
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	f8c3 a000 	str.w	sl, [r3]
 80080a4:	f04f 0a00 	mov.w	sl, #0
 80080a8:	46d3      	mov	fp, sl
 80080aa:	3304      	adds	r3, #4
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080b2:	f7ff fede 	bl	8007e72 <__hexdig_fun>
 80080b6:	f000 000f 	and.w	r0, r0, #15
 80080ba:	fa00 f00b 	lsl.w	r0, r0, fp
 80080be:	ea4a 0a00 	orr.w	sl, sl, r0
 80080c2:	f10b 0b04 	add.w	fp, fp, #4
 80080c6:	9b05      	ldr	r3, [sp, #20]
 80080c8:	e00d      	b.n	80080e6 <__gethex+0x24a>
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	4413      	add	r3, r2
 80080d0:	42bb      	cmp	r3, r7
 80080d2:	d3e1      	bcc.n	8008098 <__gethex+0x1fc>
 80080d4:	4618      	mov	r0, r3
 80080d6:	9a01      	ldr	r2, [sp, #4]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
 80080dc:	f001 f89b 	bl	8009216 <strncmp>
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d1d8      	bne.n	8008098 <__gethex+0x1fc>
 80080e6:	461e      	mov	r6, r3
 80080e8:	e791      	b.n	800800e <__gethex+0x172>
 80080ea:	1eb9      	subs	r1, r7, #2
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 fe2c 	bl	8008d4a <__any_on>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0b2      	beq.n	800805c <__gethex+0x1c0>
 80080f6:	f04f 0a03 	mov.w	sl, #3
 80080fa:	e7b1      	b.n	8008060 <__gethex+0x1c4>
 80080fc:	da09      	bge.n	8008112 <__gethex+0x276>
 80080fe:	1bf7      	subs	r7, r6, r7
 8008100:	4629      	mov	r1, r5
 8008102:	463a      	mov	r2, r7
 8008104:	9802      	ldr	r0, [sp, #8]
 8008106:	f000 fc47 	bl	8008998 <__lshift>
 800810a:	4605      	mov	r5, r0
 800810c:	1be4      	subs	r4, r4, r7
 800810e:	f100 0914 	add.w	r9, r0, #20
 8008112:	f04f 0a00 	mov.w	sl, #0
 8008116:	e7a8      	b.n	800806a <__gethex+0x1ce>
 8008118:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800811c:	42a0      	cmp	r0, r4
 800811e:	dd6b      	ble.n	80081f8 <__gethex+0x35c>
 8008120:	1b04      	subs	r4, r0, r4
 8008122:	42a6      	cmp	r6, r4
 8008124:	dc2e      	bgt.n	8008184 <__gethex+0x2e8>
 8008126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d022      	beq.n	8008174 <__gethex+0x2d8>
 800812e:	2b03      	cmp	r3, #3
 8008130:	d024      	beq.n	800817c <__gethex+0x2e0>
 8008132:	2b01      	cmp	r3, #1
 8008134:	d115      	bne.n	8008162 <__gethex+0x2c6>
 8008136:	42a6      	cmp	r6, r4
 8008138:	d113      	bne.n	8008162 <__gethex+0x2c6>
 800813a:	2e01      	cmp	r6, #1
 800813c:	dc0b      	bgt.n	8008156 <__gethex+0x2ba>
 800813e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008142:	9a06      	ldr	r2, [sp, #24]
 8008144:	2762      	movs	r7, #98	; 0x62
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	2301      	movs	r3, #1
 800814a:	612b      	str	r3, [r5, #16]
 800814c:	f8c9 3000 	str.w	r3, [r9]
 8008150:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008152:	601d      	str	r5, [r3, #0]
 8008154:	e72a      	b.n	8007fac <__gethex+0x110>
 8008156:	1e71      	subs	r1, r6, #1
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fdf6 	bl	8008d4a <__any_on>
 800815e:	2800      	cmp	r0, #0
 8008160:	d1ed      	bne.n	800813e <__gethex+0x2a2>
 8008162:	4629      	mov	r1, r5
 8008164:	9802      	ldr	r0, [sp, #8]
 8008166:	f000 fa4c 	bl	8008602 <_Bfree>
 800816a:	2300      	movs	r3, #0
 800816c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800816e:	2750      	movs	r7, #80	; 0x50
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	e71b      	b.n	8007fac <__gethex+0x110>
 8008174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0e1      	beq.n	800813e <__gethex+0x2a2>
 800817a:	e7f2      	b.n	8008162 <__gethex+0x2c6>
 800817c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1dd      	bne.n	800813e <__gethex+0x2a2>
 8008182:	e7ee      	b.n	8008162 <__gethex+0x2c6>
 8008184:	1e67      	subs	r7, r4, #1
 8008186:	f1ba 0f00 	cmp.w	sl, #0
 800818a:	d132      	bne.n	80081f2 <__gethex+0x356>
 800818c:	b127      	cbz	r7, 8008198 <__gethex+0x2fc>
 800818e:	4639      	mov	r1, r7
 8008190:	4628      	mov	r0, r5
 8008192:	f000 fdda 	bl	8008d4a <__any_on>
 8008196:	4682      	mov	sl, r0
 8008198:	2301      	movs	r3, #1
 800819a:	117a      	asrs	r2, r7, #5
 800819c:	f007 071f 	and.w	r7, r7, #31
 80081a0:	fa03 f707 	lsl.w	r7, r3, r7
 80081a4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081a8:	4621      	mov	r1, r4
 80081aa:	421f      	tst	r7, r3
 80081ac:	f04f 0702 	mov.w	r7, #2
 80081b0:	4628      	mov	r0, r5
 80081b2:	bf18      	it	ne
 80081b4:	f04a 0a02 	orrne.w	sl, sl, #2
 80081b8:	1b36      	subs	r6, r6, r4
 80081ba:	f7ff fe1f 	bl	8007dfc <rshift>
 80081be:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081c2:	f1ba 0f00 	cmp.w	sl, #0
 80081c6:	d048      	beq.n	800825a <__gethex+0x3be>
 80081c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d015      	beq.n	80081fc <__gethex+0x360>
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d017      	beq.n	8008204 <__gethex+0x368>
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d109      	bne.n	80081ec <__gethex+0x350>
 80081d8:	f01a 0f02 	tst.w	sl, #2
 80081dc:	d006      	beq.n	80081ec <__gethex+0x350>
 80081de:	f8d9 3000 	ldr.w	r3, [r9]
 80081e2:	ea4a 0a03 	orr.w	sl, sl, r3
 80081e6:	f01a 0f01 	tst.w	sl, #1
 80081ea:	d10e      	bne.n	800820a <__gethex+0x36e>
 80081ec:	f047 0710 	orr.w	r7, r7, #16
 80081f0:	e033      	b.n	800825a <__gethex+0x3be>
 80081f2:	f04f 0a01 	mov.w	sl, #1
 80081f6:	e7cf      	b.n	8008198 <__gethex+0x2fc>
 80081f8:	2701      	movs	r7, #1
 80081fa:	e7e2      	b.n	80081c2 <__gethex+0x326>
 80081fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081fe:	f1c3 0301 	rsb	r3, r3, #1
 8008202:	9315      	str	r3, [sp, #84]	; 0x54
 8008204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <__gethex+0x350>
 800820a:	f04f 0c00 	mov.w	ip, #0
 800820e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008212:	f105 0314 	add.w	r3, r5, #20
 8008216:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800821a:	eb03 010a 	add.w	r1, r3, sl
 800821e:	4618      	mov	r0, r3
 8008220:	f853 2b04 	ldr.w	r2, [r3], #4
 8008224:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008228:	d01c      	beq.n	8008264 <__gethex+0x3c8>
 800822a:	3201      	adds	r2, #1
 800822c:	6002      	str	r2, [r0, #0]
 800822e:	2f02      	cmp	r7, #2
 8008230:	f105 0314 	add.w	r3, r5, #20
 8008234:	d138      	bne.n	80082a8 <__gethex+0x40c>
 8008236:	f8d8 2000 	ldr.w	r2, [r8]
 800823a:	3a01      	subs	r2, #1
 800823c:	42b2      	cmp	r2, r6
 800823e:	d10a      	bne.n	8008256 <__gethex+0x3ba>
 8008240:	2201      	movs	r2, #1
 8008242:	1171      	asrs	r1, r6, #5
 8008244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008248:	f006 061f 	and.w	r6, r6, #31
 800824c:	fa02 f606 	lsl.w	r6, r2, r6
 8008250:	421e      	tst	r6, r3
 8008252:	bf18      	it	ne
 8008254:	4617      	movne	r7, r2
 8008256:	f047 0720 	orr.w	r7, r7, #32
 800825a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800825c:	601d      	str	r5, [r3, #0]
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	601c      	str	r4, [r3, #0]
 8008262:	e6a3      	b.n	8007fac <__gethex+0x110>
 8008264:	4299      	cmp	r1, r3
 8008266:	f843 cc04 	str.w	ip, [r3, #-4]
 800826a:	d8d8      	bhi.n	800821e <__gethex+0x382>
 800826c:	68ab      	ldr	r3, [r5, #8]
 800826e:	4599      	cmp	r9, r3
 8008270:	db12      	blt.n	8008298 <__gethex+0x3fc>
 8008272:	6869      	ldr	r1, [r5, #4]
 8008274:	9802      	ldr	r0, [sp, #8]
 8008276:	3101      	adds	r1, #1
 8008278:	f000 f98f 	bl	800859a <_Balloc>
 800827c:	4683      	mov	fp, r0
 800827e:	692a      	ldr	r2, [r5, #16]
 8008280:	f105 010c 	add.w	r1, r5, #12
 8008284:	3202      	adds	r2, #2
 8008286:	0092      	lsls	r2, r2, #2
 8008288:	300c      	adds	r0, #12
 800828a:	f000 f97b 	bl	8008584 <memcpy>
 800828e:	4629      	mov	r1, r5
 8008290:	9802      	ldr	r0, [sp, #8]
 8008292:	f000 f9b6 	bl	8008602 <_Bfree>
 8008296:	465d      	mov	r5, fp
 8008298:	692b      	ldr	r3, [r5, #16]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	612a      	str	r2, [r5, #16]
 800829e:	2201      	movs	r2, #1
 80082a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082a4:	615a      	str	r2, [r3, #20]
 80082a6:	e7c2      	b.n	800822e <__gethex+0x392>
 80082a8:	692a      	ldr	r2, [r5, #16]
 80082aa:	454a      	cmp	r2, r9
 80082ac:	dd0b      	ble.n	80082c6 <__gethex+0x42a>
 80082ae:	2101      	movs	r1, #1
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff fda3 	bl	8007dfc <rshift>
 80082b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082ba:	3401      	adds	r4, #1
 80082bc:	42a3      	cmp	r3, r4
 80082be:	f6ff aed8 	blt.w	8008072 <__gethex+0x1d6>
 80082c2:	2701      	movs	r7, #1
 80082c4:	e7c7      	b.n	8008256 <__gethex+0x3ba>
 80082c6:	f016 061f 	ands.w	r6, r6, #31
 80082ca:	d0fa      	beq.n	80082c2 <__gethex+0x426>
 80082cc:	449a      	add	sl, r3
 80082ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082d2:	f000 fa26 	bl	8008722 <__hi0bits>
 80082d6:	f1c6 0620 	rsb	r6, r6, #32
 80082da:	42b0      	cmp	r0, r6
 80082dc:	dbe7      	blt.n	80082ae <__gethex+0x412>
 80082de:	e7f0      	b.n	80082c2 <__gethex+0x426>

080082e0 <L_shift>:
 80082e0:	f1c2 0208 	rsb	r2, r2, #8
 80082e4:	0092      	lsls	r2, r2, #2
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	f1c2 0620 	rsb	r6, r2, #32
 80082ec:	6843      	ldr	r3, [r0, #4]
 80082ee:	6804      	ldr	r4, [r0, #0]
 80082f0:	fa03 f506 	lsl.w	r5, r3, r6
 80082f4:	432c      	orrs	r4, r5
 80082f6:	40d3      	lsrs	r3, r2
 80082f8:	6004      	str	r4, [r0, #0]
 80082fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80082fe:	4288      	cmp	r0, r1
 8008300:	d3f4      	bcc.n	80082ec <L_shift+0xc>
 8008302:	bd70      	pop	{r4, r5, r6, pc}

08008304 <__match>:
 8008304:	b530      	push	{r4, r5, lr}
 8008306:	6803      	ldr	r3, [r0, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830e:	b914      	cbnz	r4, 8008316 <__match+0x12>
 8008310:	6003      	str	r3, [r0, #0]
 8008312:	2001      	movs	r0, #1
 8008314:	bd30      	pop	{r4, r5, pc}
 8008316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800831e:	2d19      	cmp	r5, #25
 8008320:	bf98      	it	ls
 8008322:	3220      	addls	r2, #32
 8008324:	42a2      	cmp	r2, r4
 8008326:	d0f0      	beq.n	800830a <__match+0x6>
 8008328:	2000      	movs	r0, #0
 800832a:	e7f3      	b.n	8008314 <__match+0x10>

0800832c <__hexnan>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	2500      	movs	r5, #0
 8008332:	680b      	ldr	r3, [r1, #0]
 8008334:	4682      	mov	sl, r0
 8008336:	115f      	asrs	r7, r3, #5
 8008338:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800833c:	f013 031f 	ands.w	r3, r3, #31
 8008340:	bf18      	it	ne
 8008342:	3704      	addne	r7, #4
 8008344:	1f3e      	subs	r6, r7, #4
 8008346:	4690      	mov	r8, r2
 8008348:	46b1      	mov	r9, r6
 800834a:	4634      	mov	r4, r6
 800834c:	46ab      	mov	fp, r5
 800834e:	b087      	sub	sp, #28
 8008350:	6801      	ldr	r1, [r0, #0]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	f847 5c04 	str.w	r5, [r7, #-4]
 8008358:	9502      	str	r5, [sp, #8]
 800835a:	784a      	ldrb	r2, [r1, #1]
 800835c:	1c4b      	adds	r3, r1, #1
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	b342      	cbz	r2, 80083b4 <__hexnan+0x88>
 8008362:	4610      	mov	r0, r2
 8008364:	9105      	str	r1, [sp, #20]
 8008366:	9204      	str	r2, [sp, #16]
 8008368:	f7ff fd83 	bl	8007e72 <__hexdig_fun>
 800836c:	2800      	cmp	r0, #0
 800836e:	d143      	bne.n	80083f8 <__hexnan+0xcc>
 8008370:	9a04      	ldr	r2, [sp, #16]
 8008372:	9905      	ldr	r1, [sp, #20]
 8008374:	2a20      	cmp	r2, #32
 8008376:	d818      	bhi.n	80083aa <__hexnan+0x7e>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	459b      	cmp	fp, r3
 800837c:	dd13      	ble.n	80083a6 <__hexnan+0x7a>
 800837e:	454c      	cmp	r4, r9
 8008380:	d206      	bcs.n	8008390 <__hexnan+0x64>
 8008382:	2d07      	cmp	r5, #7
 8008384:	dc04      	bgt.n	8008390 <__hexnan+0x64>
 8008386:	462a      	mov	r2, r5
 8008388:	4649      	mov	r1, r9
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff ffa8 	bl	80082e0 <L_shift>
 8008390:	4544      	cmp	r4, r8
 8008392:	d944      	bls.n	800841e <__hexnan+0xf2>
 8008394:	2300      	movs	r3, #0
 8008396:	f1a4 0904 	sub.w	r9, r4, #4
 800839a:	f844 3c04 	str.w	r3, [r4, #-4]
 800839e:	461d      	mov	r5, r3
 80083a0:	464c      	mov	r4, r9
 80083a2:	f8cd b008 	str.w	fp, [sp, #8]
 80083a6:	9903      	ldr	r1, [sp, #12]
 80083a8:	e7d7      	b.n	800835a <__hexnan+0x2e>
 80083aa:	2a29      	cmp	r2, #41	; 0x29
 80083ac:	d14a      	bne.n	8008444 <__hexnan+0x118>
 80083ae:	3102      	adds	r1, #2
 80083b0:	f8ca 1000 	str.w	r1, [sl]
 80083b4:	f1bb 0f00 	cmp.w	fp, #0
 80083b8:	d044      	beq.n	8008444 <__hexnan+0x118>
 80083ba:	454c      	cmp	r4, r9
 80083bc:	d206      	bcs.n	80083cc <__hexnan+0xa0>
 80083be:	2d07      	cmp	r5, #7
 80083c0:	dc04      	bgt.n	80083cc <__hexnan+0xa0>
 80083c2:	462a      	mov	r2, r5
 80083c4:	4649      	mov	r1, r9
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff ff8a 	bl	80082e0 <L_shift>
 80083cc:	4544      	cmp	r4, r8
 80083ce:	d928      	bls.n	8008422 <__hexnan+0xf6>
 80083d0:	4643      	mov	r3, r8
 80083d2:	f854 2b04 	ldr.w	r2, [r4], #4
 80083d6:	42a6      	cmp	r6, r4
 80083d8:	f843 2b04 	str.w	r2, [r3], #4
 80083dc:	d2f9      	bcs.n	80083d2 <__hexnan+0xa6>
 80083de:	2200      	movs	r2, #0
 80083e0:	f843 2b04 	str.w	r2, [r3], #4
 80083e4:	429e      	cmp	r6, r3
 80083e6:	d2fb      	bcs.n	80083e0 <__hexnan+0xb4>
 80083e8:	6833      	ldr	r3, [r6, #0]
 80083ea:	b91b      	cbnz	r3, 80083f4 <__hexnan+0xc8>
 80083ec:	4546      	cmp	r6, r8
 80083ee:	d127      	bne.n	8008440 <__hexnan+0x114>
 80083f0:	2301      	movs	r3, #1
 80083f2:	6033      	str	r3, [r6, #0]
 80083f4:	2005      	movs	r0, #5
 80083f6:	e026      	b.n	8008446 <__hexnan+0x11a>
 80083f8:	3501      	adds	r5, #1
 80083fa:	2d08      	cmp	r5, #8
 80083fc:	f10b 0b01 	add.w	fp, fp, #1
 8008400:	dd06      	ble.n	8008410 <__hexnan+0xe4>
 8008402:	4544      	cmp	r4, r8
 8008404:	d9cf      	bls.n	80083a6 <__hexnan+0x7a>
 8008406:	2300      	movs	r3, #0
 8008408:	2501      	movs	r5, #1
 800840a:	f844 3c04 	str.w	r3, [r4, #-4]
 800840e:	3c04      	subs	r4, #4
 8008410:	6822      	ldr	r2, [r4, #0]
 8008412:	f000 000f 	and.w	r0, r0, #15
 8008416:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	e7c3      	b.n	80083a6 <__hexnan+0x7a>
 800841e:	2508      	movs	r5, #8
 8008420:	e7c1      	b.n	80083a6 <__hexnan+0x7a>
 8008422:	9b01      	ldr	r3, [sp, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0df      	beq.n	80083e8 <__hexnan+0xbc>
 8008428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800842c:	f1c3 0320 	rsb	r3, r3, #32
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008438:	401a      	ands	r2, r3
 800843a:	f847 2c04 	str.w	r2, [r7, #-4]
 800843e:	e7d3      	b.n	80083e8 <__hexnan+0xbc>
 8008440:	3e04      	subs	r6, #4
 8008442:	e7d1      	b.n	80083e8 <__hexnan+0xbc>
 8008444:	2004      	movs	r0, #4
 8008446:	b007      	add	sp, #28
 8008448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800844c <__localeconv_l>:
 800844c:	30f0      	adds	r0, #240	; 0xf0
 800844e:	4770      	bx	lr

08008450 <_localeconv_r>:
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <_localeconv_r+0x14>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a18      	ldr	r0, [r3, #32]
 8008456:	4b04      	ldr	r3, [pc, #16]	; (8008468 <_localeconv_r+0x18>)
 8008458:	2800      	cmp	r0, #0
 800845a:	bf08      	it	eq
 800845c:	4618      	moveq	r0, r3
 800845e:	30f0      	adds	r0, #240	; 0xf0
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000060 	.word	0x20000060
 8008468:	200000c4 	.word	0x200000c4

0800846c <__swhatbuf_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	460e      	mov	r6, r1
 8008470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008474:	b096      	sub	sp, #88	; 0x58
 8008476:	2900      	cmp	r1, #0
 8008478:	4614      	mov	r4, r2
 800847a:	461d      	mov	r5, r3
 800847c:	da07      	bge.n	800848e <__swhatbuf_r+0x22>
 800847e:	2300      	movs	r3, #0
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	89b3      	ldrh	r3, [r6, #12]
 8008484:	061a      	lsls	r2, r3, #24
 8008486:	d410      	bmi.n	80084aa <__swhatbuf_r+0x3e>
 8008488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848c:	e00e      	b.n	80084ac <__swhatbuf_r+0x40>
 800848e:	466a      	mov	r2, sp
 8008490:	f000 ff02 	bl	8009298 <_fstat_r>
 8008494:	2800      	cmp	r0, #0
 8008496:	dbf2      	blt.n	800847e <__swhatbuf_r+0x12>
 8008498:	9a01      	ldr	r2, [sp, #4]
 800849a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800849e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084a2:	425a      	negs	r2, r3
 80084a4:	415a      	adcs	r2, r3
 80084a6:	602a      	str	r2, [r5, #0]
 80084a8:	e7ee      	b.n	8008488 <__swhatbuf_r+0x1c>
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	2000      	movs	r0, #0
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	b016      	add	sp, #88	; 0x58
 80084b2:	bd70      	pop	{r4, r5, r6, pc}

080084b4 <__smakebuf_r>:
 80084b4:	898b      	ldrh	r3, [r1, #12]
 80084b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084b8:	079d      	lsls	r5, r3, #30
 80084ba:	4606      	mov	r6, r0
 80084bc:	460c      	mov	r4, r1
 80084be:	d507      	bpl.n	80084d0 <__smakebuf_r+0x1c>
 80084c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	2301      	movs	r3, #1
 80084ca:	6163      	str	r3, [r4, #20]
 80084cc:	b002      	add	sp, #8
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	ab01      	add	r3, sp, #4
 80084d2:	466a      	mov	r2, sp
 80084d4:	f7ff ffca 	bl	800846c <__swhatbuf_r>
 80084d8:	9900      	ldr	r1, [sp, #0]
 80084da:	4605      	mov	r5, r0
 80084dc:	4630      	mov	r0, r6
 80084de:	f000 fcaf 	bl	8008e40 <_malloc_r>
 80084e2:	b948      	cbnz	r0, 80084f8 <__smakebuf_r+0x44>
 80084e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d4ef      	bmi.n	80084cc <__smakebuf_r+0x18>
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	f043 0302 	orr.w	r3, r3, #2
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	e7e3      	b.n	80084c0 <__smakebuf_r+0xc>
 80084f8:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <__smakebuf_r+0x7c>)
 80084fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	6020      	str	r0, [r4, #0]
 8008500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	9b00      	ldr	r3, [sp, #0]
 8008508:	6120      	str	r0, [r4, #16]
 800850a:	6163      	str	r3, [r4, #20]
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	b15b      	cbz	r3, 8008528 <__smakebuf_r+0x74>
 8008510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008514:	4630      	mov	r0, r6
 8008516:	f000 fed1 	bl	80092bc <_isatty_r>
 800851a:	b128      	cbz	r0, 8008528 <__smakebuf_r+0x74>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	f043 0301 	orr.w	r3, r3, #1
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	431d      	orrs	r5, r3
 800852c:	81a5      	strh	r5, [r4, #12]
 800852e:	e7cd      	b.n	80084cc <__smakebuf_r+0x18>
 8008530:	08007cb1 	.word	0x08007cb1

08008534 <malloc>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <malloc+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f000 bc81 	b.w	8008e40 <_malloc_r>
 800853e:	bf00      	nop
 8008540:	20000060 	.word	0x20000060

08008544 <__ascii_mbtowc>:
 8008544:	b082      	sub	sp, #8
 8008546:	b901      	cbnz	r1, 800854a <__ascii_mbtowc+0x6>
 8008548:	a901      	add	r1, sp, #4
 800854a:	b142      	cbz	r2, 800855e <__ascii_mbtowc+0x1a>
 800854c:	b14b      	cbz	r3, 8008562 <__ascii_mbtowc+0x1e>
 800854e:	7813      	ldrb	r3, [r2, #0]
 8008550:	600b      	str	r3, [r1, #0]
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	1c10      	adds	r0, r2, #0
 8008556:	bf18      	it	ne
 8008558:	2001      	movne	r0, #1
 800855a:	b002      	add	sp, #8
 800855c:	4770      	bx	lr
 800855e:	4610      	mov	r0, r2
 8008560:	e7fb      	b.n	800855a <__ascii_mbtowc+0x16>
 8008562:	f06f 0001 	mvn.w	r0, #1
 8008566:	e7f8      	b.n	800855a <__ascii_mbtowc+0x16>

08008568 <memchr>:
 8008568:	b510      	push	{r4, lr}
 800856a:	b2c9      	uxtb	r1, r1
 800856c:	4402      	add	r2, r0
 800856e:	4290      	cmp	r0, r2
 8008570:	4603      	mov	r3, r0
 8008572:	d101      	bne.n	8008578 <memchr+0x10>
 8008574:	2300      	movs	r3, #0
 8008576:	e003      	b.n	8008580 <memchr+0x18>
 8008578:	781c      	ldrb	r4, [r3, #0]
 800857a:	3001      	adds	r0, #1
 800857c:	428c      	cmp	r4, r1
 800857e:	d1f6      	bne.n	800856e <memchr+0x6>
 8008580:	4618      	mov	r0, r3
 8008582:	bd10      	pop	{r4, pc}

08008584 <memcpy>:
 8008584:	b510      	push	{r4, lr}
 8008586:	1e43      	subs	r3, r0, #1
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	d100      	bne.n	8008590 <memcpy+0xc>
 800858e:	bd10      	pop	{r4, pc}
 8008590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008598:	e7f7      	b.n	800858a <memcpy+0x6>

0800859a <_Balloc>:
 800859a:	b570      	push	{r4, r5, r6, lr}
 800859c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800859e:	4604      	mov	r4, r0
 80085a0:	460e      	mov	r6, r1
 80085a2:	b93d      	cbnz	r5, 80085b4 <_Balloc+0x1a>
 80085a4:	2010      	movs	r0, #16
 80085a6:	f7ff ffc5 	bl	8008534 <malloc>
 80085aa:	6260      	str	r0, [r4, #36]	; 0x24
 80085ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085b0:	6005      	str	r5, [r0, #0]
 80085b2:	60c5      	str	r5, [r0, #12]
 80085b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80085b6:	68eb      	ldr	r3, [r5, #12]
 80085b8:	b183      	cbz	r3, 80085dc <_Balloc+0x42>
 80085ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80085c2:	b9b8      	cbnz	r0, 80085f4 <_Balloc+0x5a>
 80085c4:	2101      	movs	r1, #1
 80085c6:	fa01 f506 	lsl.w	r5, r1, r6
 80085ca:	1d6a      	adds	r2, r5, #5
 80085cc:	0092      	lsls	r2, r2, #2
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fbdc 	bl	8008d8c <_calloc_r>
 80085d4:	b160      	cbz	r0, 80085f0 <_Balloc+0x56>
 80085d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80085da:	e00e      	b.n	80085fa <_Balloc+0x60>
 80085dc:	2221      	movs	r2, #33	; 0x21
 80085de:	2104      	movs	r1, #4
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fbd3 	bl	8008d8c <_calloc_r>
 80085e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e8:	60e8      	str	r0, [r5, #12]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e4      	bne.n	80085ba <_Balloc+0x20>
 80085f0:	2000      	movs	r0, #0
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	6802      	ldr	r2, [r0, #0]
 80085f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80085fa:	2300      	movs	r3, #0
 80085fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008600:	e7f7      	b.n	80085f2 <_Balloc+0x58>

08008602 <_Bfree>:
 8008602:	b570      	push	{r4, r5, r6, lr}
 8008604:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008606:	4606      	mov	r6, r0
 8008608:	460d      	mov	r5, r1
 800860a:	b93c      	cbnz	r4, 800861c <_Bfree+0x1a>
 800860c:	2010      	movs	r0, #16
 800860e:	f7ff ff91 	bl	8008534 <malloc>
 8008612:	6270      	str	r0, [r6, #36]	; 0x24
 8008614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008618:	6004      	str	r4, [r0, #0]
 800861a:	60c4      	str	r4, [r0, #12]
 800861c:	b13d      	cbz	r5, 800862e <_Bfree+0x2c>
 800861e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008620:	686a      	ldr	r2, [r5, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008628:	6029      	str	r1, [r5, #0]
 800862a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800862e:	bd70      	pop	{r4, r5, r6, pc}

08008630 <__multadd>:
 8008630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008634:	461f      	mov	r7, r3
 8008636:	4606      	mov	r6, r0
 8008638:	460c      	mov	r4, r1
 800863a:	2300      	movs	r3, #0
 800863c:	690d      	ldr	r5, [r1, #16]
 800863e:	f101 0c14 	add.w	ip, r1, #20
 8008642:	f8dc 0000 	ldr.w	r0, [ip]
 8008646:	3301      	adds	r3, #1
 8008648:	b281      	uxth	r1, r0
 800864a:	fb02 7101 	mla	r1, r2, r1, r7
 800864e:	0c00      	lsrs	r0, r0, #16
 8008650:	0c0f      	lsrs	r7, r1, #16
 8008652:	fb02 7000 	mla	r0, r2, r0, r7
 8008656:	b289      	uxth	r1, r1
 8008658:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800865c:	429d      	cmp	r5, r3
 800865e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008662:	f84c 1b04 	str.w	r1, [ip], #4
 8008666:	dcec      	bgt.n	8008642 <__multadd+0x12>
 8008668:	b1d7      	cbz	r7, 80086a0 <__multadd+0x70>
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	42ab      	cmp	r3, r5
 800866e:	dc12      	bgt.n	8008696 <__multadd+0x66>
 8008670:	6861      	ldr	r1, [r4, #4]
 8008672:	4630      	mov	r0, r6
 8008674:	3101      	adds	r1, #1
 8008676:	f7ff ff90 	bl	800859a <_Balloc>
 800867a:	4680      	mov	r8, r0
 800867c:	6922      	ldr	r2, [r4, #16]
 800867e:	f104 010c 	add.w	r1, r4, #12
 8008682:	3202      	adds	r2, #2
 8008684:	0092      	lsls	r2, r2, #2
 8008686:	300c      	adds	r0, #12
 8008688:	f7ff ff7c 	bl	8008584 <memcpy>
 800868c:	4621      	mov	r1, r4
 800868e:	4630      	mov	r0, r6
 8008690:	f7ff ffb7 	bl	8008602 <_Bfree>
 8008694:	4644      	mov	r4, r8
 8008696:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800869a:	3501      	adds	r5, #1
 800869c:	615f      	str	r7, [r3, #20]
 800869e:	6125      	str	r5, [r4, #16]
 80086a0:	4620      	mov	r0, r4
 80086a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086a6 <__s2b>:
 80086a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086aa:	4615      	mov	r5, r2
 80086ac:	2209      	movs	r2, #9
 80086ae:	461f      	mov	r7, r3
 80086b0:	3308      	adds	r3, #8
 80086b2:	460c      	mov	r4, r1
 80086b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80086b8:	4606      	mov	r6, r0
 80086ba:	2201      	movs	r2, #1
 80086bc:	2100      	movs	r1, #0
 80086be:	429a      	cmp	r2, r3
 80086c0:	db20      	blt.n	8008704 <__s2b+0x5e>
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ff69 	bl	800859a <_Balloc>
 80086c8:	9b08      	ldr	r3, [sp, #32]
 80086ca:	2d09      	cmp	r5, #9
 80086cc:	6143      	str	r3, [r0, #20]
 80086ce:	f04f 0301 	mov.w	r3, #1
 80086d2:	6103      	str	r3, [r0, #16]
 80086d4:	dd19      	ble.n	800870a <__s2b+0x64>
 80086d6:	f104 0809 	add.w	r8, r4, #9
 80086da:	46c1      	mov	r9, r8
 80086dc:	442c      	add	r4, r5
 80086de:	f819 3b01 	ldrb.w	r3, [r9], #1
 80086e2:	4601      	mov	r1, r0
 80086e4:	3b30      	subs	r3, #48	; 0x30
 80086e6:	220a      	movs	r2, #10
 80086e8:	4630      	mov	r0, r6
 80086ea:	f7ff ffa1 	bl	8008630 <__multadd>
 80086ee:	45a1      	cmp	r9, r4
 80086f0:	d1f5      	bne.n	80086de <__s2b+0x38>
 80086f2:	eb08 0405 	add.w	r4, r8, r5
 80086f6:	3c08      	subs	r4, #8
 80086f8:	1b2d      	subs	r5, r5, r4
 80086fa:	1963      	adds	r3, r4, r5
 80086fc:	42bb      	cmp	r3, r7
 80086fe:	db07      	blt.n	8008710 <__s2b+0x6a>
 8008700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008704:	0052      	lsls	r2, r2, #1
 8008706:	3101      	adds	r1, #1
 8008708:	e7d9      	b.n	80086be <__s2b+0x18>
 800870a:	340a      	adds	r4, #10
 800870c:	2509      	movs	r5, #9
 800870e:	e7f3      	b.n	80086f8 <__s2b+0x52>
 8008710:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008714:	4601      	mov	r1, r0
 8008716:	3b30      	subs	r3, #48	; 0x30
 8008718:	220a      	movs	r2, #10
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ff88 	bl	8008630 <__multadd>
 8008720:	e7eb      	b.n	80086fa <__s2b+0x54>

08008722 <__hi0bits>:
 8008722:	0c02      	lsrs	r2, r0, #16
 8008724:	0412      	lsls	r2, r2, #16
 8008726:	4603      	mov	r3, r0
 8008728:	b9b2      	cbnz	r2, 8008758 <__hi0bits+0x36>
 800872a:	0403      	lsls	r3, r0, #16
 800872c:	2010      	movs	r0, #16
 800872e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008732:	bf04      	itt	eq
 8008734:	021b      	lsleq	r3, r3, #8
 8008736:	3008      	addeq	r0, #8
 8008738:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800873c:	bf04      	itt	eq
 800873e:	011b      	lsleq	r3, r3, #4
 8008740:	3004      	addeq	r0, #4
 8008742:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008746:	bf04      	itt	eq
 8008748:	009b      	lsleq	r3, r3, #2
 800874a:	3002      	addeq	r0, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	db06      	blt.n	800875e <__hi0bits+0x3c>
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	d503      	bpl.n	800875c <__hi0bits+0x3a>
 8008754:	3001      	adds	r0, #1
 8008756:	4770      	bx	lr
 8008758:	2000      	movs	r0, #0
 800875a:	e7e8      	b.n	800872e <__hi0bits+0xc>
 800875c:	2020      	movs	r0, #32
 800875e:	4770      	bx	lr

08008760 <__lo0bits>:
 8008760:	6803      	ldr	r3, [r0, #0]
 8008762:	4601      	mov	r1, r0
 8008764:	f013 0207 	ands.w	r2, r3, #7
 8008768:	d00b      	beq.n	8008782 <__lo0bits+0x22>
 800876a:	07da      	lsls	r2, r3, #31
 800876c:	d423      	bmi.n	80087b6 <__lo0bits+0x56>
 800876e:	0798      	lsls	r0, r3, #30
 8008770:	bf49      	itett	mi
 8008772:	085b      	lsrmi	r3, r3, #1
 8008774:	089b      	lsrpl	r3, r3, #2
 8008776:	2001      	movmi	r0, #1
 8008778:	600b      	strmi	r3, [r1, #0]
 800877a:	bf5c      	itt	pl
 800877c:	600b      	strpl	r3, [r1, #0]
 800877e:	2002      	movpl	r0, #2
 8008780:	4770      	bx	lr
 8008782:	b298      	uxth	r0, r3
 8008784:	b9a8      	cbnz	r0, 80087b2 <__lo0bits+0x52>
 8008786:	2010      	movs	r0, #16
 8008788:	0c1b      	lsrs	r3, r3, #16
 800878a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800878e:	bf04      	itt	eq
 8008790:	0a1b      	lsreq	r3, r3, #8
 8008792:	3008      	addeq	r0, #8
 8008794:	071a      	lsls	r2, r3, #28
 8008796:	bf04      	itt	eq
 8008798:	091b      	lsreq	r3, r3, #4
 800879a:	3004      	addeq	r0, #4
 800879c:	079a      	lsls	r2, r3, #30
 800879e:	bf04      	itt	eq
 80087a0:	089b      	lsreq	r3, r3, #2
 80087a2:	3002      	addeq	r0, #2
 80087a4:	07da      	lsls	r2, r3, #31
 80087a6:	d402      	bmi.n	80087ae <__lo0bits+0x4e>
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	d006      	beq.n	80087ba <__lo0bits+0x5a>
 80087ac:	3001      	adds	r0, #1
 80087ae:	600b      	str	r3, [r1, #0]
 80087b0:	4770      	bx	lr
 80087b2:	4610      	mov	r0, r2
 80087b4:	e7e9      	b.n	800878a <__lo0bits+0x2a>
 80087b6:	2000      	movs	r0, #0
 80087b8:	4770      	bx	lr
 80087ba:	2020      	movs	r0, #32
 80087bc:	4770      	bx	lr

080087be <__i2b>:
 80087be:	b510      	push	{r4, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	2101      	movs	r1, #1
 80087c4:	f7ff fee9 	bl	800859a <_Balloc>
 80087c8:	2201      	movs	r2, #1
 80087ca:	6144      	str	r4, [r0, #20]
 80087cc:	6102      	str	r2, [r0, #16]
 80087ce:	bd10      	pop	{r4, pc}

080087d0 <__multiply>:
 80087d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	4614      	mov	r4, r2
 80087d6:	690a      	ldr	r2, [r1, #16]
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	4688      	mov	r8, r1
 80087dc:	429a      	cmp	r2, r3
 80087de:	bfbe      	ittt	lt
 80087e0:	460b      	movlt	r3, r1
 80087e2:	46a0      	movlt	r8, r4
 80087e4:	461c      	movlt	r4, r3
 80087e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087f6:	eb07 0609 	add.w	r6, r7, r9
 80087fa:	42b3      	cmp	r3, r6
 80087fc:	bfb8      	it	lt
 80087fe:	3101      	addlt	r1, #1
 8008800:	f7ff fecb 	bl	800859a <_Balloc>
 8008804:	f100 0514 	add.w	r5, r0, #20
 8008808:	462b      	mov	r3, r5
 800880a:	2200      	movs	r2, #0
 800880c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008810:	4573      	cmp	r3, lr
 8008812:	d316      	bcc.n	8008842 <__multiply+0x72>
 8008814:	f104 0214 	add.w	r2, r4, #20
 8008818:	f108 0114 	add.w	r1, r8, #20
 800881c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008820:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	9b00      	ldr	r3, [sp, #0]
 8008828:	9201      	str	r2, [sp, #4]
 800882a:	4293      	cmp	r3, r2
 800882c:	d80c      	bhi.n	8008848 <__multiply+0x78>
 800882e:	2e00      	cmp	r6, #0
 8008830:	dd03      	ble.n	800883a <__multiply+0x6a>
 8008832:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008836:	2b00      	cmp	r3, #0
 8008838:	d05d      	beq.n	80088f6 <__multiply+0x126>
 800883a:	6106      	str	r6, [r0, #16]
 800883c:	b003      	add	sp, #12
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	f843 2b04 	str.w	r2, [r3], #4
 8008846:	e7e3      	b.n	8008810 <__multiply+0x40>
 8008848:	f8b2 b000 	ldrh.w	fp, [r2]
 800884c:	f1bb 0f00 	cmp.w	fp, #0
 8008850:	d023      	beq.n	800889a <__multiply+0xca>
 8008852:	4689      	mov	r9, r1
 8008854:	46ac      	mov	ip, r5
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	f859 4b04 	ldr.w	r4, [r9], #4
 800885e:	f8dc a000 	ldr.w	sl, [ip]
 8008862:	b2a3      	uxth	r3, r4
 8008864:	fa1f fa8a 	uxth.w	sl, sl
 8008868:	fb0b a303 	mla	r3, fp, r3, sl
 800886c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008870:	f8dc 4000 	ldr.w	r4, [ip]
 8008874:	4443      	add	r3, r8
 8008876:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800887a:	fb0b 840a 	mla	r4, fp, sl, r8
 800887e:	46e2      	mov	sl, ip
 8008880:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008884:	b29b      	uxth	r3, r3
 8008886:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800888a:	454f      	cmp	r7, r9
 800888c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008890:	f84a 3b04 	str.w	r3, [sl], #4
 8008894:	d82b      	bhi.n	80088ee <__multiply+0x11e>
 8008896:	f8cc 8004 	str.w	r8, [ip, #4]
 800889a:	9b01      	ldr	r3, [sp, #4]
 800889c:	3204      	adds	r2, #4
 800889e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80088a2:	f1ba 0f00 	cmp.w	sl, #0
 80088a6:	d020      	beq.n	80088ea <__multiply+0x11a>
 80088a8:	4689      	mov	r9, r1
 80088aa:	46a8      	mov	r8, r5
 80088ac:	f04f 0b00 	mov.w	fp, #0
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	f8b9 c000 	ldrh.w	ip, [r9]
 80088b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	fb0a 440c 	mla	r4, sl, ip, r4
 80088c0:	46c4      	mov	ip, r8
 80088c2:	445c      	add	r4, fp
 80088c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80088c8:	f84c 3b04 	str.w	r3, [ip], #4
 80088cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80088d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	fb0a b303 	mla	r3, sl, r3, fp
 80088da:	454f      	cmp	r7, r9
 80088dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80088e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80088e4:	d805      	bhi.n	80088f2 <__multiply+0x122>
 80088e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80088ea:	3504      	adds	r5, #4
 80088ec:	e79b      	b.n	8008826 <__multiply+0x56>
 80088ee:	46d4      	mov	ip, sl
 80088f0:	e7b3      	b.n	800885a <__multiply+0x8a>
 80088f2:	46e0      	mov	r8, ip
 80088f4:	e7dd      	b.n	80088b2 <__multiply+0xe2>
 80088f6:	3e01      	subs	r6, #1
 80088f8:	e799      	b.n	800882e <__multiply+0x5e>
	...

080088fc <__pow5mult>:
 80088fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008900:	4615      	mov	r5, r2
 8008902:	f012 0203 	ands.w	r2, r2, #3
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	d007      	beq.n	800891c <__pow5mult+0x20>
 800890c:	4c21      	ldr	r4, [pc, #132]	; (8008994 <__pow5mult+0x98>)
 800890e:	3a01      	subs	r2, #1
 8008910:	2300      	movs	r3, #0
 8008912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008916:	f7ff fe8b 	bl	8008630 <__multadd>
 800891a:	4607      	mov	r7, r0
 800891c:	10ad      	asrs	r5, r5, #2
 800891e:	d035      	beq.n	800898c <__pow5mult+0x90>
 8008920:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008922:	b93c      	cbnz	r4, 8008934 <__pow5mult+0x38>
 8008924:	2010      	movs	r0, #16
 8008926:	f7ff fe05 	bl	8008534 <malloc>
 800892a:	6270      	str	r0, [r6, #36]	; 0x24
 800892c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008930:	6004      	str	r4, [r0, #0]
 8008932:	60c4      	str	r4, [r0, #12]
 8008934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800893c:	b94c      	cbnz	r4, 8008952 <__pow5mult+0x56>
 800893e:	f240 2171 	movw	r1, #625	; 0x271
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ff3b 	bl	80087be <__i2b>
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	07eb      	lsls	r3, r5, #31
 8008958:	d50a      	bpl.n	8008970 <__pow5mult+0x74>
 800895a:	4639      	mov	r1, r7
 800895c:	4622      	mov	r2, r4
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff ff36 	bl	80087d0 <__multiply>
 8008964:	4681      	mov	r9, r0
 8008966:	4639      	mov	r1, r7
 8008968:	4630      	mov	r0, r6
 800896a:	f7ff fe4a 	bl	8008602 <_Bfree>
 800896e:	464f      	mov	r7, r9
 8008970:	106d      	asrs	r5, r5, #1
 8008972:	d00b      	beq.n	800898c <__pow5mult+0x90>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	b938      	cbnz	r0, 8008988 <__pow5mult+0x8c>
 8008978:	4622      	mov	r2, r4
 800897a:	4621      	mov	r1, r4
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ff27 	bl	80087d0 <__multiply>
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	f8c0 8000 	str.w	r8, [r0]
 8008988:	4604      	mov	r4, r0
 800898a:	e7e4      	b.n	8008956 <__pow5mult+0x5a>
 800898c:	4638      	mov	r0, r7
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	bf00      	nop
 8008994:	08009700 	.word	0x08009700

08008998 <__lshift>:
 8008998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	460c      	mov	r4, r1
 800899e:	4607      	mov	r7, r0
 80089a0:	4616      	mov	r6, r2
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089a8:	eb0a 0903 	add.w	r9, sl, r3
 80089ac:	6849      	ldr	r1, [r1, #4]
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	f109 0501 	add.w	r5, r9, #1
 80089b4:	42ab      	cmp	r3, r5
 80089b6:	db32      	blt.n	8008a1e <__lshift+0x86>
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff fdee 	bl	800859a <_Balloc>
 80089be:	2300      	movs	r3, #0
 80089c0:	4680      	mov	r8, r0
 80089c2:	461a      	mov	r2, r3
 80089c4:	f100 0114 	add.w	r1, r0, #20
 80089c8:	4553      	cmp	r3, sl
 80089ca:	db2b      	blt.n	8008a24 <__lshift+0x8c>
 80089cc:	6920      	ldr	r0, [r4, #16]
 80089ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d2:	f104 0314 	add.w	r3, r4, #20
 80089d6:	f016 021f 	ands.w	r2, r6, #31
 80089da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089e2:	d025      	beq.n	8008a30 <__lshift+0x98>
 80089e4:	2000      	movs	r0, #0
 80089e6:	f1c2 0e20 	rsb	lr, r2, #32
 80089ea:	468a      	mov	sl, r1
 80089ec:	681e      	ldr	r6, [r3, #0]
 80089ee:	4096      	lsls	r6, r2
 80089f0:	4330      	orrs	r0, r6
 80089f2:	f84a 0b04 	str.w	r0, [sl], #4
 80089f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80089fa:	459c      	cmp	ip, r3
 80089fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8008a00:	d814      	bhi.n	8008a2c <__lshift+0x94>
 8008a02:	6048      	str	r0, [r1, #4]
 8008a04:	b108      	cbz	r0, 8008a0a <__lshift+0x72>
 8008a06:	f109 0502 	add.w	r5, r9, #2
 8008a0a:	3d01      	subs	r5, #1
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a12:	4621      	mov	r1, r4
 8008a14:	f7ff fdf5 	bl	8008602 <_Bfree>
 8008a18:	4640      	mov	r0, r8
 8008a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1e:	3101      	adds	r1, #1
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	e7c7      	b.n	80089b4 <__lshift+0x1c>
 8008a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	e7cd      	b.n	80089c8 <__lshift+0x30>
 8008a2c:	4651      	mov	r1, sl
 8008a2e:	e7dc      	b.n	80089ea <__lshift+0x52>
 8008a30:	3904      	subs	r1, #4
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	459c      	cmp	ip, r3
 8008a38:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a3c:	d8f9      	bhi.n	8008a32 <__lshift+0x9a>
 8008a3e:	e7e4      	b.n	8008a0a <__lshift+0x72>

08008a40 <__mcmp>:
 8008a40:	6903      	ldr	r3, [r0, #16]
 8008a42:	690a      	ldr	r2, [r1, #16]
 8008a44:	b530      	push	{r4, r5, lr}
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	d10c      	bne.n	8008a64 <__mcmp+0x24>
 8008a4a:	0092      	lsls	r2, r2, #2
 8008a4c:	3014      	adds	r0, #20
 8008a4e:	3114      	adds	r1, #20
 8008a50:	1884      	adds	r4, r0, r2
 8008a52:	4411      	add	r1, r2
 8008a54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a5c:	4295      	cmp	r5, r2
 8008a5e:	d003      	beq.n	8008a68 <__mcmp+0x28>
 8008a60:	d305      	bcc.n	8008a6e <__mcmp+0x2e>
 8008a62:	2301      	movs	r3, #1
 8008a64:	4618      	mov	r0, r3
 8008a66:	bd30      	pop	{r4, r5, pc}
 8008a68:	42a0      	cmp	r0, r4
 8008a6a:	d3f3      	bcc.n	8008a54 <__mcmp+0x14>
 8008a6c:	e7fa      	b.n	8008a64 <__mcmp+0x24>
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a72:	e7f7      	b.n	8008a64 <__mcmp+0x24>

08008a74 <__mdiff>:
 8008a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	460d      	mov	r5, r1
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4628      	mov	r0, r5
 8008a80:	4614      	mov	r4, r2
 8008a82:	f7ff ffdd 	bl	8008a40 <__mcmp>
 8008a86:	1e06      	subs	r6, r0, #0
 8008a88:	d108      	bne.n	8008a9c <__mdiff+0x28>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff fd84 	bl	800859a <_Balloc>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9c:	bfa4      	itt	ge
 8008a9e:	4623      	movge	r3, r4
 8008aa0:	462c      	movge	r4, r5
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	6861      	ldr	r1, [r4, #4]
 8008aa6:	bfa6      	itte	ge
 8008aa8:	461d      	movge	r5, r3
 8008aaa:	2600      	movge	r6, #0
 8008aac:	2601      	movlt	r6, #1
 8008aae:	f7ff fd74 	bl	800859a <_Balloc>
 8008ab2:	f04f 0e00 	mov.w	lr, #0
 8008ab6:	60c6      	str	r6, [r0, #12]
 8008ab8:	692b      	ldr	r3, [r5, #16]
 8008aba:	6926      	ldr	r6, [r4, #16]
 8008abc:	f104 0214 	add.w	r2, r4, #20
 8008ac0:	f105 0914 	add.w	r9, r5, #20
 8008ac4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008ac8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008acc:	f100 0114 	add.w	r1, r0, #20
 8008ad0:	f852 ab04 	ldr.w	sl, [r2], #4
 8008ad4:	f859 5b04 	ldr.w	r5, [r9], #4
 8008ad8:	fa1f f38a 	uxth.w	r3, sl
 8008adc:	4473      	add	r3, lr
 8008ade:	b2ac      	uxth	r4, r5
 8008ae0:	1b1b      	subs	r3, r3, r4
 8008ae2:	0c2c      	lsrs	r4, r5, #16
 8008ae4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008ae8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008af2:	45c8      	cmp	r8, r9
 8008af4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008af8:	4694      	mov	ip, r2
 8008afa:	f841 4b04 	str.w	r4, [r1], #4
 8008afe:	d8e7      	bhi.n	8008ad0 <__mdiff+0x5c>
 8008b00:	45bc      	cmp	ip, r7
 8008b02:	d304      	bcc.n	8008b0e <__mdiff+0x9a>
 8008b04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008b08:	b183      	cbz	r3, 8008b2c <__mdiff+0xb8>
 8008b0a:	6106      	str	r6, [r0, #16]
 8008b0c:	e7c4      	b.n	8008a98 <__mdiff+0x24>
 8008b0e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008b12:	b2a2      	uxth	r2, r4
 8008b14:	4472      	add	r2, lr
 8008b16:	1413      	asrs	r3, r2, #16
 8008b18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008b1c:	b292      	uxth	r2, r2
 8008b1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b22:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b26:	f841 2b04 	str.w	r2, [r1], #4
 8008b2a:	e7e9      	b.n	8008b00 <__mdiff+0x8c>
 8008b2c:	3e01      	subs	r6, #1
 8008b2e:	e7e9      	b.n	8008b04 <__mdiff+0x90>

08008b30 <__ulp>:
 8008b30:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <__ulp+0x44>)
 8008b32:	400b      	ands	r3, r1
 8008b34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dd02      	ble.n	8008b42 <__ulp+0x12>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4770      	bx	lr
 8008b42:	425b      	negs	r3, r3
 8008b44:	151b      	asrs	r3, r3, #20
 8008b46:	2b13      	cmp	r3, #19
 8008b48:	f04f 0000 	mov.w	r0, #0
 8008b4c:	f04f 0100 	mov.w	r1, #0
 8008b50:	dc04      	bgt.n	8008b5c <__ulp+0x2c>
 8008b52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008b56:	fa42 f103 	asr.w	r1, r2, r3
 8008b5a:	4770      	bx	lr
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	3b14      	subs	r3, #20
 8008b60:	2b1e      	cmp	r3, #30
 8008b62:	bfce      	itee	gt
 8008b64:	4613      	movgt	r3, r2
 8008b66:	f1c3 031f 	rsble	r3, r3, #31
 8008b6a:	fa02 f303 	lslle.w	r3, r2, r3
 8008b6e:	4618      	mov	r0, r3
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	7ff00000 	.word	0x7ff00000

08008b78 <__b2d>:
 8008b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	6907      	ldr	r7, [r0, #16]
 8008b7e:	f100 0914 	add.w	r9, r0, #20
 8008b82:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008b86:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008b8a:	f1a7 0804 	sub.w	r8, r7, #4
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff fdc7 	bl	8008722 <__hi0bits>
 8008b94:	f1c0 0320 	rsb	r3, r0, #32
 8008b98:	280a      	cmp	r0, #10
 8008b9a:	600b      	str	r3, [r1, #0]
 8008b9c:	491e      	ldr	r1, [pc, #120]	; (8008c18 <__b2d+0xa0>)
 8008b9e:	dc17      	bgt.n	8008bd0 <__b2d+0x58>
 8008ba0:	45c1      	cmp	r9, r8
 8008ba2:	bf28      	it	cs
 8008ba4:	2200      	movcs	r2, #0
 8008ba6:	f1c0 0c0b 	rsb	ip, r0, #11
 8008baa:	fa26 f30c 	lsr.w	r3, r6, ip
 8008bae:	bf38      	it	cc
 8008bb0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008bb4:	ea43 0501 	orr.w	r5, r3, r1
 8008bb8:	f100 0315 	add.w	r3, r0, #21
 8008bbc:	fa06 f303 	lsl.w	r3, r6, r3
 8008bc0:	fa22 f20c 	lsr.w	r2, r2, ip
 8008bc4:	ea43 0402 	orr.w	r4, r3, r2
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd0:	45c1      	cmp	r9, r8
 8008bd2:	bf3a      	itte	cc
 8008bd4:	f1a7 0808 	subcc.w	r8, r7, #8
 8008bd8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008bdc:	2200      	movcs	r2, #0
 8008bde:	f1b0 030b 	subs.w	r3, r0, #11
 8008be2:	d015      	beq.n	8008c10 <__b2d+0x98>
 8008be4:	409e      	lsls	r6, r3
 8008be6:	f1c3 0720 	rsb	r7, r3, #32
 8008bea:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008bee:	fa22 f107 	lsr.w	r1, r2, r7
 8008bf2:	45c8      	cmp	r8, r9
 8008bf4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008bf8:	ea46 0501 	orr.w	r5, r6, r1
 8008bfc:	bf94      	ite	ls
 8008bfe:	2100      	movls	r1, #0
 8008c00:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008c04:	fa02 f003 	lsl.w	r0, r2, r3
 8008c08:	40f9      	lsrs	r1, r7
 8008c0a:	ea40 0401 	orr.w	r4, r0, r1
 8008c0e:	e7db      	b.n	8008bc8 <__b2d+0x50>
 8008c10:	ea46 0501 	orr.w	r5, r6, r1
 8008c14:	4614      	mov	r4, r2
 8008c16:	e7d7      	b.n	8008bc8 <__b2d+0x50>
 8008c18:	3ff00000 	.word	0x3ff00000

08008c1c <__d2b>:
 8008c1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c20:	461c      	mov	r4, r3
 8008c22:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008c26:	2101      	movs	r1, #1
 8008c28:	4690      	mov	r8, r2
 8008c2a:	f7ff fcb6 	bl	800859a <_Balloc>
 8008c2e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008c32:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008c36:	4607      	mov	r7, r0
 8008c38:	bb34      	cbnz	r4, 8008c88 <__d2b+0x6c>
 8008c3a:	9201      	str	r2, [sp, #4]
 8008c3c:	f1b8 0200 	subs.w	r2, r8, #0
 8008c40:	d027      	beq.n	8008c92 <__d2b+0x76>
 8008c42:	a802      	add	r0, sp, #8
 8008c44:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008c48:	f7ff fd8a 	bl	8008760 <__lo0bits>
 8008c4c:	9900      	ldr	r1, [sp, #0]
 8008c4e:	b1f0      	cbz	r0, 8008c8e <__d2b+0x72>
 8008c50:	9a01      	ldr	r2, [sp, #4]
 8008c52:	f1c0 0320 	rsb	r3, r0, #32
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	40c2      	lsrs	r2, r0
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	9201      	str	r2, [sp, #4]
 8008c62:	9b01      	ldr	r3, [sp, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bf14      	ite	ne
 8008c68:	2102      	movne	r1, #2
 8008c6a:	2101      	moveq	r1, #1
 8008c6c:	61bb      	str	r3, [r7, #24]
 8008c6e:	6139      	str	r1, [r7, #16]
 8008c70:	b1c4      	cbz	r4, 8008ca4 <__d2b+0x88>
 8008c72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c76:	4404      	add	r4, r0
 8008c78:	6034      	str	r4, [r6, #0]
 8008c7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c7e:	6028      	str	r0, [r5, #0]
 8008c80:	4638      	mov	r0, r7
 8008c82:	b002      	add	sp, #8
 8008c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008c8c:	e7d5      	b.n	8008c3a <__d2b+0x1e>
 8008c8e:	6179      	str	r1, [r7, #20]
 8008c90:	e7e7      	b.n	8008c62 <__d2b+0x46>
 8008c92:	a801      	add	r0, sp, #4
 8008c94:	f7ff fd64 	bl	8008760 <__lo0bits>
 8008c98:	2101      	movs	r1, #1
 8008c9a:	9b01      	ldr	r3, [sp, #4]
 8008c9c:	6139      	str	r1, [r7, #16]
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	3020      	adds	r0, #32
 8008ca2:	e7e5      	b.n	8008c70 <__d2b+0x54>
 8008ca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ca8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008cac:	6030      	str	r0, [r6, #0]
 8008cae:	6918      	ldr	r0, [r3, #16]
 8008cb0:	f7ff fd37 	bl	8008722 <__hi0bits>
 8008cb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008cb8:	e7e1      	b.n	8008c7e <__d2b+0x62>

08008cba <__ratio>:
 8008cba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbe:	4688      	mov	r8, r1
 8008cc0:	4669      	mov	r1, sp
 8008cc2:	4681      	mov	r9, r0
 8008cc4:	f7ff ff58 	bl	8008b78 <__b2d>
 8008cc8:	468b      	mov	fp, r1
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460f      	mov	r7, r1
 8008cce:	4640      	mov	r0, r8
 8008cd0:	a901      	add	r1, sp, #4
 8008cd2:	f7ff ff51 	bl	8008b78 <__b2d>
 8008cd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cda:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008cde:	460d      	mov	r5, r1
 8008ce0:	eba3 0c02 	sub.w	ip, r3, r2
 8008ce4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfd5      	itete	le
 8008cf2:	460a      	movle	r2, r1
 8008cf4:	463a      	movgt	r2, r7
 8008cf6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cfa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008cfe:	bfd8      	it	le
 8008d00:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008d04:	462b      	mov	r3, r5
 8008d06:	4602      	mov	r2, r0
 8008d08:	4659      	mov	r1, fp
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7f7 fd0e 	bl	800072c <__aeabi_ddiv>
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d16 <__copybits>:
 8008d16:	3901      	subs	r1, #1
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	1149      	asrs	r1, r1, #5
 8008d1c:	6914      	ldr	r4, [r2, #16]
 8008d1e:	3101      	adds	r1, #1
 8008d20:	f102 0314 	add.w	r3, r2, #20
 8008d24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d2c:	42a3      	cmp	r3, r4
 8008d2e:	4602      	mov	r2, r0
 8008d30:	d303      	bcc.n	8008d3a <__copybits+0x24>
 8008d32:	2300      	movs	r3, #0
 8008d34:	428a      	cmp	r2, r1
 8008d36:	d305      	bcc.n	8008d44 <__copybits+0x2e>
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3e:	f840 2b04 	str.w	r2, [r0], #4
 8008d42:	e7f3      	b.n	8008d2c <__copybits+0x16>
 8008d44:	f842 3b04 	str.w	r3, [r2], #4
 8008d48:	e7f4      	b.n	8008d34 <__copybits+0x1e>

08008d4a <__any_on>:
 8008d4a:	f100 0214 	add.w	r2, r0, #20
 8008d4e:	6900      	ldr	r0, [r0, #16]
 8008d50:	114b      	asrs	r3, r1, #5
 8008d52:	4298      	cmp	r0, r3
 8008d54:	b510      	push	{r4, lr}
 8008d56:	db11      	blt.n	8008d7c <__any_on+0x32>
 8008d58:	dd0a      	ble.n	8008d70 <__any_on+0x26>
 8008d5a:	f011 011f 	ands.w	r1, r1, #31
 8008d5e:	d007      	beq.n	8008d70 <__any_on+0x26>
 8008d60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d64:	fa24 f001 	lsr.w	r0, r4, r1
 8008d68:	fa00 f101 	lsl.w	r1, r0, r1
 8008d6c:	428c      	cmp	r4, r1
 8008d6e:	d10b      	bne.n	8008d88 <__any_on+0x3e>
 8008d70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d803      	bhi.n	8008d80 <__any_on+0x36>
 8008d78:	2000      	movs	r0, #0
 8008d7a:	bd10      	pop	{r4, pc}
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	e7f7      	b.n	8008d70 <__any_on+0x26>
 8008d80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d0f5      	beq.n	8008d74 <__any_on+0x2a>
 8008d88:	2001      	movs	r0, #1
 8008d8a:	e7f6      	b.n	8008d7a <__any_on+0x30>

08008d8c <_calloc_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	fb02 f401 	mul.w	r4, r2, r1
 8008d92:	4621      	mov	r1, r4
 8008d94:	f000 f854 	bl	8008e40 <_malloc_r>
 8008d98:	4605      	mov	r5, r0
 8008d9a:	b118      	cbz	r0, 8008da4 <_calloc_r+0x18>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	2100      	movs	r1, #0
 8008da0:	f7fc fca6 	bl	80056f0 <memset>
 8008da4:	4628      	mov	r0, r5
 8008da6:	bd38      	pop	{r3, r4, r5, pc}

08008da8 <_free_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4605      	mov	r5, r0
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d043      	beq.n	8008e38 <_free_r+0x90>
 8008db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db4:	1f0c      	subs	r4, r1, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfb8      	it	lt
 8008dba:	18e4      	addlt	r4, r4, r3
 8008dbc:	f000 faa0 	bl	8009300 <__malloc_lock>
 8008dc0:	4a1e      	ldr	r2, [pc, #120]	; (8008e3c <_free_r+0x94>)
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	b933      	cbnz	r3, 8008dd6 <_free_r+0x2e>
 8008dc8:	6063      	str	r3, [r4, #4]
 8008dca:	6014      	str	r4, [r2, #0]
 8008dcc:	4628      	mov	r0, r5
 8008dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd2:	f000 ba96 	b.w	8009302 <__malloc_unlock>
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	d90b      	bls.n	8008df2 <_free_r+0x4a>
 8008dda:	6821      	ldr	r1, [r4, #0]
 8008ddc:	1862      	adds	r2, r4, r1
 8008dde:	4293      	cmp	r3, r2
 8008de0:	bf01      	itttt	eq
 8008de2:	681a      	ldreq	r2, [r3, #0]
 8008de4:	685b      	ldreq	r3, [r3, #4]
 8008de6:	1852      	addeq	r2, r2, r1
 8008de8:	6022      	streq	r2, [r4, #0]
 8008dea:	6063      	str	r3, [r4, #4]
 8008dec:	6004      	str	r4, [r0, #0]
 8008dee:	e7ed      	b.n	8008dcc <_free_r+0x24>
 8008df0:	4613      	mov	r3, r2
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	b10a      	cbz	r2, 8008dfa <_free_r+0x52>
 8008df6:	42a2      	cmp	r2, r4
 8008df8:	d9fa      	bls.n	8008df0 <_free_r+0x48>
 8008dfa:	6819      	ldr	r1, [r3, #0]
 8008dfc:	1858      	adds	r0, r3, r1
 8008dfe:	42a0      	cmp	r0, r4
 8008e00:	d10b      	bne.n	8008e1a <_free_r+0x72>
 8008e02:	6820      	ldr	r0, [r4, #0]
 8008e04:	4401      	add	r1, r0
 8008e06:	1858      	adds	r0, r3, r1
 8008e08:	4282      	cmp	r2, r0
 8008e0a:	6019      	str	r1, [r3, #0]
 8008e0c:	d1de      	bne.n	8008dcc <_free_r+0x24>
 8008e0e:	6810      	ldr	r0, [r2, #0]
 8008e10:	6852      	ldr	r2, [r2, #4]
 8008e12:	4401      	add	r1, r0
 8008e14:	6019      	str	r1, [r3, #0]
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	e7d8      	b.n	8008dcc <_free_r+0x24>
 8008e1a:	d902      	bls.n	8008e22 <_free_r+0x7a>
 8008e1c:	230c      	movs	r3, #12
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	e7d4      	b.n	8008dcc <_free_r+0x24>
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	1821      	adds	r1, r4, r0
 8008e26:	428a      	cmp	r2, r1
 8008e28:	bf01      	itttt	eq
 8008e2a:	6811      	ldreq	r1, [r2, #0]
 8008e2c:	6852      	ldreq	r2, [r2, #4]
 8008e2e:	1809      	addeq	r1, r1, r0
 8008e30:	6021      	streq	r1, [r4, #0]
 8008e32:	6062      	str	r2, [r4, #4]
 8008e34:	605c      	str	r4, [r3, #4]
 8008e36:	e7c9      	b.n	8008dcc <_free_r+0x24>
 8008e38:	bd38      	pop	{r3, r4, r5, pc}
 8008e3a:	bf00      	nop
 8008e3c:	2000030c 	.word	0x2000030c

08008e40 <_malloc_r>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	1ccd      	adds	r5, r1, #3
 8008e44:	f025 0503 	bic.w	r5, r5, #3
 8008e48:	3508      	adds	r5, #8
 8008e4a:	2d0c      	cmp	r5, #12
 8008e4c:	bf38      	it	cc
 8008e4e:	250c      	movcc	r5, #12
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	4606      	mov	r6, r0
 8008e54:	db01      	blt.n	8008e5a <_malloc_r+0x1a>
 8008e56:	42a9      	cmp	r1, r5
 8008e58:	d903      	bls.n	8008e62 <_malloc_r+0x22>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	2000      	movs	r0, #0
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	f000 fa4d 	bl	8009300 <__malloc_lock>
 8008e66:	4a21      	ldr	r2, [pc, #132]	; (8008eec <_malloc_r+0xac>)
 8008e68:	6814      	ldr	r4, [r2, #0]
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	b991      	cbnz	r1, 8008e94 <_malloc_r+0x54>
 8008e6e:	4c20      	ldr	r4, [pc, #128]	; (8008ef0 <_malloc_r+0xb0>)
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	b91b      	cbnz	r3, 8008e7c <_malloc_r+0x3c>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f97b 	bl	8009170 <_sbrk_r>
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f000 f976 	bl	8009170 <_sbrk_r>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d124      	bne.n	8008ed2 <_malloc_r+0x92>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	6033      	str	r3, [r6, #0]
 8008e8e:	f000 fa38 	bl	8009302 <__malloc_unlock>
 8008e92:	e7e4      	b.n	8008e5e <_malloc_r+0x1e>
 8008e94:	680b      	ldr	r3, [r1, #0]
 8008e96:	1b5b      	subs	r3, r3, r5
 8008e98:	d418      	bmi.n	8008ecc <_malloc_r+0x8c>
 8008e9a:	2b0b      	cmp	r3, #11
 8008e9c:	d90f      	bls.n	8008ebe <_malloc_r+0x7e>
 8008e9e:	600b      	str	r3, [r1, #0]
 8008ea0:	18cc      	adds	r4, r1, r3
 8008ea2:	50cd      	str	r5, [r1, r3]
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f000 fa2c 	bl	8009302 <__malloc_unlock>
 8008eaa:	f104 000b 	add.w	r0, r4, #11
 8008eae:	1d23      	adds	r3, r4, #4
 8008eb0:	f020 0007 	bic.w	r0, r0, #7
 8008eb4:	1ac3      	subs	r3, r0, r3
 8008eb6:	d0d3      	beq.n	8008e60 <_malloc_r+0x20>
 8008eb8:	425a      	negs	r2, r3
 8008eba:	50e2      	str	r2, [r4, r3]
 8008ebc:	e7d0      	b.n	8008e60 <_malloc_r+0x20>
 8008ebe:	684b      	ldr	r3, [r1, #4]
 8008ec0:	428c      	cmp	r4, r1
 8008ec2:	bf16      	itet	ne
 8008ec4:	6063      	strne	r3, [r4, #4]
 8008ec6:	6013      	streq	r3, [r2, #0]
 8008ec8:	460c      	movne	r4, r1
 8008eca:	e7eb      	b.n	8008ea4 <_malloc_r+0x64>
 8008ecc:	460c      	mov	r4, r1
 8008ece:	6849      	ldr	r1, [r1, #4]
 8008ed0:	e7cc      	b.n	8008e6c <_malloc_r+0x2c>
 8008ed2:	1cc4      	adds	r4, r0, #3
 8008ed4:	f024 0403 	bic.w	r4, r4, #3
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d005      	beq.n	8008ee8 <_malloc_r+0xa8>
 8008edc:	1a21      	subs	r1, r4, r0
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f000 f946 	bl	8009170 <_sbrk_r>
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d0cf      	beq.n	8008e88 <_malloc_r+0x48>
 8008ee8:	6025      	str	r5, [r4, #0]
 8008eea:	e7db      	b.n	8008ea4 <_malloc_r+0x64>
 8008eec:	2000030c 	.word	0x2000030c
 8008ef0:	20000310 	.word	0x20000310

08008ef4 <__sfputc_r>:
 8008ef4:	6893      	ldr	r3, [r2, #8]
 8008ef6:	b410      	push	{r4}
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	6093      	str	r3, [r2, #8]
 8008efe:	da07      	bge.n	8008f10 <__sfputc_r+0x1c>
 8008f00:	6994      	ldr	r4, [r2, #24]
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	db01      	blt.n	8008f0a <__sfputc_r+0x16>
 8008f06:	290a      	cmp	r1, #10
 8008f08:	d102      	bne.n	8008f10 <__sfputc_r+0x1c>
 8008f0a:	bc10      	pop	{r4}
 8008f0c:	f7fd befa 	b.w	8006d04 <__swbuf_r>
 8008f10:	6813      	ldr	r3, [r2, #0]
 8008f12:	1c58      	adds	r0, r3, #1
 8008f14:	6010      	str	r0, [r2, #0]
 8008f16:	7019      	strb	r1, [r3, #0]
 8008f18:	4608      	mov	r0, r1
 8008f1a:	bc10      	pop	{r4}
 8008f1c:	4770      	bx	lr

08008f1e <__sfputs_r>:
 8008f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f20:	4606      	mov	r6, r0
 8008f22:	460f      	mov	r7, r1
 8008f24:	4614      	mov	r4, r2
 8008f26:	18d5      	adds	r5, r2, r3
 8008f28:	42ac      	cmp	r4, r5
 8008f2a:	d101      	bne.n	8008f30 <__sfputs_r+0x12>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e007      	b.n	8008f40 <__sfputs_r+0x22>
 8008f30:	463a      	mov	r2, r7
 8008f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7ff ffdc 	bl	8008ef4 <__sfputc_r>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d1f3      	bne.n	8008f28 <__sfputs_r+0xa>
 8008f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f44 <_vfiprintf_r>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	460c      	mov	r4, r1
 8008f4a:	b09d      	sub	sp, #116	; 0x74
 8008f4c:	4617      	mov	r7, r2
 8008f4e:	461d      	mov	r5, r3
 8008f50:	4606      	mov	r6, r0
 8008f52:	b118      	cbz	r0, 8008f5c <_vfiprintf_r+0x18>
 8008f54:	6983      	ldr	r3, [r0, #24]
 8008f56:	b90b      	cbnz	r3, 8008f5c <_vfiprintf_r+0x18>
 8008f58:	f7fe fec6 	bl	8007ce8 <__sinit>
 8008f5c:	4b7c      	ldr	r3, [pc, #496]	; (8009150 <_vfiprintf_r+0x20c>)
 8008f5e:	429c      	cmp	r4, r3
 8008f60:	d158      	bne.n	8009014 <_vfiprintf_r+0xd0>
 8008f62:	6874      	ldr	r4, [r6, #4]
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	0718      	lsls	r0, r3, #28
 8008f68:	d55e      	bpl.n	8009028 <_vfiprintf_r+0xe4>
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d05b      	beq.n	8009028 <_vfiprintf_r+0xe4>
 8008f70:	2300      	movs	r3, #0
 8008f72:	9309      	str	r3, [sp, #36]	; 0x24
 8008f74:	2320      	movs	r3, #32
 8008f76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f7a:	2330      	movs	r3, #48	; 0x30
 8008f7c:	f04f 0b01 	mov.w	fp, #1
 8008f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f84:	9503      	str	r5, [sp, #12]
 8008f86:	46b8      	mov	r8, r7
 8008f88:	4645      	mov	r5, r8
 8008f8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f8e:	b10b      	cbz	r3, 8008f94 <_vfiprintf_r+0x50>
 8008f90:	2b25      	cmp	r3, #37	; 0x25
 8008f92:	d154      	bne.n	800903e <_vfiprintf_r+0xfa>
 8008f94:	ebb8 0a07 	subs.w	sl, r8, r7
 8008f98:	d00b      	beq.n	8008fb2 <_vfiprintf_r+0x6e>
 8008f9a:	4653      	mov	r3, sl
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7ff ffbc 	bl	8008f1e <__sfputs_r>
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	f000 80c2 	beq.w	8009130 <_vfiprintf_r+0x1ec>
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fae:	4453      	add	r3, sl
 8008fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb2:	f898 3000 	ldrb.w	r3, [r8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 80ba 	beq.w	8009130 <_vfiprintf_r+0x1ec>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc6:	9304      	str	r3, [sp, #16]
 8008fc8:	9307      	str	r3, [sp, #28]
 8008fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fce:	931a      	str	r3, [sp, #104]	; 0x68
 8008fd0:	46a8      	mov	r8, r5
 8008fd2:	2205      	movs	r2, #5
 8008fd4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008fd8:	485e      	ldr	r0, [pc, #376]	; (8009154 <_vfiprintf_r+0x210>)
 8008fda:	f7ff fac5 	bl	8008568 <memchr>
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	bb78      	cbnz	r0, 8009042 <_vfiprintf_r+0xfe>
 8008fe2:	06d9      	lsls	r1, r3, #27
 8008fe4:	bf44      	itt	mi
 8008fe6:	2220      	movmi	r2, #32
 8008fe8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fec:	071a      	lsls	r2, r3, #28
 8008fee:	bf44      	itt	mi
 8008ff0:	222b      	movmi	r2, #43	; 0x2b
 8008ff2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ff6:	782a      	ldrb	r2, [r5, #0]
 8008ff8:	2a2a      	cmp	r2, #42	; 0x2a
 8008ffa:	d02a      	beq.n	8009052 <_vfiprintf_r+0x10e>
 8008ffc:	46a8      	mov	r8, r5
 8008ffe:	2000      	movs	r0, #0
 8009000:	250a      	movs	r5, #10
 8009002:	9a07      	ldr	r2, [sp, #28]
 8009004:	4641      	mov	r1, r8
 8009006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800900a:	3b30      	subs	r3, #48	; 0x30
 800900c:	2b09      	cmp	r3, #9
 800900e:	d969      	bls.n	80090e4 <_vfiprintf_r+0x1a0>
 8009010:	b360      	cbz	r0, 800906c <_vfiprintf_r+0x128>
 8009012:	e024      	b.n	800905e <_vfiprintf_r+0x11a>
 8009014:	4b50      	ldr	r3, [pc, #320]	; (8009158 <_vfiprintf_r+0x214>)
 8009016:	429c      	cmp	r4, r3
 8009018:	d101      	bne.n	800901e <_vfiprintf_r+0xda>
 800901a:	68b4      	ldr	r4, [r6, #8]
 800901c:	e7a2      	b.n	8008f64 <_vfiprintf_r+0x20>
 800901e:	4b4f      	ldr	r3, [pc, #316]	; (800915c <_vfiprintf_r+0x218>)
 8009020:	429c      	cmp	r4, r3
 8009022:	bf08      	it	eq
 8009024:	68f4      	ldreq	r4, [r6, #12]
 8009026:	e79d      	b.n	8008f64 <_vfiprintf_r+0x20>
 8009028:	4621      	mov	r1, r4
 800902a:	4630      	mov	r0, r6
 800902c:	f7fd febc 	bl	8006da8 <__swsetup_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	d09d      	beq.n	8008f70 <_vfiprintf_r+0x2c>
 8009034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009038:	b01d      	add	sp, #116	; 0x74
 800903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903e:	46a8      	mov	r8, r5
 8009040:	e7a2      	b.n	8008f88 <_vfiprintf_r+0x44>
 8009042:	4a44      	ldr	r2, [pc, #272]	; (8009154 <_vfiprintf_r+0x210>)
 8009044:	4645      	mov	r5, r8
 8009046:	1a80      	subs	r0, r0, r2
 8009048:	fa0b f000 	lsl.w	r0, fp, r0
 800904c:	4318      	orrs	r0, r3
 800904e:	9004      	str	r0, [sp, #16]
 8009050:	e7be      	b.n	8008fd0 <_vfiprintf_r+0x8c>
 8009052:	9a03      	ldr	r2, [sp, #12]
 8009054:	1d11      	adds	r1, r2, #4
 8009056:	6812      	ldr	r2, [r2, #0]
 8009058:	9103      	str	r1, [sp, #12]
 800905a:	2a00      	cmp	r2, #0
 800905c:	db01      	blt.n	8009062 <_vfiprintf_r+0x11e>
 800905e:	9207      	str	r2, [sp, #28]
 8009060:	e004      	b.n	800906c <_vfiprintf_r+0x128>
 8009062:	4252      	negs	r2, r2
 8009064:	f043 0302 	orr.w	r3, r3, #2
 8009068:	9207      	str	r2, [sp, #28]
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	f898 3000 	ldrb.w	r3, [r8]
 8009070:	2b2e      	cmp	r3, #46	; 0x2e
 8009072:	d10e      	bne.n	8009092 <_vfiprintf_r+0x14e>
 8009074:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009078:	2b2a      	cmp	r3, #42	; 0x2a
 800907a:	d138      	bne.n	80090ee <_vfiprintf_r+0x1aa>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	f108 0802 	add.w	r8, r8, #2
 8009082:	1d1a      	adds	r2, r3, #4
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	9203      	str	r2, [sp, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfb8      	it	lt
 800908c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009090:	9305      	str	r3, [sp, #20]
 8009092:	4d33      	ldr	r5, [pc, #204]	; (8009160 <_vfiprintf_r+0x21c>)
 8009094:	2203      	movs	r2, #3
 8009096:	f898 1000 	ldrb.w	r1, [r8]
 800909a:	4628      	mov	r0, r5
 800909c:	f7ff fa64 	bl	8008568 <memchr>
 80090a0:	b140      	cbz	r0, 80090b4 <_vfiprintf_r+0x170>
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	1b40      	subs	r0, r0, r5
 80090a6:	fa03 f000 	lsl.w	r0, r3, r0
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	f108 0801 	add.w	r8, r8, #1
 80090b0:	4303      	orrs	r3, r0
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	f898 1000 	ldrb.w	r1, [r8]
 80090b8:	2206      	movs	r2, #6
 80090ba:	482a      	ldr	r0, [pc, #168]	; (8009164 <_vfiprintf_r+0x220>)
 80090bc:	f108 0701 	add.w	r7, r8, #1
 80090c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090c4:	f7ff fa50 	bl	8008568 <memchr>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d037      	beq.n	800913c <_vfiprintf_r+0x1f8>
 80090cc:	4b26      	ldr	r3, [pc, #152]	; (8009168 <_vfiprintf_r+0x224>)
 80090ce:	bb1b      	cbnz	r3, 8009118 <_vfiprintf_r+0x1d4>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	3307      	adds	r3, #7
 80090d4:	f023 0307 	bic.w	r3, r3, #7
 80090d8:	3308      	adds	r3, #8
 80090da:	9303      	str	r3, [sp, #12]
 80090dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090de:	444b      	add	r3, r9
 80090e0:	9309      	str	r3, [sp, #36]	; 0x24
 80090e2:	e750      	b.n	8008f86 <_vfiprintf_r+0x42>
 80090e4:	fb05 3202 	mla	r2, r5, r2, r3
 80090e8:	2001      	movs	r0, #1
 80090ea:	4688      	mov	r8, r1
 80090ec:	e78a      	b.n	8009004 <_vfiprintf_r+0xc0>
 80090ee:	2300      	movs	r3, #0
 80090f0:	250a      	movs	r5, #10
 80090f2:	4619      	mov	r1, r3
 80090f4:	f108 0801 	add.w	r8, r8, #1
 80090f8:	9305      	str	r3, [sp, #20]
 80090fa:	4640      	mov	r0, r8
 80090fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009100:	3a30      	subs	r2, #48	; 0x30
 8009102:	2a09      	cmp	r2, #9
 8009104:	d903      	bls.n	800910e <_vfiprintf_r+0x1ca>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0c3      	beq.n	8009092 <_vfiprintf_r+0x14e>
 800910a:	9105      	str	r1, [sp, #20]
 800910c:	e7c1      	b.n	8009092 <_vfiprintf_r+0x14e>
 800910e:	fb05 2101 	mla	r1, r5, r1, r2
 8009112:	2301      	movs	r3, #1
 8009114:	4680      	mov	r8, r0
 8009116:	e7f0      	b.n	80090fa <_vfiprintf_r+0x1b6>
 8009118:	ab03      	add	r3, sp, #12
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	4622      	mov	r2, r4
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <_vfiprintf_r+0x228>)
 8009120:	a904      	add	r1, sp, #16
 8009122:	4630      	mov	r0, r6
 8009124:	f7fc fb7e 	bl	8005824 <_printf_float>
 8009128:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800912c:	4681      	mov	r9, r0
 800912e:	d1d5      	bne.n	80090dc <_vfiprintf_r+0x198>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	065b      	lsls	r3, r3, #25
 8009134:	f53f af7e 	bmi.w	8009034 <_vfiprintf_r+0xf0>
 8009138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913a:	e77d      	b.n	8009038 <_vfiprintf_r+0xf4>
 800913c:	ab03      	add	r3, sp, #12
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	4622      	mov	r2, r4
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <_vfiprintf_r+0x228>)
 8009144:	a904      	add	r1, sp, #16
 8009146:	4630      	mov	r0, r6
 8009148:	f7fc fe18 	bl	8005d7c <_printf_i>
 800914c:	e7ec      	b.n	8009128 <_vfiprintf_r+0x1e4>
 800914e:	bf00      	nop
 8009150:	080095c0 	.word	0x080095c0
 8009154:	0800970c 	.word	0x0800970c
 8009158:	080095e0 	.word	0x080095e0
 800915c:	080095a0 	.word	0x080095a0
 8009160:	08009712 	.word	0x08009712
 8009164:	08009716 	.word	0x08009716
 8009168:	08005825 	.word	0x08005825
 800916c:	08008f1f 	.word	0x08008f1f

08009170 <_sbrk_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	2300      	movs	r3, #0
 8009174:	4c05      	ldr	r4, [pc, #20]	; (800918c <_sbrk_r+0x1c>)
 8009176:	4605      	mov	r5, r0
 8009178:	4608      	mov	r0, r1
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	f7f9 f8d2 	bl	8002324 <_sbrk>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_sbrk_r+0x1a>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	b103      	cbz	r3, 800918a <_sbrk_r+0x1a>
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	200004c0 	.word	0x200004c0

08009190 <__sread>:
 8009190:	b510      	push	{r4, lr}
 8009192:	460c      	mov	r4, r1
 8009194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009198:	f000 f8b4 	bl	8009304 <_read_r>
 800919c:	2800      	cmp	r0, #0
 800919e:	bfab      	itete	ge
 80091a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091a2:	89a3      	ldrhlt	r3, [r4, #12]
 80091a4:	181b      	addge	r3, r3, r0
 80091a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091aa:	bfac      	ite	ge
 80091ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80091ae:	81a3      	strhlt	r3, [r4, #12]
 80091b0:	bd10      	pop	{r4, pc}

080091b2 <__swrite>:
 80091b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b6:	461f      	mov	r7, r3
 80091b8:	898b      	ldrh	r3, [r1, #12]
 80091ba:	4605      	mov	r5, r0
 80091bc:	05db      	lsls	r3, r3, #23
 80091be:	460c      	mov	r4, r1
 80091c0:	4616      	mov	r6, r2
 80091c2:	d505      	bpl.n	80091d0 <__swrite+0x1e>
 80091c4:	2302      	movs	r3, #2
 80091c6:	2200      	movs	r2, #0
 80091c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091cc:	f000 f886 	bl	80092dc <_lseek_r>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	4632      	mov	r2, r6
 80091d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091de:	463b      	mov	r3, r7
 80091e0:	4628      	mov	r0, r5
 80091e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091e6:	f000 b835 	b.w	8009254 <_write_r>

080091ea <__sseek>:
 80091ea:	b510      	push	{r4, lr}
 80091ec:	460c      	mov	r4, r1
 80091ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f2:	f000 f873 	bl	80092dc <_lseek_r>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	bf15      	itete	ne
 80091fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80091fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009206:	81a3      	strheq	r3, [r4, #12]
 8009208:	bf18      	it	ne
 800920a:	81a3      	strhne	r3, [r4, #12]
 800920c:	bd10      	pop	{r4, pc}

0800920e <__sclose>:
 800920e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009212:	f000 b831 	b.w	8009278 <_close_r>

08009216 <strncmp>:
 8009216:	b510      	push	{r4, lr}
 8009218:	b16a      	cbz	r2, 8009236 <strncmp+0x20>
 800921a:	3901      	subs	r1, #1
 800921c:	1884      	adds	r4, r0, r2
 800921e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009222:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009226:	4293      	cmp	r3, r2
 8009228:	d103      	bne.n	8009232 <strncmp+0x1c>
 800922a:	42a0      	cmp	r0, r4
 800922c:	d001      	beq.n	8009232 <strncmp+0x1c>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1f5      	bne.n	800921e <strncmp+0x8>
 8009232:	1a98      	subs	r0, r3, r2
 8009234:	bd10      	pop	{r4, pc}
 8009236:	4610      	mov	r0, r2
 8009238:	e7fc      	b.n	8009234 <strncmp+0x1e>

0800923a <__ascii_wctomb>:
 800923a:	b149      	cbz	r1, 8009250 <__ascii_wctomb+0x16>
 800923c:	2aff      	cmp	r2, #255	; 0xff
 800923e:	bf8b      	itete	hi
 8009240:	238a      	movhi	r3, #138	; 0x8a
 8009242:	700a      	strbls	r2, [r1, #0]
 8009244:	6003      	strhi	r3, [r0, #0]
 8009246:	2001      	movls	r0, #1
 8009248:	bf88      	it	hi
 800924a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800924e:	4770      	bx	lr
 8009250:	4608      	mov	r0, r1
 8009252:	4770      	bx	lr

08009254 <_write_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4605      	mov	r5, r0
 8009258:	4608      	mov	r0, r1
 800925a:	4611      	mov	r1, r2
 800925c:	2200      	movs	r2, #0
 800925e:	4c05      	ldr	r4, [pc, #20]	; (8009274 <_write_r+0x20>)
 8009260:	6022      	str	r2, [r4, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f000 f888 	bl	8009378 <_write>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_write_r+0x1e>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	b103      	cbz	r3, 8009272 <_write_r+0x1e>
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	200004c0 	.word	0x200004c0

08009278 <_close_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	2300      	movs	r3, #0
 800927c:	4c05      	ldr	r4, [pc, #20]	; (8009294 <_close_r+0x1c>)
 800927e:	4605      	mov	r5, r0
 8009280:	4608      	mov	r0, r1
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	f000 f850 	bl	8009328 <_close>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_close_r+0x1a>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	b103      	cbz	r3, 8009292 <_close_r+0x1a>
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	200004c0 	.word	0x200004c0

08009298 <_fstat_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	2300      	movs	r3, #0
 800929c:	4c06      	ldr	r4, [pc, #24]	; (80092b8 <_fstat_r+0x20>)
 800929e:	4605      	mov	r5, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	4611      	mov	r1, r2
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	f000 f847 	bl	8009338 <_fstat>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d102      	bne.n	80092b4 <_fstat_r+0x1c>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	b103      	cbz	r3, 80092b4 <_fstat_r+0x1c>
 80092b2:	602b      	str	r3, [r5, #0]
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	200004c0 	.word	0x200004c0

080092bc <_isatty_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	2300      	movs	r3, #0
 80092c0:	4c05      	ldr	r4, [pc, #20]	; (80092d8 <_isatty_r+0x1c>)
 80092c2:	4605      	mov	r5, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	f000 f83e 	bl	8009348 <_isatty>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_isatty_r+0x1a>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_isatty_r+0x1a>
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	200004c0 	.word	0x200004c0

080092dc <_lseek_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4605      	mov	r5, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	2200      	movs	r2, #0
 80092e6:	4c05      	ldr	r4, [pc, #20]	; (80092fc <_lseek_r+0x20>)
 80092e8:	6022      	str	r2, [r4, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f000 f834 	bl	8009358 <_lseek>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_lseek_r+0x1e>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_lseek_r+0x1e>
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	200004c0 	.word	0x200004c0

08009300 <__malloc_lock>:
 8009300:	4770      	bx	lr

08009302 <__malloc_unlock>:
 8009302:	4770      	bx	lr

08009304 <_read_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4605      	mov	r5, r0
 8009308:	4608      	mov	r0, r1
 800930a:	4611      	mov	r1, r2
 800930c:	2200      	movs	r2, #0
 800930e:	4c05      	ldr	r4, [pc, #20]	; (8009324 <_read_r+0x20>)
 8009310:	6022      	str	r2, [r4, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	f000 f828 	bl	8009368 <_read>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d102      	bne.n	8009322 <_read_r+0x1e>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	b103      	cbz	r3, 8009322 <_read_r+0x1e>
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	200004c0 	.word	0x200004c0

08009328 <_close>:
 8009328:	2258      	movs	r2, #88	; 0x58
 800932a:	4b02      	ldr	r3, [pc, #8]	; (8009334 <_close+0xc>)
 800932c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	4770      	bx	lr
 8009334:	200004c0 	.word	0x200004c0

08009338 <_fstat>:
 8009338:	2258      	movs	r2, #88	; 0x58
 800933a:	4b02      	ldr	r3, [pc, #8]	; (8009344 <_fstat+0xc>)
 800933c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	4770      	bx	lr
 8009344:	200004c0 	.word	0x200004c0

08009348 <_isatty>:
 8009348:	2258      	movs	r2, #88	; 0x58
 800934a:	4b02      	ldr	r3, [pc, #8]	; (8009354 <_isatty+0xc>)
 800934c:	2000      	movs	r0, #0
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	200004c0 	.word	0x200004c0

08009358 <_lseek>:
 8009358:	2258      	movs	r2, #88	; 0x58
 800935a:	4b02      	ldr	r3, [pc, #8]	; (8009364 <_lseek+0xc>)
 800935c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	4770      	bx	lr
 8009364:	200004c0 	.word	0x200004c0

08009368 <_read>:
 8009368:	2258      	movs	r2, #88	; 0x58
 800936a:	4b02      	ldr	r3, [pc, #8]	; (8009374 <_read+0xc>)
 800936c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	4770      	bx	lr
 8009374:	200004c0 	.word	0x200004c0

08009378 <_write>:
 8009378:	2258      	movs	r2, #88	; 0x58
 800937a:	4b02      	ldr	r3, [pc, #8]	; (8009384 <_write+0xc>)
 800937c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	4770      	bx	lr
 8009384:	200004c0 	.word	0x200004c0

08009388 <_init>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	bf00      	nop
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr

08009394 <_fini>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	bf00      	nop
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr
