
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08006c78  08006c78  00016c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007080  08007080  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08007080  08007080  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007080  08007080  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08007088  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000208  08007290  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08007290  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb91  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4f  00000000  00000000  0002bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002d818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002e438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018614  00000000  00000000  0002ef80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094be  00000000  00000000  00047594  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b7f6  00000000  00000000  00050a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  000dc2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000e0304  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000e03a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c60 	.word	0x08006c60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08006c60 	.word	0x08006c60

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
//			break;
	}

}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8000ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6178      	str	r0, [r7, #20]
	if(htim->Instance == TIM1){
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a98      	ldr	r2, [pc, #608]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	f040 82f2 	bne.w	80010c2 <HAL_TIM_PeriodElapsedCallback+0x5fa>
		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 8000ade:	4b97      	ldr	r3, [pc, #604]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b94      	ldr	r3, [pc, #592]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af2:	4413      	add	r3, r2
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000af8:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 8000afa:	4b92      	ldr	r3, [pc, #584]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b92      	ldr	r3, [pc, #584]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc7d 	bl	8000404 <__aeabi_i2d>
 8000b0a:	4b90      	ldr	r3, [pc, #576]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b0c:	cb18      	ldmia	r3, {r3, r4}
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4623      	mov	r3, r4
 8000b12:	f7ff fe0b 	bl	800072c <__aeabi_ddiv>
 8000b16:	4603      	mov	r3, r0
 8000b18:	460c      	mov	r4, r1
 8000b1a:	4a8d      	ldr	r2, [pc, #564]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b1c:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 8000b20:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b26:	a382      	add	r3, pc, #520	; (adr r3, 8000d30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fdfe 	bl	800072c <__aeabi_ddiv>
 8000b30:	4603      	mov	r3, r0
 8000b32:	460c      	mov	r4, r1
 8000b34:	4618      	mov	r0, r3
 8000b36:	4621      	mov	r1, r4
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b85      	ldr	r3, [pc, #532]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b3e:	f7ff fccb 	bl	80004d8 <__aeabi_dmul>
 8000b42:	4603      	mov	r3, r0
 8000b44:	460c      	mov	r4, r1
 8000b46:	4a84      	ldr	r2, [pc, #528]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b48:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8000b4c:	4b7d      	ldr	r3, [pc, #500]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a7d      	ldr	r2, [pc, #500]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000b52:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 8000b54:	4b81      	ldr	r3, [pc, #516]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	4413      	add	r3, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b7d      	ldr	r3, [pc, #500]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b6e:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 8000b70:	4b7c      	ldr	r3, [pc, #496]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b7c      	ldr	r3, [pc, #496]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fc42 	bl	8000404 <__aeabi_i2d>
 8000b80:	4b72      	ldr	r3, [pc, #456]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b82:	cb18      	ldmia	r3, {r3, r4}
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	f7ff fdd0 	bl	800072c <__aeabi_ddiv>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	460c      	mov	r4, r1
 8000b90:	4a76      	ldr	r2, [pc, #472]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b92:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 8000b96:	4b75      	ldr	r3, [pc, #468]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b9c:	a364      	add	r3, pc, #400	; (adr r3, 8000d30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba2:	f7ff fdc3 	bl	800072c <__aeabi_ddiv>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460c      	mov	r4, r1
 8000baa:	4618      	mov	r0, r3
 8000bac:	4621      	mov	r1, r4
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	4b68      	ldr	r3, [pc, #416]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	460c      	mov	r4, r1
 8000bbc:	4a6c      	ldr	r2, [pc, #432]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000bbe:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 8000bc2:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a68      	ldr	r2, [pc, #416]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000bc8:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 8000bca:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	f040 82b6 	bne.w	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bda:	4b5f      	ldr	r3, [pc, #380]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000bdc:	cb18      	ldmia	r3, {r3, r4}
 8000bde:	461a      	mov	r2, r3
 8000be0:	4623      	mov	r3, r4
 8000be2:	f7ff fac1 	bl	8000168 <__aeabi_dsub>
 8000be6:	4603      	mov	r3, r0
 8000be8:	460c      	mov	r4, r1
 8000bea:	4a64      	ldr	r2, [pc, #400]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bec:	e9c2 3400 	strd	r3, r4, [r2]
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//			}else if(error_vel_act>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
			if(stop1==1){
 8000bf0:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d106      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x13e>
			  Ui_anterior=0;
 8000bf8:	4a62      	ldr	r2, [pc, #392]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	f04f 0400 	mov.w	r4, #0
 8000c02:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 8000c06:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc0c 	bl	8000428 <__aeabi_f2d>
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c12:	cb18      	ldmia	r3, {r3, r4}
 8000c14:	461a      	mov	r2, r3
 8000c16:	4623      	mov	r3, r4
 8000c18:	f7ff fc5e 	bl	80004d8 <__aeabi_dmul>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	460c      	mov	r4, r1
 8000c20:	4a5a      	ldr	r2, [pc, #360]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c22:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_ant);
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fbfc 	bl	8000428 <__aeabi_f2d>
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c32:	cb18      	ldmia	r3, {r3, r4}
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	f7ff fc4e 	bl	80004d8 <__aeabi_dmul>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	460c      	mov	r4, r1
 8000c40:	4618      	mov	r0, r3
 8000c42:	4621      	mov	r1, r4
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c46:	cb18      	ldmia	r3, {r3, r4}
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	f7ff fc44 	bl	80004d8 <__aeabi_dmul>
 8000c50:	4603      	mov	r3, r0
 8000c52:	460c      	mov	r4, r1
 8000c54:	4618      	mov	r0, r3
 8000c56:	4621      	mov	r1, r4
 8000c58:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c5a:	cb18      	ldmia	r3, {r3, r4}
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f7ff fa84 	bl	800016c <__adddf3>
 8000c64:	4603      	mov	r3, r0
 8000c66:	460c      	mov	r4, r1
 8000c68:	4a4b      	ldr	r2, [pc, #300]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c6a:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbd8 	bl	8000428 <__aeabi_f2d>
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c7a:	cb18      	ldmia	r3, {r3, r4}
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4623      	mov	r3, r4
 8000c80:	f7ff fd54 	bl	800072c <__aeabi_ddiv>
 8000c84:	4603      	mov	r3, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	461d      	mov	r5, r3
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c92:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c94:	cb18      	ldmia	r3, {r3, r4}
 8000c96:	461a      	mov	r2, r3
 8000c98:	4623      	mov	r3, r4
 8000c9a:	f7ff fa65 	bl	8000168 <__aeabi_dsub>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460c      	mov	r4, r1
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	4631      	mov	r1, r6
 8000caa:	f7ff fc15 	bl	80004d8 <__aeabi_dmul>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460c      	mov	r4, r1
 8000cb2:	4a3b      	ldr	r2, [pc, #236]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cb4:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna>0){
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	f7ff fe97 	bl	80009f8 <__aeabi_dcmpgt>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d06b      	beq.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid +(Up + Ui_actual + Ud));
 8000cd0:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb85 	bl	80003e4 <__aeabi_ui2d>
 8000cda:	4605      	mov	r5, r0
 8000cdc:	460e      	mov	r6, r1
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ce6:	cb18      	ldmia	r3, {r3, r4}
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4623      	mov	r3, r4
 8000cec:	f7ff fa3e 	bl	800016c <__adddf3>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	4621      	mov	r1, r4
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cfa:	cb18      	ldmia	r3, {r3, r4}
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4623      	mov	r3, r4
 8000d00:	f7ff fa34 	bl	800016c <__adddf3>
 8000d04:	4603      	mov	r3, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	4631      	mov	r1, r6
 8000d10:	f7ff fa2c 	bl	800016c <__adddf3>
 8000d14:	4603      	mov	r3, r0
 8000d16:	460c      	mov	r4, r1
 8000d18:	469a      	mov	sl, r3
 8000d1a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8000d1e:	4650      	mov	r0, sl
 8000d20:	4659      	mov	r1, fp
 8000d22:	f7ff feb1 	bl	8000a88 <__aeabi_d2uiz>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e07a      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x35c>
 8000d2e:	bf00      	nop
 8000d30:	00000000 	.word	0x00000000
 8000d34:	40bce000 	.word	0x40bce000
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	20000224 	.word	0x20000224
 8000d40:	20000388 	.word	0x20000388
 8000d44:	2000022c 	.word	0x2000022c
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000240 	.word	0x20000240
 8000d54:	404e0000 	.word	0x404e0000
 8000d58:	20000248 	.word	0x20000248
 8000d5c:	20000230 	.word	0x20000230
 8000d60:	2000033c 	.word	0x2000033c
 8000d64:	20000238 	.word	0x20000238
 8000d68:	20000234 	.word	0x20000234
 8000d6c:	20000250 	.word	0x20000250
 8000d70:	20000258 	.word	0x20000258
 8000d74:	20000020 	.word	0x20000020
 8000d78:	20000280 	.word	0x20000280
 8000d7c:	20000260 	.word	0x20000260
 8000d80:	20000024 	.word	0x20000024
 8000d84:	20000290 	.word	0x20000290
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200002a0 	.word	0x200002a0
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20000268 	.word	0x20000268
 8000d98:	20000298 	.word	0x20000298
 8000d9c:	20000010 	.word	0x20000010
 8000da0:	200002a8 	.word	0x200002a8
 8000da4:	200002d0 	.word	0x200002d0
			}else if(velocidad_consigna<0){
 8000da8:	4ba0      	ldr	r3, [pc, #640]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	f7ff fe01 	bl	80009bc <__aeabi_dcmplt>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02e      	beq.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x356>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid -(Up + Ui_actual + Ud));
 8000dc0:	4b9b      	ldr	r3, [pc, #620]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fb0d 	bl	80003e4 <__aeabi_ui2d>
 8000dca:	4605      	mov	r5, r0
 8000dcc:	460e      	mov	r6, r1
 8000dce:	4b99      	ldr	r3, [pc, #612]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd4:	4b98      	ldr	r3, [pc, #608]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000dd6:	cb18      	ldmia	r3, {r3, r4}
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4623      	mov	r3, r4
 8000ddc:	f7ff f9c6 	bl	800016c <__adddf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	4618      	mov	r0, r3
 8000de6:	4621      	mov	r1, r4
 8000de8:	4b94      	ldr	r3, [pc, #592]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000dea:	cb18      	ldmia	r3, {r3, r4}
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	f7ff f9bc 	bl	800016c <__adddf3>
 8000df4:	4603      	mov	r3, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	4631      	mov	r1, r6
 8000e00:	f7ff f9b2 	bl	8000168 <__aeabi_dsub>
 8000e04:	4603      	mov	r3, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	4698      	mov	r8, r3
 8000e0a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8000e0e:	4640      	mov	r0, r8
 8000e10:	4649      	mov	r1, r9
 8000e12:	f7ff fe39 	bl	8000a88 <__aeabi_d2uiz>
 8000e16:	4602      	mov	r2, r0
 8000e18:	4b85      	ldr	r3, [pc, #532]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e002      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x35c>
			}else{
				duty_cycle_pid = 0;
 8000e1e:	4b84      	ldr	r3, [pc, #528]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
			}
      if(duty_cycle_pid > 14000){
 8000e24:	4b82      	ldr	r3, [pc, #520]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d903      	bls.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x370>
				duty_cycle_pid=14000;
 8000e30:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e32:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000e36:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8000e38:	4b81      	ldr	r3, [pc, #516]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a7c      	ldr	r2, [pc, #496]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8000e42:	4b7d      	ldr	r3, [pc, #500]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e44:	cb18      	ldmia	r3, {r3, r4}
 8000e46:	4a7f      	ldr	r2, [pc, #508]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000e48:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 8000e4c:	4b7e      	ldr	r3, [pc, #504]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000e4e:	cb18      	ldmia	r3, {r3, r4}
 8000e50:	4a7e      	ldr	r2, [pc, #504]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000e52:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 8000e56:	4b7e      	ldr	r3, [pc, #504]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e5c:	4b7d      	ldr	r3, [pc, #500]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000e5e:	cb18      	ldmia	r3, {r3, r4}
 8000e60:	461a      	mov	r2, r3
 8000e62:	4623      	mov	r3, r4
 8000e64:	f7ff f980 	bl	8000168 <__aeabi_dsub>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4a7a      	ldr	r2, [pc, #488]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e6e:	e9c2 3400 	strd	r3, r4, [r2]
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
//			}else if(error_vel_act2>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
//     }
			if(stop2==1){
 8000e72:	4b7a      	ldr	r3, [pc, #488]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d106      	bne.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				Ui_anterior2=0;
 8000e7a:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	f04f 0400 	mov.w	r4, #0
 8000e84:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2=KP2 * error_vel_act2;
 8000e88:	4b76      	ldr	r3, [pc, #472]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff facb 	bl	8000428 <__aeabi_f2d>
 8000e92:	4b71      	ldr	r3, [pc, #452]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e94:	cb18      	ldmia	r3, {r3, r4}
 8000e96:	461a      	mov	r2, r3
 8000e98:	4623      	mov	r3, r4
 8000e9a:	f7ff fb1d 	bl	80004d8 <__aeabi_dmul>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	4a71      	ldr	r2, [pc, #452]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000ea4:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 8000ea8:	4b70      	ldr	r3, [pc, #448]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fabb 	bl	8000428 <__aeabi_f2d>
 8000eb2:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000eb4:	cb18      	ldmia	r3, {r3, r4}
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff fb0d 	bl	80004d8 <__aeabi_dmul>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000ec8:	cb18      	ldmia	r3, {r3, r4}
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4623      	mov	r3, r4
 8000ece:	f7ff fb03 	bl	80004d8 <__aeabi_dmul>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	4621      	mov	r1, r4
 8000eda:	4b61      	ldr	r3, [pc, #388]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000edc:	cb18      	ldmia	r3, {r3, r4}
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4623      	mov	r3, r4
 8000ee2:	f7ff f943 	bl	800016c <__adddf3>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4a63      	ldr	r2, [pc, #396]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000eec:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 8000ef0:	4b62      	ldr	r3, [pc, #392]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fa97 	bl	8000428 <__aeabi_f2d>
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000efc:	cb18      	ldmia	r3, {r3, r4}
 8000efe:	461a      	mov	r2, r3
 8000f00:	4623      	mov	r3, r4
 8000f02:	f7ff fc13 	bl	800072c <__aeabi_ddiv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	460c      	mov	r4, r1
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	4626      	mov	r6, r4
 8000f0e:	4b52      	ldr	r3, [pc, #328]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000f16:	cb18      	ldmia	r3, {r3, r4}
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	f7ff f924 	bl	8000168 <__aeabi_dsub>
 8000f20:	4603      	mov	r3, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	461a      	mov	r2, r3
 8000f26:	4623      	mov	r3, r4
 8000f28:	4628      	mov	r0, r5
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	f7ff fad4 	bl	80004d8 <__aeabi_dmul>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4a52      	ldr	r2, [pc, #328]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000f36:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna2 > 0){
 8000f3a:	4b45      	ldr	r3, [pc, #276]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	f7ff fd56 	bl	80009f8 <__aeabi_dcmpgt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02f      	beq.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x4ea>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 +(Up2 + Ui_actual2 + Ud2));
 8000f52:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa44 	bl	80003e4 <__aeabi_ui2d>
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	460e      	mov	r6, r1
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000f68:	cb18      	ldmia	r3, {r3, r4}
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	f7ff f8fd 	bl	800016c <__adddf3>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	4618      	mov	r0, r3
 8000f78:	4621      	mov	r1, r4
 8000f7a:	4b41      	ldr	r3, [pc, #260]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000f7c:	cb18      	ldmia	r3, {r3, r4}
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4623      	mov	r3, r4
 8000f82:	f7ff f8f3 	bl	800016c <__adddf3>
 8000f86:	4603      	mov	r3, r0
 8000f88:	460c      	mov	r4, r1
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	4628      	mov	r0, r5
 8000f90:	4631      	mov	r1, r6
 8000f92:	f7ff f8eb 	bl	800016c <__adddf3>
 8000f96:	4603      	mov	r3, r0
 8000f98:	460c      	mov	r4, r1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa6:	f7ff fd6f 	bl	8000a88 <__aeabi_d2uiz>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e06d      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x5c6>
			}else if(velocidad_consigna2 < 0){
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	f7ff fcfc 	bl	80009bc <__aeabi_dcmplt>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d05e      	beq.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x5c0>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 -(Up2 + Ui_actual2 + Ud2));
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa08 	bl	80003e4 <__aeabi_ui2d>
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	460e      	mov	r6, r1
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fe0:	cb18      	ldmia	r3, {r3, r4}
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	f7ff f8c1 	bl	800016c <__adddf3>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000ff4:	cb18      	ldmia	r3, {r3, r4}
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	f7ff f8b7 	bl	800016c <__adddf3>
 8000ffe:	4603      	mov	r3, r0
 8001000:	460c      	mov	r4, r1
 8001002:	461a      	mov	r2, r3
 8001004:	4623      	mov	r3, r4
 8001006:	4628      	mov	r0, r5
 8001008:	4631      	mov	r1, r6
 800100a:	f7ff f8ad 	bl	8000168 <__aeabi_dsub>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800101e:	f7ff fd33 	bl	8000a88 <__aeabi_d2uiz>
 8001022:	4602      	mov	r2, r0
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e031      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x5c6>
 800102a:	bf00      	nop
 800102c:	20000280 	.word	0x20000280
 8001030:	200002d0 	.word	0x200002d0
 8001034:	200002a0 	.word	0x200002a0
 8001038:	20000298 	.word	0x20000298
 800103c:	200002a8 	.word	0x200002a8
 8001040:	20000444 	.word	0x20000444
 8001044:	20000290 	.word	0x20000290
 8001048:	20000260 	.word	0x20000260
 800104c:	20000268 	.word	0x20000268
 8001050:	20000288 	.word	0x20000288
 8001054:	20000258 	.word	0x20000258
 8001058:	20000270 	.word	0x20000270
 800105c:	20000028 	.word	0x20000028
 8001060:	200002b0 	.word	0x200002b0
 8001064:	20000014 	.word	0x20000014
 8001068:	200002c0 	.word	0x200002c0
 800106c:	20000018 	.word	0x20000018
 8001070:	20000000 	.word	0x20000000
 8001074:	20000278 	.word	0x20000278
 8001078:	200002b8 	.word	0x200002b8
 800107c:	2000001c 	.word	0x2000001c
 8001080:	200002c8 	.word	0x200002c8
 8001084:	200002d4 	.word	0x200002d4
			}else{
				duty_cycle_pid2 = 0;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
			}
			if(duty_cycle_pid2 > 14000){
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001096:	4293      	cmp	r3, r2
 8001098:	d903      	bls.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x5da>
				duty_cycle_pid2=14000;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800109c:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80010a0:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a29      	ldr	r2, [pc, #164]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80010ae:	cb18      	ldmia	r3, {r3, r4}
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80010b2:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x694>)
 80010b8:	cb18      	ldmia	r3, {r3, r4}
 80010ba:	4a29      	ldr	r2, [pc, #164]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80010bc:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 80010c0:	e03e      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM3){
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d11a      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x63a>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	085b      	lsrs	r3, r3, #1
 80010da:	429a      	cmp	r2, r3
 80010dc:	d908      	bls.n	80010f0 <HAL_TIM_PeriodElapsedCallback+0x628>
			contOUFlow--;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010e6:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 80010e8:	4821      	ldr	r0, [pc, #132]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80010ea:	f004 f813 	bl	8005114 <puts>
}
 80010ee:	e027      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow++;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010f8:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 80010fa:	481e      	ldr	r0, [pc, #120]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010fc:	f004 f80a 	bl	8005114 <puts>
}
 8001100:	e01e      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM4){
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d119      	bne.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	429a      	cmp	r2, r3
 800111c:	d908      	bls.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x668>
			contOUFlow2--;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3b01      	subs	r3, #1
 8001124:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001126:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 8001128:	4816      	ldr	r0, [pc, #88]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800112a:	f003 fff3 	bl	8005114 <puts>
}
 800112e:	e007      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow2++;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001138:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800113c:	f003 ffea 	bl	8005114 <puts>
}
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114a:	bf00      	nop
 800114c:	200002d4 	.word	0x200002d4
 8001150:	20000444 	.word	0x20000444
 8001154:	200002b8 	.word	0x200002b8
 8001158:	200002b0 	.word	0x200002b0
 800115c:	20000270 	.word	0x20000270
 8001160:	20000278 	.word	0x20000278
 8001164:	40000400 	.word	0x40000400
 8001168:	20000388 	.word	0x20000388
 800116c:	20000224 	.word	0x20000224
 8001170:	08006d68 	.word	0x08006d68
 8001174:	08006d7c 	.word	0x08006d7c
 8001178:	40000800 	.word	0x40000800
 800117c:	2000033c 	.word	0x2000033c
 8001180:	20000230 	.word	0x20000230
 8001184:	08006d90 	.word	0x08006d90
 8001188:	08006da4 	.word	0x08006da4

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 fe07 	bl	8001da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f88f 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 facf 	bl	800173c <MX_GPIO_Init>
  MX_TIM2_Init();
 800119e:	f000 f9a5 	bl	80014ec <MX_TIM2_Init>
  MX_TIM1_Init();
 80011a2:	f000 f905 	bl	80013b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011a6:	f000 fa21 	bl	80015ec <MX_TIM3_Init>
  MX_TIM4_Init();
 80011aa:	f000 fa73 	bl	8001694 <MX_TIM4_Init>
  MX_SPI2_Init();
 80011ae:	f000 f8c9 	bl	8001344 <MX_SPI2_Init>

	//RetargetInit(&huart2);
	//HAL_UART_Receive_IT(&huart2, &byte, 1);
    //HAL_SPI_Receive_IT(&hspi2, &byte, 1);

	HAL_TIM_Base_Start_IT(&htim1);
 80011b2:	4838      	ldr	r0, [pc, #224]	; (8001294 <main+0x108>)
 80011b4:	f002 f960 	bl	8003478 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <main+0x108>)
 80011bc:	f002 fa06 	bl	80035cc <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 80011c0:	4835      	ldr	r0, [pc, #212]	; (8001298 <main+0x10c>)
 80011c2:	f002 f90f 	bl	80033e4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80011c6:	2100      	movs	r1, #0
 80011c8:	4833      	ldr	r0, [pc, #204]	; (8001298 <main+0x10c>)
 80011ca:	f002 fb3f 	bl	800384c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80011ce:	2108      	movs	r1, #8
 80011d0:	4831      	ldr	r0, [pc, #196]	; (8001298 <main+0x10c>)
 80011d2:	f002 fb3b 	bl	800384c <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80011d6:	4831      	ldr	r0, [pc, #196]	; (800129c <main+0x110>)
 80011d8:	f002 f94e 	bl	8003478 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80011dc:	213c      	movs	r1, #60	; 0x3c
 80011de:	482f      	ldr	r0, [pc, #188]	; (800129c <main+0x110>)
 80011e0:	f002 fcbe 	bl	8003b60 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 80011e4:	482e      	ldr	r0, [pc, #184]	; (80012a0 <main+0x114>)
 80011e6:	f002 f947 	bl	8003478 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80011ea:	213c      	movs	r1, #60	; 0x3c
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <main+0x114>)
 80011ee:	f002 fcb7 	bl	8003b60 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	482b      	ldr	r0, [pc, #172]	; (80012a4 <main+0x118>)
 80011f8:	f001 f936 	bl	8002468 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2120      	movs	r1, #32
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <main+0x118>)
 8001202:	f001 f931 	bl	8002468 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120c:	4825      	ldr	r0, [pc, #148]	; (80012a4 <main+0x118>)
 800120e:	f001 f92b 	bl	8002468 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001218:	4822      	ldr	r0, [pc, #136]	; (80012a4 <main+0x118>)
 800121a:	f001 f925 	bl	8002468 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <main+0x110>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <main+0x114>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t intBuffer[14] = {':','w','1','+','2','5',';',':','w','2','+','2','5',';'};
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <main+0x11c>)
 8001230:	463c      	mov	r4, r7
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	c407      	stmia	r4!, {r0, r1, r2}
 8001236:	8023      	strh	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123e:	481b      	ldr	r0, [pc, #108]	; (80012ac <main+0x120>)
 8001240:	f001 f912 	bl	8002468 <HAL_GPIO_WritePin>
	while (1) {
		//transmision spi

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124a:	4818      	ldr	r0, [pc, #96]	; (80012ac <main+0x120>)
 800124c:	f001 f90c 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, intBuffer, 14,1);
 8001250:	4639      	mov	r1, r7
 8001252:	2301      	movs	r3, #1
 8001254:	220e      	movs	r2, #14
 8001256:	4816      	ldr	r0, [pc, #88]	; (80012b0 <main+0x124>)
 8001258:	f001 fd8c 	bl	8002d74 <HAL_SPI_Transmit>
		HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	; 0x64
 800125e:	f000 fe03 	bl	8001e68 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <main+0x120>)
 800126a:	f001 f8fd 	bl	8002468 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <main+0x128>)
 8001276:	f001 f8f7 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f000 fdf4 	bl	8001e68 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <main+0x128>)
 8001288:	f001 f8ee 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f000 fdeb 	bl	8001e68 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001292:	e7d7      	b.n	8001244 <main+0xb8>
 8001294:	200003fc 	.word	0x200003fc
 8001298:	20000444 	.word	0x20000444
 800129c:	20000388 	.word	0x20000388
 80012a0:	2000033c 	.word	0x2000033c
 80012a4:	40010800 	.word	0x40010800
 80012a8:	08006db8 	.word	0x08006db8
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	200002e4 	.word	0x200002e4
 80012b4:	40011000 	.word	0x40011000

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b090      	sub	sp, #64	; 0x40
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	2228      	movs	r2, #40	; 0x28
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fb82 	bl	80049d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4618      	mov	r0, r3
 8001302:	f001 f8c9 	bl	8002498 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800130c:	f000 fa9c 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fb34 	bl	8002998 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001336:	f000 fa87 	bl	8001848 <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3740      	adds	r7, #64	; 0x40
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_SPI2_Init+0x64>)
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <MX_SPI2_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001354:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_SPI2_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI2_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001378:	2238      	movs	r2, #56	; 0x38
 800137a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_SPI2_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_SPI2_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001390:	220a      	movs	r2, #10
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001396:	f001 fc69 	bl	8002c6c <HAL_SPI_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013a0:	f000 fa52 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200002e4 	.word	0x200002e4
 80013ac:	40003800 	.word	0x40003800

080013b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2220      	movs	r2, #32
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 faf1 	bl	80049d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <MX_TIM1_Init+0x134>)
 80013f0:	4a3d      	ldr	r2, [pc, #244]	; (80014e8 <MX_TIM1_Init+0x138>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80013f4:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <MX_TIM1_Init+0x134>)
 80013f6:	220b      	movs	r2, #11
 80013f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <MX_TIM1_Init+0x134>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001400:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <MX_TIM1_Init+0x134>)
 8001402:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001406:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <MX_TIM1_Init+0x134>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <MX_TIM1_Init+0x134>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <MX_TIM1_Init+0x134>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800141a:	4832      	ldr	r0, [pc, #200]	; (80014e4 <MX_TIM1_Init+0x134>)
 800141c:	f001 ff92 	bl	8003344 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001426:	f000 fa0f 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001434:	4619      	mov	r1, r3
 8001436:	482b      	ldr	r0, [pc, #172]	; (80014e4 <MX_TIM1_Init+0x134>)
 8001438:	f002 fe5e 	bl	80040f8 <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001442:	f000 fa01 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <MX_TIM1_Init+0x134>)
 8001448:	f002 f868 	bl	800351c <HAL_TIM_OC_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001452:	f000 f9f9 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001462:	4619      	mov	r1, r3
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <MX_TIM1_Init+0x134>)
 8001466:	f003 f9c7 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001470:	f000 f9ea 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_TIM1_Init+0x134>)
 800149a:	f002 fd17 	bl	8003ecc <HAL_TIM_OC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014a4:	f000 f9d0 	bl	8001848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_TIM1_Init+0x134>)
 80014cc:	f003 f9f2 	bl	80048b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014d6:	f000 f9b7 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3758      	adds	r7, #88	; 0x58
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200003fc 	.word	0x200003fc
 80014e8:	40012c00 	.word	0x40012c00

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <MX_TIM2_Init+0xfc>)
 800151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <MX_TIM2_Init+0xfc>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_TIM2_Init+0xfc>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <MX_TIM2_Init+0xfc>)
 8001532:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <MX_TIM2_Init+0xfc>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_TIM2_Init+0xfc>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001544:	4828      	ldr	r0, [pc, #160]	; (80015e8 <MX_TIM2_Init+0xfc>)
 8001546:	f001 fefd 	bl	8003344 <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001550:	f000 f97a 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155e:	4619      	mov	r1, r3
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <MX_TIM2_Init+0xfc>)
 8001562:	f002 fdc9 	bl	80040f8 <HAL_TIM_ConfigClockSource>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800156c:	f000 f96c 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <MX_TIM2_Init+0xfc>)
 8001572:	f002 f913 	bl	800379c <HAL_TIM_PWM_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800157c:	f000 f964 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4619      	mov	r1, r3
 800158e:	4816      	ldr	r0, [pc, #88]	; (80015e8 <MX_TIM2_Init+0xfc>)
 8001590:	f003 f932 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800159a:	f000 f955 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159e:	2360      	movs	r3, #96	; 0x60
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MX_TIM2_Init+0xfc>)
 80015b6:	f002 fce1 	bl	8003f7c <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015c0:	f000 f942 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2208      	movs	r2, #8
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM2_Init+0xfc>)
 80015cc:	f002 fcd6 	bl	8003f7c <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015d6:	f000 f937 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM2_Init+0xfc>)
 80015dc:	f000 fa8c 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3738      	adds	r7, #56	; 0x38
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000444 	.word	0x20000444

080015ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 f9e8 	bl	80049d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <MX_TIM3_Init+0xa0>)
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <MX_TIM3_Init+0xa4>)
 800160c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_TIM3_Init+0xa0>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_TIM3_Init+0xa0>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_TIM3_Init+0xa0>)
 800161c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_TIM3_Init+0xa0>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_TIM3_Init+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800162e:	2303      	movs	r3, #3
 8001630:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001646:	2301      	movs	r3, #1
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_TIM3_Init+0xa0>)
 800165a:	f002 f9df 	bl	8003a1c <HAL_TIM_Encoder_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001664:	f000 f8f0 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_TIM3_Init+0xa0>)
 8001676:	f003 f8bf 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001680:	f000 f8e2 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000388 	.word	0x20000388
 8001690:	40000400 	.word	0x40000400

08001694 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2224      	movs	r2, #36	; 0x24
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 f994 	bl	80049d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <MX_TIM4_Init+0xa0>)
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <MX_TIM4_Init+0xa4>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_TIM4_Init+0xa0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_TIM4_Init+0xa0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM4_Init+0xa0>)
 80016c4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80016c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM4_Init+0xa0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_TIM4_Init+0xa0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d6:	2303      	movs	r3, #3
 80016d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ee:	2301      	movs	r3, #1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_TIM4_Init+0xa0>)
 8001702:	f002 f98b 	bl	8003a1c <HAL_TIM_Encoder_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800170c:	f000 f89c 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_TIM4_Init+0xa0>)
 800171e:	f003 f86b 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001728:	f000 f88e 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3730      	adds	r7, #48	; 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000033c 	.word	0x2000033c
 8001738:	40000800 	.word	0x40000800

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b39      	ldr	r3, [pc, #228]	; (8001838 <MX_GPIO_Init+0xfc>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a38      	ldr	r2, [pc, #224]	; (8001838 <MX_GPIO_Init+0xfc>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <MX_GPIO_Init+0xfc>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b33      	ldr	r3, [pc, #204]	; (8001838 <MX_GPIO_Init+0xfc>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a32      	ldr	r2, [pc, #200]	; (8001838 <MX_GPIO_Init+0xfc>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b30      	ldr	r3, [pc, #192]	; (8001838 <MX_GPIO_Init+0xfc>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <MX_GPIO_Init+0xfc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a2c      	ldr	r2, [pc, #176]	; (8001838 <MX_GPIO_Init+0xfc>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_GPIO_Init+0xfc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_GPIO_Init+0xfc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <MX_GPIO_Init+0xfc>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_GPIO_Init+0xfc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b6:	4821      	ldr	r0, [pc, #132]	; (800183c <MX_GPIO_Init+0x100>)
 80017b8:	f000 fe56 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 80017c2:	481f      	ldr	r0, [pc, #124]	; (8001840 <MX_GPIO_Init+0x104>)
 80017c4:	f000 fe50 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <MX_GPIO_Init+0x108>)
 80017d0:	f000 fe4a 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4619      	mov	r1, r3
 80017ec:	4813      	ldr	r0, [pc, #76]	; (800183c <MX_GPIO_Init+0x100>)
 80017ee:	f000 fce1 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 80017f2:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 80017f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2302      	movs	r3, #2
 8001802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <MX_GPIO_Init+0x104>)
 800180c:	f000 fcd2 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_GPIO_Init+0x108>)
 800182a:	f000 fcc3 	bl	80021b4 <HAL_GPIO_Init>

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40011000 	.word	0x40011000
 8001840:	40010800 	.word	0x40010800
 8001844:	40010c00 	.word	0x40010c00

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_MspInit+0x5c>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <HAL_MspInit+0x5c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_MspInit+0x5c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x5c>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_MspInit+0x5c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_MspInit+0x5c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_MspInit+0x60>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_MspInit+0x60>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000

080018b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a20      	ldr	r2, [pc, #128]	; (8001954 <HAL_SPI_MspInit+0x9c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d139      	bne.n	800194c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_SPI_MspInit+0xa0>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_SPI_MspInit+0xa0>)
 80018de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e2:	61d3      	str	r3, [r2, #28]
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_SPI_MspInit+0xa0>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_SPI_MspInit+0xa0>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_SPI_MspInit+0xa0>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_SPI_MspInit+0xa0>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001908:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800190c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4619      	mov	r1, r3
 800191c:	480f      	ldr	r0, [pc, #60]	; (800195c <HAL_SPI_MspInit+0xa4>)
 800191e:	f000 fc49 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	4809      	ldr	r0, [pc, #36]	; (800195c <HAL_SPI_MspInit+0xa4>)
 8001938:	f000 fc3c 	bl	80021b4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2024      	movs	r0, #36	; 0x24
 8001942:	f000 fb8a 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001946:	2024      	movs	r0, #36	; 0x24
 8001948:	f000 fba3 	bl	8002092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40003800 	.word	0x40003800
 8001958:	40021000 	.word	0x40021000
 800195c:	40010c00 	.word	0x40010c00

08001960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <HAL_TIM_Base_MspInit+0x98>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12c      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_TIM_Base_MspInit+0x9c>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_TIM_Base_MspInit+0x9c>)
 8001978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_TIM_Base_MspInit+0x9c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2018      	movs	r0, #24
 8001990:	f000 fb63 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001994:	2018      	movs	r0, #24
 8001996:	f000 fb7c 	bl	8002092 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2019      	movs	r0, #25
 80019a0:	f000 fb5b 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019a4:	2019      	movs	r0, #25
 80019a6:	f000 fb74 	bl	8002092 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	201a      	movs	r0, #26
 80019b0:	f000 fb53 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80019b4:	201a      	movs	r0, #26
 80019b6:	f000 fb6c 	bl	8002092 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	201b      	movs	r0, #27
 80019c0:	f000 fb4b 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019c4:	201b      	movs	r0, #27
 80019c6:	f000 fb64 	bl	8002092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ca:	e010      	b.n	80019ee <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d4:	d10b      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_TIM_Base_MspInit+0x9c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_TIM_Base_MspInit+0x9c>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_TIM_Base_MspInit+0x9c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0318 	add.w	r3, r7, #24
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d12c      	bne.n	8001a7a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	61d3      	str	r3, [r2, #28]
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a50:	23c0      	movs	r3, #192	; 0xc0
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4822      	ldr	r0, [pc, #136]	; (8001aec <HAL_TIM_Encoder_MspInit+0xec>)
 8001a64:	f000 fba6 	bl	80021b4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	201d      	movs	r0, #29
 8001a6e:	f000 faf4 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a72:	201d      	movs	r0, #29
 8001a74:	f000 fb0d 	bl	8002092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a78:	e030      	b.n	8001adc <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d12b      	bne.n	8001adc <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	61d3      	str	r3, [r2, #28]
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab4:	23c0      	movs	r3, #192	; 0xc0
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480b      	ldr	r0, [pc, #44]	; (8001af4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ac8:	f000 fb74 	bl	80021b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	201e      	movs	r0, #30
 8001ad2:	f000 fac2 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ad6:	201e      	movs	r0, #30
 8001ad8:	f000 fadb 	bl	8002092 <HAL_NVIC_EnableIRQ>
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	40000800 	.word	0x40000800
 8001af4:	40010c00 	.word	0x40010c00

08001af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b16:	d142      	bne.n	8001b9e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_TIM_MspPostInit+0xb0>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_TIM_MspPostInit+0xb0>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_TIM_MspPostInit+0xb0>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_TIM_MspPostInit+0xb0>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_TIM_MspPostInit+0xb0>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_TIM_MspPostInit+0xb0>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2302      	movs	r3, #2
 8001b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4814      	ldr	r0, [pc, #80]	; (8001bac <HAL_TIM_MspPostInit+0xb4>)
 8001b5c:	f000 fb2a 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	480e      	ldr	r0, [pc, #56]	; (8001bb0 <HAL_TIM_MspPostInit+0xb8>)
 8001b76:	f000 fb1d 	bl	80021b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_TIM_MspPostInit+0xbc>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_TIM_MspPostInit+0xbc>)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010800 	.word	0x40010800
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	40010000 	.word	0x40010000

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <MemManage_Handler+0x4>

08001bd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <BusFault_Handler+0x4>

08001bd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <UsageFault_Handler+0x4>

08001bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c04:	f000 f914 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM1_BRK_IRQHandler+0x10>)
 8001c12:	f002 f852 	bl	8003cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200003fc 	.word	0x200003fc

08001c20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM1_UP_IRQHandler+0x10>)
 8001c26:	f002 f848 	bl	8003cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200003fc 	.word	0x200003fc

08001c34 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001c3a:	f002 f83e 	bl	8003cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200003fc 	.word	0x200003fc

08001c48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM1_CC_IRQHandler+0x10>)
 8001c4e:	f002 f834 	bl	8003cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200003fc 	.word	0x200003fc

08001c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM3_IRQHandler+0x10>)
 8001c62:	f002 f82a 	bl	8003cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000388 	.word	0x20000388

08001c70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM4_IRQHandler+0x10>)
 8001c76:	f002 f820 	bl	8003cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000033c 	.word	0x2000033c

08001c84 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <SPI2_IRQHandler+0x10>)
 8001c8a:	f001 f9af 	bl	8002fec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200002e4 	.word	0x200002e4

08001c98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x50>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x16>
		heap_end = &end;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <_sbrk+0x50>)
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <_sbrk+0x54>)
 8001cac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <_sbrk+0x50>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <_sbrk+0x50>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	466a      	mov	r2, sp
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d907      	bls.n	8001cd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cc2:	f002 fe5b 	bl	800497c <__errno>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	230c      	movs	r3, #12
 8001cca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd0:	e006      	b.n	8001ce0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <_sbrk+0x50>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <_sbrk+0x50>)
 8001cdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200002d8 	.word	0x200002d8
 8001cec:	20000498 	.word	0x20000498

08001cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <SystemInit+0x5c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <SystemInit+0x5c>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <SystemInit+0x5c>)
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4911      	ldr	r1, [pc, #68]	; (8001d4c <SystemInit+0x5c>)
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <SystemInit+0x60>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <SystemInit+0x5c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <SystemInit+0x5c>)
 8001d12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <SystemInit+0x5c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SystemInit+0x5c>)
 8001d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <SystemInit+0x5c>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <SystemInit+0x5c>)
 8001d2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SystemInit+0x5c>)
 8001d36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d3a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SystemInit+0x64>)
 8001d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d42:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	f8ff0000 	.word	0xf8ff0000
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d5a:	e003      	b.n	8001d64 <LoopCopyDataInit>

08001d5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d62:	3104      	adds	r1, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d64:	480a      	ldr	r0, [pc, #40]	; (8001d90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d6c:	d3f6      	bcc.n	8001d5c <CopyDataInit>
  ldr r2, =_sbss
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d70:	e002      	b.n	8001d78 <LoopFillZerobss>

08001d72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d74:	f842 3b04 	str.w	r3, [r2], #4

08001d78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d7c:	d3f9      	bcc.n	8001d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d7e:	f7ff ffb7 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d82:	f002 fe01 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d86:	f7ff fa01 	bl	800118c <main>
  bx lr
 8001d8a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d8c:	08007088 	.word	0x08007088
  ldr r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d94:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 8001d98:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8001d9c:	20000494 	.word	0x20000494

08001da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC1_2_IRQHandler>
	...

08001da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_Init+0x28>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_Init+0x28>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f000 f945 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f808 	bl	8001dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc0:	f7ff fd48 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000

08001dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x54>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_InitTick+0x58>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f95d 	bl	80020ae <HAL_SYSTICK_Config>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00e      	b.n	8001e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d80a      	bhi.n	8001e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e0c:	f000 f925 	bl	800205a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e10:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <HAL_InitTick+0x5c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000002c 	.word	0x2000002c
 8001e28:	20000034 	.word	0x20000034
 8001e2c:	20000030 	.word	0x20000030

08001e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_IncTick+0x1c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_IncTick+0x20>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_IncTick+0x20>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000034 	.word	0x20000034
 8001e50:	2000048c 	.word	0x2000048c

08001e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <HAL_GetTick+0x10>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	2000048c 	.word	0x2000048c

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_Delay+0x40>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffe0 	bl	8001e54 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000034 	.word	0x20000034

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4906      	ldr	r1, [pc, #24]	; (8001f44 <__NVIC_EnableIRQ+0x34>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002024:	f7ff ff90 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff2d 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206c:	f7ff ff42 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff ff90 	bl	8001f9c <NVIC_EncodePriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff5f 	bl	8001f48 <__NVIC_SetPriority>
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff35 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffa2 	bl	8002000 <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d005      	beq.n	80020ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e051      	b.n	800218e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 020e 	bic.w	r2, r2, #14
 80020f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_DMA_Abort_IT+0xd0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d029      	beq.n	8002168 <HAL_DMA_Abort_IT+0xa0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a20      	ldr	r2, [pc, #128]	; (800219c <HAL_DMA_Abort_IT+0xd4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_DMA_Abort_IT+0x9c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_DMA_Abort_IT+0xd8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01a      	beq.n	800215e <HAL_DMA_Abort_IT+0x96>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_DMA_Abort_IT+0xdc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d012      	beq.n	8002158 <HAL_DMA_Abort_IT+0x90>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_DMA_Abort_IT+0xe0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00a      	beq.n	8002152 <HAL_DMA_Abort_IT+0x8a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <HAL_DMA_Abort_IT+0xe4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d102      	bne.n	800214c <HAL_DMA_Abort_IT+0x84>
 8002146:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800214a:	e00e      	b.n	800216a <HAL_DMA_Abort_IT+0xa2>
 800214c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002150:	e00b      	b.n	800216a <HAL_DMA_Abort_IT+0xa2>
 8002152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002156:	e008      	b.n	800216a <HAL_DMA_Abort_IT+0xa2>
 8002158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215c:	e005      	b.n	800216a <HAL_DMA_Abort_IT+0xa2>
 800215e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002162:	e002      	b.n	800216a <HAL_DMA_Abort_IT+0xa2>
 8002164:	2310      	movs	r3, #16
 8002166:	e000      	b.n	800216a <HAL_DMA_Abort_IT+0xa2>
 8002168:	2301      	movs	r3, #1
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_DMA_Abort_IT+0xe8>)
 800216c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
    } 
  }
  return status;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40020008 	.word	0x40020008
 800219c:	4002001c 	.word	0x4002001c
 80021a0:	40020030 	.word	0x40020030
 80021a4:	40020044 	.word	0x40020044
 80021a8:	40020058 	.word	0x40020058
 80021ac:	4002006c 	.word	0x4002006c
 80021b0:	40020000 	.word	0x40020000

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c6:	e127      	b.n	8002418 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c8:	2201      	movs	r2, #1
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8116 	bne.w	8002412 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b12      	cmp	r3, #18
 80021ec:	d034      	beq.n	8002258 <HAL_GPIO_Init+0xa4>
 80021ee:	2b12      	cmp	r3, #18
 80021f0:	d80d      	bhi.n	800220e <HAL_GPIO_Init+0x5a>
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d02b      	beq.n	800224e <HAL_GPIO_Init+0x9a>
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d804      	bhi.n	8002204 <HAL_GPIO_Init+0x50>
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d031      	beq.n	8002262 <HAL_GPIO_Init+0xae>
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d01c      	beq.n	800223c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002202:	e048      	b.n	8002296 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002204:	2b03      	cmp	r3, #3
 8002206:	d043      	beq.n	8002290 <HAL_GPIO_Init+0xdc>
 8002208:	2b11      	cmp	r3, #17
 800220a:	d01b      	beq.n	8002244 <HAL_GPIO_Init+0x90>
          break;
 800220c:	e043      	b.n	8002296 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800220e:	4a89      	ldr	r2, [pc, #548]	; (8002434 <HAL_GPIO_Init+0x280>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d026      	beq.n	8002262 <HAL_GPIO_Init+0xae>
 8002214:	4a87      	ldr	r2, [pc, #540]	; (8002434 <HAL_GPIO_Init+0x280>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d806      	bhi.n	8002228 <HAL_GPIO_Init+0x74>
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_GPIO_Init+0x284>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d020      	beq.n	8002262 <HAL_GPIO_Init+0xae>
 8002220:	4a86      	ldr	r2, [pc, #536]	; (800243c <HAL_GPIO_Init+0x288>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01d      	beq.n	8002262 <HAL_GPIO_Init+0xae>
          break;
 8002226:	e036      	b.n	8002296 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002228:	4a85      	ldr	r2, [pc, #532]	; (8002440 <HAL_GPIO_Init+0x28c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0xae>
 800222e:	4a85      	ldr	r2, [pc, #532]	; (8002444 <HAL_GPIO_Init+0x290>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d016      	beq.n	8002262 <HAL_GPIO_Init+0xae>
 8002234:	4a84      	ldr	r2, [pc, #528]	; (8002448 <HAL_GPIO_Init+0x294>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0xae>
          break;
 800223a:	e02c      	b.n	8002296 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e028      	b.n	8002296 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	3304      	adds	r3, #4
 800224a:	623b      	str	r3, [r7, #32]
          break;
 800224c:	e023      	b.n	8002296 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	3308      	adds	r3, #8
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e01e      	b.n	8002296 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	330c      	adds	r3, #12
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e019      	b.n	8002296 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800226a:	2304      	movs	r3, #4
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e012      	b.n	8002296 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002278:	2308      	movs	r3, #8
 800227a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	611a      	str	r2, [r3, #16]
          break;
 8002282:	e008      	b.n	8002296 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002284:	2308      	movs	r3, #8
 8002286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	615a      	str	r2, [r3, #20]
          break;
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2bff      	cmp	r3, #255	; 0xff
 800229a:	d801      	bhi.n	80022a0 <HAL_GPIO_Init+0xec>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	e001      	b.n	80022a4 <HAL_GPIO_Init+0xf0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2bff      	cmp	r3, #255	; 0xff
 80022aa:	d802      	bhi.n	80022b2 <HAL_GPIO_Init+0xfe>
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x104>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	3b08      	subs	r3, #8
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	210f      	movs	r1, #15
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	401a      	ands	r2, r3
 80022ca:	6a39      	ldr	r1, [r7, #32]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	431a      	orrs	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8096 	beq.w	8002412 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e6:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_GPIO_Init+0x298>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_GPIO_Init+0x298>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6193      	str	r3, [r2, #24]
 80022f2:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_GPIO_Init+0x298>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022fe:	4a54      	ldr	r2, [pc, #336]	; (8002450 <HAL_GPIO_Init+0x29c>)
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4b      	ldr	r2, [pc, #300]	; (8002454 <HAL_GPIO_Init+0x2a0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_GPIO_Init+0x19e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4a      	ldr	r2, [pc, #296]	; (8002458 <HAL_GPIO_Init+0x2a4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00d      	beq.n	800234e <HAL_GPIO_Init+0x19a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a49      	ldr	r2, [pc, #292]	; (800245c <HAL_GPIO_Init+0x2a8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x196>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <HAL_GPIO_Init+0x2ac>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_GPIO_Init+0x192>
 8002342:	2303      	movs	r3, #3
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x1a0>
 8002346:	2304      	movs	r3, #4
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x1a0>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x1a0>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x1a0>
 8002352:	2300      	movs	r3, #0
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002364:	493a      	ldr	r1, [pc, #232]	; (8002450 <HAL_GPIO_Init+0x29c>)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4938      	ldr	r1, [pc, #224]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	4933      	ldr	r1, [pc, #204]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 8002396:	4013      	ands	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	492e      	ldr	r1, [pc, #184]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	4929      	ldr	r1, [pc, #164]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023be:	4013      	ands	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4924      	ldr	r1, [pc, #144]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	491f      	ldr	r1, [pc, #124]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	491a      	ldr	r1, [pc, #104]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
 8002402:	e006      	b.n	8002412 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	43db      	mvns	r3, r3
 800240c:	4915      	ldr	r1, [pc, #84]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 800240e:	4013      	ands	r3, r2
 8002410:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	3301      	adds	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	f47f aed0 	bne.w	80021c8 <HAL_GPIO_Init+0x14>
  }
}
 8002428:	bf00      	nop
 800242a:	372c      	adds	r7, #44	; 0x2c
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	10210000 	.word	0x10210000
 8002438:	10110000 	.word	0x10110000
 800243c:	10120000 	.word	0x10120000
 8002440:	10310000 	.word	0x10310000
 8002444:	10320000 	.word	0x10320000
 8002448:	10220000 	.word	0x10220000
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	40010800 	.word	0x40010800
 8002458:	40010c00 	.word	0x40010c00
 800245c:	40011000 	.word	0x40011000
 8002460:	40011400 	.word	0x40011400
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	611a      	str	r2, [r3, #16]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e26c      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b8:	4b92      	ldr	r3, [pc, #584]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00c      	beq.n	80024de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c4:	4b8f      	ldr	r3, [pc, #572]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d112      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
 80024d0:	4b8c      	ldr	r3, [pc, #560]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x12c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d168      	bne.n	80025c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e246      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x76>
 8002500:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a7f      	ldr	r2, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e02e      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b78      	ldr	r3, [pc, #480]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a77      	ldr	r2, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0xbc>
 800253a:	4b72      	ldr	r3, [pc, #456]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a71      	ldr	r2, [pc, #452]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002554:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6a      	ldr	r2, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a67      	ldr	r2, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fc6e 	bl	8001e54 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fc6a 	bl	8001e54 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1fa      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xe4>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff fc5a 	bl	8001e54 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff fc56 	bl	8001e54 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1e6      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x10c>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1ba      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4939      	ldr	r1, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7ff fc0f 	bl	8001e54 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff fc0b 	bl	8001e54 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e19b      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4927      	ldr	r1, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff fbee 	bl	8001e54 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7ff fbea 	bl	8001e54 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e17a      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03a      	beq.n	800271c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7ff fbce 	bl	8001e54 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff fbca 	bl	8001e54 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e15a      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 faa8 	bl	8002c30 <RCC_Delay>
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7ff fbb4 	bl	8001e54 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff fbb0 	bl	8001e54 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d908      	bls.n	8002710 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e140      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	42420000 	.word	0x42420000
 800270c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b9e      	ldr	r3, [pc, #632]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e9      	bne.n	80026f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a6 	beq.w	8002876 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b97      	ldr	r3, [pc, #604]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a93      	ldr	r2, [pc, #588]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b91      	ldr	r3, [pc, #580]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b8b      	ldr	r3, [pc, #556]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a8a      	ldr	r2, [pc, #552]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7ff fb71 	bl	8001e54 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7ff fb6d 	bl	8001e54 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0fd      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x312>
 800279c:	4b7b      	ldr	r3, [pc, #492]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e02d      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a75      	ldr	r2, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	4b73      	ldr	r3, [pc, #460]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a72      	ldr	r2, [pc, #456]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x356>
 80027d4:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a6c      	ldr	r2, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	4b6a      	ldr	r3, [pc, #424]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a69      	ldr	r2, [pc, #420]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a66      	ldr	r2, [pc, #408]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b64      	ldr	r3, [pc, #400]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff fb21 	bl	8001e54 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7ff fb1d 	bl	8001e54 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0ab      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x37e>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7ff fb0b 	bl	8001e54 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff fb07 	bl	8001e54 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e095      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b48      	ldr	r3, [pc, #288]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a47      	ldr	r2, [pc, #284]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8081 	beq.w	8002982 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d061      	beq.n	8002950 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d146      	bne.n	8002922 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7ff fadb 	bl	8001e54 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7ff fad7 	bl	8001e54 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e067      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ca:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	492d      	ldr	r1, [pc, #180]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a19      	ldr	r1, [r3, #32]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	430b      	orrs	r3, r1
 80028ee:	4927      	ldr	r1, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7ff faab 	bl	8001e54 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff faa7 	bl	8001e54 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e037      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x46a>
 8002920:	e02f      	b.n	8002982 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fa94 	bl	8001e54 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff fa90 	bl	8001e54 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e020      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x498>
 800294e:	e018      	b.n	8002982 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e013      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	429a      	cmp	r2, r3
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	42420060 	.word	0x42420060

08002998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0d0      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d910      	bls.n	80029dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 0207 	bic.w	r2, r3, #7
 80029c2:	4965      	ldr	r1, [pc, #404]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0b8      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a0c:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	494d      	ldr	r1, [pc, #308]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d040      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d115      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e073      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06b      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4936      	ldr	r1, [pc, #216]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7ff f9e4 	bl	8001e54 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7ff f9e0 	bl	8001e54 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e053      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d210      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e032      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4916      	ldr	r1, [pc, #88]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	490e      	ldr	r1, [pc, #56]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b26:	f000 f821 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <HAL_RCC_ClockConfig+0x1cc>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1d0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f942 	bl	8001dd0 <HAL_InitTick>

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	08006ddc 	.word	0x08006ddc
 8002b64:	2000002c 	.word	0x2000002c
 8002b68:	20000030 	.word	0x20000030

08002b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b490      	push	{r4, r7}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b74:	1d3c      	adds	r4, r7, #4
 8002b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x40>
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x46>
 8002baa:	e02d      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bae:	623b      	str	r3, [r7, #32]
      break;
 8002bb0:	e02d      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	0c9b      	lsrs	r3, r3, #18
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0c5b      	lsrs	r3, r3, #17
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bde:	4413      	add	r3, r2
 8002be0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002be4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bea:	fb02 f203 	mul.w	r2, r2, r3
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	e004      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	623b      	str	r3, [r7, #32]
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c0a:	623b      	str	r3, [r7, #32]
      break;
 8002c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc90      	pop	{r4, r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	08006dc8 	.word	0x08006dc8
 8002c20:	08006dd8 	.word	0x08006dd8
 8002c24:	40021000 	.word	0x40021000
 8002c28:	007a1200 	.word	0x007a1200
 8002c2c:	003d0900 	.word	0x003d0900

08002c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <RCC_Delay+0x34>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <RCC_Delay+0x38>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0a5b      	lsrs	r3, r3, #9
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c4c:	bf00      	nop
  }
  while (Delay --);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	60fa      	str	r2, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f9      	bne.n	8002c4c <RCC_Delay+0x1c>
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	2000002c 	.word	0x2000002c
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e076      	b.n	8002d6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d108      	bne.n	8002c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8e:	d009      	beq.n	8002ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
 8002c96:	e005      	b.n	8002ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fdfa 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	ea42 0103 	orr.w	r1, r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	0c1a      	lsrs	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f002 0204 	and.w	r2, r2, #4
 8002d4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_SPI_Transmit+0x22>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e126      	b.n	8002fe4 <HAL_SPI_Transmit+0x270>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9e:	f7ff f859 	bl	8001e54 <HAL_GetTick>
 8002da2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d002      	beq.n	8002dba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
 8002db6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db8:	e10b      	b.n	8002fd2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_SPI_Transmit+0x52>
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dca:	e102      	b.n	8002fd2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	88fa      	ldrh	r2, [r7, #6]
 8002de4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d10f      	bne.n	8002e34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d007      	beq.n	8002e52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5a:	d14b      	bne.n	8002ef4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_SPI_Transmit+0xf6>
 8002e64:	8afb      	ldrh	r3, [r7, #22]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d13e      	bne.n	8002ee8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	881a      	ldrh	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e8e:	e02b      	b.n	8002ee8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d112      	bne.n	8002ec4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	881a      	ldrh	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	1c9a      	adds	r2, r3, #2
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ec2:	e011      	b.n	8002ee8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec4:	f7fe ffc6 	bl	8001e54 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d803      	bhi.n	8002edc <HAL_SPI_Transmit+0x168>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Transmit+0x16e>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ee6:	e074      	b.n	8002fd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ce      	bne.n	8002e90 <HAL_SPI_Transmit+0x11c>
 8002ef2:	e04c      	b.n	8002f8e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_Transmit+0x18e>
 8002efc:	8afb      	ldrh	r3, [r7, #22]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d140      	bne.n	8002f84 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	7812      	ldrb	r2, [r2, #0]
 8002f0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f28:	e02c      	b.n	8002f84 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d113      	bne.n	8002f60 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f5e:	e011      	b.n	8002f84 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f60:	f7fe ff78 	bl	8001e54 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d803      	bhi.n	8002f78 <HAL_SPI_Transmit+0x204>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f76:	d102      	bne.n	8002f7e <HAL_SPI_Transmit+0x20a>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f82:	e026      	b.n	8002fd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1cd      	bne.n	8002f2a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	6839      	ldr	r1, [r7, #0]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f9b8 	bl	8003308 <SPI_EndRxTxTransaction>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e000      	b.n	8002fd2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10f      	bne.n	8003030 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    return;
 800302e:	e0bf      	b.n	80031b0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_SPI_IRQHandler+0x66>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	09db      	lsrs	r3, r3, #7
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
    return;
 8003050:	e0ae      	b.n	80031b0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_SPI_IRQHandler+0x80>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a2 	beq.w	80031b0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 809b 	beq.w	80031b0 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d023      	beq.n	80030ce <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d011      	beq.n	80030b6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	e00b      	b.n	80030ce <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
        return;
 80030cc:	e070      	b.n	80031b0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d014      	beq.n	8003104 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	2b00      	cmp	r3, #0
 800310a:	d050      	beq.n	80031ae <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800311a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_SPI_IRQHandler+0x14c>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d034      	beq.n	80031a2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0203 	bic.w	r2, r2, #3
 8003146:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d011      	beq.n	8003174 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_SPI_IRQHandler+0x1cc>)
 8003156:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe ffb3 	bl	80020c8 <HAL_DMA_Abort_IT>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	2b00      	cmp	r3, #0
 800317a:	d016      	beq.n	80031aa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003180:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <HAL_SPI_IRQHandler+0x1cc>)
 8003182:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe ff9d 	bl	80020c8 <HAL_DMA_Abort_IT>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80031a0:	e003      	b.n	80031aa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f80a 	bl	80031bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80031a8:	e000      	b.n	80031ac <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80031aa:	bf00      	nop
    return;
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
  }
}
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	080031cf 	.word	0x080031cf

080031bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff ffe7 	bl	80031bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003208:	f7fe fe24 	bl	8001e54 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003218:	f7fe fe1c 	bl	8001e54 <HAL_GetTick>
 800321c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800321e:	4b39      	ldr	r3, [pc, #228]	; (8003304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	015b      	lsls	r3, r3, #5
 8003224:	0d1b      	lsrs	r3, r3, #20
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322e:	e054      	b.n	80032da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003236:	d050      	beq.n	80032da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003238:	f7fe fe0c 	bl	8001e54 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	429a      	cmp	r2, r3
 8003246:	d902      	bls.n	800324e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d13d      	bne.n	80032ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800325c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003266:	d111      	bne.n	800328c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003270:	d004      	beq.n	800327c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327a:	d107      	bne.n	800328c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003294:	d10f      	bne.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e017      	b.n	80032fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d19b      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000002c 	.word	0x2000002c

08003308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff ff6a 	bl	80031f8 <SPI_WaitFlagStateUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f043 0220 	orr.w	r2, r3, #32
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e000      	b.n	800333c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e041      	b.n	80033da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe faf8 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f000 ff94 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d001      	beq.n	80033fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_TIM_Base_Start+0x88>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_TIM_Base_Start+0x48>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003416:	d009      	beq.n	800342c <HAL_TIM_Base_Start+0x48>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <HAL_TIM_Base_Start+0x8c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_TIM_Base_Start+0x48>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <HAL_TIM_Base_Start+0x90>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d111      	bne.n	8003450 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b06      	cmp	r3, #6
 800343c:	d010      	beq.n	8003460 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	e007      	b.n	8003460 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800

08003478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e03a      	b.n	8003506 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_TIM_Base_Start_IT+0x98>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x58>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d009      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x58>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a14      	ldr	r2, [pc, #80]	; (8003514 <HAL_TIM_Base_Start_IT+0x9c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x58>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_TIM_Base_Start_IT+0xa0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d010      	beq.n	8003504 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f2:	e007      	b.n	8003504 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800

0800351c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e041      	b.n	80035b2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f839 	bl	80035ba <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 fea8 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_TIM_OC_Start_IT+0x24>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e022      	b.n	8003636 <HAL_TIM_OC_Start_IT+0x6a>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d109      	bne.n	800360a <HAL_TIM_OC_Start_IT+0x3e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e015      	b.n	8003636 <HAL_TIM_OC_Start_IT+0x6a>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d109      	bne.n	8003624 <HAL_TIM_OC_Start_IT+0x58>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e008      	b.n	8003636 <HAL_TIM_OC_Start_IT+0x6a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0a4      	b.n	8003788 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d104      	bne.n	800364e <HAL_TIM_OC_Start_IT+0x82>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	e013      	b.n	8003676 <HAL_TIM_OC_Start_IT+0xaa>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d104      	bne.n	800365e <HAL_TIM_OC_Start_IT+0x92>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800365c:	e00b      	b.n	8003676 <HAL_TIM_OC_Start_IT+0xaa>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d104      	bne.n	800366e <HAL_TIM_OC_Start_IT+0xa2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800366c:	e003      	b.n	8003676 <HAL_TIM_OC_Start_IT+0xaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d841      	bhi.n	8003700 <HAL_TIM_OC_Start_IT+0x134>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <HAL_TIM_OC_Start_IT+0xb8>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	080036b9 	.word	0x080036b9
 8003688:	08003701 	.word	0x08003701
 800368c:	08003701 	.word	0x08003701
 8003690:	08003701 	.word	0x08003701
 8003694:	080036cb 	.word	0x080036cb
 8003698:	08003701 	.word	0x08003701
 800369c:	08003701 	.word	0x08003701
 80036a0:	08003701 	.word	0x08003701
 80036a4:	080036dd 	.word	0x080036dd
 80036a8:	08003701 	.word	0x08003701
 80036ac:	08003701 	.word	0x08003701
 80036b0:	08003701 	.word	0x08003701
 80036b4:	080036ef 	.word	0x080036ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0202 	orr.w	r2, r2, #2
 80036c6:	60da      	str	r2, [r3, #12]
      break;
 80036c8:	e01b      	b.n	8003702 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0204 	orr.w	r2, r2, #4
 80036d8:	60da      	str	r2, [r3, #12]
      break;
 80036da:	e012      	b.n	8003702 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0208 	orr.w	r2, r2, #8
 80036ea:	60da      	str	r2, [r3, #12]
      break;
 80036ec:	e009      	b.n	8003702 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0210 	orr.w	r2, r2, #16
 80036fc:	60da      	str	r2, [r3, #12]
      break;
 80036fe:	e000      	b.n	8003702 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8003700:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f850 	bl	80047b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1e      	ldr	r2, [pc, #120]	; (8003790 <HAL_TIM_OC_Start_IT+0x1c4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d107      	bne.n	800372a <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a18      	ldr	r2, [pc, #96]	; (8003790 <HAL_TIM_OC_Start_IT+0x1c4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_TIM_OC_Start_IT+0x186>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373c:	d009      	beq.n	8003752 <HAL_TIM_OC_Start_IT+0x186>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_TIM_OC_Start_IT+0x1c8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_TIM_OC_Start_IT+0x186>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a12      	ldr	r2, [pc, #72]	; (8003798 <HAL_TIM_OC_Start_IT+0x1cc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d111      	bne.n	8003776 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d010      	beq.n	8003786 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	e007      	b.n	8003786 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800

0800379c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e041      	b.n	8003832 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f839 	bl	800383a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 fd68 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start_IT+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e022      	b.n	80038b6 <HAL_TIM_PWM_Start_IT+0x6a>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start_IT+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e015      	b.n	80038b6 <HAL_TIM_PWM_Start_IT+0x6a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start_IT+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_PWM_Start_IT+0x6a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0a4      	b.n	8003a08 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start_IT+0x82>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	e013      	b.n	80038f6 <HAL_TIM_PWM_Start_IT+0xaa>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start_IT+0x92>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_PWM_Start_IT+0xaa>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start_IT+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_PWM_Start_IT+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d841      	bhi.n	8003980 <HAL_TIM_PWM_Start_IT+0x134>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_TIM_PWM_Start_IT+0xb8>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003939 	.word	0x08003939
 8003908:	08003981 	.word	0x08003981
 800390c:	08003981 	.word	0x08003981
 8003910:	08003981 	.word	0x08003981
 8003914:	0800394b 	.word	0x0800394b
 8003918:	08003981 	.word	0x08003981
 800391c:	08003981 	.word	0x08003981
 8003920:	08003981 	.word	0x08003981
 8003924:	0800395d 	.word	0x0800395d
 8003928:	08003981 	.word	0x08003981
 800392c:	08003981 	.word	0x08003981
 8003930:	08003981 	.word	0x08003981
 8003934:	0800396f 	.word	0x0800396f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0202 	orr.w	r2, r2, #2
 8003946:	60da      	str	r2, [r3, #12]
      break;
 8003948:	e01b      	b.n	8003982 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0204 	orr.w	r2, r2, #4
 8003958:	60da      	str	r2, [r3, #12]
      break;
 800395a:	e012      	b.n	8003982 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0208 	orr.w	r2, r2, #8
 800396a:	60da      	str	r2, [r3, #12]
      break;
 800396c:	e009      	b.n	8003982 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0210 	orr.w	r2, r2, #16
 800397c:	60da      	str	r2, [r3, #12]
      break;
 800397e:	e000      	b.n	8003982 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003980:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 ff10 	bl	80047b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d107      	bne.n	80039aa <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_TIM_PWM_Start_IT+0x186>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d009      	beq.n	80039d2 <HAL_TIM_PWM_Start_IT+0x186>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIM_PWM_Start_IT+0x186>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d111      	bne.n	80039f6 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d010      	beq.n	8003a06 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	e007      	b.n	8003a06 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800

08003a1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e093      	b.n	8003b58 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd ffdb 	bl	8001a00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f000 fc1d 	bl	80042b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003abc:	f023 030c 	bic.w	r3, r3, #12
 8003ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003acc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	011a      	lsls	r2, r3, #4
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	031b      	lsls	r3, r3, #12
 8003aec:	4313      	orrs	r3, r2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4313      	orrs	r3, r2
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d110      	bne.n	8003bb2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b96:	7b7b      	ldrb	r3, [r7, #13]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d001      	beq.n	8003ba0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e088      	b.n	8003cb2 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb0:	e031      	b.n	8003c16 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d110      	bne.n	8003bda <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d102      	bne.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bbe:	7b3b      	ldrb	r3, [r7, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d001      	beq.n	8003bc8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e074      	b.n	8003cb2 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd8:	e01d      	b.n	8003c16 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d108      	bne.n	8003bf2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003be0:	7bbb      	ldrb	r3, [r7, #14]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003be6:	7b7b      	ldrb	r3, [r7, #13]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bec:	7b3b      	ldrb	r3, [r7, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e05d      	b.n	8003cb2 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_TIM_Encoder_Start_IT+0xc2>
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d010      	beq.n	8003c42 <HAL_TIM_Encoder_Start_IT+0xe2>
 8003c20:	e01f      	b.n	8003c62 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2201      	movs	r2, #1
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fdc0 	bl	80047b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0202 	orr.w	r2, r2, #2
 8003c3e:	60da      	str	r2, [r3, #12]
      break;
 8003c40:	e02e      	b.n	8003ca0 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	2104      	movs	r1, #4
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fdb0 	bl	80047b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0204 	orr.w	r2, r2, #4
 8003c5e:	60da      	str	r2, [r3, #12]
      break;
 8003c60:	e01e      	b.n	8003ca0 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2201      	movs	r2, #1
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fda0 	bl	80047b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2201      	movs	r2, #1
 8003c76:	2104      	movs	r1, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fd99 	bl	80047b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0202 	orr.w	r2, r2, #2
 8003c8c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0204 	orr.w	r2, r2, #4
 8003c9c:	60da      	str	r2, [r3, #12]
      break;
 8003c9e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d122      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d11b      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0202 	mvn.w	r2, #2
 8003ce6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fabb 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 8003d02:	e005      	b.n	8003d10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 faae 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fabd 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d122      	bne.n	8003d6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d11b      	bne.n	8003d6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f06f 0204 	mvn.w	r2, #4
 8003d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fa91 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 8003d56:	e005      	b.n	8003d64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa84 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa93 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d122      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d11b      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f06f 0208 	mvn.w	r2, #8
 8003d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa67 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 8003daa:	e005      	b.n	8003db8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa5a 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa69 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d122      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d11b      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0210 	mvn.w	r2, #16
 8003de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2208      	movs	r2, #8
 8003de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa3d 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 8003dfe:	e005      	b.n	8003e0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa30 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa3f 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10e      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0201 	mvn.w	r2, #1
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fc fe45 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d10e      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fd7f 	bl	8004968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fa03 	bl	800429c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f06f 0220 	mvn.w	r2, #32
 8003eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fd4a 	bl	8004956 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e046      	b.n	8003f74 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d839      	bhi.n	8003f68 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <HAL_TIM_OC_ConfigChannel+0x30>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f69 	.word	0x08003f69
 8003f04:	08003f69 	.word	0x08003f69
 8003f08:	08003f69 	.word	0x08003f69
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f69 	.word	0x08003f69
 8003f14:	08003f69 	.word	0x08003f69
 8003f18:	08003f69 	.word	0x08003f69
 8003f1c:	08003f4d 	.word	0x08003f4d
 8003f20:	08003f69 	.word	0x08003f69
 8003f24:	08003f69 	.word	0x08003f69
 8003f28:	08003f69 	.word	0x08003f69
 8003f2c:	08003f5b 	.word	0x08003f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fa1c 	bl	8004374 <TIM_OC1_SetConfig>
      break;
 8003f3c:	e015      	b.n	8003f6a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa7b 	bl	8004440 <TIM_OC2_SetConfig>
      break;
 8003f4a:	e00e      	b.n	8003f6a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fade 	bl	8004514 <TIM_OC3_SetConfig>
      break;
 8003f58:	e007      	b.n	8003f6a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fb41 	bl	80045e8 <TIM_OC4_SetConfig>
      break;
 8003f66:	e000      	b.n	8003f6a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0ac      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	f200 809f 	bhi.w	80040e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	080040e5 	.word	0x080040e5
 8003fb4:	080040e5 	.word	0x080040e5
 8003fb8:	080040e5 	.word	0x080040e5
 8003fbc:	08004021 	.word	0x08004021
 8003fc0:	080040e5 	.word	0x080040e5
 8003fc4:	080040e5 	.word	0x080040e5
 8003fc8:	080040e5 	.word	0x080040e5
 8003fcc:	08004063 	.word	0x08004063
 8003fd0:	080040e5 	.word	0x080040e5
 8003fd4:	080040e5 	.word	0x080040e5
 8003fd8:	080040e5 	.word	0x080040e5
 8003fdc:	080040a3 	.word	0x080040a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f9c4 	bl	8004374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0208 	orr.w	r2, r2, #8
 8003ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0204 	bic.w	r2, r2, #4
 800400a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	619a      	str	r2, [r3, #24]
      break;
 800401e:	e062      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa0a 	bl	8004440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	021a      	lsls	r2, r3, #8
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	619a      	str	r2, [r3, #24]
      break;
 8004060:	e041      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fa53 	bl	8004514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0208 	orr.w	r2, r2, #8
 800407c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0204 	bic.w	r2, r2, #4
 800408c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69d9      	ldr	r1, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	61da      	str	r2, [r3, #28]
      break;
 80040a0:	e021      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa9d 	bl	80045e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	021a      	lsls	r2, r3, #8
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	61da      	str	r2, [r3, #28]
      break;
 80040e2:	e000      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIM_ConfigClockSource+0x18>
 800410c:	2302      	movs	r3, #2
 800410e:	e0a6      	b.n	800425e <HAL_TIM_ConfigClockSource+0x166>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800412e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004136:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d067      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x120>
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d80b      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x6c>
 800414c:	2b10      	cmp	r3, #16
 800414e:	d073      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x140>
 8004150:	2b10      	cmp	r3, #16
 8004152:	d802      	bhi.n	800415a <HAL_TIM_ConfigClockSource+0x62>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d06f      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004158:	e078      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800415a:	2b20      	cmp	r3, #32
 800415c:	d06c      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x140>
 800415e:	2b30      	cmp	r3, #48	; 0x30
 8004160:	d06a      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004162:	e073      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d00d      	beq.n	8004184 <HAL_TIM_ConfigClockSource+0x8c>
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d804      	bhi.n	8004176 <HAL_TIM_ConfigClockSource+0x7e>
 800416c:	2b50      	cmp	r3, #80	; 0x50
 800416e:	d033      	beq.n	80041d8 <HAL_TIM_ConfigClockSource+0xe0>
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d041      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004174:	e06a      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d066      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x152>
 800417c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004180:	d017      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004182:	e063      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6899      	ldr	r1, [r3, #8]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f000 faed 	bl	8004772 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	609a      	str	r2, [r3, #8]
      break;
 80041b0:	e04c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6899      	ldr	r1, [r3, #8]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f000 fad6 	bl	8004772 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d4:	609a      	str	r2, [r3, #8]
      break;
 80041d6:	e039      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	461a      	mov	r2, r3
 80041e6:	f000 fa4d 	bl	8004684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2150      	movs	r1, #80	; 0x50
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 faa4 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 80041f6:	e029      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	461a      	mov	r2, r3
 8004206:	f000 fa6b 	bl	80046e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2160      	movs	r1, #96	; 0x60
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa94 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004216:	e019      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	461a      	mov	r2, r3
 8004226:	f000 fa2d 	bl	8004684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2140      	movs	r1, #64	; 0x40
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fa84 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004236:	e009      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f000 fa7b 	bl	800473e <TIM_ITRx_SetConfig>
        break;
 8004248:	e000      	b.n	800424c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800424a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
	...

080042b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a29      	ldr	r2, [pc, #164]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_Base_SetConfig+0x30>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d007      	beq.n	80042e0 <TIM_Base_SetConfig+0x30>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_Base_SetConfig+0xbc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0x30>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a25      	ldr	r2, [pc, #148]	; (8004370 <TIM_Base_SetConfig+0xc0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d108      	bne.n	80042f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_Base_SetConfig+0x62>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d007      	beq.n	8004312 <TIM_Base_SetConfig+0x62>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <TIM_Base_SetConfig+0xbc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_Base_SetConfig+0x62>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <TIM_Base_SetConfig+0xc0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d103      	bne.n	8004358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	615a      	str	r2, [r3, #20]
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800

08004374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f023 0302 	bic.w	r3, r3, #2
 80043bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <TIM_OC1_SetConfig+0xc8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0308 	bic.w	r3, r3, #8
 80043d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <TIM_OC1_SetConfig+0xc8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d111      	bne.n	8004416 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00

08004440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0210 	bic.w	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0320 	bic.w	r3, r3, #32
 800448a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <TIM_OC2_SetConfig+0xd0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10d      	bne.n	80044bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a14      	ldr	r2, [pc, #80]	; (8004510 <TIM_OC2_SetConfig+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d113      	bne.n	80044ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00

08004514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800455c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <TIM_OC3_SetConfig+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10d      	bne.n	800458e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <TIM_OC3_SetConfig+0xd0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d113      	bne.n	80045be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800459c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00

080045e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	031b      	lsls	r3, r3, #12
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a0f      	ldr	r2, [pc, #60]	; (8004680 <TIM_OC4_SetConfig+0x98>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d109      	bne.n	800465c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00

08004684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 030a 	bic.w	r3, r3, #10
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f023 0210 	bic.w	r2, r3, #16
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800470a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	031b      	lsls	r3, r3, #12
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800471c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	621a      	str	r2, [r3, #32]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004772:	b480      	push	{r7}
 8004774:	b087      	sub	sp, #28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	021a      	lsls	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	431a      	orrs	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4313      	orrs	r3, r2
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	609a      	str	r2, [r3, #8]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2201      	movs	r2, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800480c:	2302      	movs	r3, #2
 800480e:	e046      	b.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485c:	d009      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10c      	bne.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4313      	orrs	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800

080048b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e03d      	b.n	800494c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
	...

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000038 	.word	0x20000038

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	2500      	movs	r5, #0
 800498c:	4e0c      	ldr	r6, [pc, #48]	; (80049c0 <__libc_init_array+0x38>)
 800498e:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 8004990:	1ba4      	subs	r4, r4, r6
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	42a5      	cmp	r5, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	f002 f962 	bl	8006c60 <_init>
 800499c:	2500      	movs	r5, #0
 800499e:	4e0a      	ldr	r6, [pc, #40]	; (80049c8 <__libc_init_array+0x40>)
 80049a0:	4c0a      	ldr	r4, [pc, #40]	; (80049cc <__libc_init_array+0x44>)
 80049a2:	1ba4      	subs	r4, r4, r6
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	42a5      	cmp	r5, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049b0:	4798      	blx	r3
 80049b2:	3501      	adds	r5, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ba:	4798      	blx	r3
 80049bc:	3501      	adds	r5, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08007080 	.word	0x08007080
 80049c4:	08007080 	.word	0x08007080
 80049c8:	08007080 	.word	0x08007080
 80049cc:	08007084 	.word	0x08007084

080049d0 <memset>:
 80049d0:	4603      	mov	r3, r0
 80049d2:	4402      	add	r2, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d100      	bne.n	80049da <memset+0xa>
 80049d8:	4770      	bx	lr
 80049da:	f803 1b01 	strb.w	r1, [r3], #1
 80049de:	e7f9      	b.n	80049d4 <memset+0x4>

080049e0 <__cvt>:
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e6:	461e      	mov	r6, r3
 80049e8:	bfbb      	ittet	lt
 80049ea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049ee:	461e      	movlt	r6, r3
 80049f0:	2300      	movge	r3, #0
 80049f2:	232d      	movlt	r3, #45	; 0x2d
 80049f4:	b088      	sub	sp, #32
 80049f6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80049f8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80049fc:	f027 0720 	bic.w	r7, r7, #32
 8004a00:	2f46      	cmp	r7, #70	; 0x46
 8004a02:	4614      	mov	r4, r2
 8004a04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a06:	700b      	strb	r3, [r1, #0]
 8004a08:	d004      	beq.n	8004a14 <__cvt+0x34>
 8004a0a:	2f45      	cmp	r7, #69	; 0x45
 8004a0c:	d100      	bne.n	8004a10 <__cvt+0x30>
 8004a0e:	3501      	adds	r5, #1
 8004a10:	2302      	movs	r3, #2
 8004a12:	e000      	b.n	8004a16 <__cvt+0x36>
 8004a14:	2303      	movs	r3, #3
 8004a16:	aa07      	add	r2, sp, #28
 8004a18:	9204      	str	r2, [sp, #16]
 8004a1a:	aa06      	add	r2, sp, #24
 8004a1c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a20:	e9cd 3500 	strd	r3, r5, [sp]
 8004a24:	4622      	mov	r2, r4
 8004a26:	4633      	mov	r3, r6
 8004a28:	f000 fcca 	bl	80053c0 <_dtoa_r>
 8004a2c:	2f47      	cmp	r7, #71	; 0x47
 8004a2e:	4680      	mov	r8, r0
 8004a30:	d102      	bne.n	8004a38 <__cvt+0x58>
 8004a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a34:	07db      	lsls	r3, r3, #31
 8004a36:	d526      	bpl.n	8004a86 <__cvt+0xa6>
 8004a38:	2f46      	cmp	r7, #70	; 0x46
 8004a3a:	eb08 0905 	add.w	r9, r8, r5
 8004a3e:	d111      	bne.n	8004a64 <__cvt+0x84>
 8004a40:	f898 3000 	ldrb.w	r3, [r8]
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d10a      	bne.n	8004a5e <__cvt+0x7e>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	4631      	mov	r1, r6
 8004a50:	f7fb ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004a54:	b918      	cbnz	r0, 8004a5e <__cvt+0x7e>
 8004a56:	f1c5 0501 	rsb	r5, r5, #1
 8004a5a:	f8ca 5000 	str.w	r5, [sl]
 8004a5e:	f8da 3000 	ldr.w	r3, [sl]
 8004a62:	4499      	add	r9, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	2300      	movs	r3, #0
 8004a68:	4620      	mov	r0, r4
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	f7fb ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004a70:	b938      	cbnz	r0, 8004a82 <__cvt+0xa2>
 8004a72:	2230      	movs	r2, #48	; 0x30
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	454b      	cmp	r3, r9
 8004a78:	d205      	bcs.n	8004a86 <__cvt+0xa6>
 8004a7a:	1c59      	adds	r1, r3, #1
 8004a7c:	9107      	str	r1, [sp, #28]
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e7f8      	b.n	8004a74 <__cvt+0x94>
 8004a82:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a86:	4640      	mov	r0, r8
 8004a88:	9b07      	ldr	r3, [sp, #28]
 8004a8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a8c:	eba3 0308 	sub.w	r3, r3, r8
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	b008      	add	sp, #32
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a98 <__exponent>:
 8004a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a9a:	2900      	cmp	r1, #0
 8004a9c:	bfb4      	ite	lt
 8004a9e:	232d      	movlt	r3, #45	; 0x2d
 8004aa0:	232b      	movge	r3, #43	; 0x2b
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	bfb8      	it	lt
 8004aa6:	4249      	neglt	r1, r1
 8004aa8:	2909      	cmp	r1, #9
 8004aaa:	f804 2b02 	strb.w	r2, [r4], #2
 8004aae:	7043      	strb	r3, [r0, #1]
 8004ab0:	dd21      	ble.n	8004af6 <__exponent+0x5e>
 8004ab2:	f10d 0307 	add.w	r3, sp, #7
 8004ab6:	461f      	mov	r7, r3
 8004ab8:	260a      	movs	r6, #10
 8004aba:	fb91 f5f6 	sdiv	r5, r1, r6
 8004abe:	fb06 1115 	mls	r1, r6, r5, r1
 8004ac2:	2d09      	cmp	r5, #9
 8004ac4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004ac8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004acc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	dc09      	bgt.n	8004ae8 <__exponent+0x50>
 8004ad4:	3130      	adds	r1, #48	; 0x30
 8004ad6:	3b02      	subs	r3, #2
 8004ad8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004adc:	42bb      	cmp	r3, r7
 8004ade:	4622      	mov	r2, r4
 8004ae0:	d304      	bcc.n	8004aec <__exponent+0x54>
 8004ae2:	1a10      	subs	r0, r2, r0
 8004ae4:	b003      	add	sp, #12
 8004ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae8:	4613      	mov	r3, r2
 8004aea:	e7e6      	b.n	8004aba <__exponent+0x22>
 8004aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004af0:	f804 2b01 	strb.w	r2, [r4], #1
 8004af4:	e7f2      	b.n	8004adc <__exponent+0x44>
 8004af6:	2330      	movs	r3, #48	; 0x30
 8004af8:	4419      	add	r1, r3
 8004afa:	7083      	strb	r3, [r0, #2]
 8004afc:	1d02      	adds	r2, r0, #4
 8004afe:	70c1      	strb	r1, [r0, #3]
 8004b00:	e7ef      	b.n	8004ae2 <__exponent+0x4a>
	...

08004b04 <_printf_float>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	b091      	sub	sp, #68	; 0x44
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b0e:	4693      	mov	fp, r2
 8004b10:	461e      	mov	r6, r3
 8004b12:	4605      	mov	r5, r0
 8004b14:	f001 fb82 	bl	800621c <_localeconv_r>
 8004b18:	6803      	ldr	r3, [r0, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b1e:	f7fb fb17 	bl	8000150 <strlen>
 8004b22:	2300      	movs	r3, #0
 8004b24:	930e      	str	r3, [sp, #56]	; 0x38
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	900a      	str	r0, [sp, #40]	; 0x28
 8004b2a:	3307      	adds	r3, #7
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	f103 0208 	add.w	r2, r3, #8
 8004b34:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004b38:	f8d4 a000 	ldr.w	sl, [r4]
 8004b3c:	603a      	str	r2, [r7, #0]
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b46:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b54:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <_printf_float+0x2ec>)
 8004b56:	4638      	mov	r0, r7
 8004b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b5a:	f7fb ff57 	bl	8000a0c <__aeabi_dcmpun>
 8004b5e:	bb68      	cbnz	r0, 8004bbc <_printf_float+0xb8>
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b64:	4ba2      	ldr	r3, [pc, #648]	; (8004df0 <_printf_float+0x2ec>)
 8004b66:	4638      	mov	r0, r7
 8004b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b6a:	f7fb ff31 	bl	80009d0 <__aeabi_dcmple>
 8004b6e:	bb28      	cbnz	r0, 8004bbc <_printf_float+0xb8>
 8004b70:	2200      	movs	r2, #0
 8004b72:	2300      	movs	r3, #0
 8004b74:	4638      	mov	r0, r7
 8004b76:	4649      	mov	r1, r9
 8004b78:	f7fb ff20 	bl	80009bc <__aeabi_dcmplt>
 8004b7c:	b110      	cbz	r0, 8004b84 <_printf_float+0x80>
 8004b7e:	232d      	movs	r3, #45	; 0x2d
 8004b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b84:	4f9b      	ldr	r7, [pc, #620]	; (8004df4 <_printf_float+0x2f0>)
 8004b86:	4b9c      	ldr	r3, [pc, #624]	; (8004df8 <_printf_float+0x2f4>)
 8004b88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b8c:	bf98      	it	ls
 8004b8e:	461f      	movls	r7, r3
 8004b90:	2303      	movs	r3, #3
 8004b92:	f04f 0900 	mov.w	r9, #0
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	f02a 0304 	bic.w	r3, sl, #4
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	9600      	str	r6, [sp, #0]
 8004ba0:	465b      	mov	r3, fp
 8004ba2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 f9e2 	bl	8004f70 <_printf_common>
 8004bac:	3001      	adds	r0, #1
 8004bae:	f040 8090 	bne.w	8004cd2 <_printf_float+0x1ce>
 8004bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bb6:	b011      	add	sp, #68	; 0x44
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	f7fb ff22 	bl	8000a0c <__aeabi_dcmpun>
 8004bc8:	b110      	cbz	r0, 8004bd0 <_printf_float+0xcc>
 8004bca:	4f8c      	ldr	r7, [pc, #560]	; (8004dfc <_printf_float+0x2f8>)
 8004bcc:	4b8c      	ldr	r3, [pc, #560]	; (8004e00 <_printf_float+0x2fc>)
 8004bce:	e7db      	b.n	8004b88 <_printf_float+0x84>
 8004bd0:	6863      	ldr	r3, [r4, #4]
 8004bd2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	a80d      	add	r0, sp, #52	; 0x34
 8004bda:	a90e      	add	r1, sp, #56	; 0x38
 8004bdc:	d140      	bne.n	8004c60 <_printf_float+0x15c>
 8004bde:	2306      	movs	r3, #6
 8004be0:	6063      	str	r3, [r4, #4]
 8004be2:	f04f 0c00 	mov.w	ip, #0
 8004be6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004bea:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	6022      	str	r2, [r4, #0]
 8004bf2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	463a      	mov	r2, r7
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c00:	4628      	mov	r0, r5
 8004c02:	f7ff feed 	bl	80049e0 <__cvt>
 8004c06:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004c0a:	2b47      	cmp	r3, #71	; 0x47
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	d109      	bne.n	8004c24 <_printf_float+0x120>
 8004c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c12:	1cd8      	adds	r0, r3, #3
 8004c14:	db02      	blt.n	8004c1c <_printf_float+0x118>
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	dd47      	ble.n	8004cac <_printf_float+0x1a8>
 8004c1c:	f1a8 0802 	sub.w	r8, r8, #2
 8004c20:	fa5f f888 	uxtb.w	r8, r8
 8004c24:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c2a:	d824      	bhi.n	8004c76 <_printf_float+0x172>
 8004c2c:	3901      	subs	r1, #1
 8004c2e:	4642      	mov	r2, r8
 8004c30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c34:	910d      	str	r1, [sp, #52]	; 0x34
 8004c36:	f7ff ff2f 	bl	8004a98 <__exponent>
 8004c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c3c:	4681      	mov	r9, r0
 8004c3e:	1813      	adds	r3, r2, r0
 8004c40:	2a01      	cmp	r2, #1
 8004c42:	6123      	str	r3, [r4, #16]
 8004c44:	dc02      	bgt.n	8004c4c <_printf_float+0x148>
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	07d1      	lsls	r1, r2, #31
 8004c4a:	d501      	bpl.n	8004c50 <_printf_float+0x14c>
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0a2      	beq.n	8004b9e <_printf_float+0x9a>
 8004c58:	232d      	movs	r3, #45	; 0x2d
 8004c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5e:	e79e      	b.n	8004b9e <_printf_float+0x9a>
 8004c60:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004c64:	f000 816e 	beq.w	8004f44 <_printf_float+0x440>
 8004c68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c6c:	d1b9      	bne.n	8004be2 <_printf_float+0xde>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1b7      	bne.n	8004be2 <_printf_float+0xde>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e7b4      	b.n	8004be0 <_printf_float+0xdc>
 8004c76:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c7a:	d119      	bne.n	8004cb0 <_printf_float+0x1ac>
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	dd0c      	ble.n	8004c9c <_printf_float+0x198>
 8004c82:	6121      	str	r1, [r4, #16]
 8004c84:	b913      	cbnz	r3, 8004c8c <_printf_float+0x188>
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	07d2      	lsls	r2, r2, #31
 8004c8a:	d502      	bpl.n	8004c92 <_printf_float+0x18e>
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	440b      	add	r3, r1
 8004c90:	6123      	str	r3, [r4, #16]
 8004c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c94:	f04f 0900 	mov.w	r9, #0
 8004c98:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c9a:	e7d9      	b.n	8004c50 <_printf_float+0x14c>
 8004c9c:	b913      	cbnz	r3, 8004ca4 <_printf_float+0x1a0>
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	07d0      	lsls	r0, r2, #31
 8004ca2:	d501      	bpl.n	8004ca8 <_printf_float+0x1a4>
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	e7f3      	b.n	8004c90 <_printf_float+0x18c>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e7f1      	b.n	8004c90 <_printf_float+0x18c>
 8004cac:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004cb0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	db05      	blt.n	8004cc4 <_printf_float+0x1c0>
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	07d1      	lsls	r1, r2, #31
 8004cbe:	d5e8      	bpl.n	8004c92 <_printf_float+0x18e>
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	e7e5      	b.n	8004c90 <_printf_float+0x18c>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bfcc      	ite	gt
 8004cc8:	2301      	movgt	r3, #1
 8004cca:	f1c3 0302 	rsble	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	e7de      	b.n	8004c90 <_printf_float+0x18c>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	055a      	lsls	r2, r3, #21
 8004cd6:	d407      	bmi.n	8004ce8 <_printf_float+0x1e4>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	463a      	mov	r2, r7
 8004cdc:	4659      	mov	r1, fp
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b0      	blx	r6
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d129      	bne.n	8004d3a <_printf_float+0x236>
 8004ce6:	e764      	b.n	8004bb2 <_printf_float+0xae>
 8004ce8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004cec:	f240 80d7 	bls.w	8004e9e <_printf_float+0x39a>
 8004cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f7fb fe56 	bl	80009a8 <__aeabi_dcmpeq>
 8004cfc:	b388      	cbz	r0, 8004d62 <_printf_float+0x25e>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4a40      	ldr	r2, [pc, #256]	; (8004e04 <_printf_float+0x300>)
 8004d02:	4659      	mov	r1, fp
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b0      	blx	r6
 8004d08:	3001      	adds	r0, #1
 8004d0a:	f43f af52 	beq.w	8004bb2 <_printf_float+0xae>
 8004d0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d12:	429a      	cmp	r2, r3
 8004d14:	db02      	blt.n	8004d1c <_printf_float+0x218>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	07d8      	lsls	r0, r3, #31
 8004d1a:	d50e      	bpl.n	8004d3a <_printf_float+0x236>
 8004d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d20:	4659      	mov	r1, fp
 8004d22:	4628      	mov	r0, r5
 8004d24:	47b0      	blx	r6
 8004d26:	3001      	adds	r0, #1
 8004d28:	f43f af43 	beq.w	8004bb2 <_printf_float+0xae>
 8004d2c:	2700      	movs	r7, #0
 8004d2e:	f104 081a 	add.w	r8, r4, #26
 8004d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d34:	3b01      	subs	r3, #1
 8004d36:	42bb      	cmp	r3, r7
 8004d38:	dc09      	bgt.n	8004d4e <_printf_float+0x24a>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	079f      	lsls	r7, r3, #30
 8004d3e:	f100 80fd 	bmi.w	8004f3c <_printf_float+0x438>
 8004d42:	68e0      	ldr	r0, [r4, #12]
 8004d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d46:	4298      	cmp	r0, r3
 8004d48:	bfb8      	it	lt
 8004d4a:	4618      	movlt	r0, r3
 8004d4c:	e733      	b.n	8004bb6 <_printf_float+0xb2>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4642      	mov	r2, r8
 8004d52:	4659      	mov	r1, fp
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f43f af2a 	beq.w	8004bb2 <_printf_float+0xae>
 8004d5e:	3701      	adds	r7, #1
 8004d60:	e7e7      	b.n	8004d32 <_printf_float+0x22e>
 8004d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dc2b      	bgt.n	8004dc0 <_printf_float+0x2bc>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4a26      	ldr	r2, [pc, #152]	; (8004e04 <_printf_float+0x300>)
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b0      	blx	r6
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f af1d 	beq.w	8004bb2 <_printf_float+0xae>
 8004d78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d7a:	b923      	cbnz	r3, 8004d86 <_printf_float+0x282>
 8004d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d7e:	b913      	cbnz	r3, 8004d86 <_printf_float+0x282>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	07d9      	lsls	r1, r3, #31
 8004d84:	d5d9      	bpl.n	8004d3a <_printf_float+0x236>
 8004d86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d8a:	4659      	mov	r1, fp
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b0      	blx	r6
 8004d90:	3001      	adds	r0, #1
 8004d92:	f43f af0e 	beq.w	8004bb2 <_printf_float+0xae>
 8004d96:	f04f 0800 	mov.w	r8, #0
 8004d9a:	f104 091a 	add.w	r9, r4, #26
 8004d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004da0:	425b      	negs	r3, r3
 8004da2:	4543      	cmp	r3, r8
 8004da4:	dc01      	bgt.n	8004daa <_printf_float+0x2a6>
 8004da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da8:	e797      	b.n	8004cda <_printf_float+0x1d6>
 8004daa:	2301      	movs	r3, #1
 8004dac:	464a      	mov	r2, r9
 8004dae:	4659      	mov	r1, fp
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b0      	blx	r6
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f aefc 	beq.w	8004bb2 <_printf_float+0xae>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	e7ee      	b.n	8004d9e <_printf_float+0x29a>
 8004dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	bfa8      	it	ge
 8004dc8:	461a      	movge	r2, r3
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	4690      	mov	r8, r2
 8004dce:	dd07      	ble.n	8004de0 <_printf_float+0x2dc>
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	463a      	mov	r2, r7
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b0      	blx	r6
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f aee9 	beq.w	8004bb2 <_printf_float+0xae>
 8004de0:	f104 031a 	add.w	r3, r4, #26
 8004de4:	f04f 0a00 	mov.w	sl, #0
 8004de8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004dec:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dee:	e015      	b.n	8004e1c <_printf_float+0x318>
 8004df0:	7fefffff 	.word	0x7fefffff
 8004df4:	08006df4 	.word	0x08006df4
 8004df8:	08006df0 	.word	0x08006df0
 8004dfc:	08006dfc 	.word	0x08006dfc
 8004e00:	08006df8 	.word	0x08006df8
 8004e04:	08006e00 	.word	0x08006e00
 8004e08:	2301      	movs	r3, #1
 8004e0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b0      	blx	r6
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f aecd 	beq.w	8004bb2 <_printf_float+0xae>
 8004e18:	f10a 0a01 	add.w	sl, sl, #1
 8004e1c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e20:	eba9 0308 	sub.w	r3, r9, r8
 8004e24:	4553      	cmp	r3, sl
 8004e26:	dcef      	bgt.n	8004e08 <_printf_float+0x304>
 8004e28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	444f      	add	r7, r9
 8004e30:	db14      	blt.n	8004e5c <_printf_float+0x358>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07da      	lsls	r2, r3, #31
 8004e36:	d411      	bmi.n	8004e5c <_printf_float+0x358>
 8004e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e3c:	eba3 0209 	sub.w	r2, r3, r9
 8004e40:	eba3 0901 	sub.w	r9, r3, r1
 8004e44:	4591      	cmp	r9, r2
 8004e46:	bfa8      	it	ge
 8004e48:	4691      	movge	r9, r2
 8004e4a:	f1b9 0f00 	cmp.w	r9, #0
 8004e4e:	dc0d      	bgt.n	8004e6c <_printf_float+0x368>
 8004e50:	2700      	movs	r7, #0
 8004e52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e56:	f104 081a 	add.w	r8, r4, #26
 8004e5a:	e018      	b.n	8004e8e <_printf_float+0x38a>
 8004e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e60:	4659      	mov	r1, fp
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b0      	blx	r6
 8004e66:	3001      	adds	r0, #1
 8004e68:	d1e6      	bne.n	8004e38 <_printf_float+0x334>
 8004e6a:	e6a2      	b.n	8004bb2 <_printf_float+0xae>
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	463a      	mov	r2, r7
 8004e70:	4659      	mov	r1, fp
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b0      	blx	r6
 8004e76:	3001      	adds	r0, #1
 8004e78:	d1ea      	bne.n	8004e50 <_printf_float+0x34c>
 8004e7a:	e69a      	b.n	8004bb2 <_printf_float+0xae>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4642      	mov	r2, r8
 8004e80:	4659      	mov	r1, fp
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b0      	blx	r6
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f ae93 	beq.w	8004bb2 <_printf_float+0xae>
 8004e8c:	3701      	adds	r7, #1
 8004e8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	eba3 0309 	sub.w	r3, r3, r9
 8004e98:	42bb      	cmp	r3, r7
 8004e9a:	dcef      	bgt.n	8004e7c <_printf_float+0x378>
 8004e9c:	e74d      	b.n	8004d3a <_printf_float+0x236>
 8004e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ea0:	2a01      	cmp	r2, #1
 8004ea2:	dc01      	bgt.n	8004ea8 <_printf_float+0x3a4>
 8004ea4:	07db      	lsls	r3, r3, #31
 8004ea6:	d538      	bpl.n	8004f1a <_printf_float+0x416>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	463a      	mov	r2, r7
 8004eac:	4659      	mov	r1, fp
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b0      	blx	r6
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	f43f ae7d 	beq.w	8004bb2 <_printf_float+0xae>
 8004eb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b0      	blx	r6
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f107 0701 	add.w	r7, r7, #1
 8004ec8:	f43f ae73 	beq.w	8004bb2 <_printf_float+0xae>
 8004ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f7fb fd65 	bl	80009a8 <__aeabi_dcmpeq>
 8004ede:	b9c0      	cbnz	r0, 8004f12 <_printf_float+0x40e>
 8004ee0:	4643      	mov	r3, r8
 8004ee2:	463a      	mov	r2, r7
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b0      	blx	r6
 8004eea:	3001      	adds	r0, #1
 8004eec:	d10d      	bne.n	8004f0a <_printf_float+0x406>
 8004eee:	e660      	b.n	8004bb2 <_printf_float+0xae>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b0      	blx	r6
 8004efa:	3001      	adds	r0, #1
 8004efc:	f43f ae59 	beq.w	8004bb2 <_printf_float+0xae>
 8004f00:	3701      	adds	r7, #1
 8004f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f04:	3b01      	subs	r3, #1
 8004f06:	42bb      	cmp	r3, r7
 8004f08:	dcf2      	bgt.n	8004ef0 <_printf_float+0x3ec>
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f10:	e6e4      	b.n	8004cdc <_printf_float+0x1d8>
 8004f12:	2700      	movs	r7, #0
 8004f14:	f104 081a 	add.w	r8, r4, #26
 8004f18:	e7f3      	b.n	8004f02 <_printf_float+0x3fe>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7e1      	b.n	8004ee2 <_printf_float+0x3de>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4642      	mov	r2, r8
 8004f22:	4659      	mov	r1, fp
 8004f24:	4628      	mov	r0, r5
 8004f26:	47b0      	blx	r6
 8004f28:	3001      	adds	r0, #1
 8004f2a:	f43f ae42 	beq.w	8004bb2 <_printf_float+0xae>
 8004f2e:	3701      	adds	r7, #1
 8004f30:	68e3      	ldr	r3, [r4, #12]
 8004f32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	42bb      	cmp	r3, r7
 8004f38:	dcf1      	bgt.n	8004f1e <_printf_float+0x41a>
 8004f3a:	e702      	b.n	8004d42 <_printf_float+0x23e>
 8004f3c:	2700      	movs	r7, #0
 8004f3e:	f104 0819 	add.w	r8, r4, #25
 8004f42:	e7f5      	b.n	8004f30 <_printf_float+0x42c>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f43f ae94 	beq.w	8004c72 <_printf_float+0x16e>
 8004f4a:	f04f 0c00 	mov.w	ip, #0
 8004f4e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f52:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004f56:	6022      	str	r2, [r4, #0]
 8004f58:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f5c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	463a      	mov	r2, r7
 8004f64:	464b      	mov	r3, r9
 8004f66:	4628      	mov	r0, r5
 8004f68:	f7ff fd3a 	bl	80049e0 <__cvt>
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	e64f      	b.n	8004c10 <_printf_float+0x10c>

08004f70 <_printf_common>:
 8004f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	4691      	mov	r9, r2
 8004f76:	461f      	mov	r7, r3
 8004f78:	688a      	ldr	r2, [r1, #8]
 8004f7a:	690b      	ldr	r3, [r1, #16]
 8004f7c:	4606      	mov	r6, r0
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	bfb8      	it	lt
 8004f82:	4613      	movlt	r3, r2
 8004f84:	f8c9 3000 	str.w	r3, [r9]
 8004f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f92:	b112      	cbz	r2, 8004f9a <_printf_common+0x2a>
 8004f94:	3301      	adds	r3, #1
 8004f96:	f8c9 3000 	str.w	r3, [r9]
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	0699      	lsls	r1, r3, #26
 8004f9e:	bf42      	ittt	mi
 8004fa0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fa4:	3302      	addmi	r3, #2
 8004fa6:	f8c9 3000 	strmi.w	r3, [r9]
 8004faa:	6825      	ldr	r5, [r4, #0]
 8004fac:	f015 0506 	ands.w	r5, r5, #6
 8004fb0:	d107      	bne.n	8004fc2 <_printf_common+0x52>
 8004fb2:	f104 0a19 	add.w	sl, r4, #25
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	dc29      	bgt.n	8005016 <_printf_common+0xa6>
 8004fc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	3300      	adds	r3, #0
 8004fca:	bf18      	it	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	0692      	lsls	r2, r2, #26
 8004fd0:	d42e      	bmi.n	8005030 <_printf_common+0xc0>
 8004fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	4630      	mov	r0, r6
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d021      	beq.n	8005024 <_printf_common+0xb4>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	68e5      	ldr	r5, [r4, #12]
 8004fe4:	f003 0306 	and.w	r3, r3, #6
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	bf18      	it	ne
 8004fec:	2500      	movne	r5, #0
 8004fee:	f8d9 2000 	ldr.w	r2, [r9]
 8004ff2:	f04f 0900 	mov.w	r9, #0
 8004ff6:	bf08      	it	eq
 8004ff8:	1aad      	subeq	r5, r5, r2
 8004ffa:	68a3      	ldr	r3, [r4, #8]
 8004ffc:	6922      	ldr	r2, [r4, #16]
 8004ffe:	bf08      	it	eq
 8005000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005004:	4293      	cmp	r3, r2
 8005006:	bfc4      	itt	gt
 8005008:	1a9b      	subgt	r3, r3, r2
 800500a:	18ed      	addgt	r5, r5, r3
 800500c:	341a      	adds	r4, #26
 800500e:	454d      	cmp	r5, r9
 8005010:	d11a      	bne.n	8005048 <_printf_common+0xd8>
 8005012:	2000      	movs	r0, #0
 8005014:	e008      	b.n	8005028 <_printf_common+0xb8>
 8005016:	2301      	movs	r3, #1
 8005018:	4652      	mov	r2, sl
 800501a:	4639      	mov	r1, r7
 800501c:	4630      	mov	r0, r6
 800501e:	47c0      	blx	r8
 8005020:	3001      	adds	r0, #1
 8005022:	d103      	bne.n	800502c <_printf_common+0xbc>
 8005024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	3501      	adds	r5, #1
 800502e:	e7c2      	b.n	8004fb6 <_printf_common+0x46>
 8005030:	2030      	movs	r0, #48	; 0x30
 8005032:	18e1      	adds	r1, r4, r3
 8005034:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800503e:	4422      	add	r2, r4
 8005040:	3302      	adds	r3, #2
 8005042:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005046:	e7c4      	b.n	8004fd2 <_printf_common+0x62>
 8005048:	2301      	movs	r3, #1
 800504a:	4622      	mov	r2, r4
 800504c:	4639      	mov	r1, r7
 800504e:	4630      	mov	r0, r6
 8005050:	47c0      	blx	r8
 8005052:	3001      	adds	r0, #1
 8005054:	d0e6      	beq.n	8005024 <_printf_common+0xb4>
 8005056:	f109 0901 	add.w	r9, r9, #1
 800505a:	e7d8      	b.n	800500e <_printf_common+0x9e>

0800505c <_puts_r>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	460e      	mov	r6, r1
 8005060:	4605      	mov	r5, r0
 8005062:	b118      	cbz	r0, 800506c <_puts_r+0x10>
 8005064:	6983      	ldr	r3, [r0, #24]
 8005066:	b90b      	cbnz	r3, 800506c <_puts_r+0x10>
 8005068:	f001 f84e 	bl	8006108 <__sinit>
 800506c:	69ab      	ldr	r3, [r5, #24]
 800506e:	68ac      	ldr	r4, [r5, #8]
 8005070:	b913      	cbnz	r3, 8005078 <_puts_r+0x1c>
 8005072:	4628      	mov	r0, r5
 8005074:	f001 f848 	bl	8006108 <__sinit>
 8005078:	4b23      	ldr	r3, [pc, #140]	; (8005108 <_puts_r+0xac>)
 800507a:	429c      	cmp	r4, r3
 800507c:	d117      	bne.n	80050ae <_puts_r+0x52>
 800507e:	686c      	ldr	r4, [r5, #4]
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	071b      	lsls	r3, r3, #28
 8005084:	d51d      	bpl.n	80050c2 <_puts_r+0x66>
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	b1db      	cbz	r3, 80050c2 <_puts_r+0x66>
 800508a:	3e01      	subs	r6, #1
 800508c:	68a3      	ldr	r3, [r4, #8]
 800508e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005092:	3b01      	subs	r3, #1
 8005094:	60a3      	str	r3, [r4, #8]
 8005096:	b9e9      	cbnz	r1, 80050d4 <_puts_r+0x78>
 8005098:	2b00      	cmp	r3, #0
 800509a:	da2e      	bge.n	80050fa <_puts_r+0x9e>
 800509c:	4622      	mov	r2, r4
 800509e:	210a      	movs	r1, #10
 80050a0:	4628      	mov	r0, r5
 80050a2:	f000 f83f 	bl	8005124 <__swbuf_r>
 80050a6:	3001      	adds	r0, #1
 80050a8:	d011      	beq.n	80050ce <_puts_r+0x72>
 80050aa:	200a      	movs	r0, #10
 80050ac:	e011      	b.n	80050d2 <_puts_r+0x76>
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <_puts_r+0xb0>)
 80050b0:	429c      	cmp	r4, r3
 80050b2:	d101      	bne.n	80050b8 <_puts_r+0x5c>
 80050b4:	68ac      	ldr	r4, [r5, #8]
 80050b6:	e7e3      	b.n	8005080 <_puts_r+0x24>
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <_puts_r+0xb4>)
 80050ba:	429c      	cmp	r4, r3
 80050bc:	bf08      	it	eq
 80050be:	68ec      	ldreq	r4, [r5, #12]
 80050c0:	e7de      	b.n	8005080 <_puts_r+0x24>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 f87f 	bl	80051c8 <__swsetup_r>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0dd      	beq.n	800508a <_puts_r+0x2e>
 80050ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	da04      	bge.n	80050e2 <_puts_r+0x86>
 80050d8:	69a2      	ldr	r2, [r4, #24]
 80050da:	429a      	cmp	r2, r3
 80050dc:	dc06      	bgt.n	80050ec <_puts_r+0x90>
 80050de:	290a      	cmp	r1, #10
 80050e0:	d004      	beq.n	80050ec <_puts_r+0x90>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	7019      	strb	r1, [r3, #0]
 80050ea:	e7cf      	b.n	800508c <_puts_r+0x30>
 80050ec:	4622      	mov	r2, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f818 	bl	8005124 <__swbuf_r>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d1c9      	bne.n	800508c <_puts_r+0x30>
 80050f8:	e7e9      	b.n	80050ce <_puts_r+0x72>
 80050fa:	200a      	movs	r0, #10
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	6022      	str	r2, [r4, #0]
 8005102:	7018      	strb	r0, [r3, #0]
 8005104:	e7e5      	b.n	80050d2 <_puts_r+0x76>
 8005106:	bf00      	nop
 8005108:	08006e30 	.word	0x08006e30
 800510c:	08006e50 	.word	0x08006e50
 8005110:	08006e10 	.word	0x08006e10

08005114 <puts>:
 8005114:	4b02      	ldr	r3, [pc, #8]	; (8005120 <puts+0xc>)
 8005116:	4601      	mov	r1, r0
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f7ff bf9f 	b.w	800505c <_puts_r>
 800511e:	bf00      	nop
 8005120:	20000038 	.word	0x20000038

08005124 <__swbuf_r>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	460e      	mov	r6, r1
 8005128:	4614      	mov	r4, r2
 800512a:	4605      	mov	r5, r0
 800512c:	b118      	cbz	r0, 8005136 <__swbuf_r+0x12>
 800512e:	6983      	ldr	r3, [r0, #24]
 8005130:	b90b      	cbnz	r3, 8005136 <__swbuf_r+0x12>
 8005132:	f000 ffe9 	bl	8006108 <__sinit>
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <__swbuf_r+0x98>)
 8005138:	429c      	cmp	r4, r3
 800513a:	d12a      	bne.n	8005192 <__swbuf_r+0x6e>
 800513c:	686c      	ldr	r4, [r5, #4]
 800513e:	69a3      	ldr	r3, [r4, #24]
 8005140:	60a3      	str	r3, [r4, #8]
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	071a      	lsls	r2, r3, #28
 8005146:	d52e      	bpl.n	80051a6 <__swbuf_r+0x82>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	b363      	cbz	r3, 80051a6 <__swbuf_r+0x82>
 800514c:	6923      	ldr	r3, [r4, #16]
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	b2f6      	uxtb	r6, r6
 8005152:	1ac0      	subs	r0, r0, r3
 8005154:	6963      	ldr	r3, [r4, #20]
 8005156:	4637      	mov	r7, r6
 8005158:	4283      	cmp	r3, r0
 800515a:	dc04      	bgt.n	8005166 <__swbuf_r+0x42>
 800515c:	4621      	mov	r1, r4
 800515e:	4628      	mov	r0, r5
 8005160:	f000 ff68 	bl	8006034 <_fflush_r>
 8005164:	bb28      	cbnz	r0, 80051b2 <__swbuf_r+0x8e>
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	3001      	adds	r0, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	60a3      	str	r3, [r4, #8]
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	6022      	str	r2, [r4, #0]
 8005174:	701e      	strb	r6, [r3, #0]
 8005176:	6963      	ldr	r3, [r4, #20]
 8005178:	4283      	cmp	r3, r0
 800517a:	d004      	beq.n	8005186 <__swbuf_r+0x62>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	07db      	lsls	r3, r3, #31
 8005180:	d519      	bpl.n	80051b6 <__swbuf_r+0x92>
 8005182:	2e0a      	cmp	r6, #10
 8005184:	d117      	bne.n	80051b6 <__swbuf_r+0x92>
 8005186:	4621      	mov	r1, r4
 8005188:	4628      	mov	r0, r5
 800518a:	f000 ff53 	bl	8006034 <_fflush_r>
 800518e:	b190      	cbz	r0, 80051b6 <__swbuf_r+0x92>
 8005190:	e00f      	b.n	80051b2 <__swbuf_r+0x8e>
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <__swbuf_r+0x9c>)
 8005194:	429c      	cmp	r4, r3
 8005196:	d101      	bne.n	800519c <__swbuf_r+0x78>
 8005198:	68ac      	ldr	r4, [r5, #8]
 800519a:	e7d0      	b.n	800513e <__swbuf_r+0x1a>
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <__swbuf_r+0xa0>)
 800519e:	429c      	cmp	r4, r3
 80051a0:	bf08      	it	eq
 80051a2:	68ec      	ldreq	r4, [r5, #12]
 80051a4:	e7cb      	b.n	800513e <__swbuf_r+0x1a>
 80051a6:	4621      	mov	r1, r4
 80051a8:	4628      	mov	r0, r5
 80051aa:	f000 f80d 	bl	80051c8 <__swsetup_r>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0cc      	beq.n	800514c <__swbuf_r+0x28>
 80051b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80051b6:	4638      	mov	r0, r7
 80051b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ba:	bf00      	nop
 80051bc:	08006e30 	.word	0x08006e30
 80051c0:	08006e50 	.word	0x08006e50
 80051c4:	08006e10 	.word	0x08006e10

080051c8 <__swsetup_r>:
 80051c8:	4b32      	ldr	r3, [pc, #200]	; (8005294 <__swsetup_r+0xcc>)
 80051ca:	b570      	push	{r4, r5, r6, lr}
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	4606      	mov	r6, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	b125      	cbz	r5, 80051de <__swsetup_r+0x16>
 80051d4:	69ab      	ldr	r3, [r5, #24]
 80051d6:	b913      	cbnz	r3, 80051de <__swsetup_r+0x16>
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 ff95 	bl	8006108 <__sinit>
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <__swsetup_r+0xd0>)
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d10f      	bne.n	8005204 <__swsetup_r+0x3c>
 80051e4:	686c      	ldr	r4, [r5, #4]
 80051e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	0715      	lsls	r5, r2, #28
 80051ee:	d42c      	bmi.n	800524a <__swsetup_r+0x82>
 80051f0:	06d0      	lsls	r0, r2, #27
 80051f2:	d411      	bmi.n	8005218 <__swsetup_r+0x50>
 80051f4:	2209      	movs	r2, #9
 80051f6:	6032      	str	r2, [r6, #0]
 80051f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005202:	e03e      	b.n	8005282 <__swsetup_r+0xba>
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <__swsetup_r+0xd4>)
 8005206:	429c      	cmp	r4, r3
 8005208:	d101      	bne.n	800520e <__swsetup_r+0x46>
 800520a:	68ac      	ldr	r4, [r5, #8]
 800520c:	e7eb      	b.n	80051e6 <__swsetup_r+0x1e>
 800520e:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <__swsetup_r+0xd8>)
 8005210:	429c      	cmp	r4, r3
 8005212:	bf08      	it	eq
 8005214:	68ec      	ldreq	r4, [r5, #12]
 8005216:	e7e6      	b.n	80051e6 <__swsetup_r+0x1e>
 8005218:	0751      	lsls	r1, r2, #29
 800521a:	d512      	bpl.n	8005242 <__swsetup_r+0x7a>
 800521c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521e:	b141      	cbz	r1, 8005232 <__swsetup_r+0x6a>
 8005220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005224:	4299      	cmp	r1, r3
 8005226:	d002      	beq.n	800522e <__swsetup_r+0x66>
 8005228:	4630      	mov	r0, r6
 800522a:	f001 fb79 	bl	8006920 <_free_r>
 800522e:	2300      	movs	r3, #0
 8005230:	6363      	str	r3, [r4, #52]	; 0x34
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	2300      	movs	r3, #0
 800523c:	6063      	str	r3, [r4, #4]
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f043 0308 	orr.w	r3, r3, #8
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	b94b      	cbnz	r3, 8005262 <__swsetup_r+0x9a>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005258:	d003      	beq.n	8005262 <__swsetup_r+0x9a>
 800525a:	4621      	mov	r1, r4
 800525c:	4630      	mov	r0, r6
 800525e:	f001 f80f 	bl	8006280 <__smakebuf_r>
 8005262:	89a2      	ldrh	r2, [r4, #12]
 8005264:	f012 0301 	ands.w	r3, r2, #1
 8005268:	d00c      	beq.n	8005284 <__swsetup_r+0xbc>
 800526a:	2300      	movs	r3, #0
 800526c:	60a3      	str	r3, [r4, #8]
 800526e:	6963      	ldr	r3, [r4, #20]
 8005270:	425b      	negs	r3, r3
 8005272:	61a3      	str	r3, [r4, #24]
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	b953      	cbnz	r3, 800528e <__swsetup_r+0xc6>
 8005278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005280:	d1ba      	bne.n	80051f8 <__swsetup_r+0x30>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	0792      	lsls	r2, r2, #30
 8005286:	bf58      	it	pl
 8005288:	6963      	ldrpl	r3, [r4, #20]
 800528a:	60a3      	str	r3, [r4, #8]
 800528c:	e7f2      	b.n	8005274 <__swsetup_r+0xac>
 800528e:	2000      	movs	r0, #0
 8005290:	e7f7      	b.n	8005282 <__swsetup_r+0xba>
 8005292:	bf00      	nop
 8005294:	20000038 	.word	0x20000038
 8005298:	08006e30 	.word	0x08006e30
 800529c:	08006e50 	.word	0x08006e50
 80052a0:	08006e10 	.word	0x08006e10

080052a4 <quorem>:
 80052a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	6903      	ldr	r3, [r0, #16]
 80052aa:	690c      	ldr	r4, [r1, #16]
 80052ac:	4680      	mov	r8, r0
 80052ae:	42a3      	cmp	r3, r4
 80052b0:	f2c0 8084 	blt.w	80053bc <quorem+0x118>
 80052b4:	3c01      	subs	r4, #1
 80052b6:	f101 0714 	add.w	r7, r1, #20
 80052ba:	f100 0614 	add.w	r6, r0, #20
 80052be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052c6:	3501      	adds	r5, #1
 80052c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80052cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052d0:	eb06 030c 	add.w	r3, r6, ip
 80052d4:	eb07 090c 	add.w	r9, r7, ip
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	b39d      	cbz	r5, 8005344 <quorem+0xa0>
 80052dc:	f04f 0a00 	mov.w	sl, #0
 80052e0:	4638      	mov	r0, r7
 80052e2:	46b6      	mov	lr, r6
 80052e4:	46d3      	mov	fp, sl
 80052e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80052ea:	b293      	uxth	r3, r2
 80052ec:	fb05 a303 	mla	r3, r5, r3, sl
 80052f0:	0c12      	lsrs	r2, r2, #16
 80052f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052f6:	fb05 a202 	mla	r2, r5, r2, sl
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ebab 0303 	sub.w	r3, fp, r3
 8005300:	f8de b000 	ldr.w	fp, [lr]
 8005304:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005308:	fa1f fb8b 	uxth.w	fp, fp
 800530c:	445b      	add	r3, fp
 800530e:	fa1f fb82 	uxth.w	fp, r2
 8005312:	f8de 2000 	ldr.w	r2, [lr]
 8005316:	4581      	cmp	r9, r0
 8005318:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800531c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005326:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800532a:	f84e 3b04 	str.w	r3, [lr], #4
 800532e:	d2da      	bcs.n	80052e6 <quorem+0x42>
 8005330:	f856 300c 	ldr.w	r3, [r6, ip]
 8005334:	b933      	cbnz	r3, 8005344 <quorem+0xa0>
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	3b04      	subs	r3, #4
 800533a:	429e      	cmp	r6, r3
 800533c:	461a      	mov	r2, r3
 800533e:	d331      	bcc.n	80053a4 <quorem+0x100>
 8005340:	f8c8 4010 	str.w	r4, [r8, #16]
 8005344:	4640      	mov	r0, r8
 8005346:	f001 fa15 	bl	8006774 <__mcmp>
 800534a:	2800      	cmp	r0, #0
 800534c:	db26      	blt.n	800539c <quorem+0xf8>
 800534e:	4630      	mov	r0, r6
 8005350:	f04f 0c00 	mov.w	ip, #0
 8005354:	3501      	adds	r5, #1
 8005356:	f857 1b04 	ldr.w	r1, [r7], #4
 800535a:	f8d0 e000 	ldr.w	lr, [r0]
 800535e:	b28b      	uxth	r3, r1
 8005360:	ebac 0303 	sub.w	r3, ip, r3
 8005364:	fa1f f28e 	uxth.w	r2, lr
 8005368:	4413      	add	r3, r2
 800536a:	0c0a      	lsrs	r2, r1, #16
 800536c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800537a:	45b9      	cmp	r9, r7
 800537c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005380:	f840 3b04 	str.w	r3, [r0], #4
 8005384:	d2e7      	bcs.n	8005356 <quorem+0xb2>
 8005386:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800538a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800538e:	b92a      	cbnz	r2, 800539c <quorem+0xf8>
 8005390:	3b04      	subs	r3, #4
 8005392:	429e      	cmp	r6, r3
 8005394:	461a      	mov	r2, r3
 8005396:	d30b      	bcc.n	80053b0 <quorem+0x10c>
 8005398:	f8c8 4010 	str.w	r4, [r8, #16]
 800539c:	4628      	mov	r0, r5
 800539e:	b003      	add	sp, #12
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	3b04      	subs	r3, #4
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d1c9      	bne.n	8005340 <quorem+0x9c>
 80053ac:	3c01      	subs	r4, #1
 80053ae:	e7c4      	b.n	800533a <quorem+0x96>
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	3b04      	subs	r3, #4
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	d1ef      	bne.n	8005398 <quorem+0xf4>
 80053b8:	3c01      	subs	r4, #1
 80053ba:	e7ea      	b.n	8005392 <quorem+0xee>
 80053bc:	2000      	movs	r0, #0
 80053be:	e7ee      	b.n	800539e <quorem+0xfa>

080053c0 <_dtoa_r>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	4616      	mov	r6, r2
 80053c6:	461f      	mov	r7, r3
 80053c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053ca:	b095      	sub	sp, #84	; 0x54
 80053cc:	4604      	mov	r4, r0
 80053ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80053d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053d6:	b93d      	cbnz	r5, 80053e8 <_dtoa_r+0x28>
 80053d8:	2010      	movs	r0, #16
 80053da:	f000 ff91 	bl	8006300 <malloc>
 80053de:	6260      	str	r0, [r4, #36]	; 0x24
 80053e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053e4:	6005      	str	r5, [r0, #0]
 80053e6:	60c5      	str	r5, [r0, #12]
 80053e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	b151      	cbz	r1, 8005404 <_dtoa_r+0x44>
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	2301      	movs	r3, #1
 80053f2:	4093      	lsls	r3, r2
 80053f4:	604a      	str	r2, [r1, #4]
 80053f6:	608b      	str	r3, [r1, #8]
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 ffda 	bl	80063b2 <_Bfree>
 80053fe:	2200      	movs	r2, #0
 8005400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	1e3b      	subs	r3, r7, #0
 8005406:	bfaf      	iteee	ge
 8005408:	2300      	movge	r3, #0
 800540a:	2201      	movlt	r2, #1
 800540c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005410:	9303      	strlt	r3, [sp, #12]
 8005412:	bfac      	ite	ge
 8005414:	f8c8 3000 	strge.w	r3, [r8]
 8005418:	f8c8 2000 	strlt.w	r2, [r8]
 800541c:	4bae      	ldr	r3, [pc, #696]	; (80056d8 <_dtoa_r+0x318>)
 800541e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005422:	ea33 0308 	bics.w	r3, r3, r8
 8005426:	d11b      	bne.n	8005460 <_dtoa_r+0xa0>
 8005428:	f242 730f 	movw	r3, #9999	; 0x270f
 800542c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	9b02      	ldr	r3, [sp, #8]
 8005432:	b923      	cbnz	r3, 800543e <_dtoa_r+0x7e>
 8005434:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005438:	2800      	cmp	r0, #0
 800543a:	f000 8545 	beq.w	8005ec8 <_dtoa_r+0xb08>
 800543e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005440:	b953      	cbnz	r3, 8005458 <_dtoa_r+0x98>
 8005442:	4ba6      	ldr	r3, [pc, #664]	; (80056dc <_dtoa_r+0x31c>)
 8005444:	e021      	b.n	800548a <_dtoa_r+0xca>
 8005446:	4ba6      	ldr	r3, [pc, #664]	; (80056e0 <_dtoa_r+0x320>)
 8005448:	9306      	str	r3, [sp, #24]
 800544a:	3308      	adds	r3, #8
 800544c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	9806      	ldr	r0, [sp, #24]
 8005452:	b015      	add	sp, #84	; 0x54
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <_dtoa_r+0x31c>)
 800545a:	9306      	str	r3, [sp, #24]
 800545c:	3303      	adds	r3, #3
 800545e:	e7f5      	b.n	800544c <_dtoa_r+0x8c>
 8005460:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	2300      	movs	r3, #0
 8005468:	4630      	mov	r0, r6
 800546a:	4639      	mov	r1, r7
 800546c:	f7fb fa9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005470:	4682      	mov	sl, r0
 8005472:	b160      	cbz	r0, 800548e <_dtoa_r+0xce>
 8005474:	2301      	movs	r3, #1
 8005476:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8520 	beq.w	8005ec2 <_dtoa_r+0xb02>
 8005482:	4b98      	ldr	r3, [pc, #608]	; (80056e4 <_dtoa_r+0x324>)
 8005484:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	3b01      	subs	r3, #1
 800548a:	9306      	str	r3, [sp, #24]
 800548c:	e7e0      	b.n	8005450 <_dtoa_r+0x90>
 800548e:	ab12      	add	r3, sp, #72	; 0x48
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	ab13      	add	r3, sp, #76	; 0x4c
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	4632      	mov	r2, r6
 8005498:	463b      	mov	r3, r7
 800549a:	4620      	mov	r0, r4
 800549c:	f001 f9e2 	bl	8006864 <__d2b>
 80054a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054a4:	4683      	mov	fp, r0
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	d07d      	beq.n	80055a6 <_dtoa_r+0x1e6>
 80054aa:	46b0      	mov	r8, r6
 80054ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80054b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80054b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80054c0:	2200      	movs	r2, #0
 80054c2:	4b89      	ldr	r3, [pc, #548]	; (80056e8 <_dtoa_r+0x328>)
 80054c4:	4640      	mov	r0, r8
 80054c6:	4649      	mov	r1, r9
 80054c8:	f7fa fe4e 	bl	8000168 <__aeabi_dsub>
 80054cc:	a37c      	add	r3, pc, #496	; (adr r3, 80056c0 <_dtoa_r+0x300>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fb f801 	bl	80004d8 <__aeabi_dmul>
 80054d6:	a37c      	add	r3, pc, #496	; (adr r3, 80056c8 <_dtoa_r+0x308>)
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f7fa fe46 	bl	800016c <__adddf3>
 80054e0:	4606      	mov	r6, r0
 80054e2:	4628      	mov	r0, r5
 80054e4:	460f      	mov	r7, r1
 80054e6:	f7fa ff8d 	bl	8000404 <__aeabi_i2d>
 80054ea:	a379      	add	r3, pc, #484	; (adr r3, 80056d0 <_dtoa_r+0x310>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fa fff2 	bl	80004d8 <__aeabi_dmul>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4630      	mov	r0, r6
 80054fa:	4639      	mov	r1, r7
 80054fc:	f7fa fe36 	bl	800016c <__adddf3>
 8005500:	4606      	mov	r6, r0
 8005502:	460f      	mov	r7, r1
 8005504:	f7fb fa98 	bl	8000a38 <__aeabi_d2iz>
 8005508:	2200      	movs	r2, #0
 800550a:	4682      	mov	sl, r0
 800550c:	2300      	movs	r3, #0
 800550e:	4630      	mov	r0, r6
 8005510:	4639      	mov	r1, r7
 8005512:	f7fb fa53 	bl	80009bc <__aeabi_dcmplt>
 8005516:	b148      	cbz	r0, 800552c <_dtoa_r+0x16c>
 8005518:	4650      	mov	r0, sl
 800551a:	f7fa ff73 	bl	8000404 <__aeabi_i2d>
 800551e:	4632      	mov	r2, r6
 8005520:	463b      	mov	r3, r7
 8005522:	f7fb fa41 	bl	80009a8 <__aeabi_dcmpeq>
 8005526:	b908      	cbnz	r0, 800552c <_dtoa_r+0x16c>
 8005528:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800552c:	f1ba 0f16 	cmp.w	sl, #22
 8005530:	d85a      	bhi.n	80055e8 <_dtoa_r+0x228>
 8005532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005536:	496d      	ldr	r1, [pc, #436]	; (80056ec <_dtoa_r+0x32c>)
 8005538:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800553c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005540:	f7fb fa5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005544:	2800      	cmp	r0, #0
 8005546:	d051      	beq.n	80055ec <_dtoa_r+0x22c>
 8005548:	2300      	movs	r3, #0
 800554a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800554e:	930d      	str	r3, [sp, #52]	; 0x34
 8005550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005552:	1b5d      	subs	r5, r3, r5
 8005554:	1e6b      	subs	r3, r5, #1
 8005556:	9307      	str	r3, [sp, #28]
 8005558:	bf43      	ittte	mi
 800555a:	2300      	movmi	r3, #0
 800555c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005560:	9307      	strmi	r3, [sp, #28]
 8005562:	f04f 0900 	movpl.w	r9, #0
 8005566:	f1ba 0f00 	cmp.w	sl, #0
 800556a:	db41      	blt.n	80055f0 <_dtoa_r+0x230>
 800556c:	9b07      	ldr	r3, [sp, #28]
 800556e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005572:	4453      	add	r3, sl
 8005574:	9307      	str	r3, [sp, #28]
 8005576:	2300      	movs	r3, #0
 8005578:	9308      	str	r3, [sp, #32]
 800557a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800557c:	2b09      	cmp	r3, #9
 800557e:	f200 808f 	bhi.w	80056a0 <_dtoa_r+0x2e0>
 8005582:	2b05      	cmp	r3, #5
 8005584:	bfc4      	itt	gt
 8005586:	3b04      	subgt	r3, #4
 8005588:	931e      	strgt	r3, [sp, #120]	; 0x78
 800558a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800558c:	bfc8      	it	gt
 800558e:	2500      	movgt	r5, #0
 8005590:	f1a3 0302 	sub.w	r3, r3, #2
 8005594:	bfd8      	it	le
 8005596:	2501      	movle	r5, #1
 8005598:	2b03      	cmp	r3, #3
 800559a:	f200 808d 	bhi.w	80056b8 <_dtoa_r+0x2f8>
 800559e:	e8df f003 	tbb	[pc, r3]
 80055a2:	7d7b      	.short	0x7d7b
 80055a4:	6f2f      	.short	0x6f2f
 80055a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80055aa:	441d      	add	r5, r3
 80055ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055b0:	2820      	cmp	r0, #32
 80055b2:	dd13      	ble.n	80055dc <_dtoa_r+0x21c>
 80055b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055b8:	9b02      	ldr	r3, [sp, #8]
 80055ba:	fa08 f800 	lsl.w	r8, r8, r0
 80055be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80055c2:	fa23 f000 	lsr.w	r0, r3, r0
 80055c6:	ea48 0000 	orr.w	r0, r8, r0
 80055ca:	f7fa ff0b 	bl	80003e4 <__aeabi_ui2d>
 80055ce:	2301      	movs	r3, #1
 80055d0:	4680      	mov	r8, r0
 80055d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80055d6:	3d01      	subs	r5, #1
 80055d8:	9310      	str	r3, [sp, #64]	; 0x40
 80055da:	e771      	b.n	80054c0 <_dtoa_r+0x100>
 80055dc:	9b02      	ldr	r3, [sp, #8]
 80055de:	f1c0 0020 	rsb	r0, r0, #32
 80055e2:	fa03 f000 	lsl.w	r0, r3, r0
 80055e6:	e7f0      	b.n	80055ca <_dtoa_r+0x20a>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e7b0      	b.n	800554e <_dtoa_r+0x18e>
 80055ec:	900d      	str	r0, [sp, #52]	; 0x34
 80055ee:	e7af      	b.n	8005550 <_dtoa_r+0x190>
 80055f0:	f1ca 0300 	rsb	r3, sl, #0
 80055f4:	9308      	str	r3, [sp, #32]
 80055f6:	2300      	movs	r3, #0
 80055f8:	eba9 090a 	sub.w	r9, r9, sl
 80055fc:	930c      	str	r3, [sp, #48]	; 0x30
 80055fe:	e7bc      	b.n	800557a <_dtoa_r+0x1ba>
 8005600:	2301      	movs	r3, #1
 8005602:	9309      	str	r3, [sp, #36]	; 0x24
 8005604:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005606:	2b00      	cmp	r3, #0
 8005608:	dd74      	ble.n	80056f4 <_dtoa_r+0x334>
 800560a:	4698      	mov	r8, r3
 800560c:	9304      	str	r3, [sp, #16]
 800560e:	2200      	movs	r2, #0
 8005610:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005612:	6072      	str	r2, [r6, #4]
 8005614:	2204      	movs	r2, #4
 8005616:	f102 0014 	add.w	r0, r2, #20
 800561a:	4298      	cmp	r0, r3
 800561c:	6871      	ldr	r1, [r6, #4]
 800561e:	d96e      	bls.n	80056fe <_dtoa_r+0x33e>
 8005620:	4620      	mov	r0, r4
 8005622:	f000 fe92 	bl	800634a <_Balloc>
 8005626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005628:	6030      	str	r0, [r6, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b8 0f0e 	cmp.w	r8, #14
 8005630:	9306      	str	r3, [sp, #24]
 8005632:	f200 80ed 	bhi.w	8005810 <_dtoa_r+0x450>
 8005636:	2d00      	cmp	r5, #0
 8005638:	f000 80ea 	beq.w	8005810 <_dtoa_r+0x450>
 800563c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005640:	f1ba 0f00 	cmp.w	sl, #0
 8005644:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005648:	dd77      	ble.n	800573a <_dtoa_r+0x37a>
 800564a:	4a28      	ldr	r2, [pc, #160]	; (80056ec <_dtoa_r+0x32c>)
 800564c:	f00a 030f 	and.w	r3, sl, #15
 8005650:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005654:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005658:	06f0      	lsls	r0, r6, #27
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005662:	d568      	bpl.n	8005736 <_dtoa_r+0x376>
 8005664:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <_dtoa_r+0x330>)
 800566a:	2503      	movs	r5, #3
 800566c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005670:	f7fb f85c 	bl	800072c <__aeabi_ddiv>
 8005674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005678:	f006 060f 	and.w	r6, r6, #15
 800567c:	4f1c      	ldr	r7, [pc, #112]	; (80056f0 <_dtoa_r+0x330>)
 800567e:	e04f      	b.n	8005720 <_dtoa_r+0x360>
 8005680:	2301      	movs	r3, #1
 8005682:	9309      	str	r3, [sp, #36]	; 0x24
 8005684:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005686:	4453      	add	r3, sl
 8005688:	f103 0801 	add.w	r8, r3, #1
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	4643      	mov	r3, r8
 8005690:	2b01      	cmp	r3, #1
 8005692:	bfb8      	it	lt
 8005694:	2301      	movlt	r3, #1
 8005696:	e7ba      	b.n	800560e <_dtoa_r+0x24e>
 8005698:	2300      	movs	r3, #0
 800569a:	e7b2      	b.n	8005602 <_dtoa_r+0x242>
 800569c:	2300      	movs	r3, #0
 800569e:	e7f0      	b.n	8005682 <_dtoa_r+0x2c2>
 80056a0:	2501      	movs	r5, #1
 80056a2:	2300      	movs	r3, #0
 80056a4:	9509      	str	r5, [sp, #36]	; 0x24
 80056a6:	931e      	str	r3, [sp, #120]	; 0x78
 80056a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ac:	2200      	movs	r2, #0
 80056ae:	9304      	str	r3, [sp, #16]
 80056b0:	4698      	mov	r8, r3
 80056b2:	2312      	movs	r3, #18
 80056b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80056b6:	e7aa      	b.n	800560e <_dtoa_r+0x24e>
 80056b8:	2301      	movs	r3, #1
 80056ba:	9309      	str	r3, [sp, #36]	; 0x24
 80056bc:	e7f4      	b.n	80056a8 <_dtoa_r+0x2e8>
 80056be:	bf00      	nop
 80056c0:	636f4361 	.word	0x636f4361
 80056c4:	3fd287a7 	.word	0x3fd287a7
 80056c8:	8b60c8b3 	.word	0x8b60c8b3
 80056cc:	3fc68a28 	.word	0x3fc68a28
 80056d0:	509f79fb 	.word	0x509f79fb
 80056d4:	3fd34413 	.word	0x3fd34413
 80056d8:	7ff00000 	.word	0x7ff00000
 80056dc:	08006e0b 	.word	0x08006e0b
 80056e0:	08006e02 	.word	0x08006e02
 80056e4:	08006e01 	.word	0x08006e01
 80056e8:	3ff80000 	.word	0x3ff80000
 80056ec:	08006ea8 	.word	0x08006ea8
 80056f0:	08006e80 	.word	0x08006e80
 80056f4:	2301      	movs	r3, #1
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	4698      	mov	r8, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	e7da      	b.n	80056b4 <_dtoa_r+0x2f4>
 80056fe:	3101      	adds	r1, #1
 8005700:	6071      	str	r1, [r6, #4]
 8005702:	0052      	lsls	r2, r2, #1
 8005704:	e787      	b.n	8005616 <_dtoa_r+0x256>
 8005706:	07f1      	lsls	r1, r6, #31
 8005708:	d508      	bpl.n	800571c <_dtoa_r+0x35c>
 800570a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800570e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005712:	f7fa fee1 	bl	80004d8 <__aeabi_dmul>
 8005716:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800571a:	3501      	adds	r5, #1
 800571c:	1076      	asrs	r6, r6, #1
 800571e:	3708      	adds	r7, #8
 8005720:	2e00      	cmp	r6, #0
 8005722:	d1f0      	bne.n	8005706 <_dtoa_r+0x346>
 8005724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800572c:	f7fa fffe 	bl	800072c <__aeabi_ddiv>
 8005730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005734:	e01b      	b.n	800576e <_dtoa_r+0x3ae>
 8005736:	2502      	movs	r5, #2
 8005738:	e7a0      	b.n	800567c <_dtoa_r+0x2bc>
 800573a:	f000 80a4 	beq.w	8005886 <_dtoa_r+0x4c6>
 800573e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005742:	f1ca 0600 	rsb	r6, sl, #0
 8005746:	4ba0      	ldr	r3, [pc, #640]	; (80059c8 <_dtoa_r+0x608>)
 8005748:	f006 020f 	and.w	r2, r6, #15
 800574c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f7fa fec0 	bl	80004d8 <__aeabi_dmul>
 8005758:	2502      	movs	r5, #2
 800575a:	2300      	movs	r3, #0
 800575c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005760:	4f9a      	ldr	r7, [pc, #616]	; (80059cc <_dtoa_r+0x60c>)
 8005762:	1136      	asrs	r6, r6, #4
 8005764:	2e00      	cmp	r6, #0
 8005766:	f040 8083 	bne.w	8005870 <_dtoa_r+0x4b0>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e0      	bne.n	8005730 <_dtoa_r+0x370>
 800576e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 808a 	beq.w	800588a <_dtoa_r+0x4ca>
 8005776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800577a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800577e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005782:	2200      	movs	r2, #0
 8005784:	4b92      	ldr	r3, [pc, #584]	; (80059d0 <_dtoa_r+0x610>)
 8005786:	f7fb f919 	bl	80009bc <__aeabi_dcmplt>
 800578a:	2800      	cmp	r0, #0
 800578c:	d07d      	beq.n	800588a <_dtoa_r+0x4ca>
 800578e:	f1b8 0f00 	cmp.w	r8, #0
 8005792:	d07a      	beq.n	800588a <_dtoa_r+0x4ca>
 8005794:	9b04      	ldr	r3, [sp, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	dd36      	ble.n	8005808 <_dtoa_r+0x448>
 800579a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800579e:	2200      	movs	r2, #0
 80057a0:	4b8c      	ldr	r3, [pc, #560]	; (80059d4 <_dtoa_r+0x614>)
 80057a2:	f7fa fe99 	bl	80004d8 <__aeabi_dmul>
 80057a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057aa:	9e04      	ldr	r6, [sp, #16]
 80057ac:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80057b0:	3501      	adds	r5, #1
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fa fe26 	bl	8000404 <__aeabi_i2d>
 80057b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057bc:	f7fa fe8c 	bl	80004d8 <__aeabi_dmul>
 80057c0:	2200      	movs	r2, #0
 80057c2:	4b85      	ldr	r3, [pc, #532]	; (80059d8 <_dtoa_r+0x618>)
 80057c4:	f7fa fcd2 	bl	800016c <__adddf3>
 80057c8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80057cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d15c      	bne.n	8005890 <_dtoa_r+0x4d0>
 80057d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	4b7f      	ldr	r3, [pc, #508]	; (80059dc <_dtoa_r+0x61c>)
 80057de:	f7fa fcc3 	bl	8000168 <__aeabi_dsub>
 80057e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057e4:	462b      	mov	r3, r5
 80057e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057ea:	f7fb f905 	bl	80009f8 <__aeabi_dcmpgt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f040 8281 	bne.w	8005cf6 <_dtoa_r+0x936>
 80057f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057fa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057fe:	f7fb f8dd 	bl	80009bc <__aeabi_dcmplt>
 8005802:	2800      	cmp	r0, #0
 8005804:	f040 8275 	bne.w	8005cf2 <_dtoa_r+0x932>
 8005808:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800580c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005812:	2b00      	cmp	r3, #0
 8005814:	f2c0 814b 	blt.w	8005aae <_dtoa_r+0x6ee>
 8005818:	f1ba 0f0e 	cmp.w	sl, #14
 800581c:	f300 8147 	bgt.w	8005aae <_dtoa_r+0x6ee>
 8005820:	4b69      	ldr	r3, [pc, #420]	; (80059c8 <_dtoa_r+0x608>)
 8005822:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800582e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005830:	2b00      	cmp	r3, #0
 8005832:	f280 80d7 	bge.w	80059e4 <_dtoa_r+0x624>
 8005836:	f1b8 0f00 	cmp.w	r8, #0
 800583a:	f300 80d3 	bgt.w	80059e4 <_dtoa_r+0x624>
 800583e:	f040 8257 	bne.w	8005cf0 <_dtoa_r+0x930>
 8005842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005846:	2200      	movs	r2, #0
 8005848:	4b64      	ldr	r3, [pc, #400]	; (80059dc <_dtoa_r+0x61c>)
 800584a:	f7fa fe45 	bl	80004d8 <__aeabi_dmul>
 800584e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005852:	f7fb f8c7 	bl	80009e4 <__aeabi_dcmpge>
 8005856:	4646      	mov	r6, r8
 8005858:	4647      	mov	r7, r8
 800585a:	2800      	cmp	r0, #0
 800585c:	f040 822d 	bne.w	8005cba <_dtoa_r+0x8fa>
 8005860:	9b06      	ldr	r3, [sp, #24]
 8005862:	9a06      	ldr	r2, [sp, #24]
 8005864:	1c5d      	adds	r5, r3, #1
 8005866:	2331      	movs	r3, #49	; 0x31
 8005868:	f10a 0a01 	add.w	sl, sl, #1
 800586c:	7013      	strb	r3, [r2, #0]
 800586e:	e228      	b.n	8005cc2 <_dtoa_r+0x902>
 8005870:	07f2      	lsls	r2, r6, #31
 8005872:	d505      	bpl.n	8005880 <_dtoa_r+0x4c0>
 8005874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005878:	f7fa fe2e 	bl	80004d8 <__aeabi_dmul>
 800587c:	2301      	movs	r3, #1
 800587e:	3501      	adds	r5, #1
 8005880:	1076      	asrs	r6, r6, #1
 8005882:	3708      	adds	r7, #8
 8005884:	e76e      	b.n	8005764 <_dtoa_r+0x3a4>
 8005886:	2502      	movs	r5, #2
 8005888:	e771      	b.n	800576e <_dtoa_r+0x3ae>
 800588a:	4657      	mov	r7, sl
 800588c:	4646      	mov	r6, r8
 800588e:	e790      	b.n	80057b2 <_dtoa_r+0x3f2>
 8005890:	4b4d      	ldr	r3, [pc, #308]	; (80059c8 <_dtoa_r+0x608>)
 8005892:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005896:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800589a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d048      	beq.n	8005932 <_dtoa_r+0x572>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	2000      	movs	r0, #0
 80058a6:	494e      	ldr	r1, [pc, #312]	; (80059e0 <_dtoa_r+0x620>)
 80058a8:	f7fa ff40 	bl	800072c <__aeabi_ddiv>
 80058ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058b0:	f7fa fc5a 	bl	8000168 <__aeabi_dsub>
 80058b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058b8:	9d06      	ldr	r5, [sp, #24]
 80058ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058be:	f7fb f8bb 	bl	8000a38 <__aeabi_d2iz>
 80058c2:	9011      	str	r0, [sp, #68]	; 0x44
 80058c4:	f7fa fd9e 	bl	8000404 <__aeabi_i2d>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058d0:	f7fa fc4a 	bl	8000168 <__aeabi_dsub>
 80058d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058da:	3330      	adds	r3, #48	; 0x30
 80058dc:	f805 3b01 	strb.w	r3, [r5], #1
 80058e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058e4:	f7fb f86a 	bl	80009bc <__aeabi_dcmplt>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d163      	bne.n	80059b4 <_dtoa_r+0x5f4>
 80058ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058f0:	2000      	movs	r0, #0
 80058f2:	4937      	ldr	r1, [pc, #220]	; (80059d0 <_dtoa_r+0x610>)
 80058f4:	f7fa fc38 	bl	8000168 <__aeabi_dsub>
 80058f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058fc:	f7fb f85e 	bl	80009bc <__aeabi_dcmplt>
 8005900:	2800      	cmp	r0, #0
 8005902:	f040 80b5 	bne.w	8005a70 <_dtoa_r+0x6b0>
 8005906:	9b06      	ldr	r3, [sp, #24]
 8005908:	1aeb      	subs	r3, r5, r3
 800590a:	429e      	cmp	r6, r3
 800590c:	f77f af7c 	ble.w	8005808 <_dtoa_r+0x448>
 8005910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005914:	2200      	movs	r2, #0
 8005916:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <_dtoa_r+0x614>)
 8005918:	f7fa fdde 	bl	80004d8 <__aeabi_dmul>
 800591c:	2200      	movs	r2, #0
 800591e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005926:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <_dtoa_r+0x614>)
 8005928:	f7fa fdd6 	bl	80004d8 <__aeabi_dmul>
 800592c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005930:	e7c3      	b.n	80058ba <_dtoa_r+0x4fa>
 8005932:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005936:	f7fa fdcf 	bl	80004d8 <__aeabi_dmul>
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005940:	199d      	adds	r5, r3, r6
 8005942:	461e      	mov	r6, r3
 8005944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005948:	f7fb f876 	bl	8000a38 <__aeabi_d2iz>
 800594c:	9011      	str	r0, [sp, #68]	; 0x44
 800594e:	f7fa fd59 	bl	8000404 <__aeabi_i2d>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800595a:	f7fa fc05 	bl	8000168 <__aeabi_dsub>
 800595e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005964:	3330      	adds	r3, #48	; 0x30
 8005966:	f806 3b01 	strb.w	r3, [r6], #1
 800596a:	42ae      	cmp	r6, r5
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	d124      	bne.n	80059bc <_dtoa_r+0x5fc>
 8005972:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005976:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <_dtoa_r+0x620>)
 8005978:	f7fa fbf8 	bl	800016c <__adddf3>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005984:	f7fb f838 	bl	80009f8 <__aeabi_dcmpgt>
 8005988:	2800      	cmp	r0, #0
 800598a:	d171      	bne.n	8005a70 <_dtoa_r+0x6b0>
 800598c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005990:	2000      	movs	r0, #0
 8005992:	4913      	ldr	r1, [pc, #76]	; (80059e0 <_dtoa_r+0x620>)
 8005994:	f7fa fbe8 	bl	8000168 <__aeabi_dsub>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a0:	f7fb f80c 	bl	80009bc <__aeabi_dcmplt>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	f43f af2f 	beq.w	8005808 <_dtoa_r+0x448>
 80059aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059ae:	1e6a      	subs	r2, r5, #1
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d001      	beq.n	80059b8 <_dtoa_r+0x5f8>
 80059b4:	46ba      	mov	sl, r7
 80059b6:	e04a      	b.n	8005a4e <_dtoa_r+0x68e>
 80059b8:	4615      	mov	r5, r2
 80059ba:	e7f6      	b.n	80059aa <_dtoa_r+0x5ea>
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <_dtoa_r+0x614>)
 80059be:	f7fa fd8b 	bl	80004d8 <__aeabi_dmul>
 80059c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059c6:	e7bd      	b.n	8005944 <_dtoa_r+0x584>
 80059c8:	08006ea8 	.word	0x08006ea8
 80059cc:	08006e80 	.word	0x08006e80
 80059d0:	3ff00000 	.word	0x3ff00000
 80059d4:	40240000 	.word	0x40240000
 80059d8:	401c0000 	.word	0x401c0000
 80059dc:	40140000 	.word	0x40140000
 80059e0:	3fe00000 	.word	0x3fe00000
 80059e4:	9d06      	ldr	r5, [sp, #24]
 80059e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fa fe9b 	bl	800072c <__aeabi_ddiv>
 80059f6:	f7fb f81f 	bl	8000a38 <__aeabi_d2iz>
 80059fa:	4681      	mov	r9, r0
 80059fc:	f7fa fd02 	bl	8000404 <__aeabi_i2d>
 8005a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a04:	f7fa fd68 	bl	80004d8 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa fbaa 	bl	8000168 <__aeabi_dsub>
 8005a14:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005a18:	f805 6b01 	strb.w	r6, [r5], #1
 8005a1c:	9e06      	ldr	r6, [sp, #24]
 8005a1e:	4602      	mov	r2, r0
 8005a20:	1bae      	subs	r6, r5, r6
 8005a22:	45b0      	cmp	r8, r6
 8005a24:	460b      	mov	r3, r1
 8005a26:	d135      	bne.n	8005a94 <_dtoa_r+0x6d4>
 8005a28:	f7fa fba0 	bl	800016c <__adddf3>
 8005a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a30:	4606      	mov	r6, r0
 8005a32:	460f      	mov	r7, r1
 8005a34:	f7fa ffe0 	bl	80009f8 <__aeabi_dcmpgt>
 8005a38:	b9c8      	cbnz	r0, 8005a6e <_dtoa_r+0x6ae>
 8005a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa ffb1 	bl	80009a8 <__aeabi_dcmpeq>
 8005a46:	b110      	cbz	r0, 8005a4e <_dtoa_r+0x68e>
 8005a48:	f019 0f01 	tst.w	r9, #1
 8005a4c:	d10f      	bne.n	8005a6e <_dtoa_r+0x6ae>
 8005a4e:	4659      	mov	r1, fp
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 fcae 	bl	80063b2 <_Bfree>
 8005a56:	2300      	movs	r3, #0
 8005a58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a5a:	702b      	strb	r3, [r5, #0]
 8005a5c:	f10a 0301 	add.w	r3, sl, #1
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f43f acf3 	beq.w	8005450 <_dtoa_r+0x90>
 8005a6a:	601d      	str	r5, [r3, #0]
 8005a6c:	e4f0      	b.n	8005450 <_dtoa_r+0x90>
 8005a6e:	4657      	mov	r7, sl
 8005a70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a74:	1e6b      	subs	r3, r5, #1
 8005a76:	2a39      	cmp	r2, #57	; 0x39
 8005a78:	d106      	bne.n	8005a88 <_dtoa_r+0x6c8>
 8005a7a:	9a06      	ldr	r2, [sp, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d107      	bne.n	8005a90 <_dtoa_r+0x6d0>
 8005a80:	2330      	movs	r3, #48	; 0x30
 8005a82:	7013      	strb	r3, [r2, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	3701      	adds	r7, #1
 8005a88:	781a      	ldrb	r2, [r3, #0]
 8005a8a:	3201      	adds	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e791      	b.n	80059b4 <_dtoa_r+0x5f4>
 8005a90:	461d      	mov	r5, r3
 8005a92:	e7ed      	b.n	8005a70 <_dtoa_r+0x6b0>
 8005a94:	2200      	movs	r2, #0
 8005a96:	4b99      	ldr	r3, [pc, #612]	; (8005cfc <_dtoa_r+0x93c>)
 8005a98:	f7fa fd1e 	bl	80004d8 <__aeabi_dmul>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	460f      	mov	r7, r1
 8005aa4:	f7fa ff80 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d09e      	beq.n	80059ea <_dtoa_r+0x62a>
 8005aac:	e7cf      	b.n	8005a4e <_dtoa_r+0x68e>
 8005aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	f000 8088 	beq.w	8005bc6 <_dtoa_r+0x806>
 8005ab6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ab8:	2a01      	cmp	r2, #1
 8005aba:	dc6d      	bgt.n	8005b98 <_dtoa_r+0x7d8>
 8005abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	d066      	beq.n	8005b90 <_dtoa_r+0x7d0>
 8005ac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ac6:	464d      	mov	r5, r9
 8005ac8:	9e08      	ldr	r6, [sp, #32]
 8005aca:	9a07      	ldr	r2, [sp, #28]
 8005acc:	2101      	movs	r1, #1
 8005ace:	441a      	add	r2, r3
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	4499      	add	r9, r3
 8005ad4:	9207      	str	r2, [sp, #28]
 8005ad6:	f000 fd0c 	bl	80064f2 <__i2b>
 8005ada:	4607      	mov	r7, r0
 8005adc:	2d00      	cmp	r5, #0
 8005ade:	dd0b      	ble.n	8005af8 <_dtoa_r+0x738>
 8005ae0:	9b07      	ldr	r3, [sp, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	dd08      	ble.n	8005af8 <_dtoa_r+0x738>
 8005ae6:	42ab      	cmp	r3, r5
 8005ae8:	bfa8      	it	ge
 8005aea:	462b      	movge	r3, r5
 8005aec:	9a07      	ldr	r2, [sp, #28]
 8005aee:	eba9 0903 	sub.w	r9, r9, r3
 8005af2:	1aed      	subs	r5, r5, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	9b08      	ldr	r3, [sp, #32]
 8005afa:	b1eb      	cbz	r3, 8005b38 <_dtoa_r+0x778>
 8005afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d065      	beq.n	8005bce <_dtoa_r+0x80e>
 8005b02:	b18e      	cbz	r6, 8005b28 <_dtoa_r+0x768>
 8005b04:	4639      	mov	r1, r7
 8005b06:	4632      	mov	r2, r6
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fd91 	bl	8006630 <__pow5mult>
 8005b0e:	465a      	mov	r2, fp
 8005b10:	4601      	mov	r1, r0
 8005b12:	4607      	mov	r7, r0
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fcf5 	bl	8006504 <__multiply>
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f000 fc47 	bl	80063b2 <_Bfree>
 8005b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b26:	469b      	mov	fp, r3
 8005b28:	9b08      	ldr	r3, [sp, #32]
 8005b2a:	1b9a      	subs	r2, r3, r6
 8005b2c:	d004      	beq.n	8005b38 <_dtoa_r+0x778>
 8005b2e:	4659      	mov	r1, fp
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fd7d 	bl	8006630 <__pow5mult>
 8005b36:	4683      	mov	fp, r0
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fcd9 	bl	80064f2 <__i2b>
 8005b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b42:	4606      	mov	r6, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 81c6 	beq.w	8005ed6 <_dtoa_r+0xb16>
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fd6e 	bl	8006630 <__pow5mult>
 8005b54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b56:	4606      	mov	r6, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	dc3e      	bgt.n	8005bda <_dtoa_r+0x81a>
 8005b5c:	9b02      	ldr	r3, [sp, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d137      	bne.n	8005bd2 <_dtoa_r+0x812>
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d134      	bne.n	8005bd6 <_dtoa_r+0x816>
 8005b6c:	9b03      	ldr	r3, [sp, #12]
 8005b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	0d1b      	lsrs	r3, r3, #20
 8005b74:	051b      	lsls	r3, r3, #20
 8005b76:	b12b      	cbz	r3, 8005b84 <_dtoa_r+0x7c4>
 8005b78:	9b07      	ldr	r3, [sp, #28]
 8005b7a:	f109 0901 	add.w	r9, r9, #1
 8005b7e:	3301      	adds	r3, #1
 8005b80:	9307      	str	r3, [sp, #28]
 8005b82:	2301      	movs	r3, #1
 8005b84:	9308      	str	r3, [sp, #32]
 8005b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d128      	bne.n	8005bde <_dtoa_r+0x81e>
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	e02e      	b.n	8005bee <_dtoa_r+0x82e>
 8005b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b96:	e796      	b.n	8005ac6 <_dtoa_r+0x706>
 8005b98:	9b08      	ldr	r3, [sp, #32]
 8005b9a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005b9e:	42b3      	cmp	r3, r6
 8005ba0:	bfb7      	itett	lt
 8005ba2:	9b08      	ldrlt	r3, [sp, #32]
 8005ba4:	1b9e      	subge	r6, r3, r6
 8005ba6:	1af2      	sublt	r2, r6, r3
 8005ba8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005baa:	bfbf      	itttt	lt
 8005bac:	9608      	strlt	r6, [sp, #32]
 8005bae:	189b      	addlt	r3, r3, r2
 8005bb0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005bb2:	2600      	movlt	r6, #0
 8005bb4:	f1b8 0f00 	cmp.w	r8, #0
 8005bb8:	bfb9      	ittee	lt
 8005bba:	eba9 0508 	sublt.w	r5, r9, r8
 8005bbe:	2300      	movlt	r3, #0
 8005bc0:	464d      	movge	r5, r9
 8005bc2:	4643      	movge	r3, r8
 8005bc4:	e781      	b.n	8005aca <_dtoa_r+0x70a>
 8005bc6:	9e08      	ldr	r6, [sp, #32]
 8005bc8:	464d      	mov	r5, r9
 8005bca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005bcc:	e786      	b.n	8005adc <_dtoa_r+0x71c>
 8005bce:	9a08      	ldr	r2, [sp, #32]
 8005bd0:	e7ad      	b.n	8005b2e <_dtoa_r+0x76e>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e7d6      	b.n	8005b84 <_dtoa_r+0x7c4>
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	e7d4      	b.n	8005b84 <_dtoa_r+0x7c4>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	9308      	str	r3, [sp, #32]
 8005bde:	6933      	ldr	r3, [r6, #16]
 8005be0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005be4:	6918      	ldr	r0, [r3, #16]
 8005be6:	f000 fc36 	bl	8006456 <__hi0bits>
 8005bea:	f1c0 0020 	rsb	r0, r0, #32
 8005bee:	9b07      	ldr	r3, [sp, #28]
 8005bf0:	4418      	add	r0, r3
 8005bf2:	f010 001f 	ands.w	r0, r0, #31
 8005bf6:	d047      	beq.n	8005c88 <_dtoa_r+0x8c8>
 8005bf8:	f1c0 0320 	rsb	r3, r0, #32
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	dd3b      	ble.n	8005c78 <_dtoa_r+0x8b8>
 8005c00:	9b07      	ldr	r3, [sp, #28]
 8005c02:	f1c0 001c 	rsb	r0, r0, #28
 8005c06:	4481      	add	r9, r0
 8005c08:	4405      	add	r5, r0
 8005c0a:	4403      	add	r3, r0
 8005c0c:	9307      	str	r3, [sp, #28]
 8005c0e:	f1b9 0f00 	cmp.w	r9, #0
 8005c12:	dd05      	ble.n	8005c20 <_dtoa_r+0x860>
 8005c14:	4659      	mov	r1, fp
 8005c16:	464a      	mov	r2, r9
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fd57 	bl	80066cc <__lshift>
 8005c1e:	4683      	mov	fp, r0
 8005c20:	9b07      	ldr	r3, [sp, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dd05      	ble.n	8005c32 <_dtoa_r+0x872>
 8005c26:	4631      	mov	r1, r6
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fd4e 	bl	80066cc <__lshift>
 8005c30:	4606      	mov	r6, r0
 8005c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c34:	b353      	cbz	r3, 8005c8c <_dtoa_r+0x8cc>
 8005c36:	4631      	mov	r1, r6
 8005c38:	4658      	mov	r0, fp
 8005c3a:	f000 fd9b 	bl	8006774 <__mcmp>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	da24      	bge.n	8005c8c <_dtoa_r+0x8cc>
 8005c42:	2300      	movs	r3, #0
 8005c44:	4659      	mov	r1, fp
 8005c46:	220a      	movs	r2, #10
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fbc9 	bl	80063e0 <__multadd>
 8005c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c50:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c54:	4683      	mov	fp, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8144 	beq.w	8005ee4 <_dtoa_r+0xb24>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4639      	mov	r1, r7
 8005c60:	220a      	movs	r2, #10
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 fbbc 	bl	80063e0 <__multadd>
 8005c68:	9b04      	ldr	r3, [sp, #16]
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dc4d      	bgt.n	8005d0c <_dtoa_r+0x94c>
 8005c70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	dd4a      	ble.n	8005d0c <_dtoa_r+0x94c>
 8005c76:	e011      	b.n	8005c9c <_dtoa_r+0x8dc>
 8005c78:	d0c9      	beq.n	8005c0e <_dtoa_r+0x84e>
 8005c7a:	9a07      	ldr	r2, [sp, #28]
 8005c7c:	331c      	adds	r3, #28
 8005c7e:	441a      	add	r2, r3
 8005c80:	4499      	add	r9, r3
 8005c82:	441d      	add	r5, r3
 8005c84:	4613      	mov	r3, r2
 8005c86:	e7c1      	b.n	8005c0c <_dtoa_r+0x84c>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	e7f6      	b.n	8005c7a <_dtoa_r+0x8ba>
 8005c8c:	f1b8 0f00 	cmp.w	r8, #0
 8005c90:	dc36      	bgt.n	8005d00 <_dtoa_r+0x940>
 8005c92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	dd33      	ble.n	8005d00 <_dtoa_r+0x940>
 8005c98:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	b963      	cbnz	r3, 8005cba <_dtoa_r+0x8fa>
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	2205      	movs	r2, #5
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 fb9b 	bl	80063e0 <__multadd>
 8005caa:	4601      	mov	r1, r0
 8005cac:	4606      	mov	r6, r0
 8005cae:	4658      	mov	r0, fp
 8005cb0:	f000 fd60 	bl	8006774 <__mcmp>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	f73f add3 	bgt.w	8005860 <_dtoa_r+0x4a0>
 8005cba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cbc:	9d06      	ldr	r5, [sp, #24]
 8005cbe:	ea6f 0a03 	mvn.w	sl, r3
 8005cc2:	f04f 0900 	mov.w	r9, #0
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fb72 	bl	80063b2 <_Bfree>
 8005cce:	2f00      	cmp	r7, #0
 8005cd0:	f43f aebd 	beq.w	8005a4e <_dtoa_r+0x68e>
 8005cd4:	f1b9 0f00 	cmp.w	r9, #0
 8005cd8:	d005      	beq.n	8005ce6 <_dtoa_r+0x926>
 8005cda:	45b9      	cmp	r9, r7
 8005cdc:	d003      	beq.n	8005ce6 <_dtoa_r+0x926>
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 fb66 	bl	80063b2 <_Bfree>
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fb62 	bl	80063b2 <_Bfree>
 8005cee:	e6ae      	b.n	8005a4e <_dtoa_r+0x68e>
 8005cf0:	2600      	movs	r6, #0
 8005cf2:	4637      	mov	r7, r6
 8005cf4:	e7e1      	b.n	8005cba <_dtoa_r+0x8fa>
 8005cf6:	46ba      	mov	sl, r7
 8005cf8:	4637      	mov	r7, r6
 8005cfa:	e5b1      	b.n	8005860 <_dtoa_r+0x4a0>
 8005cfc:	40240000 	.word	0x40240000
 8005d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d02:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80f3 	beq.w	8005ef2 <_dtoa_r+0xb32>
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	dd05      	ble.n	8005d1c <_dtoa_r+0x95c>
 8005d10:	4639      	mov	r1, r7
 8005d12:	462a      	mov	r2, r5
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fcd9 	bl	80066cc <__lshift>
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d04c      	beq.n	8005dbc <_dtoa_r+0x9fc>
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 fb10 	bl	800634a <_Balloc>
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	f107 010c 	add.w	r1, r7, #12
 8005d32:	3202      	adds	r2, #2
 8005d34:	0092      	lsls	r2, r2, #2
 8005d36:	300c      	adds	r0, #12
 8005d38:	f000 fafc 	bl	8006334 <memcpy>
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4629      	mov	r1, r5
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fcc3 	bl	80066cc <__lshift>
 8005d46:	46b9      	mov	r9, r7
 8005d48:	4607      	mov	r7, r0
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	9307      	str	r3, [sp, #28]
 8005d4e:	9b02      	ldr	r3, [sp, #8]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	9308      	str	r3, [sp, #32]
 8005d56:	4631      	mov	r1, r6
 8005d58:	4658      	mov	r0, fp
 8005d5a:	f7ff faa3 	bl	80052a4 <quorem>
 8005d5e:	4649      	mov	r1, r9
 8005d60:	4605      	mov	r5, r0
 8005d62:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d66:	4658      	mov	r0, fp
 8005d68:	f000 fd04 	bl	8006774 <__mcmp>
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	9002      	str	r0, [sp, #8]
 8005d70:	4631      	mov	r1, r6
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fd18 	bl	80067a8 <__mdiff>
 8005d78:	68c3      	ldr	r3, [r0, #12]
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	bb03      	cbnz	r3, 8005dc0 <_dtoa_r+0xa00>
 8005d7e:	4601      	mov	r1, r0
 8005d80:	9009      	str	r0, [sp, #36]	; 0x24
 8005d82:	4658      	mov	r0, fp
 8005d84:	f000 fcf6 	bl	8006774 <__mcmp>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4620      	mov	r0, r4
 8005d90:	9309      	str	r3, [sp, #36]	; 0x24
 8005d92:	f000 fb0e 	bl	80063b2 <_Bfree>
 8005d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d98:	b9a3      	cbnz	r3, 8005dc4 <_dtoa_r+0xa04>
 8005d9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d9c:	b992      	cbnz	r2, 8005dc4 <_dtoa_r+0xa04>
 8005d9e:	9a08      	ldr	r2, [sp, #32]
 8005da0:	b982      	cbnz	r2, 8005dc4 <_dtoa_r+0xa04>
 8005da2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005da6:	d029      	beq.n	8005dfc <_dtoa_r+0xa3c>
 8005da8:	9b02      	ldr	r3, [sp, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dd01      	ble.n	8005db2 <_dtoa_r+0x9f2>
 8005dae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005db2:	9b07      	ldr	r3, [sp, #28]
 8005db4:	1c5d      	adds	r5, r3, #1
 8005db6:	f883 8000 	strb.w	r8, [r3]
 8005dba:	e784      	b.n	8005cc6 <_dtoa_r+0x906>
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	e7c2      	b.n	8005d46 <_dtoa_r+0x986>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e7e3      	b.n	8005d8c <_dtoa_r+0x9cc>
 8005dc4:	9a02      	ldr	r2, [sp, #8]
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	db04      	blt.n	8005dd4 <_dtoa_r+0xa14>
 8005dca:	d123      	bne.n	8005e14 <_dtoa_r+0xa54>
 8005dcc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dce:	bb0a      	cbnz	r2, 8005e14 <_dtoa_r+0xa54>
 8005dd0:	9a08      	ldr	r2, [sp, #32]
 8005dd2:	b9fa      	cbnz	r2, 8005e14 <_dtoa_r+0xa54>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	ddec      	ble.n	8005db2 <_dtoa_r+0x9f2>
 8005dd8:	4659      	mov	r1, fp
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fc75 	bl	80066cc <__lshift>
 8005de2:	4631      	mov	r1, r6
 8005de4:	4683      	mov	fp, r0
 8005de6:	f000 fcc5 	bl	8006774 <__mcmp>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	dc03      	bgt.n	8005df6 <_dtoa_r+0xa36>
 8005dee:	d1e0      	bne.n	8005db2 <_dtoa_r+0x9f2>
 8005df0:	f018 0f01 	tst.w	r8, #1
 8005df4:	d0dd      	beq.n	8005db2 <_dtoa_r+0x9f2>
 8005df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dfa:	d1d8      	bne.n	8005dae <_dtoa_r+0x9ee>
 8005dfc:	9b07      	ldr	r3, [sp, #28]
 8005dfe:	9a07      	ldr	r2, [sp, #28]
 8005e00:	1c5d      	adds	r5, r3, #1
 8005e02:	2339      	movs	r3, #57	; 0x39
 8005e04:	7013      	strb	r3, [r2, #0]
 8005e06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e0a:	1e6a      	subs	r2, r5, #1
 8005e0c:	2b39      	cmp	r3, #57	; 0x39
 8005e0e:	d04d      	beq.n	8005eac <_dtoa_r+0xaec>
 8005e10:	3301      	adds	r3, #1
 8005e12:	e052      	b.n	8005eba <_dtoa_r+0xafa>
 8005e14:	9a07      	ldr	r2, [sp, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f102 0501 	add.w	r5, r2, #1
 8005e1c:	dd06      	ble.n	8005e2c <_dtoa_r+0xa6c>
 8005e1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e22:	d0eb      	beq.n	8005dfc <_dtoa_r+0xa3c>
 8005e24:	f108 0801 	add.w	r8, r8, #1
 8005e28:	9b07      	ldr	r3, [sp, #28]
 8005e2a:	e7c4      	b.n	8005db6 <_dtoa_r+0x9f6>
 8005e2c:	9b06      	ldr	r3, [sp, #24]
 8005e2e:	9a04      	ldr	r2, [sp, #16]
 8005e30:	1aeb      	subs	r3, r5, r3
 8005e32:	4293      	cmp	r3, r2
 8005e34:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e38:	d021      	beq.n	8005e7e <_dtoa_r+0xabe>
 8005e3a:	4659      	mov	r1, fp
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	220a      	movs	r2, #10
 8005e40:	4620      	mov	r0, r4
 8005e42:	f000 facd 	bl	80063e0 <__multadd>
 8005e46:	45b9      	cmp	r9, r7
 8005e48:	4683      	mov	fp, r0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	f04f 020a 	mov.w	r2, #10
 8005e52:	4649      	mov	r1, r9
 8005e54:	4620      	mov	r0, r4
 8005e56:	d105      	bne.n	8005e64 <_dtoa_r+0xaa4>
 8005e58:	f000 fac2 	bl	80063e0 <__multadd>
 8005e5c:	4681      	mov	r9, r0
 8005e5e:	4607      	mov	r7, r0
 8005e60:	9507      	str	r5, [sp, #28]
 8005e62:	e778      	b.n	8005d56 <_dtoa_r+0x996>
 8005e64:	f000 fabc 	bl	80063e0 <__multadd>
 8005e68:	4639      	mov	r1, r7
 8005e6a:	4681      	mov	r9, r0
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	220a      	movs	r2, #10
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 fab5 	bl	80063e0 <__multadd>
 8005e76:	4607      	mov	r7, r0
 8005e78:	e7f2      	b.n	8005e60 <_dtoa_r+0xaa0>
 8005e7a:	f04f 0900 	mov.w	r9, #0
 8005e7e:	4659      	mov	r1, fp
 8005e80:	2201      	movs	r2, #1
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 fc22 	bl	80066cc <__lshift>
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4683      	mov	fp, r0
 8005e8c:	f000 fc72 	bl	8006774 <__mcmp>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	dcb8      	bgt.n	8005e06 <_dtoa_r+0xa46>
 8005e94:	d102      	bne.n	8005e9c <_dtoa_r+0xadc>
 8005e96:	f018 0f01 	tst.w	r8, #1
 8005e9a:	d1b4      	bne.n	8005e06 <_dtoa_r+0xa46>
 8005e9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ea0:	1e6a      	subs	r2, r5, #1
 8005ea2:	2b30      	cmp	r3, #48	; 0x30
 8005ea4:	f47f af0f 	bne.w	8005cc6 <_dtoa_r+0x906>
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	e7f7      	b.n	8005e9c <_dtoa_r+0xadc>
 8005eac:	9b06      	ldr	r3, [sp, #24]
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d105      	bne.n	8005ebe <_dtoa_r+0xafe>
 8005eb2:	2331      	movs	r3, #49	; 0x31
 8005eb4:	9a06      	ldr	r2, [sp, #24]
 8005eb6:	f10a 0a01 	add.w	sl, sl, #1
 8005eba:	7013      	strb	r3, [r2, #0]
 8005ebc:	e703      	b.n	8005cc6 <_dtoa_r+0x906>
 8005ebe:	4615      	mov	r5, r2
 8005ec0:	e7a1      	b.n	8005e06 <_dtoa_r+0xa46>
 8005ec2:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <_dtoa_r+0xb60>)
 8005ec4:	f7ff bae1 	b.w	800548a <_dtoa_r+0xca>
 8005ec8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f47f aabb 	bne.w	8005446 <_dtoa_r+0x86>
 8005ed0:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <_dtoa_r+0xb64>)
 8005ed2:	f7ff bada 	b.w	800548a <_dtoa_r+0xca>
 8005ed6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f77f ae3f 	ble.w	8005b5c <_dtoa_r+0x79c>
 8005ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	e653      	b.n	8005b8c <_dtoa_r+0x7cc>
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dc03      	bgt.n	8005ef2 <_dtoa_r+0xb32>
 8005eea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f73f aed5 	bgt.w	8005c9c <_dtoa_r+0x8dc>
 8005ef2:	9d06      	ldr	r5, [sp, #24]
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f7ff f9d4 	bl	80052a4 <quorem>
 8005efc:	9b06      	ldr	r3, [sp, #24]
 8005efe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f02:	f805 8b01 	strb.w	r8, [r5], #1
 8005f06:	9a04      	ldr	r2, [sp, #16]
 8005f08:	1aeb      	subs	r3, r5, r3
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	ddb5      	ble.n	8005e7a <_dtoa_r+0xaba>
 8005f0e:	4659      	mov	r1, fp
 8005f10:	2300      	movs	r3, #0
 8005f12:	220a      	movs	r2, #10
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 fa63 	bl	80063e0 <__multadd>
 8005f1a:	4683      	mov	fp, r0
 8005f1c:	e7ea      	b.n	8005ef4 <_dtoa_r+0xb34>
 8005f1e:	bf00      	nop
 8005f20:	08006e00 	.word	0x08006e00
 8005f24:	08006e02 	.word	0x08006e02

08005f28 <__sflush_r>:
 8005f28:	898a      	ldrh	r2, [r1, #12]
 8005f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2e:	4605      	mov	r5, r0
 8005f30:	0710      	lsls	r0, r2, #28
 8005f32:	460c      	mov	r4, r1
 8005f34:	d458      	bmi.n	8005fe8 <__sflush_r+0xc0>
 8005f36:	684b      	ldr	r3, [r1, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	dc05      	bgt.n	8005f48 <__sflush_r+0x20>
 8005f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dc02      	bgt.n	8005f48 <__sflush_r+0x20>
 8005f42:	2000      	movs	r0, #0
 8005f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	d0f9      	beq.n	8005f42 <__sflush_r+0x1a>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f54:	682f      	ldr	r7, [r5, #0]
 8005f56:	6a21      	ldr	r1, [r4, #32]
 8005f58:	602b      	str	r3, [r5, #0]
 8005f5a:	d032      	beq.n	8005fc2 <__sflush_r+0x9a>
 8005f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	075a      	lsls	r2, r3, #29
 8005f62:	d505      	bpl.n	8005f70 <__sflush_r+0x48>
 8005f64:	6863      	ldr	r3, [r4, #4]
 8005f66:	1ac0      	subs	r0, r0, r3
 8005f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f6a:	b10b      	cbz	r3, 8005f70 <__sflush_r+0x48>
 8005f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f6e:	1ac0      	subs	r0, r0, r3
 8005f70:	2300      	movs	r3, #0
 8005f72:	4602      	mov	r2, r0
 8005f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f76:	6a21      	ldr	r1, [r4, #32]
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b0      	blx	r6
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	d106      	bne.n	8005f90 <__sflush_r+0x68>
 8005f82:	6829      	ldr	r1, [r5, #0]
 8005f84:	291d      	cmp	r1, #29
 8005f86:	d848      	bhi.n	800601a <__sflush_r+0xf2>
 8005f88:	4a29      	ldr	r2, [pc, #164]	; (8006030 <__sflush_r+0x108>)
 8005f8a:	40ca      	lsrs	r2, r1
 8005f8c:	07d6      	lsls	r6, r2, #31
 8005f8e:	d544      	bpl.n	800601a <__sflush_r+0xf2>
 8005f90:	2200      	movs	r2, #0
 8005f92:	6062      	str	r2, [r4, #4]
 8005f94:	6922      	ldr	r2, [r4, #16]
 8005f96:	04d9      	lsls	r1, r3, #19
 8005f98:	6022      	str	r2, [r4, #0]
 8005f9a:	d504      	bpl.n	8005fa6 <__sflush_r+0x7e>
 8005f9c:	1c42      	adds	r2, r0, #1
 8005f9e:	d101      	bne.n	8005fa4 <__sflush_r+0x7c>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b903      	cbnz	r3, 8005fa6 <__sflush_r+0x7e>
 8005fa4:	6560      	str	r0, [r4, #84]	; 0x54
 8005fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa8:	602f      	str	r7, [r5, #0]
 8005faa:	2900      	cmp	r1, #0
 8005fac:	d0c9      	beq.n	8005f42 <__sflush_r+0x1a>
 8005fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	d002      	beq.n	8005fbc <__sflush_r+0x94>
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 fcb2 	bl	8006920 <_free_r>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	6360      	str	r0, [r4, #52]	; 0x34
 8005fc0:	e7c0      	b.n	8005f44 <__sflush_r+0x1c>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b0      	blx	r6
 8005fc8:	1c41      	adds	r1, r0, #1
 8005fca:	d1c8      	bne.n	8005f5e <__sflush_r+0x36>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0c5      	beq.n	8005f5e <__sflush_r+0x36>
 8005fd2:	2b1d      	cmp	r3, #29
 8005fd4:	d001      	beq.n	8005fda <__sflush_r+0xb2>
 8005fd6:	2b16      	cmp	r3, #22
 8005fd8:	d101      	bne.n	8005fde <__sflush_r+0xb6>
 8005fda:	602f      	str	r7, [r5, #0]
 8005fdc:	e7b1      	b.n	8005f42 <__sflush_r+0x1a>
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	e7ad      	b.n	8005f44 <__sflush_r+0x1c>
 8005fe8:	690f      	ldr	r7, [r1, #16]
 8005fea:	2f00      	cmp	r7, #0
 8005fec:	d0a9      	beq.n	8005f42 <__sflush_r+0x1a>
 8005fee:	0793      	lsls	r3, r2, #30
 8005ff0:	bf18      	it	ne
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	680e      	ldr	r6, [r1, #0]
 8005ff6:	bf08      	it	eq
 8005ff8:	694b      	ldreq	r3, [r1, #20]
 8005ffa:	eba6 0807 	sub.w	r8, r6, r7
 8005ffe:	600f      	str	r7, [r1, #0]
 8006000:	608b      	str	r3, [r1, #8]
 8006002:	f1b8 0f00 	cmp.w	r8, #0
 8006006:	dd9c      	ble.n	8005f42 <__sflush_r+0x1a>
 8006008:	4643      	mov	r3, r8
 800600a:	463a      	mov	r2, r7
 800600c:	6a21      	ldr	r1, [r4, #32]
 800600e:	4628      	mov	r0, r5
 8006010:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006012:	47b0      	blx	r6
 8006014:	2800      	cmp	r0, #0
 8006016:	dc06      	bgt.n	8006026 <__sflush_r+0xfe>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601e:	81a3      	strh	r3, [r4, #12]
 8006020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006024:	e78e      	b.n	8005f44 <__sflush_r+0x1c>
 8006026:	4407      	add	r7, r0
 8006028:	eba8 0800 	sub.w	r8, r8, r0
 800602c:	e7e9      	b.n	8006002 <__sflush_r+0xda>
 800602e:	bf00      	nop
 8006030:	20400001 	.word	0x20400001

08006034 <_fflush_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	4605      	mov	r5, r0
 800603a:	460c      	mov	r4, r1
 800603c:	b1db      	cbz	r3, 8006076 <_fflush_r+0x42>
 800603e:	b118      	cbz	r0, 8006048 <_fflush_r+0x14>
 8006040:	6983      	ldr	r3, [r0, #24]
 8006042:	b90b      	cbnz	r3, 8006048 <_fflush_r+0x14>
 8006044:	f000 f860 	bl	8006108 <__sinit>
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <_fflush_r+0x48>)
 800604a:	429c      	cmp	r4, r3
 800604c:	d109      	bne.n	8006062 <_fflush_r+0x2e>
 800604e:	686c      	ldr	r4, [r5, #4]
 8006050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006054:	b17b      	cbz	r3, 8006076 <_fflush_r+0x42>
 8006056:	4621      	mov	r1, r4
 8006058:	4628      	mov	r0, r5
 800605a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800605e:	f7ff bf63 	b.w	8005f28 <__sflush_r>
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <_fflush_r+0x4c>)
 8006064:	429c      	cmp	r4, r3
 8006066:	d101      	bne.n	800606c <_fflush_r+0x38>
 8006068:	68ac      	ldr	r4, [r5, #8]
 800606a:	e7f1      	b.n	8006050 <_fflush_r+0x1c>
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <_fflush_r+0x50>)
 800606e:	429c      	cmp	r4, r3
 8006070:	bf08      	it	eq
 8006072:	68ec      	ldreq	r4, [r5, #12]
 8006074:	e7ec      	b.n	8006050 <_fflush_r+0x1c>
 8006076:	2000      	movs	r0, #0
 8006078:	bd38      	pop	{r3, r4, r5, pc}
 800607a:	bf00      	nop
 800607c:	08006e30 	.word	0x08006e30
 8006080:	08006e50 	.word	0x08006e50
 8006084:	08006e10 	.word	0x08006e10

08006088 <std>:
 8006088:	2300      	movs	r3, #0
 800608a:	b510      	push	{r4, lr}
 800608c:	4604      	mov	r4, r0
 800608e:	e9c0 3300 	strd	r3, r3, [r0]
 8006092:	6083      	str	r3, [r0, #8]
 8006094:	8181      	strh	r1, [r0, #12]
 8006096:	6643      	str	r3, [r0, #100]	; 0x64
 8006098:	81c2      	strh	r2, [r0, #14]
 800609a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800609e:	6183      	str	r3, [r0, #24]
 80060a0:	4619      	mov	r1, r3
 80060a2:	2208      	movs	r2, #8
 80060a4:	305c      	adds	r0, #92	; 0x5c
 80060a6:	f7fe fc93 	bl	80049d0 <memset>
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <std+0x38>)
 80060ac:	6224      	str	r4, [r4, #32]
 80060ae:	6263      	str	r3, [r4, #36]	; 0x24
 80060b0:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <std+0x3c>)
 80060b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <std+0x40>)
 80060b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060b8:	4b04      	ldr	r3, [pc, #16]	; (80060cc <std+0x44>)
 80060ba:	6323      	str	r3, [r4, #48]	; 0x30
 80060bc:	bd10      	pop	{r4, pc}
 80060be:	bf00      	nop
 80060c0:	08006a8d 	.word	0x08006a8d
 80060c4:	08006aaf 	.word	0x08006aaf
 80060c8:	08006ae7 	.word	0x08006ae7
 80060cc:	08006b0b 	.word	0x08006b0b

080060d0 <_cleanup_r>:
 80060d0:	4901      	ldr	r1, [pc, #4]	; (80060d8 <_cleanup_r+0x8>)
 80060d2:	f000 b885 	b.w	80061e0 <_fwalk_reent>
 80060d6:	bf00      	nop
 80060d8:	08006035 	.word	0x08006035

080060dc <__sfmoreglue>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	2568      	movs	r5, #104	; 0x68
 80060e0:	1e4a      	subs	r2, r1, #1
 80060e2:	4355      	muls	r5, r2
 80060e4:	460e      	mov	r6, r1
 80060e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060ea:	f000 fc65 	bl	80069b8 <_malloc_r>
 80060ee:	4604      	mov	r4, r0
 80060f0:	b140      	cbz	r0, 8006104 <__sfmoreglue+0x28>
 80060f2:	2100      	movs	r1, #0
 80060f4:	e9c0 1600 	strd	r1, r6, [r0]
 80060f8:	300c      	adds	r0, #12
 80060fa:	60a0      	str	r0, [r4, #8]
 80060fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006100:	f7fe fc66 	bl	80049d0 <memset>
 8006104:	4620      	mov	r0, r4
 8006106:	bd70      	pop	{r4, r5, r6, pc}

08006108 <__sinit>:
 8006108:	6983      	ldr	r3, [r0, #24]
 800610a:	b510      	push	{r4, lr}
 800610c:	4604      	mov	r4, r0
 800610e:	bb33      	cbnz	r3, 800615e <__sinit+0x56>
 8006110:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006114:	6503      	str	r3, [r0, #80]	; 0x50
 8006116:	4b12      	ldr	r3, [pc, #72]	; (8006160 <__sinit+0x58>)
 8006118:	4a12      	ldr	r2, [pc, #72]	; (8006164 <__sinit+0x5c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6282      	str	r2, [r0, #40]	; 0x28
 800611e:	4298      	cmp	r0, r3
 8006120:	bf04      	itt	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	6183      	streq	r3, [r0, #24]
 8006126:	f000 f81f 	bl	8006168 <__sfp>
 800612a:	6060      	str	r0, [r4, #4]
 800612c:	4620      	mov	r0, r4
 800612e:	f000 f81b 	bl	8006168 <__sfp>
 8006132:	60a0      	str	r0, [r4, #8]
 8006134:	4620      	mov	r0, r4
 8006136:	f000 f817 	bl	8006168 <__sfp>
 800613a:	2200      	movs	r2, #0
 800613c:	60e0      	str	r0, [r4, #12]
 800613e:	2104      	movs	r1, #4
 8006140:	6860      	ldr	r0, [r4, #4]
 8006142:	f7ff ffa1 	bl	8006088 <std>
 8006146:	2201      	movs	r2, #1
 8006148:	2109      	movs	r1, #9
 800614a:	68a0      	ldr	r0, [r4, #8]
 800614c:	f7ff ff9c 	bl	8006088 <std>
 8006150:	2202      	movs	r2, #2
 8006152:	2112      	movs	r1, #18
 8006154:	68e0      	ldr	r0, [r4, #12]
 8006156:	f7ff ff97 	bl	8006088 <std>
 800615a:	2301      	movs	r3, #1
 800615c:	61a3      	str	r3, [r4, #24]
 800615e:	bd10      	pop	{r4, pc}
 8006160:	08006dec 	.word	0x08006dec
 8006164:	080060d1 	.word	0x080060d1

08006168 <__sfp>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <__sfp+0x70>)
 800616c:	4607      	mov	r7, r0
 800616e:	681e      	ldr	r6, [r3, #0]
 8006170:	69b3      	ldr	r3, [r6, #24]
 8006172:	b913      	cbnz	r3, 800617a <__sfp+0x12>
 8006174:	4630      	mov	r0, r6
 8006176:	f7ff ffc7 	bl	8006108 <__sinit>
 800617a:	3648      	adds	r6, #72	; 0x48
 800617c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006180:	3b01      	subs	r3, #1
 8006182:	d503      	bpl.n	800618c <__sfp+0x24>
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	b133      	cbz	r3, 8006196 <__sfp+0x2e>
 8006188:	6836      	ldr	r6, [r6, #0]
 800618a:	e7f7      	b.n	800617c <__sfp+0x14>
 800618c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006190:	b16d      	cbz	r5, 80061ae <__sfp+0x46>
 8006192:	3468      	adds	r4, #104	; 0x68
 8006194:	e7f4      	b.n	8006180 <__sfp+0x18>
 8006196:	2104      	movs	r1, #4
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ff9f 	bl	80060dc <__sfmoreglue>
 800619e:	6030      	str	r0, [r6, #0]
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d1f1      	bne.n	8006188 <__sfp+0x20>
 80061a4:	230c      	movs	r3, #12
 80061a6:	4604      	mov	r4, r0
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	4620      	mov	r0, r4
 80061ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ae:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <__sfp+0x74>)
 80061b0:	6665      	str	r5, [r4, #100]	; 0x64
 80061b2:	e9c4 5500 	strd	r5, r5, [r4]
 80061b6:	60a5      	str	r5, [r4, #8]
 80061b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80061bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80061c0:	2208      	movs	r2, #8
 80061c2:	4629      	mov	r1, r5
 80061c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061c8:	f7fe fc02 	bl	80049d0 <memset>
 80061cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061d4:	e7e9      	b.n	80061aa <__sfp+0x42>
 80061d6:	bf00      	nop
 80061d8:	08006dec 	.word	0x08006dec
 80061dc:	ffff0001 	.word	0xffff0001

080061e0 <_fwalk_reent>:
 80061e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e4:	4680      	mov	r8, r0
 80061e6:	4689      	mov	r9, r1
 80061e8:	2600      	movs	r6, #0
 80061ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061ee:	b914      	cbnz	r4, 80061f6 <_fwalk_reent+0x16>
 80061f0:	4630      	mov	r0, r6
 80061f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061fa:	3f01      	subs	r7, #1
 80061fc:	d501      	bpl.n	8006202 <_fwalk_reent+0x22>
 80061fe:	6824      	ldr	r4, [r4, #0]
 8006200:	e7f5      	b.n	80061ee <_fwalk_reent+0xe>
 8006202:	89ab      	ldrh	r3, [r5, #12]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d907      	bls.n	8006218 <_fwalk_reent+0x38>
 8006208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800620c:	3301      	adds	r3, #1
 800620e:	d003      	beq.n	8006218 <_fwalk_reent+0x38>
 8006210:	4629      	mov	r1, r5
 8006212:	4640      	mov	r0, r8
 8006214:	47c8      	blx	r9
 8006216:	4306      	orrs	r6, r0
 8006218:	3568      	adds	r5, #104	; 0x68
 800621a:	e7ee      	b.n	80061fa <_fwalk_reent+0x1a>

0800621c <_localeconv_r>:
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <_localeconv_r+0x14>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6a18      	ldr	r0, [r3, #32]
 8006222:	4b04      	ldr	r3, [pc, #16]	; (8006234 <_localeconv_r+0x18>)
 8006224:	2800      	cmp	r0, #0
 8006226:	bf08      	it	eq
 8006228:	4618      	moveq	r0, r3
 800622a:	30f0      	adds	r0, #240	; 0xf0
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000038 	.word	0x20000038
 8006234:	2000009c 	.word	0x2000009c

08006238 <__swhatbuf_r>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	460e      	mov	r6, r1
 800623c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006240:	b096      	sub	sp, #88	; 0x58
 8006242:	2900      	cmp	r1, #0
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	da07      	bge.n	800625a <__swhatbuf_r+0x22>
 800624a:	2300      	movs	r3, #0
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	89b3      	ldrh	r3, [r6, #12]
 8006250:	061a      	lsls	r2, r3, #24
 8006252:	d410      	bmi.n	8006276 <__swhatbuf_r+0x3e>
 8006254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006258:	e00e      	b.n	8006278 <__swhatbuf_r+0x40>
 800625a:	466a      	mov	r2, sp
 800625c:	f000 fc88 	bl	8006b70 <_fstat_r>
 8006260:	2800      	cmp	r0, #0
 8006262:	dbf2      	blt.n	800624a <__swhatbuf_r+0x12>
 8006264:	9a01      	ldr	r2, [sp, #4]
 8006266:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800626a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800626e:	425a      	negs	r2, r3
 8006270:	415a      	adcs	r2, r3
 8006272:	602a      	str	r2, [r5, #0]
 8006274:	e7ee      	b.n	8006254 <__swhatbuf_r+0x1c>
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	2000      	movs	r0, #0
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	b016      	add	sp, #88	; 0x58
 800627e:	bd70      	pop	{r4, r5, r6, pc}

08006280 <__smakebuf_r>:
 8006280:	898b      	ldrh	r3, [r1, #12]
 8006282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006284:	079d      	lsls	r5, r3, #30
 8006286:	4606      	mov	r6, r0
 8006288:	460c      	mov	r4, r1
 800628a:	d507      	bpl.n	800629c <__smakebuf_r+0x1c>
 800628c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	2301      	movs	r3, #1
 8006296:	6163      	str	r3, [r4, #20]
 8006298:	b002      	add	sp, #8
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	ab01      	add	r3, sp, #4
 800629e:	466a      	mov	r2, sp
 80062a0:	f7ff ffca 	bl	8006238 <__swhatbuf_r>
 80062a4:	9900      	ldr	r1, [sp, #0]
 80062a6:	4605      	mov	r5, r0
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 fb85 	bl	80069b8 <_malloc_r>
 80062ae:	b948      	cbnz	r0, 80062c4 <__smakebuf_r+0x44>
 80062b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b4:	059a      	lsls	r2, r3, #22
 80062b6:	d4ef      	bmi.n	8006298 <__smakebuf_r+0x18>
 80062b8:	f023 0303 	bic.w	r3, r3, #3
 80062bc:	f043 0302 	orr.w	r3, r3, #2
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	e7e3      	b.n	800628c <__smakebuf_r+0xc>
 80062c4:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <__smakebuf_r+0x7c>)
 80062c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	6020      	str	r0, [r4, #0]
 80062cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d0:	81a3      	strh	r3, [r4, #12]
 80062d2:	9b00      	ldr	r3, [sp, #0]
 80062d4:	6120      	str	r0, [r4, #16]
 80062d6:	6163      	str	r3, [r4, #20]
 80062d8:	9b01      	ldr	r3, [sp, #4]
 80062da:	b15b      	cbz	r3, 80062f4 <__smakebuf_r+0x74>
 80062dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e0:	4630      	mov	r0, r6
 80062e2:	f000 fc57 	bl	8006b94 <_isatty_r>
 80062e6:	b128      	cbz	r0, 80062f4 <__smakebuf_r+0x74>
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	81a3      	strh	r3, [r4, #12]
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	431d      	orrs	r5, r3
 80062f8:	81a5      	strh	r5, [r4, #12]
 80062fa:	e7cd      	b.n	8006298 <__smakebuf_r+0x18>
 80062fc:	080060d1 	.word	0x080060d1

08006300 <malloc>:
 8006300:	4b02      	ldr	r3, [pc, #8]	; (800630c <malloc+0xc>)
 8006302:	4601      	mov	r1, r0
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	f000 bb57 	b.w	80069b8 <_malloc_r>
 800630a:	bf00      	nop
 800630c:	20000038 	.word	0x20000038

08006310 <__ascii_mbtowc>:
 8006310:	b082      	sub	sp, #8
 8006312:	b901      	cbnz	r1, 8006316 <__ascii_mbtowc+0x6>
 8006314:	a901      	add	r1, sp, #4
 8006316:	b142      	cbz	r2, 800632a <__ascii_mbtowc+0x1a>
 8006318:	b14b      	cbz	r3, 800632e <__ascii_mbtowc+0x1e>
 800631a:	7813      	ldrb	r3, [r2, #0]
 800631c:	600b      	str	r3, [r1, #0]
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	1c10      	adds	r0, r2, #0
 8006322:	bf18      	it	ne
 8006324:	2001      	movne	r0, #1
 8006326:	b002      	add	sp, #8
 8006328:	4770      	bx	lr
 800632a:	4610      	mov	r0, r2
 800632c:	e7fb      	b.n	8006326 <__ascii_mbtowc+0x16>
 800632e:	f06f 0001 	mvn.w	r0, #1
 8006332:	e7f8      	b.n	8006326 <__ascii_mbtowc+0x16>

08006334 <memcpy>:
 8006334:	b510      	push	{r4, lr}
 8006336:	1e43      	subs	r3, r0, #1
 8006338:	440a      	add	r2, r1
 800633a:	4291      	cmp	r1, r2
 800633c:	d100      	bne.n	8006340 <memcpy+0xc>
 800633e:	bd10      	pop	{r4, pc}
 8006340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006348:	e7f7      	b.n	800633a <memcpy+0x6>

0800634a <_Balloc>:
 800634a:	b570      	push	{r4, r5, r6, lr}
 800634c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800634e:	4604      	mov	r4, r0
 8006350:	460e      	mov	r6, r1
 8006352:	b93d      	cbnz	r5, 8006364 <_Balloc+0x1a>
 8006354:	2010      	movs	r0, #16
 8006356:	f7ff ffd3 	bl	8006300 <malloc>
 800635a:	6260      	str	r0, [r4, #36]	; 0x24
 800635c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006360:	6005      	str	r5, [r0, #0]
 8006362:	60c5      	str	r5, [r0, #12]
 8006364:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006366:	68eb      	ldr	r3, [r5, #12]
 8006368:	b183      	cbz	r3, 800638c <_Balloc+0x42>
 800636a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006372:	b9b8      	cbnz	r0, 80063a4 <_Balloc+0x5a>
 8006374:	2101      	movs	r1, #1
 8006376:	fa01 f506 	lsl.w	r5, r1, r6
 800637a:	1d6a      	adds	r2, r5, #5
 800637c:	0092      	lsls	r2, r2, #2
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fabf 	bl	8006902 <_calloc_r>
 8006384:	b160      	cbz	r0, 80063a0 <_Balloc+0x56>
 8006386:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800638a:	e00e      	b.n	80063aa <_Balloc+0x60>
 800638c:	2221      	movs	r2, #33	; 0x21
 800638e:	2104      	movs	r1, #4
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fab6 	bl	8006902 <_calloc_r>
 8006396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006398:	60e8      	str	r0, [r5, #12]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e4      	bne.n	800636a <_Balloc+0x20>
 80063a0:	2000      	movs	r0, #0
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	6802      	ldr	r2, [r0, #0]
 80063a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80063aa:	2300      	movs	r3, #0
 80063ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063b0:	e7f7      	b.n	80063a2 <_Balloc+0x58>

080063b2 <_Bfree>:
 80063b2:	b570      	push	{r4, r5, r6, lr}
 80063b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80063b6:	4606      	mov	r6, r0
 80063b8:	460d      	mov	r5, r1
 80063ba:	b93c      	cbnz	r4, 80063cc <_Bfree+0x1a>
 80063bc:	2010      	movs	r0, #16
 80063be:	f7ff ff9f 	bl	8006300 <malloc>
 80063c2:	6270      	str	r0, [r6, #36]	; 0x24
 80063c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063c8:	6004      	str	r4, [r0, #0]
 80063ca:	60c4      	str	r4, [r0, #12]
 80063cc:	b13d      	cbz	r5, 80063de <_Bfree+0x2c>
 80063ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80063d0:	686a      	ldr	r2, [r5, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063d8:	6029      	str	r1, [r5, #0]
 80063da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80063de:	bd70      	pop	{r4, r5, r6, pc}

080063e0 <__multadd>:
 80063e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e4:	461f      	mov	r7, r3
 80063e6:	4606      	mov	r6, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	2300      	movs	r3, #0
 80063ec:	690d      	ldr	r5, [r1, #16]
 80063ee:	f101 0c14 	add.w	ip, r1, #20
 80063f2:	f8dc 0000 	ldr.w	r0, [ip]
 80063f6:	3301      	adds	r3, #1
 80063f8:	b281      	uxth	r1, r0
 80063fa:	fb02 7101 	mla	r1, r2, r1, r7
 80063fe:	0c00      	lsrs	r0, r0, #16
 8006400:	0c0f      	lsrs	r7, r1, #16
 8006402:	fb02 7000 	mla	r0, r2, r0, r7
 8006406:	b289      	uxth	r1, r1
 8006408:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800640c:	429d      	cmp	r5, r3
 800640e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006412:	f84c 1b04 	str.w	r1, [ip], #4
 8006416:	dcec      	bgt.n	80063f2 <__multadd+0x12>
 8006418:	b1d7      	cbz	r7, 8006450 <__multadd+0x70>
 800641a:	68a3      	ldr	r3, [r4, #8]
 800641c:	42ab      	cmp	r3, r5
 800641e:	dc12      	bgt.n	8006446 <__multadd+0x66>
 8006420:	6861      	ldr	r1, [r4, #4]
 8006422:	4630      	mov	r0, r6
 8006424:	3101      	adds	r1, #1
 8006426:	f7ff ff90 	bl	800634a <_Balloc>
 800642a:	4680      	mov	r8, r0
 800642c:	6922      	ldr	r2, [r4, #16]
 800642e:	f104 010c 	add.w	r1, r4, #12
 8006432:	3202      	adds	r2, #2
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	300c      	adds	r0, #12
 8006438:	f7ff ff7c 	bl	8006334 <memcpy>
 800643c:	4621      	mov	r1, r4
 800643e:	4630      	mov	r0, r6
 8006440:	f7ff ffb7 	bl	80063b2 <_Bfree>
 8006444:	4644      	mov	r4, r8
 8006446:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800644a:	3501      	adds	r5, #1
 800644c:	615f      	str	r7, [r3, #20]
 800644e:	6125      	str	r5, [r4, #16]
 8006450:	4620      	mov	r0, r4
 8006452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006456 <__hi0bits>:
 8006456:	0c02      	lsrs	r2, r0, #16
 8006458:	0412      	lsls	r2, r2, #16
 800645a:	4603      	mov	r3, r0
 800645c:	b9b2      	cbnz	r2, 800648c <__hi0bits+0x36>
 800645e:	0403      	lsls	r3, r0, #16
 8006460:	2010      	movs	r0, #16
 8006462:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006466:	bf04      	itt	eq
 8006468:	021b      	lsleq	r3, r3, #8
 800646a:	3008      	addeq	r0, #8
 800646c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006470:	bf04      	itt	eq
 8006472:	011b      	lsleq	r3, r3, #4
 8006474:	3004      	addeq	r0, #4
 8006476:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800647a:	bf04      	itt	eq
 800647c:	009b      	lsleq	r3, r3, #2
 800647e:	3002      	addeq	r0, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	db06      	blt.n	8006492 <__hi0bits+0x3c>
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	d503      	bpl.n	8006490 <__hi0bits+0x3a>
 8006488:	3001      	adds	r0, #1
 800648a:	4770      	bx	lr
 800648c:	2000      	movs	r0, #0
 800648e:	e7e8      	b.n	8006462 <__hi0bits+0xc>
 8006490:	2020      	movs	r0, #32
 8006492:	4770      	bx	lr

08006494 <__lo0bits>:
 8006494:	6803      	ldr	r3, [r0, #0]
 8006496:	4601      	mov	r1, r0
 8006498:	f013 0207 	ands.w	r2, r3, #7
 800649c:	d00b      	beq.n	80064b6 <__lo0bits+0x22>
 800649e:	07da      	lsls	r2, r3, #31
 80064a0:	d423      	bmi.n	80064ea <__lo0bits+0x56>
 80064a2:	0798      	lsls	r0, r3, #30
 80064a4:	bf49      	itett	mi
 80064a6:	085b      	lsrmi	r3, r3, #1
 80064a8:	089b      	lsrpl	r3, r3, #2
 80064aa:	2001      	movmi	r0, #1
 80064ac:	600b      	strmi	r3, [r1, #0]
 80064ae:	bf5c      	itt	pl
 80064b0:	600b      	strpl	r3, [r1, #0]
 80064b2:	2002      	movpl	r0, #2
 80064b4:	4770      	bx	lr
 80064b6:	b298      	uxth	r0, r3
 80064b8:	b9a8      	cbnz	r0, 80064e6 <__lo0bits+0x52>
 80064ba:	2010      	movs	r0, #16
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064c2:	bf04      	itt	eq
 80064c4:	0a1b      	lsreq	r3, r3, #8
 80064c6:	3008      	addeq	r0, #8
 80064c8:	071a      	lsls	r2, r3, #28
 80064ca:	bf04      	itt	eq
 80064cc:	091b      	lsreq	r3, r3, #4
 80064ce:	3004      	addeq	r0, #4
 80064d0:	079a      	lsls	r2, r3, #30
 80064d2:	bf04      	itt	eq
 80064d4:	089b      	lsreq	r3, r3, #2
 80064d6:	3002      	addeq	r0, #2
 80064d8:	07da      	lsls	r2, r3, #31
 80064da:	d402      	bmi.n	80064e2 <__lo0bits+0x4e>
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	d006      	beq.n	80064ee <__lo0bits+0x5a>
 80064e0:	3001      	adds	r0, #1
 80064e2:	600b      	str	r3, [r1, #0]
 80064e4:	4770      	bx	lr
 80064e6:	4610      	mov	r0, r2
 80064e8:	e7e9      	b.n	80064be <__lo0bits+0x2a>
 80064ea:	2000      	movs	r0, #0
 80064ec:	4770      	bx	lr
 80064ee:	2020      	movs	r0, #32
 80064f0:	4770      	bx	lr

080064f2 <__i2b>:
 80064f2:	b510      	push	{r4, lr}
 80064f4:	460c      	mov	r4, r1
 80064f6:	2101      	movs	r1, #1
 80064f8:	f7ff ff27 	bl	800634a <_Balloc>
 80064fc:	2201      	movs	r2, #1
 80064fe:	6144      	str	r4, [r0, #20]
 8006500:	6102      	str	r2, [r0, #16]
 8006502:	bd10      	pop	{r4, pc}

08006504 <__multiply>:
 8006504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	4614      	mov	r4, r2
 800650a:	690a      	ldr	r2, [r1, #16]
 800650c:	6923      	ldr	r3, [r4, #16]
 800650e:	4688      	mov	r8, r1
 8006510:	429a      	cmp	r2, r3
 8006512:	bfbe      	ittt	lt
 8006514:	460b      	movlt	r3, r1
 8006516:	46a0      	movlt	r8, r4
 8006518:	461c      	movlt	r4, r3
 800651a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800651e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006522:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006526:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800652a:	eb07 0609 	add.w	r6, r7, r9
 800652e:	42b3      	cmp	r3, r6
 8006530:	bfb8      	it	lt
 8006532:	3101      	addlt	r1, #1
 8006534:	f7ff ff09 	bl	800634a <_Balloc>
 8006538:	f100 0514 	add.w	r5, r0, #20
 800653c:	462b      	mov	r3, r5
 800653e:	2200      	movs	r2, #0
 8006540:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006544:	4573      	cmp	r3, lr
 8006546:	d316      	bcc.n	8006576 <__multiply+0x72>
 8006548:	f104 0214 	add.w	r2, r4, #20
 800654c:	f108 0114 	add.w	r1, r8, #20
 8006550:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006554:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	9b00      	ldr	r3, [sp, #0]
 800655c:	9201      	str	r2, [sp, #4]
 800655e:	4293      	cmp	r3, r2
 8006560:	d80c      	bhi.n	800657c <__multiply+0x78>
 8006562:	2e00      	cmp	r6, #0
 8006564:	dd03      	ble.n	800656e <__multiply+0x6a>
 8006566:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800656a:	2b00      	cmp	r3, #0
 800656c:	d05d      	beq.n	800662a <__multiply+0x126>
 800656e:	6106      	str	r6, [r0, #16]
 8006570:	b003      	add	sp, #12
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	f843 2b04 	str.w	r2, [r3], #4
 800657a:	e7e3      	b.n	8006544 <__multiply+0x40>
 800657c:	f8b2 b000 	ldrh.w	fp, [r2]
 8006580:	f1bb 0f00 	cmp.w	fp, #0
 8006584:	d023      	beq.n	80065ce <__multiply+0xca>
 8006586:	4689      	mov	r9, r1
 8006588:	46ac      	mov	ip, r5
 800658a:	f04f 0800 	mov.w	r8, #0
 800658e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006592:	f8dc a000 	ldr.w	sl, [ip]
 8006596:	b2a3      	uxth	r3, r4
 8006598:	fa1f fa8a 	uxth.w	sl, sl
 800659c:	fb0b a303 	mla	r3, fp, r3, sl
 80065a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80065a4:	f8dc 4000 	ldr.w	r4, [ip]
 80065a8:	4443      	add	r3, r8
 80065aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065ae:	fb0b 840a 	mla	r4, fp, sl, r8
 80065b2:	46e2      	mov	sl, ip
 80065b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065be:	454f      	cmp	r7, r9
 80065c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065c4:	f84a 3b04 	str.w	r3, [sl], #4
 80065c8:	d82b      	bhi.n	8006622 <__multiply+0x11e>
 80065ca:	f8cc 8004 	str.w	r8, [ip, #4]
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	3204      	adds	r2, #4
 80065d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80065d6:	f1ba 0f00 	cmp.w	sl, #0
 80065da:	d020      	beq.n	800661e <__multiply+0x11a>
 80065dc:	4689      	mov	r9, r1
 80065de:	46a8      	mov	r8, r5
 80065e0:	f04f 0b00 	mov.w	fp, #0
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	f8b9 c000 	ldrh.w	ip, [r9]
 80065ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80065f4:	46c4      	mov	ip, r8
 80065f6:	445c      	add	r4, fp
 80065f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065fc:	f84c 3b04 	str.w	r3, [ip], #4
 8006600:	f859 3b04 	ldr.w	r3, [r9], #4
 8006604:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	fb0a b303 	mla	r3, sl, r3, fp
 800660e:	454f      	cmp	r7, r9
 8006610:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006614:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006618:	d805      	bhi.n	8006626 <__multiply+0x122>
 800661a:	f8c8 3004 	str.w	r3, [r8, #4]
 800661e:	3504      	adds	r5, #4
 8006620:	e79b      	b.n	800655a <__multiply+0x56>
 8006622:	46d4      	mov	ip, sl
 8006624:	e7b3      	b.n	800658e <__multiply+0x8a>
 8006626:	46e0      	mov	r8, ip
 8006628:	e7dd      	b.n	80065e6 <__multiply+0xe2>
 800662a:	3e01      	subs	r6, #1
 800662c:	e799      	b.n	8006562 <__multiply+0x5e>
	...

08006630 <__pow5mult>:
 8006630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006634:	4615      	mov	r5, r2
 8006636:	f012 0203 	ands.w	r2, r2, #3
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	d007      	beq.n	8006650 <__pow5mult+0x20>
 8006640:	4c21      	ldr	r4, [pc, #132]	; (80066c8 <__pow5mult+0x98>)
 8006642:	3a01      	subs	r2, #1
 8006644:	2300      	movs	r3, #0
 8006646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800664a:	f7ff fec9 	bl	80063e0 <__multadd>
 800664e:	4607      	mov	r7, r0
 8006650:	10ad      	asrs	r5, r5, #2
 8006652:	d035      	beq.n	80066c0 <__pow5mult+0x90>
 8006654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006656:	b93c      	cbnz	r4, 8006668 <__pow5mult+0x38>
 8006658:	2010      	movs	r0, #16
 800665a:	f7ff fe51 	bl	8006300 <malloc>
 800665e:	6270      	str	r0, [r6, #36]	; 0x24
 8006660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006664:	6004      	str	r4, [r0, #0]
 8006666:	60c4      	str	r4, [r0, #12]
 8006668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800666c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006670:	b94c      	cbnz	r4, 8006686 <__pow5mult+0x56>
 8006672:	f240 2171 	movw	r1, #625	; 0x271
 8006676:	4630      	mov	r0, r6
 8006678:	f7ff ff3b 	bl	80064f2 <__i2b>
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	f8c8 0008 	str.w	r0, [r8, #8]
 8006684:	6003      	str	r3, [r0, #0]
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	07eb      	lsls	r3, r5, #31
 800668c:	d50a      	bpl.n	80066a4 <__pow5mult+0x74>
 800668e:	4639      	mov	r1, r7
 8006690:	4622      	mov	r2, r4
 8006692:	4630      	mov	r0, r6
 8006694:	f7ff ff36 	bl	8006504 <__multiply>
 8006698:	4681      	mov	r9, r0
 800669a:	4639      	mov	r1, r7
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fe88 	bl	80063b2 <_Bfree>
 80066a2:	464f      	mov	r7, r9
 80066a4:	106d      	asrs	r5, r5, #1
 80066a6:	d00b      	beq.n	80066c0 <__pow5mult+0x90>
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	b938      	cbnz	r0, 80066bc <__pow5mult+0x8c>
 80066ac:	4622      	mov	r2, r4
 80066ae:	4621      	mov	r1, r4
 80066b0:	4630      	mov	r0, r6
 80066b2:	f7ff ff27 	bl	8006504 <__multiply>
 80066b6:	6020      	str	r0, [r4, #0]
 80066b8:	f8c0 8000 	str.w	r8, [r0]
 80066bc:	4604      	mov	r4, r0
 80066be:	e7e4      	b.n	800668a <__pow5mult+0x5a>
 80066c0:	4638      	mov	r0, r7
 80066c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c6:	bf00      	nop
 80066c8:	08006f70 	.word	0x08006f70

080066cc <__lshift>:
 80066cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	460c      	mov	r4, r1
 80066d2:	4607      	mov	r7, r0
 80066d4:	4616      	mov	r6, r2
 80066d6:	6923      	ldr	r3, [r4, #16]
 80066d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066dc:	eb0a 0903 	add.w	r9, sl, r3
 80066e0:	6849      	ldr	r1, [r1, #4]
 80066e2:	68a3      	ldr	r3, [r4, #8]
 80066e4:	f109 0501 	add.w	r5, r9, #1
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	db32      	blt.n	8006752 <__lshift+0x86>
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7ff fe2c 	bl	800634a <_Balloc>
 80066f2:	2300      	movs	r3, #0
 80066f4:	4680      	mov	r8, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	f100 0114 	add.w	r1, r0, #20
 80066fc:	4553      	cmp	r3, sl
 80066fe:	db2b      	blt.n	8006758 <__lshift+0x8c>
 8006700:	6920      	ldr	r0, [r4, #16]
 8006702:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006706:	f104 0314 	add.w	r3, r4, #20
 800670a:	f016 021f 	ands.w	r2, r6, #31
 800670e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006712:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006716:	d025      	beq.n	8006764 <__lshift+0x98>
 8006718:	2000      	movs	r0, #0
 800671a:	f1c2 0e20 	rsb	lr, r2, #32
 800671e:	468a      	mov	sl, r1
 8006720:	681e      	ldr	r6, [r3, #0]
 8006722:	4096      	lsls	r6, r2
 8006724:	4330      	orrs	r0, r6
 8006726:	f84a 0b04 	str.w	r0, [sl], #4
 800672a:	f853 0b04 	ldr.w	r0, [r3], #4
 800672e:	459c      	cmp	ip, r3
 8006730:	fa20 f00e 	lsr.w	r0, r0, lr
 8006734:	d814      	bhi.n	8006760 <__lshift+0x94>
 8006736:	6048      	str	r0, [r1, #4]
 8006738:	b108      	cbz	r0, 800673e <__lshift+0x72>
 800673a:	f109 0502 	add.w	r5, r9, #2
 800673e:	3d01      	subs	r5, #1
 8006740:	4638      	mov	r0, r7
 8006742:	f8c8 5010 	str.w	r5, [r8, #16]
 8006746:	4621      	mov	r1, r4
 8006748:	f7ff fe33 	bl	80063b2 <_Bfree>
 800674c:	4640      	mov	r0, r8
 800674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006752:	3101      	adds	r1, #1
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	e7c7      	b.n	80066e8 <__lshift+0x1c>
 8006758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800675c:	3301      	adds	r3, #1
 800675e:	e7cd      	b.n	80066fc <__lshift+0x30>
 8006760:	4651      	mov	r1, sl
 8006762:	e7dc      	b.n	800671e <__lshift+0x52>
 8006764:	3904      	subs	r1, #4
 8006766:	f853 2b04 	ldr.w	r2, [r3], #4
 800676a:	459c      	cmp	ip, r3
 800676c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006770:	d8f9      	bhi.n	8006766 <__lshift+0x9a>
 8006772:	e7e4      	b.n	800673e <__lshift+0x72>

08006774 <__mcmp>:
 8006774:	6903      	ldr	r3, [r0, #16]
 8006776:	690a      	ldr	r2, [r1, #16]
 8006778:	b530      	push	{r4, r5, lr}
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	d10c      	bne.n	8006798 <__mcmp+0x24>
 800677e:	0092      	lsls	r2, r2, #2
 8006780:	3014      	adds	r0, #20
 8006782:	3114      	adds	r1, #20
 8006784:	1884      	adds	r4, r0, r2
 8006786:	4411      	add	r1, r2
 8006788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800678c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006790:	4295      	cmp	r5, r2
 8006792:	d003      	beq.n	800679c <__mcmp+0x28>
 8006794:	d305      	bcc.n	80067a2 <__mcmp+0x2e>
 8006796:	2301      	movs	r3, #1
 8006798:	4618      	mov	r0, r3
 800679a:	bd30      	pop	{r4, r5, pc}
 800679c:	42a0      	cmp	r0, r4
 800679e:	d3f3      	bcc.n	8006788 <__mcmp+0x14>
 80067a0:	e7fa      	b.n	8006798 <__mcmp+0x24>
 80067a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067a6:	e7f7      	b.n	8006798 <__mcmp+0x24>

080067a8 <__mdiff>:
 80067a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	460d      	mov	r5, r1
 80067ae:	4607      	mov	r7, r0
 80067b0:	4611      	mov	r1, r2
 80067b2:	4628      	mov	r0, r5
 80067b4:	4614      	mov	r4, r2
 80067b6:	f7ff ffdd 	bl	8006774 <__mcmp>
 80067ba:	1e06      	subs	r6, r0, #0
 80067bc:	d108      	bne.n	80067d0 <__mdiff+0x28>
 80067be:	4631      	mov	r1, r6
 80067c0:	4638      	mov	r0, r7
 80067c2:	f7ff fdc2 	bl	800634a <_Balloc>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d0:	bfa4      	itt	ge
 80067d2:	4623      	movge	r3, r4
 80067d4:	462c      	movge	r4, r5
 80067d6:	4638      	mov	r0, r7
 80067d8:	6861      	ldr	r1, [r4, #4]
 80067da:	bfa6      	itte	ge
 80067dc:	461d      	movge	r5, r3
 80067de:	2600      	movge	r6, #0
 80067e0:	2601      	movlt	r6, #1
 80067e2:	f7ff fdb2 	bl	800634a <_Balloc>
 80067e6:	f04f 0e00 	mov.w	lr, #0
 80067ea:	60c6      	str	r6, [r0, #12]
 80067ec:	692b      	ldr	r3, [r5, #16]
 80067ee:	6926      	ldr	r6, [r4, #16]
 80067f0:	f104 0214 	add.w	r2, r4, #20
 80067f4:	f105 0914 	add.w	r9, r5, #20
 80067f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006800:	f100 0114 	add.w	r1, r0, #20
 8006804:	f852 ab04 	ldr.w	sl, [r2], #4
 8006808:	f859 5b04 	ldr.w	r5, [r9], #4
 800680c:	fa1f f38a 	uxth.w	r3, sl
 8006810:	4473      	add	r3, lr
 8006812:	b2ac      	uxth	r4, r5
 8006814:	1b1b      	subs	r3, r3, r4
 8006816:	0c2c      	lsrs	r4, r5, #16
 8006818:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800681c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006820:	b29b      	uxth	r3, r3
 8006822:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006826:	45c8      	cmp	r8, r9
 8006828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800682c:	4694      	mov	ip, r2
 800682e:	f841 4b04 	str.w	r4, [r1], #4
 8006832:	d8e7      	bhi.n	8006804 <__mdiff+0x5c>
 8006834:	45bc      	cmp	ip, r7
 8006836:	d304      	bcc.n	8006842 <__mdiff+0x9a>
 8006838:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800683c:	b183      	cbz	r3, 8006860 <__mdiff+0xb8>
 800683e:	6106      	str	r6, [r0, #16]
 8006840:	e7c4      	b.n	80067cc <__mdiff+0x24>
 8006842:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006846:	b2a2      	uxth	r2, r4
 8006848:	4472      	add	r2, lr
 800684a:	1413      	asrs	r3, r2, #16
 800684c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006850:	b292      	uxth	r2, r2
 8006852:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006856:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800685a:	f841 2b04 	str.w	r2, [r1], #4
 800685e:	e7e9      	b.n	8006834 <__mdiff+0x8c>
 8006860:	3e01      	subs	r6, #1
 8006862:	e7e9      	b.n	8006838 <__mdiff+0x90>

08006864 <__d2b>:
 8006864:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006868:	461c      	mov	r4, r3
 800686a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800686e:	2101      	movs	r1, #1
 8006870:	4690      	mov	r8, r2
 8006872:	f7ff fd6a 	bl	800634a <_Balloc>
 8006876:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800687a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800687e:	4607      	mov	r7, r0
 8006880:	bb34      	cbnz	r4, 80068d0 <__d2b+0x6c>
 8006882:	9201      	str	r2, [sp, #4]
 8006884:	f1b8 0200 	subs.w	r2, r8, #0
 8006888:	d027      	beq.n	80068da <__d2b+0x76>
 800688a:	a802      	add	r0, sp, #8
 800688c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006890:	f7ff fe00 	bl	8006494 <__lo0bits>
 8006894:	9900      	ldr	r1, [sp, #0]
 8006896:	b1f0      	cbz	r0, 80068d6 <__d2b+0x72>
 8006898:	9a01      	ldr	r2, [sp, #4]
 800689a:	f1c0 0320 	rsb	r3, r0, #32
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	430b      	orrs	r3, r1
 80068a4:	40c2      	lsrs	r2, r0
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf14      	ite	ne
 80068b0:	2102      	movne	r1, #2
 80068b2:	2101      	moveq	r1, #1
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	6139      	str	r1, [r7, #16]
 80068b8:	b1c4      	cbz	r4, 80068ec <__d2b+0x88>
 80068ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80068be:	4404      	add	r4, r0
 80068c0:	6034      	str	r4, [r6, #0]
 80068c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068c6:	6028      	str	r0, [r5, #0]
 80068c8:	4638      	mov	r0, r7
 80068ca:	b002      	add	sp, #8
 80068cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068d4:	e7d5      	b.n	8006882 <__d2b+0x1e>
 80068d6:	6179      	str	r1, [r7, #20]
 80068d8:	e7e7      	b.n	80068aa <__d2b+0x46>
 80068da:	a801      	add	r0, sp, #4
 80068dc:	f7ff fdda 	bl	8006494 <__lo0bits>
 80068e0:	2101      	movs	r1, #1
 80068e2:	9b01      	ldr	r3, [sp, #4]
 80068e4:	6139      	str	r1, [r7, #16]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	3020      	adds	r0, #32
 80068ea:	e7e5      	b.n	80068b8 <__d2b+0x54>
 80068ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80068f4:	6030      	str	r0, [r6, #0]
 80068f6:	6918      	ldr	r0, [r3, #16]
 80068f8:	f7ff fdad 	bl	8006456 <__hi0bits>
 80068fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006900:	e7e1      	b.n	80068c6 <__d2b+0x62>

08006902 <_calloc_r>:
 8006902:	b538      	push	{r3, r4, r5, lr}
 8006904:	fb02 f401 	mul.w	r4, r2, r1
 8006908:	4621      	mov	r1, r4
 800690a:	f000 f855 	bl	80069b8 <_malloc_r>
 800690e:	4605      	mov	r5, r0
 8006910:	b118      	cbz	r0, 800691a <_calloc_r+0x18>
 8006912:	4622      	mov	r2, r4
 8006914:	2100      	movs	r1, #0
 8006916:	f7fe f85b 	bl	80049d0 <memset>
 800691a:	4628      	mov	r0, r5
 800691c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006920 <_free_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4605      	mov	r5, r0
 8006924:	2900      	cmp	r1, #0
 8006926:	d043      	beq.n	80069b0 <_free_r+0x90>
 8006928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800692c:	1f0c      	subs	r4, r1, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfb8      	it	lt
 8006932:	18e4      	addlt	r4, r4, r3
 8006934:	f000 f950 	bl	8006bd8 <__malloc_lock>
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <_free_r+0x94>)
 800693a:	6813      	ldr	r3, [r2, #0]
 800693c:	4610      	mov	r0, r2
 800693e:	b933      	cbnz	r3, 800694e <_free_r+0x2e>
 8006940:	6063      	str	r3, [r4, #4]
 8006942:	6014      	str	r4, [r2, #0]
 8006944:	4628      	mov	r0, r5
 8006946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800694a:	f000 b946 	b.w	8006bda <__malloc_unlock>
 800694e:	42a3      	cmp	r3, r4
 8006950:	d90b      	bls.n	800696a <_free_r+0x4a>
 8006952:	6821      	ldr	r1, [r4, #0]
 8006954:	1862      	adds	r2, r4, r1
 8006956:	4293      	cmp	r3, r2
 8006958:	bf01      	itttt	eq
 800695a:	681a      	ldreq	r2, [r3, #0]
 800695c:	685b      	ldreq	r3, [r3, #4]
 800695e:	1852      	addeq	r2, r2, r1
 8006960:	6022      	streq	r2, [r4, #0]
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	6004      	str	r4, [r0, #0]
 8006966:	e7ed      	b.n	8006944 <_free_r+0x24>
 8006968:	4613      	mov	r3, r2
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	b10a      	cbz	r2, 8006972 <_free_r+0x52>
 800696e:	42a2      	cmp	r2, r4
 8006970:	d9fa      	bls.n	8006968 <_free_r+0x48>
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	1858      	adds	r0, r3, r1
 8006976:	42a0      	cmp	r0, r4
 8006978:	d10b      	bne.n	8006992 <_free_r+0x72>
 800697a:	6820      	ldr	r0, [r4, #0]
 800697c:	4401      	add	r1, r0
 800697e:	1858      	adds	r0, r3, r1
 8006980:	4282      	cmp	r2, r0
 8006982:	6019      	str	r1, [r3, #0]
 8006984:	d1de      	bne.n	8006944 <_free_r+0x24>
 8006986:	6810      	ldr	r0, [r2, #0]
 8006988:	6852      	ldr	r2, [r2, #4]
 800698a:	4401      	add	r1, r0
 800698c:	6019      	str	r1, [r3, #0]
 800698e:	605a      	str	r2, [r3, #4]
 8006990:	e7d8      	b.n	8006944 <_free_r+0x24>
 8006992:	d902      	bls.n	800699a <_free_r+0x7a>
 8006994:	230c      	movs	r3, #12
 8006996:	602b      	str	r3, [r5, #0]
 8006998:	e7d4      	b.n	8006944 <_free_r+0x24>
 800699a:	6820      	ldr	r0, [r4, #0]
 800699c:	1821      	adds	r1, r4, r0
 800699e:	428a      	cmp	r2, r1
 80069a0:	bf01      	itttt	eq
 80069a2:	6811      	ldreq	r1, [r2, #0]
 80069a4:	6852      	ldreq	r2, [r2, #4]
 80069a6:	1809      	addeq	r1, r1, r0
 80069a8:	6021      	streq	r1, [r4, #0]
 80069aa:	6062      	str	r2, [r4, #4]
 80069ac:	605c      	str	r4, [r3, #4]
 80069ae:	e7c9      	b.n	8006944 <_free_r+0x24>
 80069b0:	bd38      	pop	{r3, r4, r5, pc}
 80069b2:	bf00      	nop
 80069b4:	200002dc 	.word	0x200002dc

080069b8 <_malloc_r>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	1ccd      	adds	r5, r1, #3
 80069bc:	f025 0503 	bic.w	r5, r5, #3
 80069c0:	3508      	adds	r5, #8
 80069c2:	2d0c      	cmp	r5, #12
 80069c4:	bf38      	it	cc
 80069c6:	250c      	movcc	r5, #12
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	4606      	mov	r6, r0
 80069cc:	db01      	blt.n	80069d2 <_malloc_r+0x1a>
 80069ce:	42a9      	cmp	r1, r5
 80069d0:	d903      	bls.n	80069da <_malloc_r+0x22>
 80069d2:	230c      	movs	r3, #12
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	2000      	movs	r0, #0
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
 80069da:	f000 f8fd 	bl	8006bd8 <__malloc_lock>
 80069de:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <_malloc_r+0xac>)
 80069e0:	6814      	ldr	r4, [r2, #0]
 80069e2:	4621      	mov	r1, r4
 80069e4:	b991      	cbnz	r1, 8006a0c <_malloc_r+0x54>
 80069e6:	4c20      	ldr	r4, [pc, #128]	; (8006a68 <_malloc_r+0xb0>)
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	b91b      	cbnz	r3, 80069f4 <_malloc_r+0x3c>
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f83d 	bl	8006a6c <_sbrk_r>
 80069f2:	6020      	str	r0, [r4, #0]
 80069f4:	4629      	mov	r1, r5
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 f838 	bl	8006a6c <_sbrk_r>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d124      	bne.n	8006a4a <_malloc_r+0x92>
 8006a00:	230c      	movs	r3, #12
 8006a02:	4630      	mov	r0, r6
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	f000 f8e8 	bl	8006bda <__malloc_unlock>
 8006a0a:	e7e4      	b.n	80069d6 <_malloc_r+0x1e>
 8006a0c:	680b      	ldr	r3, [r1, #0]
 8006a0e:	1b5b      	subs	r3, r3, r5
 8006a10:	d418      	bmi.n	8006a44 <_malloc_r+0x8c>
 8006a12:	2b0b      	cmp	r3, #11
 8006a14:	d90f      	bls.n	8006a36 <_malloc_r+0x7e>
 8006a16:	600b      	str	r3, [r1, #0]
 8006a18:	18cc      	adds	r4, r1, r3
 8006a1a:	50cd      	str	r5, [r1, r3]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f8dc 	bl	8006bda <__malloc_unlock>
 8006a22:	f104 000b 	add.w	r0, r4, #11
 8006a26:	1d23      	adds	r3, r4, #4
 8006a28:	f020 0007 	bic.w	r0, r0, #7
 8006a2c:	1ac3      	subs	r3, r0, r3
 8006a2e:	d0d3      	beq.n	80069d8 <_malloc_r+0x20>
 8006a30:	425a      	negs	r2, r3
 8006a32:	50e2      	str	r2, [r4, r3]
 8006a34:	e7d0      	b.n	80069d8 <_malloc_r+0x20>
 8006a36:	684b      	ldr	r3, [r1, #4]
 8006a38:	428c      	cmp	r4, r1
 8006a3a:	bf16      	itet	ne
 8006a3c:	6063      	strne	r3, [r4, #4]
 8006a3e:	6013      	streq	r3, [r2, #0]
 8006a40:	460c      	movne	r4, r1
 8006a42:	e7eb      	b.n	8006a1c <_malloc_r+0x64>
 8006a44:	460c      	mov	r4, r1
 8006a46:	6849      	ldr	r1, [r1, #4]
 8006a48:	e7cc      	b.n	80069e4 <_malloc_r+0x2c>
 8006a4a:	1cc4      	adds	r4, r0, #3
 8006a4c:	f024 0403 	bic.w	r4, r4, #3
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d005      	beq.n	8006a60 <_malloc_r+0xa8>
 8006a54:	1a21      	subs	r1, r4, r0
 8006a56:	4630      	mov	r0, r6
 8006a58:	f000 f808 	bl	8006a6c <_sbrk_r>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d0cf      	beq.n	8006a00 <_malloc_r+0x48>
 8006a60:	6025      	str	r5, [r4, #0]
 8006a62:	e7db      	b.n	8006a1c <_malloc_r+0x64>
 8006a64:	200002dc 	.word	0x200002dc
 8006a68:	200002e0 	.word	0x200002e0

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4c05      	ldr	r4, [pc, #20]	; (8006a88 <_sbrk_r+0x1c>)
 8006a72:	4605      	mov	r5, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	f7fb f90e 	bl	8001c98 <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20000490 	.word	0x20000490

08006a8c <__sread>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	460c      	mov	r4, r1
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	f000 f8a2 	bl	8006bdc <_read_r>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	bfab      	itete	ge
 8006a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006aa0:	181b      	addge	r3, r3, r0
 8006aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006aa6:	bfac      	ite	ge
 8006aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006aaa:	81a3      	strhlt	r3, [r4, #12]
 8006aac:	bd10      	pop	{r4, pc}

08006aae <__swrite>:
 8006aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab2:	461f      	mov	r7, r3
 8006ab4:	898b      	ldrh	r3, [r1, #12]
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	05db      	lsls	r3, r3, #23
 8006aba:	460c      	mov	r4, r1
 8006abc:	4616      	mov	r6, r2
 8006abe:	d505      	bpl.n	8006acc <__swrite+0x1e>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac8:	f000 f874 	bl	8006bb4 <_lseek_r>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	4632      	mov	r2, r6
 8006ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ada:	463b      	mov	r3, r7
 8006adc:	4628      	mov	r0, r5
 8006ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae2:	f000 b823 	b.w	8006b2c <_write_r>

08006ae6 <__sseek>:
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	460c      	mov	r4, r1
 8006aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aee:	f000 f861 	bl	8006bb4 <_lseek_r>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	bf15      	itete	ne
 8006af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b02:	81a3      	strheq	r3, [r4, #12]
 8006b04:	bf18      	it	ne
 8006b06:	81a3      	strhne	r3, [r4, #12]
 8006b08:	bd10      	pop	{r4, pc}

08006b0a <__sclose>:
 8006b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0e:	f000 b81f 	b.w	8006b50 <_close_r>

08006b12 <__ascii_wctomb>:
 8006b12:	b149      	cbz	r1, 8006b28 <__ascii_wctomb+0x16>
 8006b14:	2aff      	cmp	r2, #255	; 0xff
 8006b16:	bf8b      	itete	hi
 8006b18:	238a      	movhi	r3, #138	; 0x8a
 8006b1a:	700a      	strbls	r2, [r1, #0]
 8006b1c:	6003      	strhi	r3, [r0, #0]
 8006b1e:	2001      	movls	r0, #1
 8006b20:	bf88      	it	hi
 8006b22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006b26:	4770      	bx	lr
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4770      	bx	lr

08006b2c <_write_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	2200      	movs	r2, #0
 8006b36:	4c05      	ldr	r4, [pc, #20]	; (8006b4c <_write_r+0x20>)
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f000 f888 	bl	8006c50 <_write>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_write_r+0x1e>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_write_r+0x1e>
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20000490 	.word	0x20000490

08006b50 <_close_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	2300      	movs	r3, #0
 8006b54:	4c05      	ldr	r4, [pc, #20]	; (8006b6c <_close_r+0x1c>)
 8006b56:	4605      	mov	r5, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	6023      	str	r3, [r4, #0]
 8006b5c:	f000 f850 	bl	8006c00 <_close>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_close_r+0x1a>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_close_r+0x1a>
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000490 	.word	0x20000490

08006b70 <_fstat_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	2300      	movs	r3, #0
 8006b74:	4c06      	ldr	r4, [pc, #24]	; (8006b90 <_fstat_r+0x20>)
 8006b76:	4605      	mov	r5, r0
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	f000 f847 	bl	8006c10 <_fstat>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d102      	bne.n	8006b8c <_fstat_r+0x1c>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	b103      	cbz	r3, 8006b8c <_fstat_r+0x1c>
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	bd38      	pop	{r3, r4, r5, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000490 	.word	0x20000490

08006b94 <_isatty_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	2300      	movs	r3, #0
 8006b98:	4c05      	ldr	r4, [pc, #20]	; (8006bb0 <_isatty_r+0x1c>)
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	f000 f83e 	bl	8006c20 <_isatty>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_isatty_r+0x1a>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_isatty_r+0x1a>
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	20000490 	.word	0x20000490

08006bb4 <_lseek_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4c05      	ldr	r4, [pc, #20]	; (8006bd4 <_lseek_r+0x20>)
 8006bc0:	6022      	str	r2, [r4, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f000 f834 	bl	8006c30 <_lseek>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_lseek_r+0x1e>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_lseek_r+0x1e>
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20000490 	.word	0x20000490

08006bd8 <__malloc_lock>:
 8006bd8:	4770      	bx	lr

08006bda <__malloc_unlock>:
 8006bda:	4770      	bx	lr

08006bdc <_read_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4605      	mov	r5, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	2200      	movs	r2, #0
 8006be6:	4c05      	ldr	r4, [pc, #20]	; (8006bfc <_read_r+0x20>)
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f000 f828 	bl	8006c40 <_read>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_read_r+0x1e>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_read_r+0x1e>
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20000490 	.word	0x20000490

08006c00 <_close>:
 8006c00:	2258      	movs	r2, #88	; 0x58
 8006c02:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <_close+0xc>)
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	4770      	bx	lr
 8006c0c:	20000490 	.word	0x20000490

08006c10 <_fstat>:
 8006c10:	2258      	movs	r2, #88	; 0x58
 8006c12:	4b02      	ldr	r3, [pc, #8]	; (8006c1c <_fstat+0xc>)
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	4770      	bx	lr
 8006c1c:	20000490 	.word	0x20000490

08006c20 <_isatty>:
 8006c20:	2258      	movs	r2, #88	; 0x58
 8006c22:	4b02      	ldr	r3, [pc, #8]	; (8006c2c <_isatty+0xc>)
 8006c24:	2000      	movs	r0, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000490 	.word	0x20000490

08006c30 <_lseek>:
 8006c30:	2258      	movs	r2, #88	; 0x58
 8006c32:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <_lseek+0xc>)
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	4770      	bx	lr
 8006c3c:	20000490 	.word	0x20000490

08006c40 <_read>:
 8006c40:	2258      	movs	r2, #88	; 0x58
 8006c42:	4b02      	ldr	r3, [pc, #8]	; (8006c4c <_read+0xc>)
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	4770      	bx	lr
 8006c4c:	20000490 	.word	0x20000490

08006c50 <_write>:
 8006c50:	2258      	movs	r2, #88	; 0x58
 8006c52:	4b02      	ldr	r3, [pc, #8]	; (8006c5c <_write+0xc>)
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	4770      	bx	lr
 8006c5c:	20000490 	.word	0x20000490

08006c60 <_init>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	bf00      	nop
 8006c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c66:	bc08      	pop	{r3}
 8006c68:	469e      	mov	lr, r3
 8006c6a:	4770      	bx	lr

08006c6c <_fini>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr
