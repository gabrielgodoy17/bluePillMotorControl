
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08008de8  08008de8  00018de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009270  08009270  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08009270  08009270  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009270  08009270  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009274  08009274  00019274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009278  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001f0  08009468  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08009468  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c02b  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c3a  00000000  00000000  0002c244  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002de80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002eab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ce8  00000000  00000000  0002f608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c3e  00000000  00000000  000452f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074966  00000000  00000000  0004df2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004344  00000000  00000000  000c2910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008dd0 	.word	0x08008dd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008dd0 	.word	0x08008dd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <interpreteComando>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interpreteComando(){
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

	//uint32_t duty_cycle;
	double consigna;

	switch (buffer[0]) {
 8000b6e:	4bad      	ldr	r3, [pc, #692]	; (8000e24 <interpreteComando+0x2bc>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b44      	subs	r3, #68	; 0x44
 8000b74:	2b33      	cmp	r3, #51	; 0x33
 8000b76:	f200 8227 	bhi.w	8000fc8 <interpreteComando+0x460>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <interpreteComando+0x18>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000f71 	.word	0x08000f71
 8000b84:	08000fc9 	.word	0x08000fc9
 8000b88:	08000fc9 	.word	0x08000fc9
 8000b8c:	08000fc9 	.word	0x08000fc9
 8000b90:	08000fc9 	.word	0x08000fc9
 8000b94:	08000f19 	.word	0x08000f19
 8000b98:	08000fc9 	.word	0x08000fc9
 8000b9c:	08000fc9 	.word	0x08000fc9
 8000ba0:	08000fc9 	.word	0x08000fc9
 8000ba4:	08000fc9 	.word	0x08000fc9
 8000ba8:	08000fc9 	.word	0x08000fc9
 8000bac:	08000fc9 	.word	0x08000fc9
 8000bb0:	08000ec1 	.word	0x08000ec1
 8000bb4:	08000fc9 	.word	0x08000fc9
 8000bb8:	08000fc9 	.word	0x08000fc9
 8000bbc:	08000fc9 	.word	0x08000fc9
 8000bc0:	08000fc9 	.word	0x08000fc9
 8000bc4:	08000fc9 	.word	0x08000fc9
 8000bc8:	08000fc9 	.word	0x08000fc9
 8000bcc:	08000c51 	.word	0x08000c51
 8000bd0:	08000fc9 	.word	0x08000fc9
 8000bd4:	08000fc9 	.word	0x08000fc9
 8000bd8:	08000fc9 	.word	0x08000fc9
 8000bdc:	08000fc9 	.word	0x08000fc9
 8000be0:	08000fc9 	.word	0x08000fc9
 8000be4:	08000fc9 	.word	0x08000fc9
 8000be8:	08000fc9 	.word	0x08000fc9
 8000bec:	08000fc9 	.word	0x08000fc9
 8000bf0:	08000fc9 	.word	0x08000fc9
 8000bf4:	08000fc9 	.word	0x08000fc9
 8000bf8:	08000fc9 	.word	0x08000fc9
 8000bfc:	08000fc9 	.word	0x08000fc9
 8000c00:	08000f71 	.word	0x08000f71
 8000c04:	08000fc9 	.word	0x08000fc9
 8000c08:	08000fc9 	.word	0x08000fc9
 8000c0c:	08000fc9 	.word	0x08000fc9
 8000c10:	08000fc9 	.word	0x08000fc9
 8000c14:	08000f19 	.word	0x08000f19
 8000c18:	08000fc9 	.word	0x08000fc9
 8000c1c:	08000fc9 	.word	0x08000fc9
 8000c20:	08000fc9 	.word	0x08000fc9
 8000c24:	08000fc9 	.word	0x08000fc9
 8000c28:	08000fc9 	.word	0x08000fc9
 8000c2c:	08000fc9 	.word	0x08000fc9
 8000c30:	08000ec1 	.word	0x08000ec1
 8000c34:	08000fc9 	.word	0x08000fc9
 8000c38:	08000fc9 	.word	0x08000fc9
 8000c3c:	08000fc9 	.word	0x08000fc9
 8000c40:	08000fc9 	.word	0x08000fc9
 8000c44:	08000fc9 	.word	0x08000fc9
 8000c48:	08000fc9 	.word	0x08000fc9
 8000c4c:	08000c51 	.word	0x08000c51
	case 'W':
	case 'w':
		switch (buffer[1]) {
 8000c50:	4b74      	ldr	r3, [pc, #464]	; (8000e24 <interpreteComando+0x2bc>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	2b31      	cmp	r3, #49	; 0x31
 8000c56:	d003      	beq.n	8000c60 <interpreteComando+0xf8>
 8000c58:	2b32      	cmp	r3, #50	; 0x32
 8000c5a:	f000 808c 	beq.w	8000d76 <interpreteComando+0x20e>
					printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
				}
			}
			break;
		}
			break;
 8000c5e:	e1b3      	b.n	8000fc8 <interpreteComando+0x460>
			if (buffer[2]) {
 8000c60:	4b70      	ldr	r3, [pc, #448]	; (8000e24 <interpreteComando+0x2bc>)
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 8127 	beq.w	8000eb8 <interpreteComando+0x350>
				if (buffer[2] == 43) {
 8000c6a:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <interpreteComando+0x2bc>)
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b2b      	cmp	r3, #43	; 0x2b
 8000c70:	d12b      	bne.n	8000cca <interpreteComando+0x162>
					stop1=0;
 8000c72:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <interpreteComando+0x2c0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000c78:	4b6a      	ldr	r3, [pc, #424]	; (8000e24 <interpreteComando+0x2bc>)
 8000c7a:	78db      	ldrb	r3, [r3, #3]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 811b 	beq.w	8000eb8 <interpreteComando+0x350>
						consigna = atof(&buffer[3]);
 8000c82:	486a      	ldr	r0, [pc, #424]	; (8000e2c <interpreteComando+0x2c4>)
 8000c84:	f004 f9ac 	bl	8004fe0 <atof>
 8000c88:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <interpreteComando+0x2c8>)
 8000c92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c96:	f7ff fe91 	bl	80009bc <__aeabi_dcmplt>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <interpreteComando+0x144>
							velocidad_consigna = consigna;
 8000ca0:	4a64      	ldr	r2, [pc, #400]	; (8000e34 <interpreteComando+0x2cc>)
 8000ca2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ca6:	e9c2 3400 	strd	r3, r4, [r2]
 8000caa:	e005      	b.n	8000cb8 <interpreteComando+0x150>
							velocidad_consigna = 35;
 8000cac:	4a61      	ldr	r2, [pc, #388]	; (8000e34 <interpreteComando+0x2cc>)
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	4c5f      	ldr	r4, [pc, #380]	; (8000e30 <interpreteComando+0x2c8>)
 8000cb4:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %s %5.3f \r\n","+", velocidad_consigna);
 8000cb8:	4b5e      	ldr	r3, [pc, #376]	; (8000e34 <interpreteComando+0x2cc>)
 8000cba:	cb18      	ldmia	r3, {r3, r4}
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	495d      	ldr	r1, [pc, #372]	; (8000e38 <interpreteComando+0x2d0>)
 8000cc2:	485e      	ldr	r0, [pc, #376]	; (8000e3c <interpreteComando+0x2d4>)
 8000cc4:	f004 fe12 	bl	80058ec <iprintf>
			break;
 8000cc8:	e0f6      	b.n	8000eb8 <interpreteComando+0x350>
				} else if (buffer[2] == 45) {
 8000cca:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <interpreteComando+0x2bc>)
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	2b2d      	cmp	r3, #45	; 0x2d
 8000cd0:	d130      	bne.n	8000d34 <interpreteComando+0x1cc>
					stop1=0;
 8000cd2:	4b55      	ldr	r3, [pc, #340]	; (8000e28 <interpreteComando+0x2c0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000cd8:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <interpreteComando+0x2bc>)
 8000cda:	78db      	ldrb	r3, [r3, #3]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 80eb 	beq.w	8000eb8 <interpreteComando+0x350>
						consigna = atof(&buffer[3]);
 8000ce2:	4852      	ldr	r0, [pc, #328]	; (8000e2c <interpreteComando+0x2c4>)
 8000ce4:	f004 f97c 	bl	8004fe0 <atof>
 8000ce8:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <interpreteComando+0x2c8>)
 8000cf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cf6:	f7ff fe61 	bl	80009bc <__aeabi_dcmplt>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00b      	beq.n	8000d18 <interpreteComando+0x1b0>
							velocidad_consigna = -consigna;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b49      	ldr	r3, [pc, #292]	; (8000e34 <interpreteComando+0x2cc>)
 8000d0e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d12:	e9c3 1200 	strd	r1, r2, [r3]
 8000d16:	e005      	b.n	8000d24 <interpreteComando+0x1bc>
							velocidad_consigna = -35;
 8000d18:	4a46      	ldr	r2, [pc, #280]	; (8000e34 <interpreteComando+0x2cc>)
 8000d1a:	f04f 0300 	mov.w	r3, #0
 8000d1e:	4c48      	ldr	r4, [pc, #288]	; (8000e40 <interpreteComando+0x2d8>)
 8000d20:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d24:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <interpreteComando+0x2cc>)
 8000d26:	cb18      	ldmia	r3, {r3, r4}
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	4845      	ldr	r0, [pc, #276]	; (8000e44 <interpreteComando+0x2dc>)
 8000d2e:	f004 fddd 	bl	80058ec <iprintf>
			break;
 8000d32:	e0c1      	b.n	8000eb8 <interpreteComando+0x350>
				}else if(buffer[2] == 48){
 8000d34:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <interpreteComando+0x2bc>)
 8000d36:	789b      	ldrb	r3, [r3, #2]
 8000d38:	2b30      	cmp	r3, #48	; 0x30
 8000d3a:	f040 80bd 	bne.w	8000eb8 <interpreteComando+0x350>
					velocidad_consigna=0;
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <interpreteComando+0x2cc>)
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	f04f 0400 	mov.w	r4, #0
 8000d48:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2110      	movs	r1, #16
 8000d50:	483d      	ldr	r0, [pc, #244]	; (8000e48 <interpreteComando+0x2e0>)
 8000d52:	f001 fed9 	bl	8002b08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	483b      	ldr	r0, [pc, #236]	; (8000e48 <interpreteComando+0x2e0>)
 8000d5c:	f001 fed4 	bl	8002b08 <HAL_GPIO_WritePin>
					stop1=1;
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <interpreteComando+0x2c0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <interpreteComando+0x2cc>)
 8000d68:	cb18      	ldmia	r3, {r3, r4}
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4623      	mov	r3, r4
 8000d6e:	4835      	ldr	r0, [pc, #212]	; (8000e44 <interpreteComando+0x2dc>)
 8000d70:	f004 fdbc 	bl	80058ec <iprintf>
			break;
 8000d74:	e0a0      	b.n	8000eb8 <interpreteComando+0x350>
			if (buffer[2]) {
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <interpreteComando+0x2bc>)
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 809e 	beq.w	8000ebc <interpreteComando+0x354>
				if (buffer[2] == 43) {
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <interpreteComando+0x2bc>)
 8000d82:	789b      	ldrb	r3, [r3, #2]
 8000d84:	2b2b      	cmp	r3, #43	; 0x2b
 8000d86:	d12b      	bne.n	8000de0 <interpreteComando+0x278>
					stop2=0;
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <interpreteComando+0x2e4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <interpreteComando+0x2bc>)
 8000d90:	78db      	ldrb	r3, [r3, #3]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 8092 	beq.w	8000ebc <interpreteComando+0x354>
						consigna = atof(&buffer[3]);
 8000d98:	4824      	ldr	r0, [pc, #144]	; (8000e2c <interpreteComando+0x2c4>)
 8000d9a:	f004 f921 	bl	8004fe0 <atof>
 8000d9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <interpreteComando+0x2c8>)
 8000da8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dac:	f7ff fe06 	bl	80009bc <__aeabi_dcmplt>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <interpreteComando+0x25a>
							velocidad_consigna2 = consigna;
 8000db6:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <interpreteComando+0x2e8>)
 8000db8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000dbc:	e9c2 3400 	strd	r3, r4, [r2]
 8000dc0:	e005      	b.n	8000dce <interpreteComando+0x266>
							velocidad_consigna2 = 35;
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <interpreteComando+0x2e8>)
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	4c19      	ldr	r4, [pc, #100]	; (8000e30 <interpreteComando+0x2c8>)
 8000dca:	e9c2 3400 	strd	r3, r4, [r2]
						printf(
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <interpreteComando+0x2e8>)
 8000dd0:	cb18      	ldmia	r3, {r3, r4}
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	4918      	ldr	r1, [pc, #96]	; (8000e38 <interpreteComando+0x2d0>)
 8000dd8:	481e      	ldr	r0, [pc, #120]	; (8000e54 <interpreteComando+0x2ec>)
 8000dda:	f004 fd87 	bl	80058ec <iprintf>
			break;
 8000dde:	e06d      	b.n	8000ebc <interpreteComando+0x354>
				} else if (buffer[2] == 45) {
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <interpreteComando+0x2bc>)
 8000de2:	789b      	ldrb	r3, [r3, #2]
 8000de4:	2b2d      	cmp	r3, #45	; 0x2d
 8000de6:	d145      	bne.n	8000e74 <interpreteComando+0x30c>
					stop2=0;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <interpreteComando+0x2e4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <interpreteComando+0x2bc>)
 8000df0:	78db      	ldrb	r3, [r3, #3]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d062      	beq.n	8000ebc <interpreteComando+0x354>
						consigna = atof(&buffer[3]);
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <interpreteComando+0x2c4>)
 8000df8:	f004 f8f2 	bl	8004fe0 <atof>
 8000dfc:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <interpreteComando+0x2c8>)
 8000e06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e0a:	f7ff fdd7 	bl	80009bc <__aeabi_dcmplt>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d021      	beq.n	8000e58 <interpreteComando+0x2f0>
							velocidad_consigna2 = -consigna;
 8000e14:	68bc      	ldr	r4, [r7, #8]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <interpreteComando+0x2e8>)
 8000e1e:	e9c3 4500 	strd	r4, r5, [r3]
 8000e22:	e01f      	b.n	8000e64 <interpreteComando+0x2fc>
 8000e24:	20000368 	.word	0x20000368
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	2000036b 	.word	0x2000036b
 8000e30:	40418000 	.word	0x40418000
 8000e34:	20000268 	.word	0x20000268
 8000e38:	08008de8 	.word	0x08008de8
 8000e3c:	08008dec 	.word	0x08008dec
 8000e40:	c0418000 	.word	0xc0418000
 8000e44:	08008e18 	.word	0x08008e18
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	20000270 	.word	0x20000270
 8000e54:	08008e44 	.word	0x08008e44
							velocidad_consigna2 = -35;
 8000e58:	4a5d      	ldr	r2, [pc, #372]	; (8000fd0 <interpreteComando+0x468>)
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	4c5d      	ldr	r4, [pc, #372]	; (8000fd4 <interpreteComando+0x46c>)
 8000e60:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000e64:	4b5a      	ldr	r3, [pc, #360]	; (8000fd0 <interpreteComando+0x468>)
 8000e66:	cb18      	ldmia	r3, {r3, r4}
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	485a      	ldr	r0, [pc, #360]	; (8000fd8 <interpreteComando+0x470>)
 8000e6e:	f004 fd3d 	bl	80058ec <iprintf>
			break;
 8000e72:	e023      	b.n	8000ebc <interpreteComando+0x354>
				}else if(buffer[2] == 48){
 8000e74:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <interpreteComando+0x474>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
 8000e78:	2b30      	cmp	r3, #48	; 0x30
 8000e7a:	d11f      	bne.n	8000ebc <interpreteComando+0x354>
					velocidad_consigna2=0;
 8000e7c:	4a54      	ldr	r2, [pc, #336]	; (8000fd0 <interpreteComando+0x468>)
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	f04f 0400 	mov.w	r4, #0
 8000e86:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	4853      	ldr	r0, [pc, #332]	; (8000fe0 <interpreteComando+0x478>)
 8000e92:	f001 fe39 	bl	8002b08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9c:	4850      	ldr	r0, [pc, #320]	; (8000fe0 <interpreteComando+0x478>)
 8000e9e:	f001 fe33 	bl	8002b08 <HAL_GPIO_WritePin>
					stop2=0;
 8000ea2:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <interpreteComando+0x47c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000ea8:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <interpreteComando+0x468>)
 8000eaa:	cb18      	ldmia	r3, {r3, r4}
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4849      	ldr	r0, [pc, #292]	; (8000fd8 <interpreteComando+0x470>)
 8000eb2:	f004 fd1b 	bl	80058ec <iprintf>
			break;
 8000eb6:	e001      	b.n	8000ebc <interpreteComando+0x354>
			break;
 8000eb8:	bf00      	nop
 8000eba:	e085      	b.n	8000fc8 <interpreteComando+0x460>
			break;
 8000ebc:	bf00      	nop
			break;
 8000ebe:	e083      	b.n	8000fc8 <interpreteComando+0x460>
//		case 'C':
//			control=1;
//			break;
		case 'p':
		case 'P':
			switch (buffer[1]) {
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <interpreteComando+0x474>)
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	2b31      	cmp	r3, #49	; 0x31
 8000ec6:	d002      	beq.n	8000ece <interpreteComando+0x366>
 8000ec8:	2b32      	cmp	r3, #50	; 0x32
 8000eca:	d010      	beq.n	8000eee <interpreteComando+0x386>
 8000ecc:	e01f      	b.n	8000f0e <interpreteComando+0x3a6>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000ece:	4846      	ldr	r0, [pc, #280]	; (8000fe8 <interpreteComando+0x480>)
 8000ed0:	f004 f886 	bl	8004fe0 <atof>
 8000ed4:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP1=(float) consigna;
 8000ed8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000edc:	f7ff fdf4 	bl	8000ac8 <__aeabi_d2f>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b42      	ldr	r3, [pc, #264]	; (8000fec <interpreteComando+0x484>)
 8000ee4:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000ee6:	4842      	ldr	r0, [pc, #264]	; (8000ff0 <interpreteComando+0x488>)
 8000ee8:	f004 fd74 	bl	80059d4 <puts>
						break;
 8000eec:	e013      	b.n	8000f16 <interpreteComando+0x3ae>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000eee:	483e      	ldr	r0, [pc, #248]	; (8000fe8 <interpreteComando+0x480>)
 8000ef0:	f004 f876 	bl	8004fe0 <atof>
 8000ef4:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP2=(float) consigna;
 8000ef8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000efc:	f7ff fde4 	bl	8000ac8 <__aeabi_d2f>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <interpreteComando+0x48c>)
 8000f04:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000f06:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <interpreteComando+0x488>)
 8000f08:	f004 fd64 	bl	80059d4 <puts>
						break;
 8000f0c:	e003      	b.n	8000f16 <interpreteComando+0x3ae>
					default:
					printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000f0e:	483a      	ldr	r0, [pc, #232]	; (8000ff8 <interpreteComando+0x490>)
 8000f10:	f004 fd60 	bl	80059d4 <puts>
					break;
 8000f14:	bf00      	nop

			}
			break;
 8000f16:	e057      	b.n	8000fc8 <interpreteComando+0x460>
		case 'i':
		case 'I':
			switch (buffer[1]) {
 8000f18:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <interpreteComando+0x474>)
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	2b31      	cmp	r3, #49	; 0x31
 8000f1e:	d002      	beq.n	8000f26 <interpreteComando+0x3be>
 8000f20:	2b32      	cmp	r3, #50	; 0x32
 8000f22:	d010      	beq.n	8000f46 <interpreteComando+0x3de>
 8000f24:	e01f      	b.n	8000f66 <interpreteComando+0x3fe>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000f26:	4830      	ldr	r0, [pc, #192]	; (8000fe8 <interpreteComando+0x480>)
 8000f28:	f004 f85a 	bl	8004fe0 <atof>
 8000f2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI1=(float) consigna;
 8000f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f34:	f7ff fdc8 	bl	8000ac8 <__aeabi_d2f>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <interpreteComando+0x494>)
 8000f3c:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000f3e:	482c      	ldr	r0, [pc, #176]	; (8000ff0 <interpreteComando+0x488>)
 8000f40:	f004 fd48 	bl	80059d4 <puts>
						break;
 8000f44:	e013      	b.n	8000f6e <interpreteComando+0x406>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000f46:	4828      	ldr	r0, [pc, #160]	; (8000fe8 <interpreteComando+0x480>)
 8000f48:	f004 f84a 	bl	8004fe0 <atof>
 8000f4c:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI2=(float) consigna;
 8000f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f54:	f7ff fdb8 	bl	8000ac8 <__aeabi_d2f>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <interpreteComando+0x498>)
 8000f5c:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000f5e:	4824      	ldr	r0, [pc, #144]	; (8000ff0 <interpreteComando+0x488>)
 8000f60:	f004 fd38 	bl	80059d4 <puts>
						break;
 8000f64:	e003      	b.n	8000f6e <interpreteComando+0x406>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000f66:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <interpreteComando+0x490>)
 8000f68:	f004 fd34 	bl	80059d4 <puts>
						break;
 8000f6c:	bf00      	nop
			}
			break;
 8000f6e:	e02b      	b.n	8000fc8 <interpreteComando+0x460>
		case 'd':
		case 'D':
			switch (buffer[1]) {
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <interpreteComando+0x474>)
 8000f72:	785b      	ldrb	r3, [r3, #1]
 8000f74:	2b31      	cmp	r3, #49	; 0x31
 8000f76:	d002      	beq.n	8000f7e <interpreteComando+0x416>
 8000f78:	2b32      	cmp	r3, #50	; 0x32
 8000f7a:	d010      	beq.n	8000f9e <interpreteComando+0x436>
 8000f7c:	e01f      	b.n	8000fbe <interpreteComando+0x456>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000f7e:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <interpreteComando+0x480>)
 8000f80:	f004 f82e 	bl	8004fe0 <atof>
 8000f84:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD1=(float) consigna;
 8000f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8c:	f7ff fd9c 	bl	8000ac8 <__aeabi_d2f>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <interpreteComando+0x49c>)
 8000f94:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000f96:	4816      	ldr	r0, [pc, #88]	; (8000ff0 <interpreteComando+0x488>)
 8000f98:	f004 fd1c 	bl	80059d4 <puts>
						break;
 8000f9c:	e013      	b.n	8000fc6 <interpreteComando+0x45e>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <interpreteComando+0x480>)
 8000fa0:	f004 f81e 	bl	8004fe0 <atof>
 8000fa4:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD2=(float) consigna;
 8000fa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fac:	f7ff fd8c 	bl	8000ac8 <__aeabi_d2f>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <interpreteComando+0x4a0>)
 8000fb4:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <interpreteComando+0x488>)
 8000fb8:	f004 fd0c 	bl	80059d4 <puts>
						break;
 8000fbc:	e003      	b.n	8000fc6 <interpreteComando+0x45e>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <interpreteComando+0x490>)
 8000fc0:	f004 fd08 	bl	80059d4 <puts>
						break;
 8000fc4:	bf00      	nop
			}
			break;
 8000fc6:	bf00      	nop
//			control=0;
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//			break;
	}

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd0:	20000270 	.word	0x20000270
 8000fd4:	c0418000 	.word	0xc0418000
 8000fd8:	08008e74 	.word	0x08008e74
 8000fdc:	20000368 	.word	0x20000368
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	20000010 	.word	0x20000010
 8000fe8:	2000036a 	.word	0x2000036a
 8000fec:	20000278 	.word	0x20000278
 8000ff0:	08008ea0 	.word	0x08008ea0
 8000ff4:	20000284 	.word	0x20000284
 8000ff8:	08008ea4 	.word	0x08008ea4
 8000ffc:	2000027c 	.word	0x2000027c
 8001000:	20000288 	.word	0x20000288
 8001004:	20000280 	.word	0x20000280
 8001008:	2000028c 	.word	0x2000028c
 800100c:	00000000 	.word	0x00000000

08001010 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8001010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a60      	ldr	r2, [pc, #384]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001020:	4293      	cmp	r3, r2
 8001022:	f040 828c 	bne.w	800153e <HAL_TIM_PeriodElapsedCallback+0x52e>
		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	461a      	mov	r2, r3
 8001034:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	4413      	add	r3, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001040:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 8001042:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff f9d9 	bl	8000404 <__aeabi_i2d>
 8001052:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001054:	cb18      	ldmia	r3, {r3, r4}
 8001056:	461a      	mov	r2, r3
 8001058:	4623      	mov	r3, r4
 800105a:	f7ff fb67 	bl	800072c <__aeabi_ddiv>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4a55      	ldr	r2, [pc, #340]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001064:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 8001068:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800106a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106e:	a34a      	add	r3, pc, #296	; (adr r3, 8001198 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fb5a 	bl	800072c <__aeabi_ddiv>
 8001078:	4603      	mov	r3, r0
 800107a:	460c      	mov	r4, r1
 800107c:	4618      	mov	r0, r3
 800107e:	4621      	mov	r1, r4
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001086:	f7ff fa27 	bl	80004d8 <__aeabi_dmul>
 800108a:	4603      	mov	r3, r0
 800108c:	460c      	mov	r4, r1
 800108e:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001090:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8001094:	4b45      	ldr	r3, [pc, #276]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a45      	ldr	r2, [pc, #276]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800109a:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 800109c:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	4413      	add	r3, r2
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010b6:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f99e 	bl	8000404 <__aeabi_i2d>
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010ca:	cb18      	ldmia	r3, {r3, r4}
 80010cc:	461a      	mov	r2, r3
 80010ce:	4623      	mov	r3, r4
 80010d0:	f7ff fb2c 	bl	800072c <__aeabi_ddiv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	460c      	mov	r4, r1
 80010d8:	4a3e      	ldr	r2, [pc, #248]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010da:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e4:	a32c      	add	r3, pc, #176	; (adr r3, 8001198 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fb1f 	bl	800072c <__aeabi_ddiv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	460c      	mov	r4, r1
 80010f2:	4618      	mov	r0, r3
 80010f4:	4621      	mov	r1, r4
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80010fc:	f7ff f9ec 	bl	80004d8 <__aeabi_dmul>
 8001100:	4603      	mov	r3, r0
 8001102:	460c      	mov	r4, r1
 8001104:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001106:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001110:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	f040 8250 	bne.w	80015bc <HAL_TIM_PeriodElapsedCallback+0x5ac>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800111e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001124:	cb18      	ldmia	r3, {r3, r4}
 8001126:	461a      	mov	r2, r3
 8001128:	4623      	mov	r3, r4
 800112a:	f7ff f81d 	bl	8000168 <__aeabi_dsub>
 800112e:	4603      	mov	r3, r0
 8001130:	460c      	mov	r4, r1
 8001132:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001134:	e9c2 3400 	strd	r3, r4, [r2]
			if(error_vel_act<0 ){
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800113a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	f7ff fc39 	bl	80009bc <__aeabi_dcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00a      	beq.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x156>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2110      	movs	r1, #16
 8001154:	4824      	ldr	r0, [pc, #144]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001156:	f001 fcd7 	bl	8002b08 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	2120      	movs	r1, #32
 800115e:	4822      	ldr	r0, [pc, #136]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001160:	f001 fcd2 	bl	8002b08 <HAL_GPIO_WritePin>
 8001164:	e055      	b.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x202>
			}else if(error_vel_act>0){
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	f7ff fc40 	bl	80009f8 <__aeabi_dcmpgt>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d036      	beq.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4819      	ldr	r0, [pc, #100]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001184:	f001 fcc0 	bl	8002b08 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2120      	movs	r1, #32
 800118c:	4816      	ldr	r0, [pc, #88]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800118e:	f001 fcbb 	bl	8002b08 <HAL_GPIO_WritePin>
 8001192:	e03e      	b.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x202>
 8001194:	f3af 8000 	nop.w
 8001198:	00000000 	.word	0x00000000
 800119c:	40bce000 	.word	0x40bce000
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	20000210 	.word	0x20000210
 80011a8:	20000328 	.word	0x20000328
 80011ac:	20000218 	.word	0x20000218
 80011b0:	20000214 	.word	0x20000214
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000228 	.word	0x20000228
 80011bc:	404e0000 	.word	0x404e0000
 80011c0:	20000230 	.word	0x20000230
 80011c4:	2000021c 	.word	0x2000021c
 80011c8:	200002e4 	.word	0x200002e4
 80011cc:	20000224 	.word	0x20000224
 80011d0:	20000220 	.word	0x20000220
 80011d4:	20000238 	.word	0x20000238
 80011d8:	20000240 	.word	0x20000240
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000268 	.word	0x20000268
 80011e4:	20000248 	.word	0x20000248
 80011e8:	40010800 	.word	0x40010800
			}else if(error_vel_act ==0){
 80011ec:	4b71      	ldr	r3, [pc, #452]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80011ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f7ff fbd5 	bl	80009a8 <__aeabi_dcmpeq>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x202>
				Ui_anterior=0;
 8001204:	4a6c      	ldr	r2, [pc, #432]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	f04f 0400 	mov.w	r4, #0
 800120e:	e9c2 3400 	strd	r3, r4, [r2]
			}

//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f906 	bl	8000428 <__aeabi_f2d>
 800121c:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800121e:	cb18      	ldmia	r3, {r3, r4}
 8001220:	461a      	mov	r2, r3
 8001222:	4623      	mov	r3, r4
 8001224:	f7ff f958 	bl	80004d8 <__aeabi_dmul>
 8001228:	4603      	mov	r3, r0
 800122a:	460c      	mov	r4, r1
 800122c:	4a64      	ldr	r2, [pc, #400]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800122e:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_act);
 8001232:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8f6 	bl	8000428 <__aeabi_f2d>
 800123c:	4b62      	ldr	r3, [pc, #392]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800123e:	cb18      	ldmia	r3, {r3, r4}
 8001240:	461a      	mov	r2, r3
 8001242:	4623      	mov	r3, r4
 8001244:	f7ff f948 	bl	80004d8 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001252:	cb18      	ldmia	r3, {r3, r4}
 8001254:	461a      	mov	r2, r3
 8001256:	4623      	mov	r3, r4
 8001258:	f7ff f93e 	bl	80004d8 <__aeabi_dmul>
 800125c:	4603      	mov	r3, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4618      	mov	r0, r3
 8001262:	4621      	mov	r1, r4
 8001264:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001266:	cb18      	ldmia	r3, {r3, r4}
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	f7fe ff7e 	bl	800016c <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4a55      	ldr	r2, [pc, #340]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001276:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 800127a:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8d2 	bl	8000428 <__aeabi_f2d>
 8001284:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001286:	cb18      	ldmia	r3, {r3, r4}
 8001288:	461a      	mov	r2, r3
 800128a:	4623      	mov	r3, r4
 800128c:	f7ff fa4e 	bl	800072c <__aeabi_ddiv>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	469a      	mov	sl, r3
 8001296:	46a3      	mov	fp, r4
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800129a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80012a0:	cb18      	ldmia	r3, {r3, r4}
 80012a2:	461a      	mov	r2, r3
 80012a4:	4623      	mov	r3, r4
 80012a6:	f7fe ff5f 	bl	8000168 <__aeabi_dsub>
 80012aa:	4603      	mov	r3, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	461a      	mov	r2, r3
 80012b0:	4623      	mov	r3, r4
 80012b2:	4650      	mov	r0, sl
 80012b4:	4659      	mov	r1, fp
 80012b6:	f7ff f90f 	bl	80004d8 <__aeabi_dmul>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80012c0:	e9c2 3400 	strd	r3, r4, [r2]
			duty_cycle_pid = (uint32_t) fabs(Up + Ui_actual + Ud);
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	4b40      	ldr	r3, [pc, #256]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80012cc:	cb18      	ldmia	r3, {r3, r4}
 80012ce:	461a      	mov	r2, r3
 80012d0:	4623      	mov	r3, r4
 80012d2:	f7fe ff4b 	bl	800016c <__adddf3>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80012e0:	cb18      	ldmia	r3, {r3, r4}
 80012e2:	461a      	mov	r2, r3
 80012e4:	4623      	mov	r3, r4
 80012e6:	f7fe ff41 	bl	800016c <__adddf3>
 80012ea:	4603      	mov	r3, r0
 80012ec:	460c      	mov	r4, r1
 80012ee:	4698      	mov	r8, r3
 80012f0:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80012f4:	4640      	mov	r0, r8
 80012f6:	4649      	mov	r1, r9
 80012f8:	f7ff fbc6 	bl	8000a88 <__aeabi_d2uiz>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001300:	601a      	str	r2, [r3, #0]
			if(duty_cycle_pid > 11250){
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f642 32f2 	movw	r2, #11250	; 0x2bf2
 800130a:	4293      	cmp	r3, r2
 800130c:	d903      	bls.n	8001316 <HAL_TIM_PeriodElapsedCallback+0x306>
				duty_cycle_pid=11250;
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001310:	f642 32f2 	movw	r2, #11250	; 0x2bf2
 8001314:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a30      	ldr	r2, [pc, #192]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001322:	cb18      	ldmia	r3, {r3, r4}
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001326:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800132c:	cb18      	ldmia	r3, {r3, r4}
 800132e:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001330:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8001336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800133c:	cb18      	ldmia	r3, {r3, r4}
 800133e:	461a      	mov	r2, r3
 8001340:	4623      	mov	r3, r4
 8001342:	f7fe ff11 	bl	8000168 <__aeabi_dsub>
 8001346:	4603      	mov	r3, r0
 8001348:	460c      	mov	r4, r1
 800134a:	4a28      	ldr	r2, [pc, #160]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800134c:	e9c2 3400 	strd	r3, r4, [r2]

			if(error_vel_act2<0 ){
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	f7ff fb2d 	bl	80009bc <__aeabi_dcmplt>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00c      	beq.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x372>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	4820      	ldr	r0, [pc, #128]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001370:	f001 fbca 	bl	8002b08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137a:	481d      	ldr	r0, [pc, #116]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800137c:	f001 fbc4 	bl	8002b08 <HAL_GPIO_WritePin>
 8001380:	e04b      	b.n	800141a <HAL_TIM_PeriodElapsedCallback+0x40a>
			}else if(error_vel_act2>0){
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	f7ff fb32 	bl	80009f8 <__aeabi_dcmpgt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d02c      	beq.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x3e4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80013a2:	f001 fbb1 	bl	8002b08 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ac:	4810      	ldr	r0, [pc, #64]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80013ae:	f001 fbab 	bl	8002b08 <HAL_GPIO_WritePin>
 80013b2:	e032      	b.n	800141a <HAL_TIM_PeriodElapsedCallback+0x40a>
 80013b4:	20000248 	.word	0x20000248
 80013b8:	20000290 	.word	0x20000290
 80013bc:	20000278 	.word	0x20000278
 80013c0:	200002a0 	.word	0x200002a0
 80013c4:	2000027c 	.word	0x2000027c
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000298 	.word	0x20000298
 80013d0:	20000280 	.word	0x20000280
 80013d4:	20000250 	.word	0x20000250
 80013d8:	200002a8 	.word	0x200002a8
 80013dc:	200002d0 	.word	0x200002d0
 80013e0:	200003d4 	.word	0x200003d4
 80013e4:	20000270 	.word	0x20000270
 80013e8:	20000240 	.word	0x20000240
 80013ec:	20000258 	.word	0x20000258
 80013f0:	40010800 	.word	0x40010800
			}else if(error_vel_act2==0){
 80013f4:	4b74      	ldr	r3, [pc, #464]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80013f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	f7ff fad1 	bl	80009a8 <__aeabi_dcmpeq>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <HAL_TIM_PeriodElapsedCallback+0x40a>
				Ui_anterior2=0;
 800140c:	4a6f      	ldr	r2, [pc, #444]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	f04f 0400 	mov.w	r4, #0
 8001416:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_act2= fabs(error_vel_act2);
			Up2=KP2 * error_vel_act2;
 800141a:	4b6d      	ldr	r3, [pc, #436]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f802 	bl	8000428 <__aeabi_f2d>
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001426:	cb18      	ldmia	r3, {r3, r4}
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	f7ff f854 	bl	80004d8 <__aeabi_dmul>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4a67      	ldr	r2, [pc, #412]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001436:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_act2;
 800143a:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fff2 	bl	8000428 <__aeabi_f2d>
 8001444:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001446:	cb18      	ldmia	r3, {r3, r4}
 8001448:	461a      	mov	r2, r3
 800144a:	4623      	mov	r3, r4
 800144c:	f7ff f844 	bl	80004d8 <__aeabi_dmul>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800145a:	cb18      	ldmia	r3, {r3, r4}
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	f7ff f83a 	bl	80004d8 <__aeabi_dmul>
 8001464:	4603      	mov	r3, r0
 8001466:	460c      	mov	r4, r1
 8001468:	4618      	mov	r0, r3
 800146a:	4621      	mov	r1, r4
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800146e:	cb18      	ldmia	r3, {r3, r4}
 8001470:	461a      	mov	r2, r3
 8001472:	4623      	mov	r3, r4
 8001474:	f7fe fe7a 	bl	800016c <__adddf3>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800147e:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 8001482:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffce 	bl	8000428 <__aeabi_f2d>
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800148e:	cb18      	ldmia	r3, {r3, r4}
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	f7ff f94a 	bl	800072c <__aeabi_ddiv>
 8001498:	4603      	mov	r3, r0
 800149a:	460c      	mov	r4, r1
 800149c:	4698      	mov	r8, r3
 800149e:	46a1      	mov	r9, r4
 80014a0:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80014a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a6:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80014a8:	cb18      	ldmia	r3, {r3, r4}
 80014aa:	461a      	mov	r2, r3
 80014ac:	4623      	mov	r3, r4
 80014ae:	f7fe fe5b 	bl	8000168 <__aeabi_dsub>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	461a      	mov	r2, r3
 80014b8:	4623      	mov	r3, r4
 80014ba:	4640      	mov	r0, r8
 80014bc:	4649      	mov	r1, r9
 80014be:	f7ff f80b 	bl	80004d8 <__aeabi_dmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4a49      	ldr	r2, [pc, #292]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80014c8:	e9c2 3400 	strd	r3, r4, [r2]
			duty_cycle_pid2 = (uint32_t) fabs(Up2 + Ui_actual2 + Ud2);
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80014ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d2:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80014d4:	cb18      	ldmia	r3, {r3, r4}
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	f7fe fe47 	bl	800016c <__adddf3>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4618      	mov	r0, r3
 80014e4:	4621      	mov	r1, r4
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80014e8:	cb18      	ldmia	r3, {r3, r4}
 80014ea:	461a      	mov	r2, r3
 80014ec:	4623      	mov	r3, r4
 80014ee:	f7fe fe3d 	bl	800016c <__adddf3>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	461d      	mov	r5, r3
 80014f8:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80014fc:	4628      	mov	r0, r5
 80014fe:	4631      	mov	r1, r6
 8001500:	f7ff fac2 	bl	8000a88 <__aeabi_d2uiz>
 8001504:	4602      	mov	r2, r0
 8001506:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001508:	601a      	str	r2, [r3, #0]
			if(duty_cycle_pid2 > 11250){
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f642 32f2 	movw	r2, #11250	; 0x2bf2
 8001512:	4293      	cmp	r3, r2
 8001514:	d903      	bls.n	800151e <HAL_TIM_PeriodElapsedCallback+0x50e>
				duty_cycle_pid2=11250;
 8001516:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001518:	f642 32f2 	movw	r2, #11250	; 0x2bf2
 800151c:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a33      	ldr	r2, [pc, #204]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800152a:	cb18      	ldmia	r3, {r3, r4}
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800152e:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001534:	cb18      	ldmia	r3, {r3, r4}
 8001536:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001538:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 800153c:	e03e      	b.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x5ac>
	}else if(htim->Instance == TIM3){
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d11a      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0x56e>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	429a      	cmp	r2, r3
 8001558:	d908      	bls.n	800156c <HAL_TIM_PeriodElapsedCallback+0x55c>
			contOUFlow--;
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001562:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 8001564:	4827      	ldr	r0, [pc, #156]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001566:	f004 fa35 	bl	80059d4 <puts>
}
 800156a:	e027      	b.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x5ac>
			contOUFlow++;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a23      	ldr	r2, [pc, #140]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001574:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 8001576:	4824      	ldr	r0, [pc, #144]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001578:	f004 fa2c 	bl	80059d4 <puts>
}
 800157c:	e01e      	b.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x5ac>
	}else if(htim->Instance == TIM4){
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d119      	bne.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x5ac>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	429a      	cmp	r2, r3
 8001598:	d908      	bls.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x59c>
			contOUFlow2--;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3b01      	subs	r3, #1
 80015a0:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x604>)
 80015a2:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80015a6:	f004 fa15 	bl	80059d4 <puts>
}
 80015aa:	e007      	b.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x5ac>
			contOUFlow2++;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x604>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x604>)
 80015b4:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80015b8:	f004 fa0c 	bl	80059d4 <puts>
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015c6:	bf00      	nop
 80015c8:	20000258 	.word	0x20000258
 80015cc:	200002b0 	.word	0x200002b0
 80015d0:	20000284 	.word	0x20000284
 80015d4:	200002c0 	.word	0x200002c0
 80015d8:	20000288 	.word	0x20000288
 80015dc:	20000000 	.word	0x20000000
 80015e0:	200002b8 	.word	0x200002b8
 80015e4:	2000028c 	.word	0x2000028c
 80015e8:	20000260 	.word	0x20000260
 80015ec:	200002c8 	.word	0x200002c8
 80015f0:	200002d4 	.word	0x200002d4
 80015f4:	200003d4 	.word	0x200003d4
 80015f8:	40000400 	.word	0x40000400
 80015fc:	20000328 	.word	0x20000328
 8001600:	20000210 	.word	0x20000210
 8001604:	08008ed8 	.word	0x08008ed8
 8001608:	08008eec 	.word	0x08008eec
 800160c:	40000800 	.word	0x40000800
 8001610:	200002e4 	.word	0x200002e4
 8001614:	2000021c 	.word	0x2000021c
 8001618:	08008f00 	.word	0x08008f00
 800161c:	08008f14 	.word	0x08008f14

08001620 <HAL_UART_RxCpltCallback>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a36      	ldr	r2, [pc, #216]	; (8001708 <HAL_UART_RxCpltCallback+0xe8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d165      	bne.n	80016fe <HAL_UART_RxCpltCallback+0xde>
	  {
		  switch(byte){
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_UART_RxCpltCallback+0xec>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b0d      	cmp	r3, #13
 8001638:	d016      	beq.n	8001668 <HAL_UART_RxCpltCallback+0x48>
 800163a:	2b0d      	cmp	r3, #13
 800163c:	dc02      	bgt.n	8001644 <HAL_UART_RxCpltCallback+0x24>
 800163e:	2b08      	cmp	r3, #8
 8001640:	d028      	beq.n	8001694 <HAL_UART_RxCpltCallback+0x74>
 8001642:	e036      	b.n	80016b2 <HAL_UART_RxCpltCallback+0x92>
 8001644:	2b3a      	cmp	r3, #58	; 0x3a
 8001646:	d002      	beq.n	800164e <HAL_UART_RxCpltCallback+0x2e>
 8001648:	2b3b      	cmp	r3, #59	; 0x3b
 800164a:	d00d      	beq.n	8001668 <HAL_UART_RxCpltCallback+0x48>
 800164c:	e031      	b.n	80016b2 <HAL_UART_RxCpltCallback+0x92>
		  	  case ':': //Comienzo de la trama
		  		  flagRx = 1;
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_UART_RxCpltCallback+0xf0>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
		  		  indRx = 0;
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		  		  //imprimir = 0;
		  		  HAL_UART_Transmit(&huart2, &byte, 1, 100);
 800165a:	2364      	movs	r3, #100	; 0x64
 800165c:	2201      	movs	r2, #1
 800165e:	492b      	ldr	r1, [pc, #172]	; (800170c <HAL_UART_RxCpltCallback+0xec>)
 8001660:	482d      	ldr	r0, [pc, #180]	; (8001718 <HAL_UART_RxCpltCallback+0xf8>)
 8001662:	f002 ffd7 	bl	8004614 <HAL_UART_Transmit>
		  		  break;
 8001666:	e045      	b.n	80016f4 <HAL_UART_RxCpltCallback+0xd4>
		  	  case '\r': //Retorno, fin de trama.
		  	  case ';':  //Fin de trama.
		  		HAL_UART_Transmit(&huart2, &byte, 1, 100);
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	4927      	ldr	r1, [pc, #156]	; (800170c <HAL_UART_RxCpltCallback+0xec>)
 800166e:	482a      	ldr	r0, [pc, #168]	; (8001718 <HAL_UART_RxCpltCallback+0xf8>)
 8001670:	f002 ffd0 	bl	8004614 <HAL_UART_Transmit>
		  		  if(flagRx){
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_UART_RxCpltCallback+0xf0>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d036      	beq.n	80016ea <HAL_UART_RxCpltCallback+0xca>
		  			flagRx = 0;
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_UART_RxCpltCallback+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
		  			buffer[indRx] = 0;
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_UART_RxCpltCallback+0xfc>)
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]
		  			interpreteComando();
 800168e:	f7ff fa6b 	bl	8000b68 <interpreteComando>
		  		  }
		  		  break;
 8001692:	e02a      	b.n	80016ea <HAL_UART_RxCpltCallback+0xca>
		  	  case 8: //Retroceso es permitido de esta manera.
		  		  if(flagRx){
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_UART_RxCpltCallback+0xf0>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d028      	beq.n	80016ee <HAL_UART_RxCpltCallback+0xce>
		  			  if(indRx > 0){
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d024      	beq.n	80016ee <HAL_UART_RxCpltCallback+0xce>
		  				indRx--;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 80016ae:	701a      	strb	r2, [r3, #0]
		  			  }
		  		  }
		  		  break;
 80016b0:	e01d      	b.n	80016ee <HAL_UART_RxCpltCallback+0xce>
		  	  default: //Almacenamiento de la trama.
		  		HAL_UART_Transmit(&huart2, &byte, 1, 100);
 80016b2:	2364      	movs	r3, #100	; 0x64
 80016b4:	2201      	movs	r2, #1
 80016b6:	4915      	ldr	r1, [pc, #84]	; (800170c <HAL_UART_RxCpltCallback+0xec>)
 80016b8:	4817      	ldr	r0, [pc, #92]	; (8001718 <HAL_UART_RxCpltCallback+0xf8>)
 80016ba:	f002 ffab 	bl	8004614 <HAL_UART_Transmit>
		  		  if(flagRx){
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_RxCpltCallback+0xf0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d015      	beq.n	80016f2 <HAL_UART_RxCpltCallback+0xd2>
		  			  buffer[indRx] = byte;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_UART_RxCpltCallback+0xec>)
 80016ce:	7819      	ldrb	r1, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_UART_RxCpltCallback+0xfc>)
 80016d2:	5499      	strb	r1, [r3, r2]
		  			  if(indRx < MAX_BUFFER - 1){
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b26      	cmp	r3, #38	; 0x26
 80016da:	d80a      	bhi.n	80016f2 <HAL_UART_RxCpltCallback+0xd2>
		  				indRx++;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_UART_RxCpltCallback+0xf4>)
 80016e6:	701a      	strb	r2, [r3, #0]
		  			  }

		  		  }
		  		break;
 80016e8:	e003      	b.n	80016f2 <HAL_UART_RxCpltCallback+0xd2>
		  		  break;
 80016ea:	bf00      	nop
 80016ec:	e002      	b.n	80016f4 <HAL_UART_RxCpltCallback+0xd4>
		  		  break;
 80016ee:	bf00      	nop
 80016f0:	e000      	b.n	80016f4 <HAL_UART_RxCpltCallback+0xd4>
		  		break;
 80016f2:	bf00      	nop
		  }

	    /* Receive one byte in interrupt mode */
	    HAL_UART_Receive_IT(&huart2, &byte, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	4905      	ldr	r1, [pc, #20]	; (800170c <HAL_UART_RxCpltCallback+0xec>)
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <HAL_UART_RxCpltCallback+0xf8>)
 80016fa:	f003 f8ca 	bl	8004892 <HAL_UART_Receive_IT>
	  }
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004400 	.word	0x40004400
 800170c:	20000390 	.word	0x20000390
 8001710:	20000325 	.word	0x20000325
 8001714:	2000020c 	.word	0x2000020c
 8001718:	20000414 	.word	0x20000414
 800171c:	20000368 	.word	0x20000368

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001724:	f000 fe8e 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001728:	f000 f876 	bl	8001818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172c:	f000 faaa 	bl	8001c84 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001730:	f000 f956 	bl	80019e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001734:	f000 fa7c 	bl	8001c30 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001738:	f000 f8b4 	bl	80018a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800173c:	f000 f9d0 	bl	8001ae0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001740:	f000 fa22 	bl	8001b88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	RetargetInit(&huart2);
 8001744:	482c      	ldr	r0, [pc, #176]	; (80017f8 <main+0xd8>)
 8001746:	f000 fb11 	bl	8001d6c <RetargetInit>
	HAL_UART_Receive_IT(&huart2, &byte, 1);
 800174a:	2201      	movs	r2, #1
 800174c:	492b      	ldr	r1, [pc, #172]	; (80017fc <main+0xdc>)
 800174e:	482a      	ldr	r0, [pc, #168]	; (80017f8 <main+0xd8>)
 8001750:	f003 f89f 	bl	8004892 <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 8001754:	482a      	ldr	r0, [pc, #168]	; (8001800 <main+0xe0>)
 8001756:	f001 fe59 	bl	800340c <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800175a:	2100      	movs	r1, #0
 800175c:	4828      	ldr	r0, [pc, #160]	; (8001800 <main+0xe0>)
 800175e:	f001 fead 	bl	80034bc <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 8001762:	4828      	ldr	r0, [pc, #160]	; (8001804 <main+0xe4>)
 8001764:	f001 fe2f 	bl	80033c6 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001768:	2100      	movs	r1, #0
 800176a:	4826      	ldr	r0, [pc, #152]	; (8001804 <main+0xe4>)
 800176c:	f001 ff52 	bl	8003614 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001770:	2108      	movs	r1, #8
 8001772:	4824      	ldr	r0, [pc, #144]	; (8001804 <main+0xe4>)
 8001774:	f001 ff4e 	bl	8003614 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8001778:	4823      	ldr	r0, [pc, #140]	; (8001808 <main+0xe8>)
 800177a:	f001 fe47 	bl	800340c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800177e:	213c      	movs	r1, #60	; 0x3c
 8001780:	4821      	ldr	r0, [pc, #132]	; (8001808 <main+0xe8>)
 8001782:	f002 f84d 	bl	8003820 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 8001786:	4821      	ldr	r0, [pc, #132]	; (800180c <main+0xec>)
 8001788:	f001 fe40 	bl	800340c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800178c:	213c      	movs	r1, #60	; 0x3c
 800178e:	481f      	ldr	r0, [pc, #124]	; (800180c <main+0xec>)
 8001790:	f002 f846 	bl	8003820 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2110      	movs	r1, #16
 8001798:	481d      	ldr	r0, [pc, #116]	; (8001810 <main+0xf0>)
 800179a:	f001 f9b5 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	481b      	ldr	r0, [pc, #108]	; (8001810 <main+0xf0>)
 80017a4:	f001 f9b0 	bl	8002b08 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <main+0xf0>)
 80017b0:	f001 f9aa 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ba:	4815      	ldr	r0, [pc, #84]	; (8001810 <main+0xf0>)
 80017bc:	f001 f9a4 	bl	8002b08 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <main+0xe8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <main+0xec>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <main+0xf4>)
 80017d8:	f001 f996 	bl	8002b08 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80017dc:	2064      	movs	r0, #100	; 0x64
 80017de:	f000 fe93 	bl	8002508 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <main+0xf4>)
 80017ea:	f001 f98d 	bl	8002b08 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80017ee:	2064      	movs	r0, #100	; 0x64
 80017f0:	f000 fe8a 	bl	8002508 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80017f4:	e7ec      	b.n	80017d0 <main+0xb0>
 80017f6:	bf00      	nop
 80017f8:	20000414 	.word	0x20000414
 80017fc:	20000390 	.word	0x20000390
 8001800:	20000394 	.word	0x20000394
 8001804:	200003d4 	.word	0x200003d4
 8001808:	20000328 	.word	0x20000328
 800180c:	200002e4 	.word	0x200002e4
 8001810:	40010800 	.word	0x40010800
 8001814:	40011000 	.word	0x40011000

08001818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b090      	sub	sp, #64	; 0x40
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	2228      	movs	r2, #40	; 0x28
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fc08 	bl	800503c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184c:	2302      	movs	r3, #2
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001856:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	4618      	mov	r0, r3
 8001862:	f001 f969 	bl	8002b38 <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800186c:	f000 fa78 	bl	8001d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	230f      	movs	r3, #15
 8001872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	2302      	movs	r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2102      	movs	r1, #2
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fbd4 	bl	8003038 <HAL_RCC_ClockConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001896:	f000 fa63 	bl	8001d60 <Error_Handler>
  }
}
 800189a:	bf00      	nop
 800189c:	3740      	adds	r7, #64	; 0x40
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b096      	sub	sp, #88	; 0x58
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2220      	movs	r2, #32
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fbad 	bl	800503c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018e4:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <MX_TIM1_Init+0x138>)
 80018e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018ea:	220b      	movs	r2, #11
 80018ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018f6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001902:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <MX_TIM1_Init+0x134>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <MX_TIM1_Init+0x134>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800190e:	4832      	ldr	r0, [pc, #200]	; (80019d8 <MX_TIM1_Init+0x134>)
 8001910:	f001 fd2e 	bl	8003370 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800191a:	f000 fa21 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001928:	4619      	mov	r1, r3
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <MX_TIM1_Init+0x134>)
 800192c:	f002 f9fe 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001936:	f000 fa13 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800193a:	4827      	ldr	r0, [pc, #156]	; (80019d8 <MX_TIM1_Init+0x134>)
 800193c:	f001 fd89 	bl	8003452 <HAL_TIM_OC_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001946:	f000 fa0b 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001956:	4619      	mov	r1, r3
 8001958:	481f      	ldr	r0, [pc, #124]	; (80019d8 <MX_TIM1_Init+0x134>)
 800195a:	f002 fd67 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001964:	f000 f9fc 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <MX_TIM1_Init+0x134>)
 800198e:	f002 f8a7 	bl	8003ae0 <HAL_TIM_OC_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001998:	f000 f9e2 	bl	8001d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <MX_TIM1_Init+0x134>)
 80019c0:	f002 fd78 	bl	80044b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80019ca:	f000 f9c9 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	3758      	adds	r7, #88	; 0x58
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000394 	.word	0x20000394
 80019dc:	40012c00 	.word	0x40012c00

080019e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	; 0x38
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	615a      	str	r2, [r3, #20]
 8001a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a26:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a38:	4828      	ldr	r0, [pc, #160]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a3a:	f001 fc99 	bl	8003370 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a44:	f000 f98c 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4821      	ldr	r0, [pc, #132]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a56:	f002 f969 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a60:	f000 f97e 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a64:	481d      	ldr	r0, [pc, #116]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a66:	f001 fda1 	bl	80035ac <HAL_TIM_PWM_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a70:	f000 f976 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4619      	mov	r1, r3
 8001a82:	4816      	ldr	r0, [pc, #88]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001a84:	f002 fcd2 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a8e:	f000 f967 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a92:	2360      	movs	r3, #96	; 0x60
 8001a94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001aaa:	f002 f879 	bl	8003ba0 <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ab4:	f000 f954 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2208      	movs	r2, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	4807      	ldr	r0, [pc, #28]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001ac0:	f002 f86e 	bl	8003ba0 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001aca:	f000 f949 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <MX_TIM2_Init+0xfc>)
 8001ad0:	f000 fb10 	bl	80020f4 <HAL_TIM_MspPostInit>

}
 8001ad4:	bf00      	nop
 8001ad6:	3738      	adds	r7, #56	; 0x38
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200003d4 	.word	0x200003d4

08001ae0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 faa4 	bl	800503c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001afe:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <MX_TIM3_Init+0xa4>)
 8001b00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001b10:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001b14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b22:	2303      	movs	r3, #3
 8001b24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001b4e:	f001 fdd9 	bl	8003704 <HAL_TIM_Encoder_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b58:	f000 f902 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_TIM3_Init+0xa0>)
 8001b6a:	f002 fc5f 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b74:	f000 f8f4 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000328 	.word	0x20000328
 8001b84:	40000400 	.word	0x40000400

08001b88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fa50 	bl	800503c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001ba6:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <MX_TIM4_Init+0xa4>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bb8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001bbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bf6:	f001 fd85 	bl	8003704 <HAL_TIM_Encoder_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c00:	f000 f8ae 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001c12:	f002 fc0b 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c1c:	f000 f8a0 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200002e4 	.word	0x200002e4
 8001c2c:	40000800 	.word	0x40000800

08001c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <MX_USART2_UART_Init+0x50>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c68:	f002 fc87 	bl	800457a <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c72:	f000 f875 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000414 	.word	0x20000414
 8001c80:	40004400 	.word	0x40004400

08001c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001c9e:	f043 0310 	orr.w	r3, r3, #16
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001cb6:	f043 0320 	orr.w	r3, r3, #32
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cfe:	4816      	ldr	r0, [pc, #88]	; (8001d58 <MX_GPIO_Init+0xd4>)
 8001d00:	f000 ff02 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001d0a:	4814      	ldr	r0, [pc, #80]	; (8001d5c <MX_GPIO_Init+0xd8>)
 8001d0c:	f000 fefc 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <MX_GPIO_Init+0xd4>)
 8001d2a:	f000 fd93 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 8001d2e:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_GPIO_Init+0xd8>)
 8001d48:	f000 fd84 	bl	8002854 <HAL_GPIO_Init>

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	40010800 	.word	0x40010800

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <RetargetInit+0x28>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <RetargetInit+0x2c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6898      	ldr	r0, [r3, #8]
 8001d80:	2300      	movs	r3, #0
 8001d82:	2202      	movs	r2, #2
 8001d84:	2100      	movs	r1, #0
 8001d86:	f003 fe2d 	bl	80059e4 <setvbuf>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000454 	.word	0x20000454
 8001d98:	20000020 	.word	0x20000020

08001d9c <_isatty>:

int _isatty(int fd) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db04      	blt.n	8001db4 <_isatty+0x18>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	dc01      	bgt.n	8001db4 <_isatty+0x18>
    return 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e005      	b.n	8001dc0 <_isatty+0x24>

  errno = EBADF;
 8001db4:	f003 f918 	bl	8004fe8 <__errno>
 8001db8:	4602      	mov	r2, r0
 8001dba:	2309      	movs	r3, #9
 8001dbc:	6013      	str	r3, [r2, #0]
  return 0;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_write>:

int _write(int fd, char* ptr, int len) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d002      	beq.n	8001de0 <_write+0x18>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d111      	bne.n	8001e04 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <_write+0x54>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	f002 fc11 	bl	8004614 <HAL_UART_Transmit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <_write+0x38>
      return len;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	e008      	b.n	8001e12 <_write+0x4a>
    else
      return EIO;
 8001e00:	2305      	movs	r3, #5
 8001e02:	e006      	b.n	8001e12 <_write+0x4a>
  }
  errno = EBADF;
 8001e04:	f003 f8f0 	bl	8004fe8 <__errno>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	2309      	movs	r3, #9
 8001e0c:	6013      	str	r3, [r2, #0]
  return -1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000454 	.word	0x20000454

08001e20 <_close>:

int _close(int fd) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db04      	blt.n	8001e38 <_close+0x18>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	dc01      	bgt.n	8001e38 <_close+0x18>
    return 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e006      	b.n	8001e46 <_close+0x26>

  errno = EBADF;
 8001e38:	f003 f8d6 	bl	8004fe8 <__errno>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	2309      	movs	r3, #9
 8001e40:	6013      	str	r3, [r2, #0]
  return -1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001e5a:	f003 f8c5 	bl	8004fe8 <__errno>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	2309      	movs	r3, #9
 8001e62:	6013      	str	r3, [r2, #0]
  return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_read>:

int _read(int fd, char* ptr, int len) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d110      	bne.n	8001ea4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <_read+0x4c>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	f002 fc5a 	bl	8004746 <HAL_UART_Receive>
 8001e92:	4603      	mov	r3, r0
 8001e94:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <_read+0x30>
      return 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e008      	b.n	8001eb2 <_read+0x42>
    else
      return EIO;
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	e006      	b.n	8001eb2 <_read+0x42>
  }
  errno = EBADF;
 8001ea4:	f003 f8a0 	bl	8004fe8 <__errno>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	2309      	movs	r3, #9
 8001eac:	6013      	str	r3, [r2, #0]
  return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000454 	.word	0x20000454

08001ec0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db08      	blt.n	8001ee2 <_fstat+0x22>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	dc05      	bgt.n	8001ee2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001edc:	605a      	str	r2, [r3, #4]
    return 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e005      	b.n	8001eee <_fstat+0x2e>
  }

  errno = EBADF;
 8001ee2:	f003 f881 	bl	8004fe8 <__errno>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	2309      	movs	r3, #9
 8001eea:	6013      	str	r3, [r2, #0]
  return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6193      	str	r3, [r2, #24]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_MspInit+0x60>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_MspInit+0x60>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000

08001f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_TIM_Base_MspInit+0x98>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6e:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8001f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f78:	6193      	str	r3, [r2, #24]
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2018      	movs	r0, #24
 8001f8c:	f000 fbb5 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001f90:	2018      	movs	r0, #24
 8001f92:	f000 fbce 	bl	8002732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f000 fbad 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001fa0:	2019      	movs	r0, #25
 8001fa2:	f000 fbc6 	bl	8002732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	201a      	movs	r0, #26
 8001fac:	f000 fba5 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001fb0:	201a      	movs	r0, #26
 8001fb2:	f000 fbbe 	bl	8002732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	201b      	movs	r0, #27
 8001fbc:	f000 fb9d 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001fc0:	201b      	movs	r0, #27
 8001fc2:	f000 fbb6 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fc6:	e010      	b.n	8001fea <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d10b      	bne.n	8001fea <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40012c00 	.word	0x40012c00
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d12c      	bne.n	8002076 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	4a30      	ldr	r2, [pc, #192]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	61d3      	str	r3, [r2, #28]
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204c:	23c0      	movs	r3, #192	; 0xc0
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4619      	mov	r1, r3
 800205e:	4822      	ldr	r0, [pc, #136]	; (80020e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002060:	f000 fbf8 	bl	8002854 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	201d      	movs	r0, #29
 800206a:	f000 fb46 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800206e:	201d      	movs	r0, #29
 8002070:	f000 fb5f 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002074:	e030      	b.n	80020d8 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d12b      	bne.n	80020d8 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	61d3      	str	r3, [r2, #28]
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4619      	mov	r1, r3
 80020c2:	480b      	ldr	r0, [pc, #44]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 80020c4:	f000 fbc6 	bl	8002854 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	201e      	movs	r0, #30
 80020ce:	f000 fb14 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020d2:	201e      	movs	r0, #30
 80020d4:	f000 fb2d 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40010c00 	.word	0x40010c00

080020f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002112:	d142      	bne.n	800219a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_TIM_MspPostInit+0xb0>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <HAL_TIM_MspPostInit+0xb0>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_TIM_MspPostInit+0xb0>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_TIM_MspPostInit+0xb0>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_TIM_MspPostInit+0xb0>)
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_TIM_MspPostInit+0xb0>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002144:	2301      	movs	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2302      	movs	r3, #2
 800214e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <HAL_TIM_MspPostInit+0xb4>)
 8002158:	f000 fb7c 	bl	8002854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800215c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <HAL_TIM_MspPostInit+0xb8>)
 8002172:	f000 fb6f 	bl	8002854 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_TIM_MspPostInit+0xbc>)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010800 	.word	0x40010800
 80021ac:	40010c00 	.word	0x40010c00
 80021b0:	40010000 	.word	0x40010000

080021b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_UART_MspInit+0x98>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d137      	bne.n	8002244 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_UART_MspInit+0x9c>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_UART_MspInit+0x9c>)
 80021da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021de:	61d3      	str	r3, [r2, #28]
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_UART_MspInit+0x9c>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x9c>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_UART_MspInit+0x9c>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0x9c>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002204:	2304      	movs	r3, #4
 8002206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	4619      	mov	r1, r3
 8002216:	480f      	ldr	r0, [pc, #60]	; (8002254 <HAL_UART_MspInit+0xa0>)
 8002218:	f000 fb1c 	bl	8002854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221c:	2308      	movs	r3, #8
 800221e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4619      	mov	r1, r3
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <HAL_UART_MspInit+0xa0>)
 8002230:	f000 fb10 	bl	8002854 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2026      	movs	r0, #38	; 0x26
 800223a:	f000 fa5e 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223e:	2026      	movs	r0, #38	; 0x26
 8002240:	f000 fa77 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40004400 	.word	0x40004400
 8002250:	40021000 	.word	0x40021000
 8002254:	40010800 	.word	0x40010800

08002258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <HardFault_Handler+0x4>

0800226a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <MemManage_Handler+0x4>

08002270 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <BusFault_Handler+0x4>

08002276 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <UsageFault_Handler+0x4>

0800227c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a4:	f000 f914 	bl	80024d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_BRK_IRQHandler+0x10>)
 80022b2:	f001 fb0c 	bl	80038ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000394 	.word	0x20000394

080022c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM1_UP_IRQHandler+0x10>)
 80022c6:	f001 fb02 	bl	80038ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000394 	.word	0x20000394

080022d4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022da:	f001 faf8 	bl	80038ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000394 	.word	0x20000394

080022e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM1_CC_IRQHandler+0x10>)
 80022ee:	f001 faee 	bl	80038ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000394 	.word	0x20000394

080022fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM3_IRQHandler+0x10>)
 8002302:	f001 fae4 	bl	80038ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000328 	.word	0x20000328

08002310 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM4_IRQHandler+0x10>)
 8002316:	f001 fada 	bl	80038ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200002e4 	.word	0x200002e4

08002324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <USART2_IRQHandler+0x10>)
 800232a:	f002 fb07 	bl	800493c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000414 	.word	0x20000414

08002338 <_sbrk>:
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <_sbrk+0x50>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <_sbrk+0x16>
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <_sbrk+0x50>)
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <_sbrk+0x54>)
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <_sbrk+0x50>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <_sbrk+0x50>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	466a      	mov	r2, sp
 800235e:	4293      	cmp	r3, r2
 8002360:	d907      	bls.n	8002372 <_sbrk+0x3a>
 8002362:	f002 fe41 	bl	8004fe8 <__errno>
 8002366:	4602      	mov	r2, r0
 8002368:	230c      	movs	r3, #12
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002370:	e006      	b.n	8002380 <_sbrk+0x48>
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <_sbrk+0x50>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	4a03      	ldr	r2, [pc, #12]	; (8002388 <_sbrk+0x50>)
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200002d8 	.word	0x200002d8
 800238c:	20000460 	.word	0x20000460

08002390 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <SystemInit+0x5c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <SystemInit+0x5c>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <SystemInit+0x5c>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4911      	ldr	r1, [pc, #68]	; (80023ec <SystemInit+0x5c>)
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <SystemInit+0x60>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <SystemInit+0x5c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <SystemInit+0x5c>)
 80023b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <SystemInit+0x5c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <SystemInit+0x5c>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <SystemInit+0x5c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <SystemInit+0x5c>)
 80023ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <SystemInit+0x5c>)
 80023d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <SystemInit+0x64>)
 80023de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	40021000 	.word	0x40021000
 80023f0:	f8ff0000 	.word	0xf8ff0000
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:
 80023f8:	2100      	movs	r1, #0
 80023fa:	e003      	b.n	8002404 <LoopCopyDataInit>

080023fc <CopyDataInit>:
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <LoopFillZerobss+0x14>)
 80023fe:	585b      	ldr	r3, [r3, r1]
 8002400:	5043      	str	r3, [r0, r1]
 8002402:	3104      	adds	r1, #4

08002404 <LoopCopyDataInit>:
 8002404:	480a      	ldr	r0, [pc, #40]	; (8002430 <LoopFillZerobss+0x18>)
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <LoopFillZerobss+0x1c>)
 8002408:	1842      	adds	r2, r0, r1
 800240a:	429a      	cmp	r2, r3
 800240c:	d3f6      	bcc.n	80023fc <CopyDataInit>
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <LoopFillZerobss+0x20>)
 8002410:	e002      	b.n	8002418 <LoopFillZerobss>

08002412 <FillZerobss>:
 8002412:	2300      	movs	r3, #0
 8002414:	f842 3b04 	str.w	r3, [r2], #4

08002418 <LoopFillZerobss>:
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <LoopFillZerobss+0x24>)
 800241a:	429a      	cmp	r2, r3
 800241c:	d3f9      	bcc.n	8002412 <FillZerobss>
 800241e:	f7ff ffb7 	bl	8002390 <SystemInit>
 8002422:	f002 fde7 	bl	8004ff4 <__libc_init_array>
 8002426:	f7ff f97b 	bl	8001720 <main>
 800242a:	4770      	bx	lr
 800242c:	08009278 	.word	0x08009278
 8002430:	20000000 	.word	0x20000000
 8002434:	200001f0 	.word	0x200001f0
 8002438:	200001f0 	.word	0x200001f0
 800243c:	20000460 	.word	0x20000460

08002440 <ADC1_2_IRQHandler>:
 8002440:	e7fe      	b.n	8002440 <ADC1_2_IRQHandler>
	...

08002444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_Init+0x28>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_Init+0x28>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f000 f945 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245a:	2000      	movs	r0, #0
 800245c:	f000 f808 	bl	8002470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002460:	f7ff fd4a 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x54>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x58>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002486:	fbb3 f3f1 	udiv	r3, r3, r1
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f95d 	bl	800274e <HAL_SYSTICK_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e00e      	b.n	80024bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d80a      	bhi.n	80024ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ac:	f000 f925 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <HAL_InitTick+0x5c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000014 	.word	0x20000014
 80024c8:	2000001c 	.word	0x2000001c
 80024cc:	20000018 	.word	0x20000018

080024d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_IncTick+0x1c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_IncTick+0x20>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_IncTick+0x20>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	2000001c 	.word	0x2000001c
 80024f0:	20000458 	.word	0x20000458

080024f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <HAL_GetTick+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000458 	.word	0x20000458

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff fff0 	bl	80024f4 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_Delay+0x40>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffe0 	bl	80024f4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000001c 	.word	0x2000001c

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4906      	ldr	r1, [pc, #24]	; (80025e4 <__NVIC_EnableIRQ+0x34>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	; (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	; (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c4:	f7ff ff90 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff2d 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff42 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff90 	bl	800263c <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5f 	bl	80025e8 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff35 	bl	80025b0 <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffa2 	bl	80026a0 <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800277a:	2b02      	cmp	r3, #2
 800277c:	d005      	beq.n	800278a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e051      	b.n	800282e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 020e 	bic.w	r2, r2, #14
 8002798:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_DMA_Abort_IT+0xd0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d029      	beq.n	8002808 <HAL_DMA_Abort_IT+0xa0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_DMA_Abort_IT+0xd4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d022      	beq.n	8002804 <HAL_DMA_Abort_IT+0x9c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <HAL_DMA_Abort_IT+0xd8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d01a      	beq.n	80027fe <HAL_DMA_Abort_IT+0x96>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <HAL_DMA_Abort_IT+0xdc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d012      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x90>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_DMA_Abort_IT+0xe0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00a      	beq.n	80027f2 <HAL_DMA_Abort_IT+0x8a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1a      	ldr	r2, [pc, #104]	; (800284c <HAL_DMA_Abort_IT+0xe4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d102      	bne.n	80027ec <HAL_DMA_Abort_IT+0x84>
 80027e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027ea:	e00e      	b.n	800280a <HAL_DMA_Abort_IT+0xa2>
 80027ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f0:	e00b      	b.n	800280a <HAL_DMA_Abort_IT+0xa2>
 80027f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f6:	e008      	b.n	800280a <HAL_DMA_Abort_IT+0xa2>
 80027f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fc:	e005      	b.n	800280a <HAL_DMA_Abort_IT+0xa2>
 80027fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002802:	e002      	b.n	800280a <HAL_DMA_Abort_IT+0xa2>
 8002804:	2310      	movs	r3, #16
 8002806:	e000      	b.n	800280a <HAL_DMA_Abort_IT+0xa2>
 8002808:	2301      	movs	r3, #1
 800280a:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_DMA_Abort_IT+0xe8>)
 800280c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
    } 
  }
  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40020008 	.word	0x40020008
 800283c:	4002001c 	.word	0x4002001c
 8002840:	40020030 	.word	0x40020030
 8002844:	40020044 	.word	0x40020044
 8002848:	40020058 	.word	0x40020058
 800284c:	4002006c 	.word	0x4002006c
 8002850:	40020000 	.word	0x40020000

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b08b      	sub	sp, #44	; 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002866:	e127      	b.n	8002ab8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002868:	2201      	movs	r2, #1
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8116 	bne.w	8002ab2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b12      	cmp	r3, #18
 800288c:	d034      	beq.n	80028f8 <HAL_GPIO_Init+0xa4>
 800288e:	2b12      	cmp	r3, #18
 8002890:	d80d      	bhi.n	80028ae <HAL_GPIO_Init+0x5a>
 8002892:	2b02      	cmp	r3, #2
 8002894:	d02b      	beq.n	80028ee <HAL_GPIO_Init+0x9a>
 8002896:	2b02      	cmp	r3, #2
 8002898:	d804      	bhi.n	80028a4 <HAL_GPIO_Init+0x50>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d031      	beq.n	8002902 <HAL_GPIO_Init+0xae>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d01c      	beq.n	80028dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a2:	e048      	b.n	8002936 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d043      	beq.n	8002930 <HAL_GPIO_Init+0xdc>
 80028a8:	2b11      	cmp	r3, #17
 80028aa:	d01b      	beq.n	80028e4 <HAL_GPIO_Init+0x90>
          break;
 80028ac:	e043      	b.n	8002936 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028ae:	4a89      	ldr	r2, [pc, #548]	; (8002ad4 <HAL_GPIO_Init+0x280>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d026      	beq.n	8002902 <HAL_GPIO_Init+0xae>
 80028b4:	4a87      	ldr	r2, [pc, #540]	; (8002ad4 <HAL_GPIO_Init+0x280>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d806      	bhi.n	80028c8 <HAL_GPIO_Init+0x74>
 80028ba:	4a87      	ldr	r2, [pc, #540]	; (8002ad8 <HAL_GPIO_Init+0x284>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d020      	beq.n	8002902 <HAL_GPIO_Init+0xae>
 80028c0:	4a86      	ldr	r2, [pc, #536]	; (8002adc <HAL_GPIO_Init+0x288>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01d      	beq.n	8002902 <HAL_GPIO_Init+0xae>
          break;
 80028c6:	e036      	b.n	8002936 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028c8:	4a85      	ldr	r2, [pc, #532]	; (8002ae0 <HAL_GPIO_Init+0x28c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d019      	beq.n	8002902 <HAL_GPIO_Init+0xae>
 80028ce:	4a85      	ldr	r2, [pc, #532]	; (8002ae4 <HAL_GPIO_Init+0x290>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d016      	beq.n	8002902 <HAL_GPIO_Init+0xae>
 80028d4:	4a84      	ldr	r2, [pc, #528]	; (8002ae8 <HAL_GPIO_Init+0x294>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0xae>
          break;
 80028da:	e02c      	b.n	8002936 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	623b      	str	r3, [r7, #32]
          break;
 80028e2:	e028      	b.n	8002936 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	623b      	str	r3, [r7, #32]
          break;
 80028ec:	e023      	b.n	8002936 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	3308      	adds	r3, #8
 80028f4:	623b      	str	r3, [r7, #32]
          break;
 80028f6:	e01e      	b.n	8002936 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	330c      	adds	r3, #12
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e019      	b.n	8002936 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800290a:	2304      	movs	r3, #4
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e012      	b.n	8002936 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002918:	2308      	movs	r3, #8
 800291a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	611a      	str	r2, [r3, #16]
          break;
 8002922:	e008      	b.n	8002936 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002924:	2308      	movs	r3, #8
 8002926:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	615a      	str	r2, [r3, #20]
          break;
 800292e:	e002      	b.n	8002936 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2bff      	cmp	r3, #255	; 0xff
 800293a:	d801      	bhi.n	8002940 <HAL_GPIO_Init+0xec>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	e001      	b.n	8002944 <HAL_GPIO_Init+0xf0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2bff      	cmp	r3, #255	; 0xff
 800294a:	d802      	bhi.n	8002952 <HAL_GPIO_Init+0xfe>
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x104>
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	3b08      	subs	r3, #8
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	210f      	movs	r1, #15
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	401a      	ands	r2, r3
 800296a:	6a39      	ldr	r1, [r7, #32]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8096 	beq.w	8002ab2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002986:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_GPIO_Init+0x298>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_GPIO_Init+0x298>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6193      	str	r3, [r2, #24]
 8002992:	4b56      	ldr	r3, [pc, #344]	; (8002aec <HAL_GPIO_Init+0x298>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800299e:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_GPIO_Init+0x29c>)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_GPIO_Init+0x2a0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x19e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x2a4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x19a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a49      	ldr	r2, [pc, #292]	; (8002afc <HAL_GPIO_Init+0x2a8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x196>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a48      	ldr	r2, [pc, #288]	; (8002b00 <HAL_GPIO_Init+0x2ac>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x192>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e006      	b.n	80029f4 <HAL_GPIO_Init+0x1a0>
 80029e6:	2304      	movs	r3, #4
 80029e8:	e004      	b.n	80029f4 <HAL_GPIO_Init+0x1a0>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e002      	b.n	80029f4 <HAL_GPIO_Init+0x1a0>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_GPIO_Init+0x1a0>
 80029f2:	2300      	movs	r3, #0
 80029f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f6:	f002 0203 	and.w	r2, r2, #3
 80029fa:	0092      	lsls	r2, r2, #2
 80029fc:	4093      	lsls	r3, r2
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a04:	493a      	ldr	r1, [pc, #232]	; (8002af0 <HAL_GPIO_Init+0x29c>)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4938      	ldr	r1, [pc, #224]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
 8002a2a:	e006      	b.n	8002a3a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	4933      	ldr	r1, [pc, #204]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a46:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	492e      	ldr	r1, [pc, #184]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
 8002a52:	e006      	b.n	8002a62 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	4929      	ldr	r1, [pc, #164]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a6e:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	4924      	ldr	r1, [pc, #144]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
 8002a7a:	e006      	b.n	8002a8a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	491f      	ldr	r1, [pc, #124]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	491a      	ldr	r1, [pc, #104]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4915      	ldr	r1, [pc, #84]	; (8002b04 <HAL_GPIO_Init+0x2b0>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f47f aed0 	bne.w	8002868 <HAL_GPIO_Init+0x14>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	372c      	adds	r7, #44	; 0x2c
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	10210000 	.word	0x10210000
 8002ad8:	10110000 	.word	0x10110000
 8002adc:	10120000 	.word	0x10120000
 8002ae0:	10310000 	.word	0x10310000
 8002ae4:	10320000 	.word	0x10320000
 8002ae8:	10220000 	.word	0x10220000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010800 	.word	0x40010800
 8002af8:	40010c00 	.word	0x40010c00
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e26c      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x12c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e246      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x76>
 8002ba0:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7f      	ldr	r2, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fc6e 	bl	80024f4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff fc6a 	bl	80024f4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1fa      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe4>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff fc5a 	bl	80024f4 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7ff fc56 	bl	80024f4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1e6      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x10c>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1ba      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7ff fc0f 	bl	80024f4 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7ff fc0b 	bl	80024f4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e19b      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4927      	ldr	r1, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7ff fbee 	bl	80024f4 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7ff fbea 	bl	80024f4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e17a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7ff fbce 	bl	80024f4 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7ff fbca 	bl	80024f4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e15a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 fada 	bl	8003334 <RCC_Delay>
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7ff fbb4 	bl	80024f4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7ff fbb0 	bl	80024f4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e140      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	42420000 	.word	0x42420000
 8002dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b9e      	ldr	r3, [pc, #632]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e9      	bne.n	8002d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a6 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b97      	ldr	r3, [pc, #604]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b94      	ldr	r3, [pc, #592]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a93      	ldr	r2, [pc, #588]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b8b      	ldr	r3, [pc, #556]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a8a      	ldr	r2, [pc, #552]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff fb71 	bl	80024f4 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7ff fb6d 	bl	80024f4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0fd      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e02d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a75      	ldr	r2, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a72      	ldr	r2, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x356>
 8002e74:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a6c      	ldr	r2, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a69      	ldr	r2, [pc, #420]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a66      	ldr	r2, [pc, #408]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b64      	ldr	r3, [pc, #400]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a63      	ldr	r2, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7ff fb21 	bl	80024f4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7ff fb1d 	bl	80024f4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0ab      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7ff fb0b 	bl	80024f4 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7ff fb07 	bl	80024f4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e095      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b48      	ldr	r3, [pc, #288]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a47      	ldr	r2, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8081 	beq.w	8003022 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d061      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d146      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7ff fadb 	bl	80024f4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7ff fad7 	bl	80024f4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e067      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	492d      	ldr	r1, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a19      	ldr	r1, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	4927      	ldr	r1, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7ff faab 	bl	80024f4 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7ff faa7 	bl	80024f4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e037      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
 8002fc0:	e02f      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff fa94 	bl	80024f4 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7ff fa90 	bl	80024f4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e020      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x498>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	42420060 	.word	0x42420060

08003038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d0      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d910      	bls.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4965      	ldr	r1, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d040      	beq.n	8003158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d115      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e073      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003116:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4936      	ldr	r1, [pc, #216]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003128:	f7ff f9e4 	bl	80024f4 <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	e00a      	b.n	8003146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7ff f9e0 	bl	80024f4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e053      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 020c 	and.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d1eb      	bne.n	8003130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d210      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	4922      	ldr	r1, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4601      	mov	r1, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	fa21 f303 	lsr.w	r3, r1, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1cc>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f942 	bl	8002470 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40021000 	.word	0x40021000
 8003200:	08008f3c 	.word	0x08008f3c
 8003204:	20000014 	.word	0x20000014
 8003208:	20000018 	.word	0x20000018

0800320c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b490      	push	{r4, r7}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003214:	1d3c      	adds	r4, r7, #4
 8003216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800321c:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b04      	cmp	r3, #4
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x40>
 8003246:	2b08      	cmp	r3, #8
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x46>
 800324a:	e02d      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800324c:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800324e:	623b      	str	r3, [r7, #32]
      break;
 8003250:	e02d      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	0c9b      	lsrs	r3, r3, #18
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800325e:	4413      	add	r3, r2
 8003260:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003264:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c5b      	lsrs	r3, r3, #17
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327e:	4413      	add	r3, r2
 8003280:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003284:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800328a:	fb02 f203 	mul.w	r2, r2, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e004      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	623b      	str	r3, [r7, #32]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032aa:	623b      	str	r3, [r7, #32]
      break;
 80032ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc90      	pop	{r4, r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	08008f28 	.word	0x08008f28
 80032c0:	08008f38 	.word	0x08008f38
 80032c4:	40021000 	.word	0x40021000
 80032c8:	007a1200 	.word	0x007a1200
 80032cc:	003d0900 	.word	0x003d0900

080032d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	20000014 	.word	0x20000014

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e8:	f7ff fff2 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032ec:	4601      	mov	r1, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000
 8003308:	08008f4c 	.word	0x08008f4c

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003310:	f7ff ffde 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003314:	4601      	mov	r1, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	0adb      	lsrs	r3, r3, #11
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4a03      	ldr	r2, [pc, #12]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08008f4c 	.word	0x08008f4c

08003334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <RCC_Delay+0x34>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0a      	ldr	r2, [pc, #40]	; (800336c <RCC_Delay+0x38>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a5b      	lsrs	r3, r3, #9
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003350:	bf00      	nop
  }
  while (Delay --);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f9      	bne.n	8003350 <RCC_Delay+0x1c>
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000014 	.word	0x20000014
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01d      	b.n	80033be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fde0 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 fd98 	bl	8003ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d007      	beq.n	8003446 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e01d      	b.n	80034a0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f815 	bl	80034a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f000 fd27 	bl	8003ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d841      	bhi.n	8003550 <HAL_TIM_OC_Start_IT+0x94>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <HAL_TIM_OC_Start_IT+0x18>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	08003509 	.word	0x08003509
 80034d8:	08003551 	.word	0x08003551
 80034dc:	08003551 	.word	0x08003551
 80034e0:	08003551 	.word	0x08003551
 80034e4:	0800351b 	.word	0x0800351b
 80034e8:	08003551 	.word	0x08003551
 80034ec:	08003551 	.word	0x08003551
 80034f0:	08003551 	.word	0x08003551
 80034f4:	0800352d 	.word	0x0800352d
 80034f8:	08003551 	.word	0x08003551
 80034fc:	08003551 	.word	0x08003551
 8003500:	08003551 	.word	0x08003551
 8003504:	0800353f 	.word	0x0800353f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0202 	orr.w	r2, r2, #2
 8003516:	60da      	str	r2, [r3, #12]
      break;
 8003518:	e01b      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0204 	orr.w	r2, r2, #4
 8003528:	60da      	str	r2, [r3, #12]
      break;
 800352a:	e012      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0208 	orr.w	r2, r2, #8
 800353a:	60da      	str	r2, [r3, #12]
      break;
 800353c:	e009      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0210 	orr.w	r2, r2, #16
 800354c:	60da      	str	r2, [r3, #12]
      break;
 800354e:	e000      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003550:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2201      	movs	r2, #1
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 ff42 	bl	80043e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a10      	ldr	r2, [pc, #64]	; (80035a8 <HAL_TIM_OC_Start_IT+0xec>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d107      	bne.n	800357a <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d007      	beq.n	800359c <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40012c00 	.word	0x40012c00

080035ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e01d      	b.n	80035fa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f815 	bl	8003602 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 fc7a 	bl	8003ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b0c      	cmp	r3, #12
 8003622:	d841      	bhi.n	80036a8 <HAL_TIM_PWM_Start_IT+0x94>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <HAL_TIM_PWM_Start_IT+0x18>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003661 	.word	0x08003661
 8003630:	080036a9 	.word	0x080036a9
 8003634:	080036a9 	.word	0x080036a9
 8003638:	080036a9 	.word	0x080036a9
 800363c:	08003673 	.word	0x08003673
 8003640:	080036a9 	.word	0x080036a9
 8003644:	080036a9 	.word	0x080036a9
 8003648:	080036a9 	.word	0x080036a9
 800364c:	08003685 	.word	0x08003685
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036a9 	.word	0x080036a9
 8003658:	080036a9 	.word	0x080036a9
 800365c:	08003697 	.word	0x08003697
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0202 	orr.w	r2, r2, #2
 800366e:	60da      	str	r2, [r3, #12]
      break;
 8003670:	e01b      	b.n	80036aa <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0204 	orr.w	r2, r2, #4
 8003680:	60da      	str	r2, [r3, #12]
      break;
 8003682:	e012      	b.n	80036aa <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	60da      	str	r2, [r3, #12]
      break;
 8003694:	e009      	b.n	80036aa <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0210 	orr.w	r2, r2, #16
 80036a4:	60da      	str	r2, [r3, #12]
      break;
 80036a6:	e000      	b.n	80036aa <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80036a8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2201      	movs	r2, #1
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fe96 	bl	80043e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_TIM_PWM_Start_IT+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d107      	bne.n	80036d2 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d007      	beq.n	80036f4 <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00

08003704 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e07f      	b.n	8003818 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7fe fc65 	bl	8001ffc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003748:	f023 0307 	bic.w	r3, r3, #7
 800374c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f000 fbc3 	bl	8003ee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	4313      	orrs	r3, r2
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037a4:	f023 030c 	bic.w	r3, r3, #12
 80037a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	4313      	orrs	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	011a      	lsls	r2, r3, #4
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	031b      	lsls	r3, r3, #12
 80037d4:	4313      	orrs	r3, r2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	4313      	orrs	r3, r2
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_TIM_Encoder_Start_IT+0x16>
 8003830:	2b04      	cmp	r3, #4
 8003832:	d010      	beq.n	8003856 <HAL_TIM_Encoder_Start_IT+0x36>
 8003834:	e01f      	b.n	8003876 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fdd0 	bl	80043e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0202 	orr.w	r2, r2, #2
 8003852:	60da      	str	r2, [r3, #12]
      break;
 8003854:	e02e      	b.n	80038b4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2201      	movs	r2, #1
 800385c:	2104      	movs	r1, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fdc0 	bl	80043e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0204 	orr.w	r2, r2, #4
 8003872:	60da      	str	r2, [r3, #12]
      break;
 8003874:	e01e      	b.n	80038b4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fdb0 	bl	80043e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	2104      	movs	r1, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fda9 	bl	80043e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0202 	orr.w	r2, r2, #2
 80038a0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0204 	orr.w	r2, r2, #4
 80038b0:	60da      	str	r2, [r3, #12]
      break;
 80038b2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d122      	bne.n	800392a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d11b      	bne.n	800392a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f06f 0202 	mvn.w	r2, #2
 80038fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 facb 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 8003916:	e005      	b.n	8003924 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fabe 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 facd 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d122      	bne.n	800397e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d11b      	bne.n	800397e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0204 	mvn.w	r2, #4
 800394e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 faa1 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 800396a:	e005      	b.n	8003978 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa94 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 faa3 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d122      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d11b      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f06f 0208 	mvn.w	r2, #8
 80039a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2204      	movs	r2, #4
 80039a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fa77 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 80039be:	e005      	b.n	80039cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fa6a 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa79 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d122      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d11b      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f06f 0210 	mvn.w	r2, #16
 80039f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2208      	movs	r2, #8
 80039fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fa4d 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 8003a12:	e005      	b.n	8003a20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fa40 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fa4f 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10e      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d107      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f06f 0201 	mvn.w	r2, #1
 8003a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fd fadf 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d10e      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fd75 	bl	8004568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d10e      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d107      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa13 	bl	8003ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d107      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0220 	mvn.w	r2, #32
 8003ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fd40 	bl	8004556 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_OC_ConfigChannel+0x1a>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e04e      	b.n	8003b98 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d839      	bhi.n	8003b84 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003b85 	.word	0x08003b85
 8003b20:	08003b85 	.word	0x08003b85
 8003b24:	08003b85 	.word	0x08003b85
 8003b28:	08003b5b 	.word	0x08003b5b
 8003b2c:	08003b85 	.word	0x08003b85
 8003b30:	08003b85 	.word	0x08003b85
 8003b34:	08003b85 	.word	0x08003b85
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b85 	.word	0x08003b85
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003b77 	.word	0x08003b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fa28 	bl	8003fa8 <TIM_OC1_SetConfig>
      break;
 8003b58:	e015      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa87 	bl	8004074 <TIM_OC2_SetConfig>
      break;
 8003b66:	e00e      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 faea 	bl	8004148 <TIM_OC3_SetConfig>
      break;
 8003b74:	e007      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fb4d 	bl	800421c <TIM_OC4_SetConfig>
      break;
 8003b82:	e000      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003b84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0b4      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	f200 809f 	bhi.w	8003d10 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003d11 	.word	0x08003d11
 8003be0:	08003d11 	.word	0x08003d11
 8003be4:	08003d11 	.word	0x08003d11
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003d11 	.word	0x08003d11
 8003bf0:	08003d11 	.word	0x08003d11
 8003bf4:	08003d11 	.word	0x08003d11
 8003bf8:	08003c8f 	.word	0x08003c8f
 8003bfc:	08003d11 	.word	0x08003d11
 8003c00:	08003d11 	.word	0x08003d11
 8003c04:	08003d11 	.word	0x08003d11
 8003c08:	08003ccf 	.word	0x08003ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f9c8 	bl	8003fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0208 	orr.w	r2, r2, #8
 8003c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0204 	bic.w	r2, r2, #4
 8003c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6999      	ldr	r1, [r3, #24]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	619a      	str	r2, [r3, #24]
      break;
 8003c4a:	e062      	b.n	8003d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa0e 	bl	8004074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	619a      	str	r2, [r3, #24]
      break;
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fa57 	bl	8004148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0208 	orr.w	r2, r2, #8
 8003ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0204 	bic.w	r2, r2, #4
 8003cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
      break;
 8003ccc:	e021      	b.n	8003d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 faa1 	bl	800421c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	021a      	lsls	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	61da      	str	r2, [r3, #28]
      break;
 8003d0e:	e000      	b.n	8003d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d10:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIM_ConfigClockSource+0x18>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0a6      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x166>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d067      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0x120>
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d80b      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x6c>
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d073      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x140>
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d802      	bhi.n	8003d8e <HAL_TIM_ConfigClockSource+0x62>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d06f      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d8c:	e078      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d06c      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x140>
 8003d92:	2b30      	cmp	r3, #48	; 0x30
 8003d94:	d06a      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d96:	e073      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d98:	2b70      	cmp	r3, #112	; 0x70
 8003d9a:	d00d      	beq.n	8003db8 <HAL_TIM_ConfigClockSource+0x8c>
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d804      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x7e>
 8003da0:	2b50      	cmp	r3, #80	; 0x50
 8003da2:	d033      	beq.n	8003e0c <HAL_TIM_ConfigClockSource+0xe0>
 8003da4:	2b60      	cmp	r3, #96	; 0x60
 8003da6:	d041      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003da8:	e06a      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	d066      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x152>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d017      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003db6:	e063      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6899      	ldr	r1, [r3, #8]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f000 faed 	bl	80043a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]
      break;
 8003de4:	e04c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6899      	ldr	r1, [r3, #8]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f000 fad6 	bl	80043a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e08:	609a      	str	r2, [r3, #8]
      break;
 8003e0a:	e039      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f000 fa4d 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2150      	movs	r1, #80	; 0x50
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 faa4 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003e2a:	e029      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f000 fa6b 	bl	8004314 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2160      	movs	r1, #96	; 0x60
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fa94 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003e4a:	e019      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f000 fa2d 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2140      	movs	r1, #64	; 0x40
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fa84 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003e6a:	e009      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f000 fa7b 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003e7c:	e000      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
	...

08003ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <TIM_Base_SetConfig+0xb8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_Base_SetConfig+0x30>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0x30>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <TIM_Base_SetConfig+0xbc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0x30>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <TIM_Base_SetConfig+0xc0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d108      	bne.n	8003f26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <TIM_Base_SetConfig+0xb8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_Base_SetConfig+0x62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0x62>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <TIM_Base_SetConfig+0xbc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0x62>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <TIM_Base_SetConfig+0xc0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d108      	bne.n	8003f58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <TIM_Base_SetConfig+0xb8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	615a      	str	r2, [r3, #20]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40000800 	.word	0x40000800

08003fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f023 0201 	bic.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f023 0302 	bic.w	r3, r3, #2
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <TIM_OC1_SetConfig+0xc8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10c      	bne.n	800401e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0308 	bic.w	r3, r3, #8
 800400a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <TIM_OC1_SetConfig+0xc8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d111      	bne.n	800404a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	621a      	str	r2, [r3, #32]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00

08004074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0210 	bic.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f023 0320 	bic.w	r3, r3, #32
 80040be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <TIM_OC2_SetConfig+0xd0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10d      	bne.n	80040f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <TIM_OC2_SetConfig+0xd0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d113      	bne.n	8004120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	40012c00 	.word	0x40012c00

08004148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0303 	bic.w	r3, r3, #3
 800417e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <TIM_OC3_SetConfig+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10d      	bne.n	80041c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <TIM_OC3_SetConfig+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d113      	bne.n	80041f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40012c00 	.word	0x40012c00

0800421c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <TIM_OC4_SetConfig+0x98>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d109      	bne.n	8004290 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	40012c00 	.word	0x40012c00

080042b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 030a 	bic.w	r3, r3, #10
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f023 0210 	bic.w	r2, r3, #16
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800433e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	031b      	lsls	r3, r3, #12
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004350:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	621a      	str	r2, [r3, #32]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	f043 0307 	orr.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b087      	sub	sp, #28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	609a      	str	r2, [r3, #8]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2201      	movs	r2, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1a      	ldr	r2, [r3, #32]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	fa01 f303 	lsl.w	r3, r1, r3
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004440:	2302      	movs	r3, #2
 8004442:	e032      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e03d      	b.n	800454c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e03f      	b.n	800460c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fd fe07 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2224      	movs	r2, #36	; 0x24
 80045aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fc34 	bl	8004e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	f040 8083 	bne.w	800473c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_UART_Transmit+0x2e>
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e07b      	b.n	800473e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_UART_Transmit+0x40>
 8004650:	2302      	movs	r3, #2
 8004652:	e074      	b.n	800473e <HAL_UART_Transmit+0x12a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2221      	movs	r2, #33	; 0x21
 8004666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800466a:	f7fd ff43 	bl	80024f4 <HAL_GetTick>
 800466e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800467c:	e042      	b.n	8004704 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d122      	bne.n	80046dc <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fa59 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e046      	b.n	800473e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	3302      	adds	r3, #2
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	e017      	b.n	8004704 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	3301      	adds	r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	e013      	b.n	8004704 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fa36 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e023      	b.n	800473e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	60ba      	str	r2, [r7, #8]
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1b7      	bne.n	800467e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	2140      	movs	r1, #64	; 0x40
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fa1d 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e00a      	b.n	800473e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b088      	sub	sp, #32
 800474a:	af02      	add	r7, sp, #8
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b20      	cmp	r3, #32
 8004764:	f040 8090 	bne.w	8004888 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Receive+0x2e>
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e088      	b.n	800488a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_UART_Receive+0x40>
 8004782:	2302      	movs	r3, #2
 8004784:	e081      	b.n	800488a <HAL_UART_Receive+0x144>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2222      	movs	r2, #34	; 0x22
 8004798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800479c:	f7fd feaa 	bl	80024f4 <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047ae:	e05c      	b.n	800486a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	d12b      	bne.n	8004820 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2120      	movs	r1, #32
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f9c0 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e053      	b.n	800488a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	3302      	adds	r3, #2
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	e030      	b.n	800486a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b29b      	uxth	r3, r3
 8004810:	b2db      	uxtb	r3, r3
 8004812:	b29a      	uxth	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	3301      	adds	r3, #1
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	e024      	b.n	800486a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	2120      	movs	r1, #32
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f994 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e027      	b.n	800488a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	60ba      	str	r2, [r7, #8]
 800484e:	b2ca      	uxtb	r2, r1
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e00a      	b.n	800486a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1c59      	adds	r1, r3, #1
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d19d      	bne.n	80047b0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	4613      	mov	r3, r2
 800489e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d140      	bne.n	800492e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_UART_Receive_IT+0x26>
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e039      	b.n	8004930 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_UART_Receive_IT+0x38>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e032      	b.n	8004930 <HAL_UART_Receive_IT+0x9e>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2222      	movs	r2, #34	; 0x22
 80048ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004908:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0220 	orr.w	r2, r2, #32
 8004928:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
	...

0800493c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_UART_IRQHandler+0x52>
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9ce 	bl	8004d28 <UART_Receive_IT>
      return;
 800498c:	e0cc      	b.n	8004b28 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80ab 	beq.w	8004aec <HAL_UART_IRQHandler+0x1b0>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_UART_IRQHandler+0x70>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80a0 	beq.w	8004aec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_UART_IRQHandler+0x90>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	f043 0201 	orr.w	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_UART_IRQHandler+0xb0>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	f043 0202 	orr.w	r2, r3, #2
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_UART_IRQHandler+0xd0>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	f043 0204 	orr.w	r2, r3, #4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_UART_IRQHandler+0xf0>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	f043 0208 	orr.w	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d078      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_UART_IRQHandler+0x112>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f96d 	bl	8004d28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_UART_IRQHandler+0x13a>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d031      	beq.n	8004ada <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8b8 	bl	8004bec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d023      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d013      	beq.n	8004aca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_UART_IRQHandler+0x1f4>)
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fd fe5a 	bl	8002768 <HAL_DMA_Abort_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	e00e      	b.n	8004ae8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f83b 	bl	8004b46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e00a      	b.n	8004ae8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f837 	bl	8004b46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e006      	b.n	8004ae8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f833 	bl	8004b46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004ae6:	e01e      	b.n	8004b26 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	bf00      	nop
    return;
 8004aea:	e01c      	b.n	8004b26 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_UART_IRQHandler+0x1cc>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8a4 	bl	8004c4e <UART_Transmit_IT>
    return;
 8004b06:	e00f      	b.n	8004b28 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_UART_IRQHandler+0x1ec>
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8eb 	bl	8004cf8 <UART_EndTransmit_IT>
    return;
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004b26:	bf00      	nop
  }
}
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	08004c27 	.word	0x08004c27

08004b34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b68:	e02c      	b.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b70:	d028      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b78:	f7fd fcbc 	bl	80024f4 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d21d      	bcs.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e00f      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d0c3      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0201 	bic.w	r2, r2, #1
 8004c12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff ff80 	bl	8004b46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b21      	cmp	r3, #33	; 0x21
 8004c60:	d144      	bne.n	8004cec <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	d11a      	bne.n	8004ca2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c80:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	1c9a      	adds	r2, r3, #2
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	621a      	str	r2, [r3, #32]
 8004c94:	e00e      	b.n	8004cb4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	621a      	str	r2, [r3, #32]
 8004ca0:	e008      	b.n	8004cb4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6211      	str	r1, [r2, #32]
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10f      	bne.n	8004ce8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff0b 	bl	8004b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b22      	cmp	r3, #34	; 0x22
 8004d3a:	d171      	bne.n	8004e20 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d123      	bne.n	8004d8e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10e      	bne.n	8004d72 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d70:	e029      	b.n	8004dc6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d8c:	e01b      	b.n	8004dc6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6858      	ldr	r0, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	1c59      	adds	r1, r3, #1
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6291      	str	r1, [r2, #40]	; 0x28
 8004da6:	b2c2      	uxtb	r2, r0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e00c      	b.n	8004dc6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	1c58      	adds	r0, r3, #1
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	6288      	str	r0, [r1, #40]	; 0x28
 8004dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d120      	bne.n	8004e1c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0220 	bic.w	r2, r2, #32
 8004de8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004df8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fc04 	bl	8001620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e002      	b.n	8004e22 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e66:	f023 030c 	bic.w	r3, r3, #12
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	430b      	orrs	r3, r1
 8004e72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a52      	ldr	r2, [pc, #328]	; (8004fd8 <UART_SetConfig+0x1ac>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d14e      	bne.n	8004f32 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fe fa3a 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8004e98:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009a      	lsls	r2, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	4a4a      	ldr	r2, [pc, #296]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	0119      	lsls	r1, r3, #4
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009a      	lsls	r2, r3, #2
 8004ec4:	441a      	add	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ed0:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2064      	movs	r0, #100	; 0x64
 8004eda:	fb00 f303 	mul.w	r3, r0, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	3332      	adds	r3, #50	; 0x32
 8004ee4:	4a3d      	ldr	r2, [pc, #244]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef0:	4419      	add	r1, r3
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009a      	lsls	r2, r3, #2
 8004efc:	441a      	add	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f08:	4b34      	ldr	r3, [pc, #208]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2064      	movs	r0, #100	; 0x64
 8004f12:	fb00 f303 	mul.w	r3, r0, r3
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	3332      	adds	r3, #50	; 0x32
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004f30:	e04d      	b.n	8004fce <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f32:	f7fe f9d7 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8004f36:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009a      	lsls	r2, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	0119      	lsls	r1, r3, #4
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009a      	lsls	r2, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004f70:	fba3 0302 	umull	r0, r3, r3, r2
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	2064      	movs	r0, #100	; 0x64
 8004f78:	fb00 f303 	mul.w	r3, r0, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	3332      	adds	r3, #50	; 0x32
 8004f82:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f8e:	4419      	add	r1, r3
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009a      	lsls	r2, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004fa8:	fba3 0302 	umull	r0, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	2064      	movs	r0, #100	; 0x64
 8004fb0:	fb00 f303 	mul.w	r3, r0, r3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	3332      	adds	r3, #50	; 0x32
 8004fba:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <UART_SetConfig+0x1b0>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	f003 020f 	and.w	r2, r3, #15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	440a      	add	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	51eb851f 	.word	0x51eb851f

08004fe0 <atof>:
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f001 bbd1 	b.w	8006788 <strtod>
	...

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000020 	.word	0x20000020

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	4e0c      	ldr	r6, [pc, #48]	; (800502c <__libc_init_array+0x38>)
 8004ffa:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffc:	1ba4      	subs	r4, r4, r6
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	42a5      	cmp	r5, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	f003 fee4 	bl	8008dd0 <_init>
 8005008:	2500      	movs	r5, #0
 800500a:	4e0a      	ldr	r6, [pc, #40]	; (8005034 <__libc_init_array+0x40>)
 800500c:	4c0a      	ldr	r4, [pc, #40]	; (8005038 <__libc_init_array+0x44>)
 800500e:	1ba4      	subs	r4, r4, r6
 8005010:	10a4      	asrs	r4, r4, #2
 8005012:	42a5      	cmp	r5, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800501c:	4798      	blx	r3
 800501e:	3501      	adds	r5, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005026:	4798      	blx	r3
 8005028:	3501      	adds	r5, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	08009270 	.word	0x08009270
 8005030:	08009270 	.word	0x08009270
 8005034:	08009270 	.word	0x08009270
 8005038:	08009274 	.word	0x08009274

0800503c <memset>:
 800503c:	4603      	mov	r3, r0
 800503e:	4402      	add	r2, r0
 8005040:	4293      	cmp	r3, r2
 8005042:	d100      	bne.n	8005046 <memset+0xa>
 8005044:	4770      	bx	lr
 8005046:	f803 1b01 	strb.w	r1, [r3], #1
 800504a:	e7f9      	b.n	8005040 <memset+0x4>

0800504c <__cvt>:
 800504c:	2b00      	cmp	r3, #0
 800504e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005052:	461e      	mov	r6, r3
 8005054:	bfbb      	ittet	lt
 8005056:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800505a:	461e      	movlt	r6, r3
 800505c:	2300      	movge	r3, #0
 800505e:	232d      	movlt	r3, #45	; 0x2d
 8005060:	b088      	sub	sp, #32
 8005062:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005064:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005068:	f027 0720 	bic.w	r7, r7, #32
 800506c:	2f46      	cmp	r7, #70	; 0x46
 800506e:	4614      	mov	r4, r2
 8005070:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005072:	700b      	strb	r3, [r1, #0]
 8005074:	d004      	beq.n	8005080 <__cvt+0x34>
 8005076:	2f45      	cmp	r7, #69	; 0x45
 8005078:	d100      	bne.n	800507c <__cvt+0x30>
 800507a:	3501      	adds	r5, #1
 800507c:	2302      	movs	r3, #2
 800507e:	e000      	b.n	8005082 <__cvt+0x36>
 8005080:	2303      	movs	r3, #3
 8005082:	aa07      	add	r2, sp, #28
 8005084:	9204      	str	r2, [sp, #16]
 8005086:	aa06      	add	r2, sp, #24
 8005088:	e9cd a202 	strd	sl, r2, [sp, #8]
 800508c:	e9cd 3500 	strd	r3, r5, [sp]
 8005090:	4622      	mov	r2, r4
 8005092:	4633      	mov	r3, r6
 8005094:	f001 fcd8 	bl	8006a48 <_dtoa_r>
 8005098:	2f47      	cmp	r7, #71	; 0x47
 800509a:	4680      	mov	r8, r0
 800509c:	d102      	bne.n	80050a4 <__cvt+0x58>
 800509e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050a0:	07db      	lsls	r3, r3, #31
 80050a2:	d526      	bpl.n	80050f2 <__cvt+0xa6>
 80050a4:	2f46      	cmp	r7, #70	; 0x46
 80050a6:	eb08 0905 	add.w	r9, r8, r5
 80050aa:	d111      	bne.n	80050d0 <__cvt+0x84>
 80050ac:	f898 3000 	ldrb.w	r3, [r8]
 80050b0:	2b30      	cmp	r3, #48	; 0x30
 80050b2:	d10a      	bne.n	80050ca <__cvt+0x7e>
 80050b4:	2200      	movs	r2, #0
 80050b6:	2300      	movs	r3, #0
 80050b8:	4620      	mov	r0, r4
 80050ba:	4631      	mov	r1, r6
 80050bc:	f7fb fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80050c0:	b918      	cbnz	r0, 80050ca <__cvt+0x7e>
 80050c2:	f1c5 0501 	rsb	r5, r5, #1
 80050c6:	f8ca 5000 	str.w	r5, [sl]
 80050ca:	f8da 3000 	ldr.w	r3, [sl]
 80050ce:	4499      	add	r9, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	4620      	mov	r0, r4
 80050d6:	4631      	mov	r1, r6
 80050d8:	f7fb fc66 	bl	80009a8 <__aeabi_dcmpeq>
 80050dc:	b938      	cbnz	r0, 80050ee <__cvt+0xa2>
 80050de:	2230      	movs	r2, #48	; 0x30
 80050e0:	9b07      	ldr	r3, [sp, #28]
 80050e2:	454b      	cmp	r3, r9
 80050e4:	d205      	bcs.n	80050f2 <__cvt+0xa6>
 80050e6:	1c59      	adds	r1, r3, #1
 80050e8:	9107      	str	r1, [sp, #28]
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e7f8      	b.n	80050e0 <__cvt+0x94>
 80050ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80050f2:	4640      	mov	r0, r8
 80050f4:	9b07      	ldr	r3, [sp, #28]
 80050f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050f8:	eba3 0308 	sub.w	r3, r3, r8
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	b008      	add	sp, #32
 8005100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005104 <__exponent>:
 8005104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005106:	2900      	cmp	r1, #0
 8005108:	bfb4      	ite	lt
 800510a:	232d      	movlt	r3, #45	; 0x2d
 800510c:	232b      	movge	r3, #43	; 0x2b
 800510e:	4604      	mov	r4, r0
 8005110:	bfb8      	it	lt
 8005112:	4249      	neglt	r1, r1
 8005114:	2909      	cmp	r1, #9
 8005116:	f804 2b02 	strb.w	r2, [r4], #2
 800511a:	7043      	strb	r3, [r0, #1]
 800511c:	dd21      	ble.n	8005162 <__exponent+0x5e>
 800511e:	f10d 0307 	add.w	r3, sp, #7
 8005122:	461f      	mov	r7, r3
 8005124:	260a      	movs	r6, #10
 8005126:	fb91 f5f6 	sdiv	r5, r1, r6
 800512a:	fb06 1115 	mls	r1, r6, r5, r1
 800512e:	2d09      	cmp	r5, #9
 8005130:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005134:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005138:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800513c:	4629      	mov	r1, r5
 800513e:	dc09      	bgt.n	8005154 <__exponent+0x50>
 8005140:	3130      	adds	r1, #48	; 0x30
 8005142:	3b02      	subs	r3, #2
 8005144:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005148:	42bb      	cmp	r3, r7
 800514a:	4622      	mov	r2, r4
 800514c:	d304      	bcc.n	8005158 <__exponent+0x54>
 800514e:	1a10      	subs	r0, r2, r0
 8005150:	b003      	add	sp, #12
 8005152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005154:	4613      	mov	r3, r2
 8005156:	e7e6      	b.n	8005126 <__exponent+0x22>
 8005158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800515c:	f804 2b01 	strb.w	r2, [r4], #1
 8005160:	e7f2      	b.n	8005148 <__exponent+0x44>
 8005162:	2330      	movs	r3, #48	; 0x30
 8005164:	4419      	add	r1, r3
 8005166:	7083      	strb	r3, [r0, #2]
 8005168:	1d02      	adds	r2, r0, #4
 800516a:	70c1      	strb	r1, [r0, #3]
 800516c:	e7ef      	b.n	800514e <__exponent+0x4a>
	...

08005170 <_printf_float>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	b091      	sub	sp, #68	; 0x44
 8005176:	460c      	mov	r4, r1
 8005178:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800517a:	4693      	mov	fp, r2
 800517c:	461e      	mov	r6, r3
 800517e:	4605      	mov	r5, r0
 8005180:	f002 feba 	bl	8007ef8 <_localeconv_r>
 8005184:	6803      	ldr	r3, [r0, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	9309      	str	r3, [sp, #36]	; 0x24
 800518a:	f7fa ffe1 	bl	8000150 <strlen>
 800518e:	2300      	movs	r3, #0
 8005190:	930e      	str	r3, [sp, #56]	; 0x38
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	900a      	str	r0, [sp, #40]	; 0x28
 8005196:	3307      	adds	r3, #7
 8005198:	f023 0307 	bic.w	r3, r3, #7
 800519c:	f103 0208 	add.w	r2, r3, #8
 80051a0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80051a4:	f8d4 a000 	ldr.w	sl, [r4]
 80051a8:	603a      	str	r2, [r7, #0]
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051b2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80051b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c0:	4ba6      	ldr	r3, [pc, #664]	; (800545c <_printf_float+0x2ec>)
 80051c2:	4638      	mov	r0, r7
 80051c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c6:	f7fb fc21 	bl	8000a0c <__aeabi_dcmpun>
 80051ca:	bb68      	cbnz	r0, 8005228 <_printf_float+0xb8>
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d0:	4ba2      	ldr	r3, [pc, #648]	; (800545c <_printf_float+0x2ec>)
 80051d2:	4638      	mov	r0, r7
 80051d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051d6:	f7fb fbfb 	bl	80009d0 <__aeabi_dcmple>
 80051da:	bb28      	cbnz	r0, 8005228 <_printf_float+0xb8>
 80051dc:	2200      	movs	r2, #0
 80051de:	2300      	movs	r3, #0
 80051e0:	4638      	mov	r0, r7
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fb fbea 	bl	80009bc <__aeabi_dcmplt>
 80051e8:	b110      	cbz	r0, 80051f0 <_printf_float+0x80>
 80051ea:	232d      	movs	r3, #45	; 0x2d
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f0:	4f9b      	ldr	r7, [pc, #620]	; (8005460 <_printf_float+0x2f0>)
 80051f2:	4b9c      	ldr	r3, [pc, #624]	; (8005464 <_printf_float+0x2f4>)
 80051f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051f8:	bf98      	it	ls
 80051fa:	461f      	movls	r7, r3
 80051fc:	2303      	movs	r3, #3
 80051fe:	f04f 0900 	mov.w	r9, #0
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	f02a 0304 	bic.w	r3, sl, #4
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	9600      	str	r6, [sp, #0]
 800520c:	465b      	mov	r3, fp
 800520e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f9e2 	bl	80055dc <_printf_common>
 8005218:	3001      	adds	r0, #1
 800521a:	f040 8090 	bne.w	800533e <_printf_float+0x1ce>
 800521e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005222:	b011      	add	sp, #68	; 0x44
 8005224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005228:	463a      	mov	r2, r7
 800522a:	464b      	mov	r3, r9
 800522c:	4638      	mov	r0, r7
 800522e:	4649      	mov	r1, r9
 8005230:	f7fb fbec 	bl	8000a0c <__aeabi_dcmpun>
 8005234:	b110      	cbz	r0, 800523c <_printf_float+0xcc>
 8005236:	4f8c      	ldr	r7, [pc, #560]	; (8005468 <_printf_float+0x2f8>)
 8005238:	4b8c      	ldr	r3, [pc, #560]	; (800546c <_printf_float+0x2fc>)
 800523a:	e7db      	b.n	80051f4 <_printf_float+0x84>
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	a80d      	add	r0, sp, #52	; 0x34
 8005246:	a90e      	add	r1, sp, #56	; 0x38
 8005248:	d140      	bne.n	80052cc <_printf_float+0x15c>
 800524a:	2306      	movs	r3, #6
 800524c:	6063      	str	r3, [r4, #4]
 800524e:	f04f 0c00 	mov.w	ip, #0
 8005252:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005256:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	6022      	str	r2, [r4, #0]
 800525e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	463a      	mov	r2, r7
 8005266:	464b      	mov	r3, r9
 8005268:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800526c:	4628      	mov	r0, r5
 800526e:	f7ff feed 	bl	800504c <__cvt>
 8005272:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005276:	2b47      	cmp	r3, #71	; 0x47
 8005278:	4607      	mov	r7, r0
 800527a:	d109      	bne.n	8005290 <_printf_float+0x120>
 800527c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800527e:	1cd8      	adds	r0, r3, #3
 8005280:	db02      	blt.n	8005288 <_printf_float+0x118>
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	4293      	cmp	r3, r2
 8005286:	dd47      	ble.n	8005318 <_printf_float+0x1a8>
 8005288:	f1a8 0802 	sub.w	r8, r8, #2
 800528c:	fa5f f888 	uxtb.w	r8, r8
 8005290:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005294:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005296:	d824      	bhi.n	80052e2 <_printf_float+0x172>
 8005298:	3901      	subs	r1, #1
 800529a:	4642      	mov	r2, r8
 800529c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052a0:	910d      	str	r1, [sp, #52]	; 0x34
 80052a2:	f7ff ff2f 	bl	8005104 <__exponent>
 80052a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052a8:	4681      	mov	r9, r0
 80052aa:	1813      	adds	r3, r2, r0
 80052ac:	2a01      	cmp	r2, #1
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	dc02      	bgt.n	80052b8 <_printf_float+0x148>
 80052b2:	6822      	ldr	r2, [r4, #0]
 80052b4:	07d1      	lsls	r1, r2, #31
 80052b6:	d501      	bpl.n	80052bc <_printf_float+0x14c>
 80052b8:	3301      	adds	r3, #1
 80052ba:	6123      	str	r3, [r4, #16]
 80052bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0a2      	beq.n	800520a <_printf_float+0x9a>
 80052c4:	232d      	movs	r3, #45	; 0x2d
 80052c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ca:	e79e      	b.n	800520a <_printf_float+0x9a>
 80052cc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80052d0:	f000 816e 	beq.w	80055b0 <_printf_float+0x440>
 80052d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052d8:	d1b9      	bne.n	800524e <_printf_float+0xde>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1b7      	bne.n	800524e <_printf_float+0xde>
 80052de:	2301      	movs	r3, #1
 80052e0:	e7b4      	b.n	800524c <_printf_float+0xdc>
 80052e2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80052e6:	d119      	bne.n	800531c <_printf_float+0x1ac>
 80052e8:	2900      	cmp	r1, #0
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	dd0c      	ble.n	8005308 <_printf_float+0x198>
 80052ee:	6121      	str	r1, [r4, #16]
 80052f0:	b913      	cbnz	r3, 80052f8 <_printf_float+0x188>
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	07d2      	lsls	r2, r2, #31
 80052f6:	d502      	bpl.n	80052fe <_printf_float+0x18e>
 80052f8:	3301      	adds	r3, #1
 80052fa:	440b      	add	r3, r1
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005300:	f04f 0900 	mov.w	r9, #0
 8005304:	65a3      	str	r3, [r4, #88]	; 0x58
 8005306:	e7d9      	b.n	80052bc <_printf_float+0x14c>
 8005308:	b913      	cbnz	r3, 8005310 <_printf_float+0x1a0>
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	07d0      	lsls	r0, r2, #31
 800530e:	d501      	bpl.n	8005314 <_printf_float+0x1a4>
 8005310:	3302      	adds	r3, #2
 8005312:	e7f3      	b.n	80052fc <_printf_float+0x18c>
 8005314:	2301      	movs	r3, #1
 8005316:	e7f1      	b.n	80052fc <_printf_float+0x18c>
 8005318:	f04f 0867 	mov.w	r8, #103	; 0x67
 800531c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005320:	4293      	cmp	r3, r2
 8005322:	db05      	blt.n	8005330 <_printf_float+0x1c0>
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	07d1      	lsls	r1, r2, #31
 800532a:	d5e8      	bpl.n	80052fe <_printf_float+0x18e>
 800532c:	3301      	adds	r3, #1
 800532e:	e7e5      	b.n	80052fc <_printf_float+0x18c>
 8005330:	2b00      	cmp	r3, #0
 8005332:	bfcc      	ite	gt
 8005334:	2301      	movgt	r3, #1
 8005336:	f1c3 0302 	rsble	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	e7de      	b.n	80052fc <_printf_float+0x18c>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	055a      	lsls	r2, r3, #21
 8005342:	d407      	bmi.n	8005354 <_printf_float+0x1e4>
 8005344:	6923      	ldr	r3, [r4, #16]
 8005346:	463a      	mov	r2, r7
 8005348:	4659      	mov	r1, fp
 800534a:	4628      	mov	r0, r5
 800534c:	47b0      	blx	r6
 800534e:	3001      	adds	r0, #1
 8005350:	d129      	bne.n	80053a6 <_printf_float+0x236>
 8005352:	e764      	b.n	800521e <_printf_float+0xae>
 8005354:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005358:	f240 80d7 	bls.w	800550a <_printf_float+0x39a>
 800535c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	f7fb fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8005368:	b388      	cbz	r0, 80053ce <_printf_float+0x25e>
 800536a:	2301      	movs	r3, #1
 800536c:	4a40      	ldr	r2, [pc, #256]	; (8005470 <_printf_float+0x300>)
 800536e:	4659      	mov	r1, fp
 8005370:	4628      	mov	r0, r5
 8005372:	47b0      	blx	r6
 8005374:	3001      	adds	r0, #1
 8005376:	f43f af52 	beq.w	800521e <_printf_float+0xae>
 800537a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800537e:	429a      	cmp	r2, r3
 8005380:	db02      	blt.n	8005388 <_printf_float+0x218>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	07d8      	lsls	r0, r3, #31
 8005386:	d50e      	bpl.n	80053a6 <_printf_float+0x236>
 8005388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800538c:	4659      	mov	r1, fp
 800538e:	4628      	mov	r0, r5
 8005390:	47b0      	blx	r6
 8005392:	3001      	adds	r0, #1
 8005394:	f43f af43 	beq.w	800521e <_printf_float+0xae>
 8005398:	2700      	movs	r7, #0
 800539a:	f104 081a 	add.w	r8, r4, #26
 800539e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a0:	3b01      	subs	r3, #1
 80053a2:	42bb      	cmp	r3, r7
 80053a4:	dc09      	bgt.n	80053ba <_printf_float+0x24a>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	079f      	lsls	r7, r3, #30
 80053aa:	f100 80fd 	bmi.w	80055a8 <_printf_float+0x438>
 80053ae:	68e0      	ldr	r0, [r4, #12]
 80053b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053b2:	4298      	cmp	r0, r3
 80053b4:	bfb8      	it	lt
 80053b6:	4618      	movlt	r0, r3
 80053b8:	e733      	b.n	8005222 <_printf_float+0xb2>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4642      	mov	r2, r8
 80053be:	4659      	mov	r1, fp
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b0      	blx	r6
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f af2a 	beq.w	800521e <_printf_float+0xae>
 80053ca:	3701      	adds	r7, #1
 80053cc:	e7e7      	b.n	800539e <_printf_float+0x22e>
 80053ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dc2b      	bgt.n	800542c <_printf_float+0x2bc>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4a26      	ldr	r2, [pc, #152]	; (8005470 <_printf_float+0x300>)
 80053d8:	4659      	mov	r1, fp
 80053da:	4628      	mov	r0, r5
 80053dc:	47b0      	blx	r6
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f af1d 	beq.w	800521e <_printf_float+0xae>
 80053e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e6:	b923      	cbnz	r3, 80053f2 <_printf_float+0x282>
 80053e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ea:	b913      	cbnz	r3, 80053f2 <_printf_float+0x282>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	07d9      	lsls	r1, r3, #31
 80053f0:	d5d9      	bpl.n	80053a6 <_printf_float+0x236>
 80053f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f6:	4659      	mov	r1, fp
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b0      	blx	r6
 80053fc:	3001      	adds	r0, #1
 80053fe:	f43f af0e 	beq.w	800521e <_printf_float+0xae>
 8005402:	f04f 0800 	mov.w	r8, #0
 8005406:	f104 091a 	add.w	r9, r4, #26
 800540a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800540c:	425b      	negs	r3, r3
 800540e:	4543      	cmp	r3, r8
 8005410:	dc01      	bgt.n	8005416 <_printf_float+0x2a6>
 8005412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005414:	e797      	b.n	8005346 <_printf_float+0x1d6>
 8005416:	2301      	movs	r3, #1
 8005418:	464a      	mov	r2, r9
 800541a:	4659      	mov	r1, fp
 800541c:	4628      	mov	r0, r5
 800541e:	47b0      	blx	r6
 8005420:	3001      	adds	r0, #1
 8005422:	f43f aefc 	beq.w	800521e <_printf_float+0xae>
 8005426:	f108 0801 	add.w	r8, r8, #1
 800542a:	e7ee      	b.n	800540a <_printf_float+0x29a>
 800542c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800542e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005430:	429a      	cmp	r2, r3
 8005432:	bfa8      	it	ge
 8005434:	461a      	movge	r2, r3
 8005436:	2a00      	cmp	r2, #0
 8005438:	4690      	mov	r8, r2
 800543a:	dd07      	ble.n	800544c <_printf_float+0x2dc>
 800543c:	4613      	mov	r3, r2
 800543e:	4659      	mov	r1, fp
 8005440:	463a      	mov	r2, r7
 8005442:	4628      	mov	r0, r5
 8005444:	47b0      	blx	r6
 8005446:	3001      	adds	r0, #1
 8005448:	f43f aee9 	beq.w	800521e <_printf_float+0xae>
 800544c:	f104 031a 	add.w	r3, r4, #26
 8005450:	f04f 0a00 	mov.w	sl, #0
 8005454:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005458:	930b      	str	r3, [sp, #44]	; 0x2c
 800545a:	e015      	b.n	8005488 <_printf_float+0x318>
 800545c:	7fefffff 	.word	0x7fefffff
 8005460:	08008f5c 	.word	0x08008f5c
 8005464:	08008f58 	.word	0x08008f58
 8005468:	08008f64 	.word	0x08008f64
 800546c:	08008f60 	.word	0x08008f60
 8005470:	08008f68 	.word	0x08008f68
 8005474:	2301      	movs	r3, #1
 8005476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005478:	4659      	mov	r1, fp
 800547a:	4628      	mov	r0, r5
 800547c:	47b0      	blx	r6
 800547e:	3001      	adds	r0, #1
 8005480:	f43f aecd 	beq.w	800521e <_printf_float+0xae>
 8005484:	f10a 0a01 	add.w	sl, sl, #1
 8005488:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800548c:	eba9 0308 	sub.w	r3, r9, r8
 8005490:	4553      	cmp	r3, sl
 8005492:	dcef      	bgt.n	8005474 <_printf_float+0x304>
 8005494:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005498:	429a      	cmp	r2, r3
 800549a:	444f      	add	r7, r9
 800549c:	db14      	blt.n	80054c8 <_printf_float+0x358>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	07da      	lsls	r2, r3, #31
 80054a2:	d411      	bmi.n	80054c8 <_printf_float+0x358>
 80054a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054a8:	eba3 0209 	sub.w	r2, r3, r9
 80054ac:	eba3 0901 	sub.w	r9, r3, r1
 80054b0:	4591      	cmp	r9, r2
 80054b2:	bfa8      	it	ge
 80054b4:	4691      	movge	r9, r2
 80054b6:	f1b9 0f00 	cmp.w	r9, #0
 80054ba:	dc0d      	bgt.n	80054d8 <_printf_float+0x368>
 80054bc:	2700      	movs	r7, #0
 80054be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054c2:	f104 081a 	add.w	r8, r4, #26
 80054c6:	e018      	b.n	80054fa <_printf_float+0x38a>
 80054c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054cc:	4659      	mov	r1, fp
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b0      	blx	r6
 80054d2:	3001      	adds	r0, #1
 80054d4:	d1e6      	bne.n	80054a4 <_printf_float+0x334>
 80054d6:	e6a2      	b.n	800521e <_printf_float+0xae>
 80054d8:	464b      	mov	r3, r9
 80054da:	463a      	mov	r2, r7
 80054dc:	4659      	mov	r1, fp
 80054de:	4628      	mov	r0, r5
 80054e0:	47b0      	blx	r6
 80054e2:	3001      	adds	r0, #1
 80054e4:	d1ea      	bne.n	80054bc <_printf_float+0x34c>
 80054e6:	e69a      	b.n	800521e <_printf_float+0xae>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4642      	mov	r2, r8
 80054ec:	4659      	mov	r1, fp
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b0      	blx	r6
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f ae93 	beq.w	800521e <_printf_float+0xae>
 80054f8:	3701      	adds	r7, #1
 80054fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	eba3 0309 	sub.w	r3, r3, r9
 8005504:	42bb      	cmp	r3, r7
 8005506:	dcef      	bgt.n	80054e8 <_printf_float+0x378>
 8005508:	e74d      	b.n	80053a6 <_printf_float+0x236>
 800550a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800550c:	2a01      	cmp	r2, #1
 800550e:	dc01      	bgt.n	8005514 <_printf_float+0x3a4>
 8005510:	07db      	lsls	r3, r3, #31
 8005512:	d538      	bpl.n	8005586 <_printf_float+0x416>
 8005514:	2301      	movs	r3, #1
 8005516:	463a      	mov	r2, r7
 8005518:	4659      	mov	r1, fp
 800551a:	4628      	mov	r0, r5
 800551c:	47b0      	blx	r6
 800551e:	3001      	adds	r0, #1
 8005520:	f43f ae7d 	beq.w	800521e <_printf_float+0xae>
 8005524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005528:	4659      	mov	r1, fp
 800552a:	4628      	mov	r0, r5
 800552c:	47b0      	blx	r6
 800552e:	3001      	adds	r0, #1
 8005530:	f107 0701 	add.w	r7, r7, #1
 8005534:	f43f ae73 	beq.w	800521e <_printf_float+0xae>
 8005538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800553c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800553e:	2200      	movs	r2, #0
 8005540:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005544:	2300      	movs	r3, #0
 8005546:	f7fb fa2f 	bl	80009a8 <__aeabi_dcmpeq>
 800554a:	b9c0      	cbnz	r0, 800557e <_printf_float+0x40e>
 800554c:	4643      	mov	r3, r8
 800554e:	463a      	mov	r2, r7
 8005550:	4659      	mov	r1, fp
 8005552:	4628      	mov	r0, r5
 8005554:	47b0      	blx	r6
 8005556:	3001      	adds	r0, #1
 8005558:	d10d      	bne.n	8005576 <_printf_float+0x406>
 800555a:	e660      	b.n	800521e <_printf_float+0xae>
 800555c:	2301      	movs	r3, #1
 800555e:	4642      	mov	r2, r8
 8005560:	4659      	mov	r1, fp
 8005562:	4628      	mov	r0, r5
 8005564:	47b0      	blx	r6
 8005566:	3001      	adds	r0, #1
 8005568:	f43f ae59 	beq.w	800521e <_printf_float+0xae>
 800556c:	3701      	adds	r7, #1
 800556e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005570:	3b01      	subs	r3, #1
 8005572:	42bb      	cmp	r3, r7
 8005574:	dcf2      	bgt.n	800555c <_printf_float+0x3ec>
 8005576:	464b      	mov	r3, r9
 8005578:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800557c:	e6e4      	b.n	8005348 <_printf_float+0x1d8>
 800557e:	2700      	movs	r7, #0
 8005580:	f104 081a 	add.w	r8, r4, #26
 8005584:	e7f3      	b.n	800556e <_printf_float+0x3fe>
 8005586:	2301      	movs	r3, #1
 8005588:	e7e1      	b.n	800554e <_printf_float+0x3de>
 800558a:	2301      	movs	r3, #1
 800558c:	4642      	mov	r2, r8
 800558e:	4659      	mov	r1, fp
 8005590:	4628      	mov	r0, r5
 8005592:	47b0      	blx	r6
 8005594:	3001      	adds	r0, #1
 8005596:	f43f ae42 	beq.w	800521e <_printf_float+0xae>
 800559a:	3701      	adds	r7, #1
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	42bb      	cmp	r3, r7
 80055a4:	dcf1      	bgt.n	800558a <_printf_float+0x41a>
 80055a6:	e702      	b.n	80053ae <_printf_float+0x23e>
 80055a8:	2700      	movs	r7, #0
 80055aa:	f104 0819 	add.w	r8, r4, #25
 80055ae:	e7f5      	b.n	800559c <_printf_float+0x42c>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f43f ae94 	beq.w	80052de <_printf_float+0x16e>
 80055b6:	f04f 0c00 	mov.w	ip, #0
 80055ba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80055be:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80055c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	463a      	mov	r2, r7
 80055d0:	464b      	mov	r3, r9
 80055d2:	4628      	mov	r0, r5
 80055d4:	f7ff fd3a 	bl	800504c <__cvt>
 80055d8:	4607      	mov	r7, r0
 80055da:	e64f      	b.n	800527c <_printf_float+0x10c>

080055dc <_printf_common>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	4691      	mov	r9, r2
 80055e2:	461f      	mov	r7, r3
 80055e4:	688a      	ldr	r2, [r1, #8]
 80055e6:	690b      	ldr	r3, [r1, #16]
 80055e8:	4606      	mov	r6, r0
 80055ea:	4293      	cmp	r3, r2
 80055ec:	bfb8      	it	lt
 80055ee:	4613      	movlt	r3, r2
 80055f0:	f8c9 3000 	str.w	r3, [r9]
 80055f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f8:	460c      	mov	r4, r1
 80055fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055fe:	b112      	cbz	r2, 8005606 <_printf_common+0x2a>
 8005600:	3301      	adds	r3, #1
 8005602:	f8c9 3000 	str.w	r3, [r9]
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	0699      	lsls	r1, r3, #26
 800560a:	bf42      	ittt	mi
 800560c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005610:	3302      	addmi	r3, #2
 8005612:	f8c9 3000 	strmi.w	r3, [r9]
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	f015 0506 	ands.w	r5, r5, #6
 800561c:	d107      	bne.n	800562e <_printf_common+0x52>
 800561e:	f104 0a19 	add.w	sl, r4, #25
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	f8d9 2000 	ldr.w	r2, [r9]
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	42ab      	cmp	r3, r5
 800562c:	dc29      	bgt.n	8005682 <_printf_common+0xa6>
 800562e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	3300      	adds	r3, #0
 8005636:	bf18      	it	ne
 8005638:	2301      	movne	r3, #1
 800563a:	0692      	lsls	r2, r2, #26
 800563c:	d42e      	bmi.n	800569c <_printf_common+0xc0>
 800563e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005642:	4639      	mov	r1, r7
 8005644:	4630      	mov	r0, r6
 8005646:	47c0      	blx	r8
 8005648:	3001      	adds	r0, #1
 800564a:	d021      	beq.n	8005690 <_printf_common+0xb4>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	68e5      	ldr	r5, [r4, #12]
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	2b04      	cmp	r3, #4
 8005656:	bf18      	it	ne
 8005658:	2500      	movne	r5, #0
 800565a:	f8d9 2000 	ldr.w	r2, [r9]
 800565e:	f04f 0900 	mov.w	r9, #0
 8005662:	bf08      	it	eq
 8005664:	1aad      	subeq	r5, r5, r2
 8005666:	68a3      	ldr	r3, [r4, #8]
 8005668:	6922      	ldr	r2, [r4, #16]
 800566a:	bf08      	it	eq
 800566c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005670:	4293      	cmp	r3, r2
 8005672:	bfc4      	itt	gt
 8005674:	1a9b      	subgt	r3, r3, r2
 8005676:	18ed      	addgt	r5, r5, r3
 8005678:	341a      	adds	r4, #26
 800567a:	454d      	cmp	r5, r9
 800567c:	d11a      	bne.n	80056b4 <_printf_common+0xd8>
 800567e:	2000      	movs	r0, #0
 8005680:	e008      	b.n	8005694 <_printf_common+0xb8>
 8005682:	2301      	movs	r3, #1
 8005684:	4652      	mov	r2, sl
 8005686:	4639      	mov	r1, r7
 8005688:	4630      	mov	r0, r6
 800568a:	47c0      	blx	r8
 800568c:	3001      	adds	r0, #1
 800568e:	d103      	bne.n	8005698 <_printf_common+0xbc>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005698:	3501      	adds	r5, #1
 800569a:	e7c2      	b.n	8005622 <_printf_common+0x46>
 800569c:	2030      	movs	r0, #48	; 0x30
 800569e:	18e1      	adds	r1, r4, r3
 80056a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056aa:	4422      	add	r2, r4
 80056ac:	3302      	adds	r3, #2
 80056ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056b2:	e7c4      	b.n	800563e <_printf_common+0x62>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4622      	mov	r2, r4
 80056b8:	4639      	mov	r1, r7
 80056ba:	4630      	mov	r0, r6
 80056bc:	47c0      	blx	r8
 80056be:	3001      	adds	r0, #1
 80056c0:	d0e6      	beq.n	8005690 <_printf_common+0xb4>
 80056c2:	f109 0901 	add.w	r9, r9, #1
 80056c6:	e7d8      	b.n	800567a <_printf_common+0x9e>

080056c8 <_printf_i>:
 80056c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056d0:	460c      	mov	r4, r1
 80056d2:	7e09      	ldrb	r1, [r1, #24]
 80056d4:	b085      	sub	sp, #20
 80056d6:	296e      	cmp	r1, #110	; 0x6e
 80056d8:	4617      	mov	r7, r2
 80056da:	4606      	mov	r6, r0
 80056dc:	4698      	mov	r8, r3
 80056de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e0:	f000 80b3 	beq.w	800584a <_printf_i+0x182>
 80056e4:	d822      	bhi.n	800572c <_printf_i+0x64>
 80056e6:	2963      	cmp	r1, #99	; 0x63
 80056e8:	d036      	beq.n	8005758 <_printf_i+0x90>
 80056ea:	d80a      	bhi.n	8005702 <_printf_i+0x3a>
 80056ec:	2900      	cmp	r1, #0
 80056ee:	f000 80b9 	beq.w	8005864 <_printf_i+0x19c>
 80056f2:	2958      	cmp	r1, #88	; 0x58
 80056f4:	f000 8083 	beq.w	80057fe <_printf_i+0x136>
 80056f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005700:	e032      	b.n	8005768 <_printf_i+0xa0>
 8005702:	2964      	cmp	r1, #100	; 0x64
 8005704:	d001      	beq.n	800570a <_printf_i+0x42>
 8005706:	2969      	cmp	r1, #105	; 0x69
 8005708:	d1f6      	bne.n	80056f8 <_printf_i+0x30>
 800570a:	6820      	ldr	r0, [r4, #0]
 800570c:	6813      	ldr	r3, [r2, #0]
 800570e:	0605      	lsls	r5, r0, #24
 8005710:	f103 0104 	add.w	r1, r3, #4
 8005714:	d52a      	bpl.n	800576c <_printf_i+0xa4>
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	da03      	bge.n	8005726 <_printf_i+0x5e>
 800571e:	222d      	movs	r2, #45	; 0x2d
 8005720:	425b      	negs	r3, r3
 8005722:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005726:	486f      	ldr	r0, [pc, #444]	; (80058e4 <_printf_i+0x21c>)
 8005728:	220a      	movs	r2, #10
 800572a:	e039      	b.n	80057a0 <_printf_i+0xd8>
 800572c:	2973      	cmp	r1, #115	; 0x73
 800572e:	f000 809d 	beq.w	800586c <_printf_i+0x1a4>
 8005732:	d808      	bhi.n	8005746 <_printf_i+0x7e>
 8005734:	296f      	cmp	r1, #111	; 0x6f
 8005736:	d020      	beq.n	800577a <_printf_i+0xb2>
 8005738:	2970      	cmp	r1, #112	; 0x70
 800573a:	d1dd      	bne.n	80056f8 <_printf_i+0x30>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	f043 0320 	orr.w	r3, r3, #32
 8005742:	6023      	str	r3, [r4, #0]
 8005744:	e003      	b.n	800574e <_printf_i+0x86>
 8005746:	2975      	cmp	r1, #117	; 0x75
 8005748:	d017      	beq.n	800577a <_printf_i+0xb2>
 800574a:	2978      	cmp	r1, #120	; 0x78
 800574c:	d1d4      	bne.n	80056f8 <_printf_i+0x30>
 800574e:	2378      	movs	r3, #120	; 0x78
 8005750:	4865      	ldr	r0, [pc, #404]	; (80058e8 <_printf_i+0x220>)
 8005752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005756:	e055      	b.n	8005804 <_printf_i+0x13c>
 8005758:	6813      	ldr	r3, [r2, #0]
 800575a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575e:	1d19      	adds	r1, r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6011      	str	r1, [r2, #0]
 8005764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005768:	2301      	movs	r3, #1
 800576a:	e08c      	b.n	8005886 <_printf_i+0x1be>
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005772:	6011      	str	r1, [r2, #0]
 8005774:	bf18      	it	ne
 8005776:	b21b      	sxthne	r3, r3
 8005778:	e7cf      	b.n	800571a <_printf_i+0x52>
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	6825      	ldr	r5, [r4, #0]
 800577e:	1d18      	adds	r0, r3, #4
 8005780:	6010      	str	r0, [r2, #0]
 8005782:	0628      	lsls	r0, r5, #24
 8005784:	d501      	bpl.n	800578a <_printf_i+0xc2>
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	e002      	b.n	8005790 <_printf_i+0xc8>
 800578a:	0668      	lsls	r0, r5, #25
 800578c:	d5fb      	bpl.n	8005786 <_printf_i+0xbe>
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	296f      	cmp	r1, #111	; 0x6f
 8005792:	bf14      	ite	ne
 8005794:	220a      	movne	r2, #10
 8005796:	2208      	moveq	r2, #8
 8005798:	4852      	ldr	r0, [pc, #328]	; (80058e4 <_printf_i+0x21c>)
 800579a:	2100      	movs	r1, #0
 800579c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a0:	6865      	ldr	r5, [r4, #4]
 80057a2:	2d00      	cmp	r5, #0
 80057a4:	60a5      	str	r5, [r4, #8]
 80057a6:	f2c0 8095 	blt.w	80058d4 <_printf_i+0x20c>
 80057aa:	6821      	ldr	r1, [r4, #0]
 80057ac:	f021 0104 	bic.w	r1, r1, #4
 80057b0:	6021      	str	r1, [r4, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d13d      	bne.n	8005832 <_printf_i+0x16a>
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	f040 808e 	bne.w	80058d8 <_printf_i+0x210>
 80057bc:	4665      	mov	r5, ip
 80057be:	2a08      	cmp	r2, #8
 80057c0:	d10b      	bne.n	80057da <_printf_i+0x112>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	07db      	lsls	r3, r3, #31
 80057c6:	d508      	bpl.n	80057da <_printf_i+0x112>
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	bfde      	ittt	le
 80057d0:	2330      	movle	r3, #48	; 0x30
 80057d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057da:	ebac 0305 	sub.w	r3, ip, r5
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	f8cd 8000 	str.w	r8, [sp]
 80057e4:	463b      	mov	r3, r7
 80057e6:	aa03      	add	r2, sp, #12
 80057e8:	4621      	mov	r1, r4
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7ff fef6 	bl	80055dc <_printf_common>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d14d      	bne.n	8005890 <_printf_i+0x1c8>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f8:	b005      	add	sp, #20
 80057fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057fe:	4839      	ldr	r0, [pc, #228]	; (80058e4 <_printf_i+0x21c>)
 8005800:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005804:	6813      	ldr	r3, [r2, #0]
 8005806:	6821      	ldr	r1, [r4, #0]
 8005808:	1d1d      	adds	r5, r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6015      	str	r5, [r2, #0]
 800580e:	060a      	lsls	r2, r1, #24
 8005810:	d50b      	bpl.n	800582a <_printf_i+0x162>
 8005812:	07ca      	lsls	r2, r1, #31
 8005814:	bf44      	itt	mi
 8005816:	f041 0120 	orrmi.w	r1, r1, #32
 800581a:	6021      	strmi	r1, [r4, #0]
 800581c:	b91b      	cbnz	r3, 8005826 <_printf_i+0x15e>
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	f022 0220 	bic.w	r2, r2, #32
 8005824:	6022      	str	r2, [r4, #0]
 8005826:	2210      	movs	r2, #16
 8005828:	e7b7      	b.n	800579a <_printf_i+0xd2>
 800582a:	064d      	lsls	r5, r1, #25
 800582c:	bf48      	it	mi
 800582e:	b29b      	uxthmi	r3, r3
 8005830:	e7ef      	b.n	8005812 <_printf_i+0x14a>
 8005832:	4665      	mov	r5, ip
 8005834:	fbb3 f1f2 	udiv	r1, r3, r2
 8005838:	fb02 3311 	mls	r3, r2, r1, r3
 800583c:	5cc3      	ldrb	r3, [r0, r3]
 800583e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005842:	460b      	mov	r3, r1
 8005844:	2900      	cmp	r1, #0
 8005846:	d1f5      	bne.n	8005834 <_printf_i+0x16c>
 8005848:	e7b9      	b.n	80057be <_printf_i+0xf6>
 800584a:	6813      	ldr	r3, [r2, #0]
 800584c:	6825      	ldr	r5, [r4, #0]
 800584e:	1d18      	adds	r0, r3, #4
 8005850:	6961      	ldr	r1, [r4, #20]
 8005852:	6010      	str	r0, [r2, #0]
 8005854:	0628      	lsls	r0, r5, #24
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	d501      	bpl.n	800585e <_printf_i+0x196>
 800585a:	6019      	str	r1, [r3, #0]
 800585c:	e002      	b.n	8005864 <_printf_i+0x19c>
 800585e:	066a      	lsls	r2, r5, #25
 8005860:	d5fb      	bpl.n	800585a <_printf_i+0x192>
 8005862:	8019      	strh	r1, [r3, #0]
 8005864:	2300      	movs	r3, #0
 8005866:	4665      	mov	r5, ip
 8005868:	6123      	str	r3, [r4, #16]
 800586a:	e7b9      	b.n	80057e0 <_printf_i+0x118>
 800586c:	6813      	ldr	r3, [r2, #0]
 800586e:	1d19      	adds	r1, r3, #4
 8005870:	6011      	str	r1, [r2, #0]
 8005872:	681d      	ldr	r5, [r3, #0]
 8005874:	6862      	ldr	r2, [r4, #4]
 8005876:	2100      	movs	r1, #0
 8005878:	4628      	mov	r0, r5
 800587a:	f002 fbc9 	bl	8008010 <memchr>
 800587e:	b108      	cbz	r0, 8005884 <_printf_i+0x1bc>
 8005880:	1b40      	subs	r0, r0, r5
 8005882:	6060      	str	r0, [r4, #4]
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	2300      	movs	r3, #0
 800588a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588e:	e7a7      	b.n	80057e0 <_printf_i+0x118>
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	462a      	mov	r2, r5
 8005894:	4639      	mov	r1, r7
 8005896:	4630      	mov	r0, r6
 8005898:	47c0      	blx	r8
 800589a:	3001      	adds	r0, #1
 800589c:	d0aa      	beq.n	80057f4 <_printf_i+0x12c>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	079b      	lsls	r3, r3, #30
 80058a2:	d413      	bmi.n	80058cc <_printf_i+0x204>
 80058a4:	68e0      	ldr	r0, [r4, #12]
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	4298      	cmp	r0, r3
 80058aa:	bfb8      	it	lt
 80058ac:	4618      	movlt	r0, r3
 80058ae:	e7a3      	b.n	80057f8 <_printf_i+0x130>
 80058b0:	2301      	movs	r3, #1
 80058b2:	464a      	mov	r2, r9
 80058b4:	4639      	mov	r1, r7
 80058b6:	4630      	mov	r0, r6
 80058b8:	47c0      	blx	r8
 80058ba:	3001      	adds	r0, #1
 80058bc:	d09a      	beq.n	80057f4 <_printf_i+0x12c>
 80058be:	3501      	adds	r5, #1
 80058c0:	68e3      	ldr	r3, [r4, #12]
 80058c2:	9a03      	ldr	r2, [sp, #12]
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	42ab      	cmp	r3, r5
 80058c8:	dcf2      	bgt.n	80058b0 <_printf_i+0x1e8>
 80058ca:	e7eb      	b.n	80058a4 <_printf_i+0x1dc>
 80058cc:	2500      	movs	r5, #0
 80058ce:	f104 0919 	add.w	r9, r4, #25
 80058d2:	e7f5      	b.n	80058c0 <_printf_i+0x1f8>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1ac      	bne.n	8005832 <_printf_i+0x16a>
 80058d8:	7803      	ldrb	r3, [r0, #0]
 80058da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e2:	e76c      	b.n	80057be <_printf_i+0xf6>
 80058e4:	08008f6a 	.word	0x08008f6a
 80058e8:	08008f7b 	.word	0x08008f7b

080058ec <iprintf>:
 80058ec:	b40f      	push	{r0, r1, r2, r3}
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <iprintf+0x2c>)
 80058f0:	b513      	push	{r0, r1, r4, lr}
 80058f2:	681c      	ldr	r4, [r3, #0]
 80058f4:	b124      	cbz	r4, 8005900 <iprintf+0x14>
 80058f6:	69a3      	ldr	r3, [r4, #24]
 80058f8:	b913      	cbnz	r3, 8005900 <iprintf+0x14>
 80058fa:	4620      	mov	r0, r4
 80058fc:	f001 ff48 	bl	8007790 <__sinit>
 8005900:	ab05      	add	r3, sp, #20
 8005902:	9a04      	ldr	r2, [sp, #16]
 8005904:	68a1      	ldr	r1, [r4, #8]
 8005906:	4620      	mov	r0, r4
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	f003 f86f 	bl	80089ec <_vfiprintf_r>
 800590e:	b002      	add	sp, #8
 8005910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005914:	b004      	add	sp, #16
 8005916:	4770      	bx	lr
 8005918:	20000020 	.word	0x20000020

0800591c <_puts_r>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	460e      	mov	r6, r1
 8005920:	4605      	mov	r5, r0
 8005922:	b118      	cbz	r0, 800592c <_puts_r+0x10>
 8005924:	6983      	ldr	r3, [r0, #24]
 8005926:	b90b      	cbnz	r3, 800592c <_puts_r+0x10>
 8005928:	f001 ff32 	bl	8007790 <__sinit>
 800592c:	69ab      	ldr	r3, [r5, #24]
 800592e:	68ac      	ldr	r4, [r5, #8]
 8005930:	b913      	cbnz	r3, 8005938 <_puts_r+0x1c>
 8005932:	4628      	mov	r0, r5
 8005934:	f001 ff2c 	bl	8007790 <__sinit>
 8005938:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <_puts_r+0xac>)
 800593a:	429c      	cmp	r4, r3
 800593c:	d117      	bne.n	800596e <_puts_r+0x52>
 800593e:	686c      	ldr	r4, [r5, #4]
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	071b      	lsls	r3, r3, #28
 8005944:	d51d      	bpl.n	8005982 <_puts_r+0x66>
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	b1db      	cbz	r3, 8005982 <_puts_r+0x66>
 800594a:	3e01      	subs	r6, #1
 800594c:	68a3      	ldr	r3, [r4, #8]
 800594e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005952:	3b01      	subs	r3, #1
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	b9e9      	cbnz	r1, 8005994 <_puts_r+0x78>
 8005958:	2b00      	cmp	r3, #0
 800595a:	da2e      	bge.n	80059ba <_puts_r+0x9e>
 800595c:	4622      	mov	r2, r4
 800595e:	210a      	movs	r1, #10
 8005960:	4628      	mov	r0, r5
 8005962:	f000 ff23 	bl	80067ac <__swbuf_r>
 8005966:	3001      	adds	r0, #1
 8005968:	d011      	beq.n	800598e <_puts_r+0x72>
 800596a:	200a      	movs	r0, #10
 800596c:	e011      	b.n	8005992 <_puts_r+0x76>
 800596e:	4b17      	ldr	r3, [pc, #92]	; (80059cc <_puts_r+0xb0>)
 8005970:	429c      	cmp	r4, r3
 8005972:	d101      	bne.n	8005978 <_puts_r+0x5c>
 8005974:	68ac      	ldr	r4, [r5, #8]
 8005976:	e7e3      	b.n	8005940 <_puts_r+0x24>
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <_puts_r+0xb4>)
 800597a:	429c      	cmp	r4, r3
 800597c:	bf08      	it	eq
 800597e:	68ec      	ldreq	r4, [r5, #12]
 8005980:	e7de      	b.n	8005940 <_puts_r+0x24>
 8005982:	4621      	mov	r1, r4
 8005984:	4628      	mov	r0, r5
 8005986:	f000 ff63 	bl	8006850 <__swsetup_r>
 800598a:	2800      	cmp	r0, #0
 800598c:	d0dd      	beq.n	800594a <_puts_r+0x2e>
 800598e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	2b00      	cmp	r3, #0
 8005996:	da04      	bge.n	80059a2 <_puts_r+0x86>
 8005998:	69a2      	ldr	r2, [r4, #24]
 800599a:	429a      	cmp	r2, r3
 800599c:	dc06      	bgt.n	80059ac <_puts_r+0x90>
 800599e:	290a      	cmp	r1, #10
 80059a0:	d004      	beq.n	80059ac <_puts_r+0x90>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	6022      	str	r2, [r4, #0]
 80059a8:	7019      	strb	r1, [r3, #0]
 80059aa:	e7cf      	b.n	800594c <_puts_r+0x30>
 80059ac:	4622      	mov	r2, r4
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fefc 	bl	80067ac <__swbuf_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d1c9      	bne.n	800594c <_puts_r+0x30>
 80059b8:	e7e9      	b.n	800598e <_puts_r+0x72>
 80059ba:	200a      	movs	r0, #10
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	6022      	str	r2, [r4, #0]
 80059c2:	7018      	strb	r0, [r3, #0]
 80059c4:	e7e5      	b.n	8005992 <_puts_r+0x76>
 80059c6:	bf00      	nop
 80059c8:	08009010 	.word	0x08009010
 80059cc:	08009030 	.word	0x08009030
 80059d0:	08008ff0 	.word	0x08008ff0

080059d4 <puts>:
 80059d4:	4b02      	ldr	r3, [pc, #8]	; (80059e0 <puts+0xc>)
 80059d6:	4601      	mov	r1, r0
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f7ff bf9f 	b.w	800591c <_puts_r>
 80059de:	bf00      	nop
 80059e0:	20000020 	.word	0x20000020

080059e4 <setvbuf>:
 80059e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059e8:	461d      	mov	r5, r3
 80059ea:	4b51      	ldr	r3, [pc, #324]	; (8005b30 <setvbuf+0x14c>)
 80059ec:	4604      	mov	r4, r0
 80059ee:	681e      	ldr	r6, [r3, #0]
 80059f0:	460f      	mov	r7, r1
 80059f2:	4690      	mov	r8, r2
 80059f4:	b126      	cbz	r6, 8005a00 <setvbuf+0x1c>
 80059f6:	69b3      	ldr	r3, [r6, #24]
 80059f8:	b913      	cbnz	r3, 8005a00 <setvbuf+0x1c>
 80059fa:	4630      	mov	r0, r6
 80059fc:	f001 fec8 	bl	8007790 <__sinit>
 8005a00:	4b4c      	ldr	r3, [pc, #304]	; (8005b34 <setvbuf+0x150>)
 8005a02:	429c      	cmp	r4, r3
 8005a04:	d152      	bne.n	8005aac <setvbuf+0xc8>
 8005a06:	6874      	ldr	r4, [r6, #4]
 8005a08:	f1b8 0f02 	cmp.w	r8, #2
 8005a0c:	d006      	beq.n	8005a1c <setvbuf+0x38>
 8005a0e:	f1b8 0f01 	cmp.w	r8, #1
 8005a12:	f200 8089 	bhi.w	8005b28 <setvbuf+0x144>
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f2c0 8086 	blt.w	8005b28 <setvbuf+0x144>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f001 fe4c 	bl	80076bc <_fflush_r>
 8005a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a26:	b141      	cbz	r1, 8005a3a <setvbuf+0x56>
 8005a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a2c:	4299      	cmp	r1, r3
 8005a2e:	d002      	beq.n	8005a36 <setvbuf+0x52>
 8005a30:	4630      	mov	r0, r6
 8005a32:	f002 ff0d 	bl	8008850 <_free_r>
 8005a36:	2300      	movs	r3, #0
 8005a38:	6363      	str	r3, [r4, #52]	; 0x34
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61a3      	str	r3, [r4, #24]
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	061b      	lsls	r3, r3, #24
 8005a44:	d503      	bpl.n	8005a4e <setvbuf+0x6a>
 8005a46:	6921      	ldr	r1, [r4, #16]
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f002 ff01 	bl	8008850 <_free_r>
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f1b8 0f02 	cmp.w	r8, #2
 8005a54:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	d05d      	beq.n	8005b1c <setvbuf+0x138>
 8005a60:	ab01      	add	r3, sp, #4
 8005a62:	466a      	mov	r2, sp
 8005a64:	4621      	mov	r1, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f002 fa54 	bl	8007f14 <__swhatbuf_r>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	4318      	orrs	r0, r3
 8005a70:	81a0      	strh	r0, [r4, #12]
 8005a72:	bb2d      	cbnz	r5, 8005ac0 <setvbuf+0xdc>
 8005a74:	9d00      	ldr	r5, [sp, #0]
 8005a76:	4628      	mov	r0, r5
 8005a78:	f002 fab0 	bl	8007fdc <malloc>
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d14e      	bne.n	8005b20 <setvbuf+0x13c>
 8005a82:	f8dd 9000 	ldr.w	r9, [sp]
 8005a86:	45a9      	cmp	r9, r5
 8005a88:	d13c      	bne.n	8005b04 <setvbuf+0x120>
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f043 0302 	orr.w	r3, r3, #2
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	2300      	movs	r3, #0
 8005a98:	60a3      	str	r3, [r4, #8]
 8005a9a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	6163      	str	r3, [r4, #20]
 8005aa6:	b003      	add	sp, #12
 8005aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aac:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <setvbuf+0x154>)
 8005aae:	429c      	cmp	r4, r3
 8005ab0:	d101      	bne.n	8005ab6 <setvbuf+0xd2>
 8005ab2:	68b4      	ldr	r4, [r6, #8]
 8005ab4:	e7a8      	b.n	8005a08 <setvbuf+0x24>
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <setvbuf+0x158>)
 8005ab8:	429c      	cmp	r4, r3
 8005aba:	bf08      	it	eq
 8005abc:	68f4      	ldreq	r4, [r6, #12]
 8005abe:	e7a3      	b.n	8005a08 <setvbuf+0x24>
 8005ac0:	2f00      	cmp	r7, #0
 8005ac2:	d0d8      	beq.n	8005a76 <setvbuf+0x92>
 8005ac4:	69b3      	ldr	r3, [r6, #24]
 8005ac6:	b913      	cbnz	r3, 8005ace <setvbuf+0xea>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f001 fe61 	bl	8007790 <__sinit>
 8005ace:	f1b8 0f01 	cmp.w	r8, #1
 8005ad2:	bf08      	it	eq
 8005ad4:	89a3      	ldrheq	r3, [r4, #12]
 8005ad6:	6027      	str	r7, [r4, #0]
 8005ad8:	bf04      	itt	eq
 8005ada:	f043 0301 	orreq.w	r3, r3, #1
 8005ade:	81a3      	strheq	r3, [r4, #12]
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005ae6:	f013 0008 	ands.w	r0, r3, #8
 8005aea:	d01b      	beq.n	8005b24 <setvbuf+0x140>
 8005aec:	f013 0001 	ands.w	r0, r3, #1
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	bf1f      	itttt	ne
 8005af6:	426d      	negne	r5, r5
 8005af8:	60a3      	strne	r3, [r4, #8]
 8005afa:	61a5      	strne	r5, [r4, #24]
 8005afc:	4618      	movne	r0, r3
 8005afe:	bf08      	it	eq
 8005b00:	60a5      	streq	r5, [r4, #8]
 8005b02:	e7d0      	b.n	8005aa6 <setvbuf+0xc2>
 8005b04:	4648      	mov	r0, r9
 8005b06:	f002 fa69 	bl	8007fdc <malloc>
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d0bc      	beq.n	8005a8a <setvbuf+0xa6>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	464d      	mov	r5, r9
 8005b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	e7d3      	b.n	8005ac4 <setvbuf+0xe0>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e7b6      	b.n	8005a8e <setvbuf+0xaa>
 8005b20:	46a9      	mov	r9, r5
 8005b22:	e7f5      	b.n	8005b10 <setvbuf+0x12c>
 8005b24:	60a0      	str	r0, [r4, #8]
 8005b26:	e7be      	b.n	8005aa6 <setvbuf+0xc2>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2c:	e7bb      	b.n	8005aa6 <setvbuf+0xc2>
 8005b2e:	bf00      	nop
 8005b30:	20000020 	.word	0x20000020
 8005b34:	08009010 	.word	0x08009010
 8005b38:	08009030 	.word	0x08009030
 8005b3c:	08008ff0 	.word	0x08008ff0

08005b40 <sulp>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	460f      	mov	r7, r1
 8005b46:	4690      	mov	r8, r2
 8005b48:	f002 fd46 	bl	80085d8 <__ulp>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	f1b8 0f00 	cmp.w	r8, #0
 8005b54:	d011      	beq.n	8005b7a <sulp+0x3a>
 8005b56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dd0b      	ble.n	8005b7a <sulp+0x3a>
 8005b62:	2400      	movs	r4, #0
 8005b64:	051b      	lsls	r3, r3, #20
 8005b66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b6e:	4622      	mov	r2, r4
 8005b70:	462b      	mov	r3, r5
 8005b72:	f7fa fcb1 	bl	80004d8 <__aeabi_dmul>
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b82:	0000      	movs	r0, r0
 8005b84:	0000      	movs	r0, r0
	...

08005b88 <_strtod_l>:
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	461f      	mov	r7, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	b0a1      	sub	sp, #132	; 0x84
 8005b92:	4683      	mov	fp, r0
 8005b94:	4638      	mov	r0, r7
 8005b96:	460e      	mov	r6, r1
 8005b98:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b9a:	931c      	str	r3, [sp, #112]	; 0x70
 8005b9c:	f002 f9aa 	bl	8007ef4 <__localeconv_l>
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	6800      	ldr	r0, [r0, #0]
 8005ba4:	f7fa fad4 	bl	8000150 <strlen>
 8005ba8:	f04f 0900 	mov.w	r9, #0
 8005bac:	4604      	mov	r4, r0
 8005bae:	f04f 0a00 	mov.w	sl, #0
 8005bb2:	961b      	str	r6, [sp, #108]	; 0x6c
 8005bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bb6:	781a      	ldrb	r2, [r3, #0]
 8005bb8:	2a0d      	cmp	r2, #13
 8005bba:	d832      	bhi.n	8005c22 <_strtod_l+0x9a>
 8005bbc:	2a09      	cmp	r2, #9
 8005bbe:	d236      	bcs.n	8005c2e <_strtod_l+0xa6>
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	d03e      	beq.n	8005c42 <_strtod_l+0xba>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8005bc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005bca:	782b      	ldrb	r3, [r5, #0]
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	f040 80ac 	bne.w	8005d2a <_strtod_l+0x1a2>
 8005bd2:	786b      	ldrb	r3, [r5, #1]
 8005bd4:	2b58      	cmp	r3, #88	; 0x58
 8005bd6:	d001      	beq.n	8005bdc <_strtod_l+0x54>
 8005bd8:	2b78      	cmp	r3, #120	; 0x78
 8005bda:	d167      	bne.n	8005cac <_strtod_l+0x124>
 8005bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bde:	9702      	str	r7, [sp, #8]
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	ab1c      	add	r3, sp, #112	; 0x70
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	4a89      	ldr	r2, [pc, #548]	; (8005e0c <_strtod_l+0x284>)
 8005be8:	ab1d      	add	r3, sp, #116	; 0x74
 8005bea:	a91b      	add	r1, sp, #108	; 0x6c
 8005bec:	4658      	mov	r0, fp
 8005bee:	f001 fea9 	bl	8007944 <__gethex>
 8005bf2:	f010 0407 	ands.w	r4, r0, #7
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	d005      	beq.n	8005c06 <_strtod_l+0x7e>
 8005bfa:	2c06      	cmp	r4, #6
 8005bfc:	d12b      	bne.n	8005c56 <_strtod_l+0xce>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	3501      	adds	r5, #1
 8005c02:	951b      	str	r5, [sp, #108]	; 0x6c
 8005c04:	930d      	str	r3, [sp, #52]	; 0x34
 8005c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f040 85a6 	bne.w	800675a <_strtod_l+0xbd2>
 8005c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c10:	b1e3      	cbz	r3, 8005c4c <_strtod_l+0xc4>
 8005c12:	464a      	mov	r2, r9
 8005c14:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	b021      	add	sp, #132	; 0x84
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c22:	2a2b      	cmp	r2, #43	; 0x2b
 8005c24:	d015      	beq.n	8005c52 <_strtod_l+0xca>
 8005c26:	2a2d      	cmp	r2, #45	; 0x2d
 8005c28:	d004      	beq.n	8005c34 <_strtod_l+0xac>
 8005c2a:	2a20      	cmp	r2, #32
 8005c2c:	d1ca      	bne.n	8005bc4 <_strtod_l+0x3c>
 8005c2e:	3301      	adds	r3, #1
 8005c30:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c32:	e7bf      	b.n	8005bb4 <_strtod_l+0x2c>
 8005c34:	2201      	movs	r2, #1
 8005c36:	920d      	str	r2, [sp, #52]	; 0x34
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1c2      	bne.n	8005bc8 <_strtod_l+0x40>
 8005c42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c44:	961b      	str	r6, [sp, #108]	; 0x6c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f040 8585 	bne.w	8006756 <_strtod_l+0xbce>
 8005c4c:	464a      	mov	r2, r9
 8005c4e:	4653      	mov	r3, sl
 8005c50:	e7e2      	b.n	8005c18 <_strtod_l+0x90>
 8005c52:	2200      	movs	r2, #0
 8005c54:	e7ef      	b.n	8005c36 <_strtod_l+0xae>
 8005c56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c58:	b13a      	cbz	r2, 8005c6a <_strtod_l+0xe2>
 8005c5a:	2135      	movs	r1, #53	; 0x35
 8005c5c:	a81e      	add	r0, sp, #120	; 0x78
 8005c5e:	f002 fdae 	bl	80087be <__copybits>
 8005c62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c64:	4658      	mov	r0, fp
 8005c66:	f002 fa20 	bl	80080aa <_Bfree>
 8005c6a:	3c01      	subs	r4, #1
 8005c6c:	2c04      	cmp	r4, #4
 8005c6e:	d806      	bhi.n	8005c7e <_strtod_l+0xf6>
 8005c70:	e8df f004 	tbb	[pc, r4]
 8005c74:	1714030a 	.word	0x1714030a
 8005c78:	0a          	.byte	0x0a
 8005c79:	00          	.byte	0x00
 8005c7a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005c7e:	0731      	lsls	r1, r6, #28
 8005c80:	d5c1      	bpl.n	8005c06 <_strtod_l+0x7e>
 8005c82:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005c86:	e7be      	b.n	8005c06 <_strtod_l+0x7e>
 8005c88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c8a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005c8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c96:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005c9a:	e7f0      	b.n	8005c7e <_strtod_l+0xf6>
 8005c9c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005e10 <_strtod_l+0x288>
 8005ca0:	e7ed      	b.n	8005c7e <_strtod_l+0xf6>
 8005ca2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005ca6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005caa:	e7e8      	b.n	8005c7e <_strtod_l+0xf6>
 8005cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b30      	cmp	r3, #48	; 0x30
 8005cb6:	d0f9      	beq.n	8005cac <_strtod_l+0x124>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0a4      	beq.n	8005c06 <_strtod_l+0x7e>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	2500      	movs	r5, #0
 8005cc0:	220a      	movs	r2, #10
 8005cc2:	9307      	str	r3, [sp, #28]
 8005cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cc6:	9506      	str	r5, [sp, #24]
 8005cc8:	9308      	str	r3, [sp, #32]
 8005cca:	9504      	str	r5, [sp, #16]
 8005ccc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005cce:	7807      	ldrb	r7, [r0, #0]
 8005cd0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005cd4:	b2d9      	uxtb	r1, r3
 8005cd6:	2909      	cmp	r1, #9
 8005cd8:	d929      	bls.n	8005d2e <_strtod_l+0x1a6>
 8005cda:	4622      	mov	r2, r4
 8005cdc:	f8d8 1000 	ldr.w	r1, [r8]
 8005ce0:	f002 ffed 	bl	8008cbe <strncmp>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d031      	beq.n	8005d4c <_strtod_l+0x1c4>
 8005ce8:	2000      	movs	r0, #0
 8005cea:	463b      	mov	r3, r7
 8005cec:	4602      	mov	r2, r0
 8005cee:	9c04      	ldr	r4, [sp, #16]
 8005cf0:	9005      	str	r0, [sp, #20]
 8005cf2:	2b65      	cmp	r3, #101	; 0x65
 8005cf4:	d001      	beq.n	8005cfa <_strtod_l+0x172>
 8005cf6:	2b45      	cmp	r3, #69	; 0x45
 8005cf8:	d114      	bne.n	8005d24 <_strtod_l+0x19c>
 8005cfa:	b924      	cbnz	r4, 8005d06 <_strtod_l+0x17e>
 8005cfc:	b910      	cbnz	r0, 8005d04 <_strtod_l+0x17c>
 8005cfe:	9b07      	ldr	r3, [sp, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d09e      	beq.n	8005c42 <_strtod_l+0xba>
 8005d04:	2400      	movs	r4, #0
 8005d06:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005d08:	1c73      	adds	r3, r6, #1
 8005d0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d0c:	7873      	ldrb	r3, [r6, #1]
 8005d0e:	2b2b      	cmp	r3, #43	; 0x2b
 8005d10:	d078      	beq.n	8005e04 <_strtod_l+0x27c>
 8005d12:	2b2d      	cmp	r3, #45	; 0x2d
 8005d14:	d070      	beq.n	8005df8 <_strtod_l+0x270>
 8005d16:	f04f 0c00 	mov.w	ip, #0
 8005d1a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005d1e:	2f09      	cmp	r7, #9
 8005d20:	d97c      	bls.n	8005e1c <_strtod_l+0x294>
 8005d22:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d24:	f04f 0e00 	mov.w	lr, #0
 8005d28:	e09a      	b.n	8005e60 <_strtod_l+0x2d8>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e7c7      	b.n	8005cbe <_strtod_l+0x136>
 8005d2e:	9904      	ldr	r1, [sp, #16]
 8005d30:	3001      	adds	r0, #1
 8005d32:	2908      	cmp	r1, #8
 8005d34:	bfd7      	itett	le
 8005d36:	9906      	ldrle	r1, [sp, #24]
 8005d38:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005d3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d40:	9306      	strle	r3, [sp, #24]
 8005d42:	9b04      	ldr	r3, [sp, #16]
 8005d44:	901b      	str	r0, [sp, #108]	; 0x6c
 8005d46:	3301      	adds	r3, #1
 8005d48:	9304      	str	r3, [sp, #16]
 8005d4a:	e7bf      	b.n	8005ccc <_strtod_l+0x144>
 8005d4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d4e:	191a      	adds	r2, r3, r4
 8005d50:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	5d1b      	ldrb	r3, [r3, r4]
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	d037      	beq.n	8005dca <_strtod_l+0x242>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	9c04      	ldr	r4, [sp, #16]
 8005d5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005d62:	2909      	cmp	r1, #9
 8005d64:	d913      	bls.n	8005d8e <_strtod_l+0x206>
 8005d66:	2101      	movs	r1, #1
 8005d68:	9105      	str	r1, [sp, #20]
 8005d6a:	e7c2      	b.n	8005cf2 <_strtod_l+0x16a>
 8005d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d6e:	3001      	adds	r0, #1
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b30      	cmp	r3, #48	; 0x30
 8005d78:	d0f8      	beq.n	8005d6c <_strtod_l+0x1e4>
 8005d7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005d7e:	2a08      	cmp	r2, #8
 8005d80:	f200 84f0 	bhi.w	8006764 <_strtod_l+0xbdc>
 8005d84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d86:	9208      	str	r2, [sp, #32]
 8005d88:	4602      	mov	r2, r0
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005d92:	f100 0101 	add.w	r1, r0, #1
 8005d96:	d012      	beq.n	8005dbe <_strtod_l+0x236>
 8005d98:	440a      	add	r2, r1
 8005d9a:	270a      	movs	r7, #10
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	eb00 0c04 	add.w	ip, r0, r4
 8005da2:	458c      	cmp	ip, r1
 8005da4:	d113      	bne.n	8005dce <_strtod_l+0x246>
 8005da6:	1821      	adds	r1, r4, r0
 8005da8:	2908      	cmp	r1, #8
 8005daa:	f104 0401 	add.w	r4, r4, #1
 8005dae:	4404      	add	r4, r0
 8005db0:	dc19      	bgt.n	8005de6 <_strtod_l+0x25e>
 8005db2:	210a      	movs	r1, #10
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	fb01 e303 	mla	r3, r1, r3, lr
 8005dba:	9306      	str	r3, [sp, #24]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dc0:	1c58      	adds	r0, r3, #1
 8005dc2:	901b      	str	r0, [sp, #108]	; 0x6c
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	e7c9      	b.n	8005d5e <_strtod_l+0x1d6>
 8005dca:	9804      	ldr	r0, [sp, #16]
 8005dcc:	e7d3      	b.n	8005d76 <_strtod_l+0x1ee>
 8005dce:	2908      	cmp	r1, #8
 8005dd0:	f101 0101 	add.w	r1, r1, #1
 8005dd4:	dc03      	bgt.n	8005dde <_strtod_l+0x256>
 8005dd6:	9b06      	ldr	r3, [sp, #24]
 8005dd8:	437b      	muls	r3, r7
 8005dda:	9306      	str	r3, [sp, #24]
 8005ddc:	e7e1      	b.n	8005da2 <_strtod_l+0x21a>
 8005dde:	2910      	cmp	r1, #16
 8005de0:	bfd8      	it	le
 8005de2:	437d      	mulle	r5, r7
 8005de4:	e7dd      	b.n	8005da2 <_strtod_l+0x21a>
 8005de6:	2c10      	cmp	r4, #16
 8005de8:	bfdc      	itt	le
 8005dea:	210a      	movle	r1, #10
 8005dec:	fb01 e505 	mlale	r5, r1, r5, lr
 8005df0:	e7e4      	b.n	8005dbc <_strtod_l+0x234>
 8005df2:	2301      	movs	r3, #1
 8005df4:	9305      	str	r3, [sp, #20]
 8005df6:	e781      	b.n	8005cfc <_strtod_l+0x174>
 8005df8:	f04f 0c01 	mov.w	ip, #1
 8005dfc:	1cb3      	adds	r3, r6, #2
 8005dfe:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e00:	78b3      	ldrb	r3, [r6, #2]
 8005e02:	e78a      	b.n	8005d1a <_strtod_l+0x192>
 8005e04:	f04f 0c00 	mov.w	ip, #0
 8005e08:	e7f8      	b.n	8005dfc <_strtod_l+0x274>
 8005e0a:	bf00      	nop
 8005e0c:	08008f8c 	.word	0x08008f8c
 8005e10:	7ff00000 	.word	0x7ff00000
 8005e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e16:	1c5f      	adds	r7, r3, #1
 8005e18:	971b      	str	r7, [sp, #108]	; 0x6c
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b30      	cmp	r3, #48	; 0x30
 8005e1e:	d0f9      	beq.n	8005e14 <_strtod_l+0x28c>
 8005e20:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005e24:	2f08      	cmp	r7, #8
 8005e26:	f63f af7d 	bhi.w	8005d24 <_strtod_l+0x19c>
 8005e2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005e2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e30:	9309      	str	r3, [sp, #36]	; 0x24
 8005e32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e34:	1c5f      	adds	r7, r3, #1
 8005e36:	971b      	str	r7, [sp, #108]	; 0x6c
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005e3e:	f1b8 0f09 	cmp.w	r8, #9
 8005e42:	d937      	bls.n	8005eb4 <_strtod_l+0x32c>
 8005e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e46:	1a7f      	subs	r7, r7, r1
 8005e48:	2f08      	cmp	r7, #8
 8005e4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005e4e:	dc37      	bgt.n	8005ec0 <_strtod_l+0x338>
 8005e50:	45be      	cmp	lr, r7
 8005e52:	bfa8      	it	ge
 8005e54:	46be      	movge	lr, r7
 8005e56:	f1bc 0f00 	cmp.w	ip, #0
 8005e5a:	d001      	beq.n	8005e60 <_strtod_l+0x2d8>
 8005e5c:	f1ce 0e00 	rsb	lr, lr, #0
 8005e60:	2c00      	cmp	r4, #0
 8005e62:	d151      	bne.n	8005f08 <_strtod_l+0x380>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f47f aece 	bne.w	8005c06 <_strtod_l+0x7e>
 8005e6a:	9a07      	ldr	r2, [sp, #28]
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	f47f aeca 	bne.w	8005c06 <_strtod_l+0x7e>
 8005e72:	9a05      	ldr	r2, [sp, #20]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	f47f aee4 	bne.w	8005c42 <_strtod_l+0xba>
 8005e7a:	2b4e      	cmp	r3, #78	; 0x4e
 8005e7c:	d027      	beq.n	8005ece <_strtod_l+0x346>
 8005e7e:	dc21      	bgt.n	8005ec4 <_strtod_l+0x33c>
 8005e80:	2b49      	cmp	r3, #73	; 0x49
 8005e82:	f47f aede 	bne.w	8005c42 <_strtod_l+0xba>
 8005e86:	49a4      	ldr	r1, [pc, #656]	; (8006118 <_strtod_l+0x590>)
 8005e88:	a81b      	add	r0, sp, #108	; 0x6c
 8005e8a:	f001 ff8f 	bl	8007dac <__match>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f43f aed7 	beq.w	8005c42 <_strtod_l+0xba>
 8005e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e96:	49a1      	ldr	r1, [pc, #644]	; (800611c <_strtod_l+0x594>)
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	a81b      	add	r0, sp, #108	; 0x6c
 8005e9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e9e:	f001 ff85 	bl	8007dac <__match>
 8005ea2:	b910      	cbnz	r0, 8005eaa <_strtod_l+0x322>
 8005ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005eaa:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006130 <_strtod_l+0x5a8>
 8005eae:	f04f 0900 	mov.w	r9, #0
 8005eb2:	e6a8      	b.n	8005c06 <_strtod_l+0x7e>
 8005eb4:	210a      	movs	r1, #10
 8005eb6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005eba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005ebe:	e7b8      	b.n	8005e32 <_strtod_l+0x2aa>
 8005ec0:	46be      	mov	lr, r7
 8005ec2:	e7c8      	b.n	8005e56 <_strtod_l+0x2ce>
 8005ec4:	2b69      	cmp	r3, #105	; 0x69
 8005ec6:	d0de      	beq.n	8005e86 <_strtod_l+0x2fe>
 8005ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8005eca:	f47f aeba 	bne.w	8005c42 <_strtod_l+0xba>
 8005ece:	4994      	ldr	r1, [pc, #592]	; (8006120 <_strtod_l+0x598>)
 8005ed0:	a81b      	add	r0, sp, #108	; 0x6c
 8005ed2:	f001 ff6b 	bl	8007dac <__match>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f43f aeb3 	beq.w	8005c42 <_strtod_l+0xba>
 8005edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b28      	cmp	r3, #40	; 0x28
 8005ee2:	d10e      	bne.n	8005f02 <_strtod_l+0x37a>
 8005ee4:	aa1e      	add	r2, sp, #120	; 0x78
 8005ee6:	498f      	ldr	r1, [pc, #572]	; (8006124 <_strtod_l+0x59c>)
 8005ee8:	a81b      	add	r0, sp, #108	; 0x6c
 8005eea:	f001 ff73 	bl	8007dd4 <__hexnan>
 8005eee:	2805      	cmp	r0, #5
 8005ef0:	d107      	bne.n	8005f02 <_strtod_l+0x37a>
 8005ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ef4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005ef8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005efc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005f00:	e681      	b.n	8005c06 <_strtod_l+0x7e>
 8005f02:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006138 <_strtod_l+0x5b0>
 8005f06:	e7d2      	b.n	8005eae <_strtod_l+0x326>
 8005f08:	ebae 0302 	sub.w	r3, lr, r2
 8005f0c:	9307      	str	r3, [sp, #28]
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	9806      	ldr	r0, [sp, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bf08      	it	eq
 8005f16:	4623      	moveq	r3, r4
 8005f18:	2c10      	cmp	r4, #16
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	46a0      	mov	r8, r4
 8005f1e:	bfa8      	it	ge
 8005f20:	f04f 0810 	movge.w	r8, #16
 8005f24:	f7fa fa5e 	bl	80003e4 <__aeabi_ui2d>
 8005f28:	2c09      	cmp	r4, #9
 8005f2a:	4681      	mov	r9, r0
 8005f2c:	468a      	mov	sl, r1
 8005f2e:	dc13      	bgt.n	8005f58 <_strtod_l+0x3d0>
 8005f30:	9b07      	ldr	r3, [sp, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f43f ae67 	beq.w	8005c06 <_strtod_l+0x7e>
 8005f38:	9b07      	ldr	r3, [sp, #28]
 8005f3a:	dd7e      	ble.n	800603a <_strtod_l+0x4b2>
 8005f3c:	2b16      	cmp	r3, #22
 8005f3e:	dc65      	bgt.n	800600c <_strtod_l+0x484>
 8005f40:	4a79      	ldr	r2, [pc, #484]	; (8006128 <_strtod_l+0x5a0>)
 8005f42:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005f46:	464a      	mov	r2, r9
 8005f48:	e9de 0100 	ldrd	r0, r1, [lr]
 8005f4c:	4653      	mov	r3, sl
 8005f4e:	f7fa fac3 	bl	80004d8 <__aeabi_dmul>
 8005f52:	4681      	mov	r9, r0
 8005f54:	468a      	mov	sl, r1
 8005f56:	e656      	b.n	8005c06 <_strtod_l+0x7e>
 8005f58:	4b73      	ldr	r3, [pc, #460]	; (8006128 <_strtod_l+0x5a0>)
 8005f5a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005f5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f62:	f7fa fab9 	bl	80004d8 <__aeabi_dmul>
 8005f66:	4606      	mov	r6, r0
 8005f68:	4628      	mov	r0, r5
 8005f6a:	460f      	mov	r7, r1
 8005f6c:	f7fa fa3a 	bl	80003e4 <__aeabi_ui2d>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4630      	mov	r0, r6
 8005f76:	4639      	mov	r1, r7
 8005f78:	f7fa f8f8 	bl	800016c <__adddf3>
 8005f7c:	2c0f      	cmp	r4, #15
 8005f7e:	4681      	mov	r9, r0
 8005f80:	468a      	mov	sl, r1
 8005f82:	ddd5      	ble.n	8005f30 <_strtod_l+0x3a8>
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	eba4 0808 	sub.w	r8, r4, r8
 8005f8a:	4498      	add	r8, r3
 8005f8c:	f1b8 0f00 	cmp.w	r8, #0
 8005f90:	f340 809a 	ble.w	80060c8 <_strtod_l+0x540>
 8005f94:	f018 030f 	ands.w	r3, r8, #15
 8005f98:	d00a      	beq.n	8005fb0 <_strtod_l+0x428>
 8005f9a:	4963      	ldr	r1, [pc, #396]	; (8006128 <_strtod_l+0x5a0>)
 8005f9c:	464a      	mov	r2, r9
 8005f9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa6:	4653      	mov	r3, sl
 8005fa8:	f7fa fa96 	bl	80004d8 <__aeabi_dmul>
 8005fac:	4681      	mov	r9, r0
 8005fae:	468a      	mov	sl, r1
 8005fb0:	f038 080f 	bics.w	r8, r8, #15
 8005fb4:	d077      	beq.n	80060a6 <_strtod_l+0x51e>
 8005fb6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005fba:	dd4b      	ble.n	8006054 <_strtod_l+0x4cc>
 8005fbc:	f04f 0800 	mov.w	r8, #0
 8005fc0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005fc4:	f8cd 8020 	str.w	r8, [sp, #32]
 8005fc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fcc:	2322      	movs	r3, #34	; 0x22
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006130 <_strtod_l+0x5a8>
 8005fd6:	f8cb 3000 	str.w	r3, [fp]
 8005fda:	9b08      	ldr	r3, [sp, #32]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f43f ae12 	beq.w	8005c06 <_strtod_l+0x7e>
 8005fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	f002 f860 	bl	80080aa <_Bfree>
 8005fea:	9906      	ldr	r1, [sp, #24]
 8005fec:	4658      	mov	r0, fp
 8005fee:	f002 f85c 	bl	80080aa <_Bfree>
 8005ff2:	9904      	ldr	r1, [sp, #16]
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	f002 f858 	bl	80080aa <_Bfree>
 8005ffa:	9908      	ldr	r1, [sp, #32]
 8005ffc:	4658      	mov	r0, fp
 8005ffe:	f002 f854 	bl	80080aa <_Bfree>
 8006002:	4641      	mov	r1, r8
 8006004:	4658      	mov	r0, fp
 8006006:	f002 f850 	bl	80080aa <_Bfree>
 800600a:	e5fc      	b.n	8005c06 <_strtod_l+0x7e>
 800600c:	9a07      	ldr	r2, [sp, #28]
 800600e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006012:	4293      	cmp	r3, r2
 8006014:	dbb6      	blt.n	8005f84 <_strtod_l+0x3fc>
 8006016:	4d44      	ldr	r5, [pc, #272]	; (8006128 <_strtod_l+0x5a0>)
 8006018:	f1c4 040f 	rsb	r4, r4, #15
 800601c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006020:	464a      	mov	r2, r9
 8006022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006026:	4653      	mov	r3, sl
 8006028:	f7fa fa56 	bl	80004d8 <__aeabi_dmul>
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	1b1c      	subs	r4, r3, r4
 8006030:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006034:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006038:	e789      	b.n	8005f4e <_strtod_l+0x3c6>
 800603a:	f113 0f16 	cmn.w	r3, #22
 800603e:	dba1      	blt.n	8005f84 <_strtod_l+0x3fc>
 8006040:	4a39      	ldr	r2, [pc, #228]	; (8006128 <_strtod_l+0x5a0>)
 8006042:	4648      	mov	r0, r9
 8006044:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006048:	e9d2 2300 	ldrd	r2, r3, [r2]
 800604c:	4651      	mov	r1, sl
 800604e:	f7fa fb6d 	bl	800072c <__aeabi_ddiv>
 8006052:	e77e      	b.n	8005f52 <_strtod_l+0x3ca>
 8006054:	2300      	movs	r3, #0
 8006056:	4648      	mov	r0, r9
 8006058:	4651      	mov	r1, sl
 800605a:	461d      	mov	r5, r3
 800605c:	4e33      	ldr	r6, [pc, #204]	; (800612c <_strtod_l+0x5a4>)
 800605e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006062:	f1b8 0f01 	cmp.w	r8, #1
 8006066:	dc21      	bgt.n	80060ac <_strtod_l+0x524>
 8006068:	b10b      	cbz	r3, 800606e <_strtod_l+0x4e6>
 800606a:	4681      	mov	r9, r0
 800606c:	468a      	mov	sl, r1
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <_strtod_l+0x5a4>)
 8006070:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006074:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006078:	464a      	mov	r2, r9
 800607a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800607e:	4653      	mov	r3, sl
 8006080:	f7fa fa2a 	bl	80004d8 <__aeabi_dmul>
 8006084:	4b2a      	ldr	r3, [pc, #168]	; (8006130 <_strtod_l+0x5a8>)
 8006086:	460a      	mov	r2, r1
 8006088:	400b      	ands	r3, r1
 800608a:	492a      	ldr	r1, [pc, #168]	; (8006134 <_strtod_l+0x5ac>)
 800608c:	4681      	mov	r9, r0
 800608e:	428b      	cmp	r3, r1
 8006090:	d894      	bhi.n	8005fbc <_strtod_l+0x434>
 8006092:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006096:	428b      	cmp	r3, r1
 8006098:	bf86      	itte	hi
 800609a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800609e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800613c <_strtod_l+0x5b4>
 80060a2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80060a6:	2300      	movs	r3, #0
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	e07b      	b.n	80061a4 <_strtod_l+0x61c>
 80060ac:	f018 0f01 	tst.w	r8, #1
 80060b0:	d006      	beq.n	80060c0 <_strtod_l+0x538>
 80060b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa fa0d 	bl	80004d8 <__aeabi_dmul>
 80060be:	2301      	movs	r3, #1
 80060c0:	3501      	adds	r5, #1
 80060c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80060c6:	e7cc      	b.n	8006062 <_strtod_l+0x4da>
 80060c8:	d0ed      	beq.n	80060a6 <_strtod_l+0x51e>
 80060ca:	f1c8 0800 	rsb	r8, r8, #0
 80060ce:	f018 020f 	ands.w	r2, r8, #15
 80060d2:	d00a      	beq.n	80060ea <_strtod_l+0x562>
 80060d4:	4b14      	ldr	r3, [pc, #80]	; (8006128 <_strtod_l+0x5a0>)
 80060d6:	4648      	mov	r0, r9
 80060d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060dc:	4651      	mov	r1, sl
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f7fa fb23 	bl	800072c <__aeabi_ddiv>
 80060e6:	4681      	mov	r9, r0
 80060e8:	468a      	mov	sl, r1
 80060ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 80060ee:	d0da      	beq.n	80060a6 <_strtod_l+0x51e>
 80060f0:	f1b8 0f1f 	cmp.w	r8, #31
 80060f4:	dd24      	ble.n	8006140 <_strtod_l+0x5b8>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80060fe:	f8cd 8020 	str.w	r8, [sp, #32]
 8006102:	f8cd 8018 	str.w	r8, [sp, #24]
 8006106:	2322      	movs	r3, #34	; 0x22
 8006108:	f04f 0900 	mov.w	r9, #0
 800610c:	f04f 0a00 	mov.w	sl, #0
 8006110:	f8cb 3000 	str.w	r3, [fp]
 8006114:	e761      	b.n	8005fda <_strtod_l+0x452>
 8006116:	bf00      	nop
 8006118:	08008f5d 	.word	0x08008f5d
 800611c:	08008fe3 	.word	0x08008fe3
 8006120:	08008f65 	.word	0x08008f65
 8006124:	08008fa0 	.word	0x08008fa0
 8006128:	08009088 	.word	0x08009088
 800612c:	08009060 	.word	0x08009060
 8006130:	7ff00000 	.word	0x7ff00000
 8006134:	7ca00000 	.word	0x7ca00000
 8006138:	fff80000 	.word	0xfff80000
 800613c:	7fefffff 	.word	0x7fefffff
 8006140:	f018 0310 	ands.w	r3, r8, #16
 8006144:	bf18      	it	ne
 8006146:	236a      	movne	r3, #106	; 0x6a
 8006148:	4648      	mov	r0, r9
 800614a:	9305      	str	r3, [sp, #20]
 800614c:	4651      	mov	r1, sl
 800614e:	2300      	movs	r3, #0
 8006150:	4da1      	ldr	r5, [pc, #644]	; (80063d8 <_strtod_l+0x850>)
 8006152:	f1b8 0f00 	cmp.w	r8, #0
 8006156:	f300 8113 	bgt.w	8006380 <_strtod_l+0x7f8>
 800615a:	b10b      	cbz	r3, 8006160 <_strtod_l+0x5d8>
 800615c:	4681      	mov	r9, r0
 800615e:	468a      	mov	sl, r1
 8006160:	9b05      	ldr	r3, [sp, #20]
 8006162:	b1bb      	cbz	r3, 8006194 <_strtod_l+0x60c>
 8006164:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006168:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800616c:	2b00      	cmp	r3, #0
 800616e:	4651      	mov	r1, sl
 8006170:	dd10      	ble.n	8006194 <_strtod_l+0x60c>
 8006172:	2b1f      	cmp	r3, #31
 8006174:	f340 8110 	ble.w	8006398 <_strtod_l+0x810>
 8006178:	2b34      	cmp	r3, #52	; 0x34
 800617a:	bfd8      	it	le
 800617c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006180:	f04f 0900 	mov.w	r9, #0
 8006184:	bfcf      	iteee	gt
 8006186:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800618a:	3b20      	suble	r3, #32
 800618c:	fa02 f303 	lslle.w	r3, r2, r3
 8006190:	ea03 0a01 	andle.w	sl, r3, r1
 8006194:	2200      	movs	r2, #0
 8006196:	2300      	movs	r3, #0
 8006198:	4648      	mov	r0, r9
 800619a:	4651      	mov	r1, sl
 800619c:	f7fa fc04 	bl	80009a8 <__aeabi_dcmpeq>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d1a8      	bne.n	80060f6 <_strtod_l+0x56e>
 80061a4:	9b06      	ldr	r3, [sp, #24]
 80061a6:	9a04      	ldr	r2, [sp, #16]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	9908      	ldr	r1, [sp, #32]
 80061ac:	4623      	mov	r3, r4
 80061ae:	4658      	mov	r0, fp
 80061b0:	f001 ffcd 	bl	800814e <__s2b>
 80061b4:	9008      	str	r0, [sp, #32]
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f43f af00 	beq.w	8005fbc <_strtod_l+0x434>
 80061bc:	9a07      	ldr	r2, [sp, #28]
 80061be:	9b07      	ldr	r3, [sp, #28]
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	f1c3 0300 	rsb	r3, r3, #0
 80061c6:	bfa8      	it	ge
 80061c8:	2300      	movge	r3, #0
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	930e      	str	r3, [sp, #56]	; 0x38
 80061d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80061d4:	9316      	str	r3, [sp, #88]	; 0x58
 80061d6:	f8cd 8010 	str.w	r8, [sp, #16]
 80061da:	9b08      	ldr	r3, [sp, #32]
 80061dc:	4658      	mov	r0, fp
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	f001 ff2f 	bl	8008042 <_Balloc>
 80061e4:	9006      	str	r0, [sp, #24]
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f43f aef0 	beq.w	8005fcc <_strtod_l+0x444>
 80061ec:	9b08      	ldr	r3, [sp, #32]
 80061ee:	300c      	adds	r0, #12
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	f103 010c 	add.w	r1, r3, #12
 80061f6:	3202      	adds	r2, #2
 80061f8:	0092      	lsls	r2, r2, #2
 80061fa:	f001 ff17 	bl	800802c <memcpy>
 80061fe:	ab1e      	add	r3, sp, #120	; 0x78
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	ab1d      	add	r3, sp, #116	; 0x74
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	464a      	mov	r2, r9
 8006208:	4653      	mov	r3, sl
 800620a:	4658      	mov	r0, fp
 800620c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006210:	f002 fa58 	bl	80086c4 <__d2b>
 8006214:	901c      	str	r0, [sp, #112]	; 0x70
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f aed8 	beq.w	8005fcc <_strtod_l+0x444>
 800621c:	2101      	movs	r1, #1
 800621e:	4658      	mov	r0, fp
 8006220:	f002 f821 	bl	8008266 <__i2b>
 8006224:	9004      	str	r0, [sp, #16]
 8006226:	4603      	mov	r3, r0
 8006228:	2800      	cmp	r0, #0
 800622a:	f43f aecf 	beq.w	8005fcc <_strtod_l+0x444>
 800622e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006230:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006232:	2d00      	cmp	r5, #0
 8006234:	bfab      	itete	ge
 8006236:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006238:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800623a:	18ee      	addge	r6, r5, r3
 800623c:	1b5c      	sublt	r4, r3, r5
 800623e:	9b05      	ldr	r3, [sp, #20]
 8006240:	bfa8      	it	ge
 8006242:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006244:	eba5 0503 	sub.w	r5, r5, r3
 8006248:	4415      	add	r5, r2
 800624a:	4b64      	ldr	r3, [pc, #400]	; (80063dc <_strtod_l+0x854>)
 800624c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006250:	bfb8      	it	lt
 8006252:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006254:	429d      	cmp	r5, r3
 8006256:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800625a:	f280 80af 	bge.w	80063bc <_strtod_l+0x834>
 800625e:	1b5b      	subs	r3, r3, r5
 8006260:	2b1f      	cmp	r3, #31
 8006262:	eba2 0203 	sub.w	r2, r2, r3
 8006266:	f04f 0701 	mov.w	r7, #1
 800626a:	f300 809c 	bgt.w	80063a6 <_strtod_l+0x81e>
 800626e:	2500      	movs	r5, #0
 8006270:	fa07 f303 	lsl.w	r3, r7, r3
 8006274:	930f      	str	r3, [sp, #60]	; 0x3c
 8006276:	18b7      	adds	r7, r6, r2
 8006278:	9b05      	ldr	r3, [sp, #20]
 800627a:	42be      	cmp	r6, r7
 800627c:	4414      	add	r4, r2
 800627e:	441c      	add	r4, r3
 8006280:	4633      	mov	r3, r6
 8006282:	bfa8      	it	ge
 8006284:	463b      	movge	r3, r7
 8006286:	42a3      	cmp	r3, r4
 8006288:	bfa8      	it	ge
 800628a:	4623      	movge	r3, r4
 800628c:	2b00      	cmp	r3, #0
 800628e:	bfc2      	ittt	gt
 8006290:	1aff      	subgt	r7, r7, r3
 8006292:	1ae4      	subgt	r4, r4, r3
 8006294:	1af6      	subgt	r6, r6, r3
 8006296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006298:	b1bb      	cbz	r3, 80062ca <_strtod_l+0x742>
 800629a:	461a      	mov	r2, r3
 800629c:	9904      	ldr	r1, [sp, #16]
 800629e:	4658      	mov	r0, fp
 80062a0:	f002 f880 	bl	80083a4 <__pow5mult>
 80062a4:	9004      	str	r0, [sp, #16]
 80062a6:	2800      	cmp	r0, #0
 80062a8:	f43f ae90 	beq.w	8005fcc <_strtod_l+0x444>
 80062ac:	4601      	mov	r1, r0
 80062ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80062b0:	4658      	mov	r0, fp
 80062b2:	f001 ffe1 	bl	8008278 <__multiply>
 80062b6:	9009      	str	r0, [sp, #36]	; 0x24
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f43f ae87 	beq.w	8005fcc <_strtod_l+0x444>
 80062be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062c0:	4658      	mov	r0, fp
 80062c2:	f001 fef2 	bl	80080aa <_Bfree>
 80062c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c8:	931c      	str	r3, [sp, #112]	; 0x70
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	dc7a      	bgt.n	80063c4 <_strtod_l+0x83c>
 80062ce:	9b07      	ldr	r3, [sp, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dd08      	ble.n	80062e6 <_strtod_l+0x75e>
 80062d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80062d6:	9906      	ldr	r1, [sp, #24]
 80062d8:	4658      	mov	r0, fp
 80062da:	f002 f863 	bl	80083a4 <__pow5mult>
 80062de:	9006      	str	r0, [sp, #24]
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f43f ae73 	beq.w	8005fcc <_strtod_l+0x444>
 80062e6:	2c00      	cmp	r4, #0
 80062e8:	dd08      	ble.n	80062fc <_strtod_l+0x774>
 80062ea:	4622      	mov	r2, r4
 80062ec:	9906      	ldr	r1, [sp, #24]
 80062ee:	4658      	mov	r0, fp
 80062f0:	f002 f8a6 	bl	8008440 <__lshift>
 80062f4:	9006      	str	r0, [sp, #24]
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f43f ae68 	beq.w	8005fcc <_strtod_l+0x444>
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	dd08      	ble.n	8006312 <_strtod_l+0x78a>
 8006300:	4632      	mov	r2, r6
 8006302:	9904      	ldr	r1, [sp, #16]
 8006304:	4658      	mov	r0, fp
 8006306:	f002 f89b 	bl	8008440 <__lshift>
 800630a:	9004      	str	r0, [sp, #16]
 800630c:	2800      	cmp	r0, #0
 800630e:	f43f ae5d 	beq.w	8005fcc <_strtod_l+0x444>
 8006312:	9a06      	ldr	r2, [sp, #24]
 8006314:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006316:	4658      	mov	r0, fp
 8006318:	f002 f900 	bl	800851c <__mdiff>
 800631c:	4680      	mov	r8, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f ae54 	beq.w	8005fcc <_strtod_l+0x444>
 8006324:	2400      	movs	r4, #0
 8006326:	68c3      	ldr	r3, [r0, #12]
 8006328:	9904      	ldr	r1, [sp, #16]
 800632a:	60c4      	str	r4, [r0, #12]
 800632c:	930c      	str	r3, [sp, #48]	; 0x30
 800632e:	f002 f8db 	bl	80084e8 <__mcmp>
 8006332:	42a0      	cmp	r0, r4
 8006334:	da54      	bge.n	80063e0 <_strtod_l+0x858>
 8006336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006338:	b9f3      	cbnz	r3, 8006378 <_strtod_l+0x7f0>
 800633a:	f1b9 0f00 	cmp.w	r9, #0
 800633e:	d11b      	bne.n	8006378 <_strtod_l+0x7f0>
 8006340:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006344:	b9c3      	cbnz	r3, 8006378 <_strtod_l+0x7f0>
 8006346:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006352:	d911      	bls.n	8006378 <_strtod_l+0x7f0>
 8006354:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006358:	b91b      	cbnz	r3, 8006362 <_strtod_l+0x7da>
 800635a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800635e:	2b01      	cmp	r3, #1
 8006360:	dd0a      	ble.n	8006378 <_strtod_l+0x7f0>
 8006362:	4641      	mov	r1, r8
 8006364:	2201      	movs	r2, #1
 8006366:	4658      	mov	r0, fp
 8006368:	f002 f86a 	bl	8008440 <__lshift>
 800636c:	9904      	ldr	r1, [sp, #16]
 800636e:	4680      	mov	r8, r0
 8006370:	f002 f8ba 	bl	80084e8 <__mcmp>
 8006374:	2800      	cmp	r0, #0
 8006376:	dc68      	bgt.n	800644a <_strtod_l+0x8c2>
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d172      	bne.n	8006464 <_strtod_l+0x8dc>
 800637e:	e630      	b.n	8005fe2 <_strtod_l+0x45a>
 8006380:	f018 0f01 	tst.w	r8, #1
 8006384:	d004      	beq.n	8006390 <_strtod_l+0x808>
 8006386:	e9d5 2300 	ldrd	r2, r3, [r5]
 800638a:	f7fa f8a5 	bl	80004d8 <__aeabi_dmul>
 800638e:	2301      	movs	r3, #1
 8006390:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006394:	3508      	adds	r5, #8
 8006396:	e6dc      	b.n	8006152 <_strtod_l+0x5ca>
 8006398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	ea03 0909 	and.w	r9, r3, r9
 80063a4:	e6f6      	b.n	8006194 <_strtod_l+0x60c>
 80063a6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80063aa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80063ae:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80063b2:	35e2      	adds	r5, #226	; 0xe2
 80063b4:	fa07 f505 	lsl.w	r5, r7, r5
 80063b8:	970f      	str	r7, [sp, #60]	; 0x3c
 80063ba:	e75c      	b.n	8006276 <_strtod_l+0x6ee>
 80063bc:	2301      	movs	r3, #1
 80063be:	2500      	movs	r5, #0
 80063c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063c2:	e758      	b.n	8006276 <_strtod_l+0x6ee>
 80063c4:	463a      	mov	r2, r7
 80063c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80063c8:	4658      	mov	r0, fp
 80063ca:	f002 f839 	bl	8008440 <__lshift>
 80063ce:	901c      	str	r0, [sp, #112]	; 0x70
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f47f af7c 	bne.w	80062ce <_strtod_l+0x746>
 80063d6:	e5f9      	b.n	8005fcc <_strtod_l+0x444>
 80063d8:	08008fb8 	.word	0x08008fb8
 80063dc:	fffffc02 	.word	0xfffffc02
 80063e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80063e4:	f040 8089 	bne.w	80064fa <_strtod_l+0x972>
 80063e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ea:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80063ee:	b342      	cbz	r2, 8006442 <_strtod_l+0x8ba>
 80063f0:	4aaf      	ldr	r2, [pc, #700]	; (80066b0 <_strtod_l+0xb28>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d156      	bne.n	80064a4 <_strtod_l+0x91c>
 80063f6:	9b05      	ldr	r3, [sp, #20]
 80063f8:	4648      	mov	r0, r9
 80063fa:	b1eb      	cbz	r3, 8006438 <_strtod_l+0x8b0>
 80063fc:	4653      	mov	r3, sl
 80063fe:	4aad      	ldr	r2, [pc, #692]	; (80066b4 <_strtod_l+0xb2c>)
 8006400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006404:	401a      	ands	r2, r3
 8006406:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800640a:	d818      	bhi.n	800643e <_strtod_l+0x8b6>
 800640c:	0d12      	lsrs	r2, r2, #20
 800640e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006412:	fa01 f303 	lsl.w	r3, r1, r3
 8006416:	4298      	cmp	r0, r3
 8006418:	d144      	bne.n	80064a4 <_strtod_l+0x91c>
 800641a:	4ba7      	ldr	r3, [pc, #668]	; (80066b8 <_strtod_l+0xb30>)
 800641c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800641e:	429a      	cmp	r2, r3
 8006420:	d102      	bne.n	8006428 <_strtod_l+0x8a0>
 8006422:	3001      	adds	r0, #1
 8006424:	f43f add2 	beq.w	8005fcc <_strtod_l+0x444>
 8006428:	4ba2      	ldr	r3, [pc, #648]	; (80066b4 <_strtod_l+0xb2c>)
 800642a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800642c:	f04f 0900 	mov.w	r9, #0
 8006430:	401a      	ands	r2, r3
 8006432:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006436:	e79f      	b.n	8006378 <_strtod_l+0x7f0>
 8006438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800643c:	e7eb      	b.n	8006416 <_strtod_l+0x88e>
 800643e:	460b      	mov	r3, r1
 8006440:	e7e9      	b.n	8006416 <_strtod_l+0x88e>
 8006442:	bb7b      	cbnz	r3, 80064a4 <_strtod_l+0x91c>
 8006444:	f1b9 0f00 	cmp.w	r9, #0
 8006448:	d12c      	bne.n	80064a4 <_strtod_l+0x91c>
 800644a:	9905      	ldr	r1, [sp, #20]
 800644c:	4653      	mov	r3, sl
 800644e:	4a99      	ldr	r2, [pc, #612]	; (80066b4 <_strtod_l+0xb2c>)
 8006450:	b1f1      	cbz	r1, 8006490 <_strtod_l+0x908>
 8006452:	ea02 010a 	and.w	r1, r2, sl
 8006456:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800645a:	dc19      	bgt.n	8006490 <_strtod_l+0x908>
 800645c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006460:	f77f ae51 	ble.w	8006106 <_strtod_l+0x57e>
 8006464:	2300      	movs	r3, #0
 8006466:	4a95      	ldr	r2, [pc, #596]	; (80066bc <_strtod_l+0xb34>)
 8006468:	4648      	mov	r0, r9
 800646a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800646e:	4651      	mov	r1, sl
 8006470:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006474:	f7fa f830 	bl	80004d8 <__aeabi_dmul>
 8006478:	4681      	mov	r9, r0
 800647a:	468a      	mov	sl, r1
 800647c:	2900      	cmp	r1, #0
 800647e:	f47f adb0 	bne.w	8005fe2 <_strtod_l+0x45a>
 8006482:	2800      	cmp	r0, #0
 8006484:	f47f adad 	bne.w	8005fe2 <_strtod_l+0x45a>
 8006488:	2322      	movs	r3, #34	; 0x22
 800648a:	f8cb 3000 	str.w	r3, [fp]
 800648e:	e5a8      	b.n	8005fe2 <_strtod_l+0x45a>
 8006490:	4013      	ands	r3, r2
 8006492:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006496:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800649a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800649e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80064a2:	e769      	b.n	8006378 <_strtod_l+0x7f0>
 80064a4:	b19d      	cbz	r5, 80064ce <_strtod_l+0x946>
 80064a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a8:	421d      	tst	r5, r3
 80064aa:	f43f af65 	beq.w	8006378 <_strtod_l+0x7f0>
 80064ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064b0:	9a05      	ldr	r2, [sp, #20]
 80064b2:	4648      	mov	r0, r9
 80064b4:	4651      	mov	r1, sl
 80064b6:	b173      	cbz	r3, 80064d6 <_strtod_l+0x94e>
 80064b8:	f7ff fb42 	bl	8005b40 <sulp>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064c4:	f7f9 fe52 	bl	800016c <__adddf3>
 80064c8:	4681      	mov	r9, r0
 80064ca:	468a      	mov	sl, r1
 80064cc:	e754      	b.n	8006378 <_strtod_l+0x7f0>
 80064ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064d0:	ea13 0f09 	tst.w	r3, r9
 80064d4:	e7e9      	b.n	80064aa <_strtod_l+0x922>
 80064d6:	f7ff fb33 	bl	8005b40 <sulp>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064e2:	f7f9 fe41 	bl	8000168 <__aeabi_dsub>
 80064e6:	2200      	movs	r2, #0
 80064e8:	2300      	movs	r3, #0
 80064ea:	4681      	mov	r9, r0
 80064ec:	468a      	mov	sl, r1
 80064ee:	f7fa fa5b 	bl	80009a8 <__aeabi_dcmpeq>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	f47f ae07 	bne.w	8006106 <_strtod_l+0x57e>
 80064f8:	e73e      	b.n	8006378 <_strtod_l+0x7f0>
 80064fa:	9904      	ldr	r1, [sp, #16]
 80064fc:	4640      	mov	r0, r8
 80064fe:	f002 f930 	bl	8008762 <__ratio>
 8006502:	2200      	movs	r2, #0
 8006504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006508:	4606      	mov	r6, r0
 800650a:	460f      	mov	r7, r1
 800650c:	f7fa fa60 	bl	80009d0 <__aeabi_dcmple>
 8006510:	2800      	cmp	r0, #0
 8006512:	d075      	beq.n	8006600 <_strtod_l+0xa78>
 8006514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006516:	2b00      	cmp	r3, #0
 8006518:	d047      	beq.n	80065aa <_strtod_l+0xa22>
 800651a:	2600      	movs	r6, #0
 800651c:	4f68      	ldr	r7, [pc, #416]	; (80066c0 <_strtod_l+0xb38>)
 800651e:	4d68      	ldr	r5, [pc, #416]	; (80066c0 <_strtod_l+0xb38>)
 8006520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006526:	0d1b      	lsrs	r3, r3, #20
 8006528:	051b      	lsls	r3, r3, #20
 800652a:	930f      	str	r3, [sp, #60]	; 0x3c
 800652c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800652e:	4b65      	ldr	r3, [pc, #404]	; (80066c4 <_strtod_l+0xb3c>)
 8006530:	429a      	cmp	r2, r3
 8006532:	f040 80cf 	bne.w	80066d4 <_strtod_l+0xb4c>
 8006536:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800653a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800653e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006540:	4648      	mov	r0, r9
 8006542:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006546:	4651      	mov	r1, sl
 8006548:	f002 f846 	bl	80085d8 <__ulp>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7f9 ffc0 	bl	80004d8 <__aeabi_dmul>
 8006558:	464a      	mov	r2, r9
 800655a:	4653      	mov	r3, sl
 800655c:	f7f9 fe06 	bl	800016c <__adddf3>
 8006560:	460b      	mov	r3, r1
 8006562:	4954      	ldr	r1, [pc, #336]	; (80066b4 <_strtod_l+0xb2c>)
 8006564:	4a58      	ldr	r2, [pc, #352]	; (80066c8 <_strtod_l+0xb40>)
 8006566:	4019      	ands	r1, r3
 8006568:	4291      	cmp	r1, r2
 800656a:	4681      	mov	r9, r0
 800656c:	d95e      	bls.n	800662c <_strtod_l+0xaa4>
 800656e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006570:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006574:	4293      	cmp	r3, r2
 8006576:	d103      	bne.n	8006580 <_strtod_l+0x9f8>
 8006578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800657a:	3301      	adds	r3, #1
 800657c:	f43f ad26 	beq.w	8005fcc <_strtod_l+0x444>
 8006580:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006584:	f8df a130 	ldr.w	sl, [pc, #304]	; 80066b8 <_strtod_l+0xb30>
 8006588:	991c      	ldr	r1, [sp, #112]	; 0x70
 800658a:	4658      	mov	r0, fp
 800658c:	f001 fd8d 	bl	80080aa <_Bfree>
 8006590:	9906      	ldr	r1, [sp, #24]
 8006592:	4658      	mov	r0, fp
 8006594:	f001 fd89 	bl	80080aa <_Bfree>
 8006598:	9904      	ldr	r1, [sp, #16]
 800659a:	4658      	mov	r0, fp
 800659c:	f001 fd85 	bl	80080aa <_Bfree>
 80065a0:	4641      	mov	r1, r8
 80065a2:	4658      	mov	r0, fp
 80065a4:	f001 fd81 	bl	80080aa <_Bfree>
 80065a8:	e617      	b.n	80061da <_strtod_l+0x652>
 80065aa:	f1b9 0f00 	cmp.w	r9, #0
 80065ae:	d119      	bne.n	80065e4 <_strtod_l+0xa5c>
 80065b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b6:	b9e3      	cbnz	r3, 80065f2 <_strtod_l+0xa6a>
 80065b8:	2200      	movs	r2, #0
 80065ba:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <_strtod_l+0xb38>)
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa f9fc 	bl	80009bc <__aeabi_dcmplt>
 80065c4:	b9c8      	cbnz	r0, 80065fa <_strtod_l+0xa72>
 80065c6:	2200      	movs	r2, #0
 80065c8:	4b40      	ldr	r3, [pc, #256]	; (80066cc <_strtod_l+0xb44>)
 80065ca:	4630      	mov	r0, r6
 80065cc:	4639      	mov	r1, r7
 80065ce:	f7f9 ff83 	bl	80004d8 <__aeabi_dmul>
 80065d2:	4604      	mov	r4, r0
 80065d4:	460d      	mov	r5, r1
 80065d6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80065da:	9418      	str	r4, [sp, #96]	; 0x60
 80065dc:	9319      	str	r3, [sp, #100]	; 0x64
 80065de:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80065e2:	e79d      	b.n	8006520 <_strtod_l+0x998>
 80065e4:	f1b9 0f01 	cmp.w	r9, #1
 80065e8:	d103      	bne.n	80065f2 <_strtod_l+0xa6a>
 80065ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f43f ad8a 	beq.w	8006106 <_strtod_l+0x57e>
 80065f2:	2600      	movs	r6, #0
 80065f4:	4f36      	ldr	r7, [pc, #216]	; (80066d0 <_strtod_l+0xb48>)
 80065f6:	2400      	movs	r4, #0
 80065f8:	e791      	b.n	800651e <_strtod_l+0x996>
 80065fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80065fc:	4d33      	ldr	r5, [pc, #204]	; (80066cc <_strtod_l+0xb44>)
 80065fe:	e7ea      	b.n	80065d6 <_strtod_l+0xa4e>
 8006600:	4b32      	ldr	r3, [pc, #200]	; (80066cc <_strtod_l+0xb44>)
 8006602:	2200      	movs	r2, #0
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7f9 ff66 	bl	80004d8 <__aeabi_dmul>
 800660c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800660e:	4604      	mov	r4, r0
 8006610:	460d      	mov	r5, r1
 8006612:	b933      	cbnz	r3, 8006622 <_strtod_l+0xa9a>
 8006614:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006618:	9010      	str	r0, [sp, #64]	; 0x40
 800661a:	9311      	str	r3, [sp, #68]	; 0x44
 800661c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006620:	e77e      	b.n	8006520 <_strtod_l+0x998>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800662a:	e7f7      	b.n	800661c <_strtod_l+0xa94>
 800662c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1a8      	bne.n	8006588 <_strtod_l+0xa00>
 8006636:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800663a:	0d1b      	lsrs	r3, r3, #20
 800663c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800663e:	051b      	lsls	r3, r3, #20
 8006640:	429a      	cmp	r2, r3
 8006642:	4656      	mov	r6, sl
 8006644:	d1a0      	bne.n	8006588 <_strtod_l+0xa00>
 8006646:	4629      	mov	r1, r5
 8006648:	4620      	mov	r0, r4
 800664a:	f7fa f9f5 	bl	8000a38 <__aeabi_d2iz>
 800664e:	f7f9 fed9 	bl	8000404 <__aeabi_i2d>
 8006652:	460b      	mov	r3, r1
 8006654:	4602      	mov	r2, r0
 8006656:	4629      	mov	r1, r5
 8006658:	4620      	mov	r0, r4
 800665a:	f7f9 fd85 	bl	8000168 <__aeabi_dsub>
 800665e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006660:	4604      	mov	r4, r0
 8006662:	460d      	mov	r5, r1
 8006664:	b933      	cbnz	r3, 8006674 <_strtod_l+0xaec>
 8006666:	f1b9 0f00 	cmp.w	r9, #0
 800666a:	d103      	bne.n	8006674 <_strtod_l+0xaec>
 800666c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006670:	2e00      	cmp	r6, #0
 8006672:	d06a      	beq.n	800674a <_strtod_l+0xbc2>
 8006674:	a30a      	add	r3, pc, #40	; (adr r3, 80066a0 <_strtod_l+0xb18>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	4620      	mov	r0, r4
 800667c:	4629      	mov	r1, r5
 800667e:	f7fa f99d 	bl	80009bc <__aeabi_dcmplt>
 8006682:	2800      	cmp	r0, #0
 8006684:	f47f acad 	bne.w	8005fe2 <_strtod_l+0x45a>
 8006688:	a307      	add	r3, pc, #28	; (adr r3, 80066a8 <_strtod_l+0xb20>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7fa f9b1 	bl	80009f8 <__aeabi_dcmpgt>
 8006696:	2800      	cmp	r0, #0
 8006698:	f43f af76 	beq.w	8006588 <_strtod_l+0xa00>
 800669c:	e4a1      	b.n	8005fe2 <_strtod_l+0x45a>
 800669e:	bf00      	nop
 80066a0:	94a03595 	.word	0x94a03595
 80066a4:	3fdfffff 	.word	0x3fdfffff
 80066a8:	35afe535 	.word	0x35afe535
 80066ac:	3fe00000 	.word	0x3fe00000
 80066b0:	000fffff 	.word	0x000fffff
 80066b4:	7ff00000 	.word	0x7ff00000
 80066b8:	7fefffff 	.word	0x7fefffff
 80066bc:	39500000 	.word	0x39500000
 80066c0:	3ff00000 	.word	0x3ff00000
 80066c4:	7fe00000 	.word	0x7fe00000
 80066c8:	7c9fffff 	.word	0x7c9fffff
 80066cc:	3fe00000 	.word	0x3fe00000
 80066d0:	bff00000 	.word	0xbff00000
 80066d4:	9b05      	ldr	r3, [sp, #20]
 80066d6:	b313      	cbz	r3, 800671e <_strtod_l+0xb96>
 80066d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066de:	d81e      	bhi.n	800671e <_strtod_l+0xb96>
 80066e0:	a325      	add	r3, pc, #148	; (adr r3, 8006778 <_strtod_l+0xbf0>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7fa f971 	bl	80009d0 <__aeabi_dcmple>
 80066ee:	b190      	cbz	r0, 8006716 <_strtod_l+0xb8e>
 80066f0:	4629      	mov	r1, r5
 80066f2:	4620      	mov	r0, r4
 80066f4:	f7fa f9c8 	bl	8000a88 <__aeabi_d2uiz>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	bf08      	it	eq
 80066fc:	2001      	moveq	r0, #1
 80066fe:	f7f9 fe71 	bl	80003e4 <__aeabi_ui2d>
 8006702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006704:	4604      	mov	r4, r0
 8006706:	460d      	mov	r5, r1
 8006708:	b9d3      	cbnz	r3, 8006740 <_strtod_l+0xbb8>
 800670a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800670e:	9012      	str	r0, [sp, #72]	; 0x48
 8006710:	9313      	str	r3, [sp, #76]	; 0x4c
 8006712:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006718:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800671c:	1a9f      	subs	r7, r3, r2
 800671e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006722:	f001 ff59 	bl	80085d8 <__ulp>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 fed3 	bl	80004d8 <__aeabi_dmul>
 8006732:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006736:	f7f9 fd19 	bl	800016c <__adddf3>
 800673a:	4681      	mov	r9, r0
 800673c:	468a      	mov	sl, r1
 800673e:	e777      	b.n	8006630 <_strtod_l+0xaa8>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006748:	e7e3      	b.n	8006712 <_strtod_l+0xb8a>
 800674a:	a30d      	add	r3, pc, #52	; (adr r3, 8006780 <_strtod_l+0xbf8>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7fa f934 	bl	80009bc <__aeabi_dcmplt>
 8006754:	e79f      	b.n	8006696 <_strtod_l+0xb0e>
 8006756:	2300      	movs	r3, #0
 8006758:	930d      	str	r3, [sp, #52]	; 0x34
 800675a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800675c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	f7ff ba55 	b.w	8005c0e <_strtod_l+0x86>
 8006764:	2b65      	cmp	r3, #101	; 0x65
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f43f ab42 	beq.w	8005df2 <_strtod_l+0x26a>
 800676e:	2101      	movs	r1, #1
 8006770:	4614      	mov	r4, r2
 8006772:	9105      	str	r1, [sp, #20]
 8006774:	f7ff babf 	b.w	8005cf6 <_strtod_l+0x16e>
 8006778:	ffc00000 	.word	0xffc00000
 800677c:	41dfffff 	.word	0x41dfffff
 8006780:	94a03595 	.word	0x94a03595
 8006784:	3fcfffff 	.word	0x3fcfffff

08006788 <strtod>:
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <strtod+0x1c>)
 800678a:	b410      	push	{r4}
 800678c:	681c      	ldr	r4, [r3, #0]
 800678e:	4a06      	ldr	r2, [pc, #24]	; (80067a8 <strtod+0x20>)
 8006790:	6a23      	ldr	r3, [r4, #32]
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf08      	it	eq
 8006796:	4613      	moveq	r3, r2
 8006798:	460a      	mov	r2, r1
 800679a:	4601      	mov	r1, r0
 800679c:	4620      	mov	r0, r4
 800679e:	bc10      	pop	{r4}
 80067a0:	f7ff b9f2 	b.w	8005b88 <_strtod_l>
 80067a4:	20000020 	.word	0x20000020
 80067a8:	20000084 	.word	0x20000084

080067ac <__swbuf_r>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	460e      	mov	r6, r1
 80067b0:	4614      	mov	r4, r2
 80067b2:	4605      	mov	r5, r0
 80067b4:	b118      	cbz	r0, 80067be <__swbuf_r+0x12>
 80067b6:	6983      	ldr	r3, [r0, #24]
 80067b8:	b90b      	cbnz	r3, 80067be <__swbuf_r+0x12>
 80067ba:	f000 ffe9 	bl	8007790 <__sinit>
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <__swbuf_r+0x98>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d12a      	bne.n	800681a <__swbuf_r+0x6e>
 80067c4:	686c      	ldr	r4, [r5, #4]
 80067c6:	69a3      	ldr	r3, [r4, #24]
 80067c8:	60a3      	str	r3, [r4, #8]
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	071a      	lsls	r2, r3, #28
 80067ce:	d52e      	bpl.n	800682e <__swbuf_r+0x82>
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	b363      	cbz	r3, 800682e <__swbuf_r+0x82>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	6820      	ldr	r0, [r4, #0]
 80067d8:	b2f6      	uxtb	r6, r6
 80067da:	1ac0      	subs	r0, r0, r3
 80067dc:	6963      	ldr	r3, [r4, #20]
 80067de:	4637      	mov	r7, r6
 80067e0:	4283      	cmp	r3, r0
 80067e2:	dc04      	bgt.n	80067ee <__swbuf_r+0x42>
 80067e4:	4621      	mov	r1, r4
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 ff68 	bl	80076bc <_fflush_r>
 80067ec:	bb28      	cbnz	r0, 800683a <__swbuf_r+0x8e>
 80067ee:	68a3      	ldr	r3, [r4, #8]
 80067f0:	3001      	adds	r0, #1
 80067f2:	3b01      	subs	r3, #1
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	701e      	strb	r6, [r3, #0]
 80067fe:	6963      	ldr	r3, [r4, #20]
 8006800:	4283      	cmp	r3, r0
 8006802:	d004      	beq.n	800680e <__swbuf_r+0x62>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	07db      	lsls	r3, r3, #31
 8006808:	d519      	bpl.n	800683e <__swbuf_r+0x92>
 800680a:	2e0a      	cmp	r6, #10
 800680c:	d117      	bne.n	800683e <__swbuf_r+0x92>
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	f000 ff53 	bl	80076bc <_fflush_r>
 8006816:	b190      	cbz	r0, 800683e <__swbuf_r+0x92>
 8006818:	e00f      	b.n	800683a <__swbuf_r+0x8e>
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <__swbuf_r+0x9c>)
 800681c:	429c      	cmp	r4, r3
 800681e:	d101      	bne.n	8006824 <__swbuf_r+0x78>
 8006820:	68ac      	ldr	r4, [r5, #8]
 8006822:	e7d0      	b.n	80067c6 <__swbuf_r+0x1a>
 8006824:	4b09      	ldr	r3, [pc, #36]	; (800684c <__swbuf_r+0xa0>)
 8006826:	429c      	cmp	r4, r3
 8006828:	bf08      	it	eq
 800682a:	68ec      	ldreq	r4, [r5, #12]
 800682c:	e7cb      	b.n	80067c6 <__swbuf_r+0x1a>
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 f80d 	bl	8006850 <__swsetup_r>
 8006836:	2800      	cmp	r0, #0
 8006838:	d0cc      	beq.n	80067d4 <__swbuf_r+0x28>
 800683a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800683e:	4638      	mov	r0, r7
 8006840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006842:	bf00      	nop
 8006844:	08009010 	.word	0x08009010
 8006848:	08009030 	.word	0x08009030
 800684c:	08008ff0 	.word	0x08008ff0

08006850 <__swsetup_r>:
 8006850:	4b32      	ldr	r3, [pc, #200]	; (800691c <__swsetup_r+0xcc>)
 8006852:	b570      	push	{r4, r5, r6, lr}
 8006854:	681d      	ldr	r5, [r3, #0]
 8006856:	4606      	mov	r6, r0
 8006858:	460c      	mov	r4, r1
 800685a:	b125      	cbz	r5, 8006866 <__swsetup_r+0x16>
 800685c:	69ab      	ldr	r3, [r5, #24]
 800685e:	b913      	cbnz	r3, 8006866 <__swsetup_r+0x16>
 8006860:	4628      	mov	r0, r5
 8006862:	f000 ff95 	bl	8007790 <__sinit>
 8006866:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <__swsetup_r+0xd0>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d10f      	bne.n	800688c <__swsetup_r+0x3c>
 800686c:	686c      	ldr	r4, [r5, #4]
 800686e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006872:	b29a      	uxth	r2, r3
 8006874:	0715      	lsls	r5, r2, #28
 8006876:	d42c      	bmi.n	80068d2 <__swsetup_r+0x82>
 8006878:	06d0      	lsls	r0, r2, #27
 800687a:	d411      	bmi.n	80068a0 <__swsetup_r+0x50>
 800687c:	2209      	movs	r2, #9
 800687e:	6032      	str	r2, [r6, #0]
 8006880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006884:	81a3      	strh	r3, [r4, #12]
 8006886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800688a:	e03e      	b.n	800690a <__swsetup_r+0xba>
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <__swsetup_r+0xd4>)
 800688e:	429c      	cmp	r4, r3
 8006890:	d101      	bne.n	8006896 <__swsetup_r+0x46>
 8006892:	68ac      	ldr	r4, [r5, #8]
 8006894:	e7eb      	b.n	800686e <__swsetup_r+0x1e>
 8006896:	4b24      	ldr	r3, [pc, #144]	; (8006928 <__swsetup_r+0xd8>)
 8006898:	429c      	cmp	r4, r3
 800689a:	bf08      	it	eq
 800689c:	68ec      	ldreq	r4, [r5, #12]
 800689e:	e7e6      	b.n	800686e <__swsetup_r+0x1e>
 80068a0:	0751      	lsls	r1, r2, #29
 80068a2:	d512      	bpl.n	80068ca <__swsetup_r+0x7a>
 80068a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068a6:	b141      	cbz	r1, 80068ba <__swsetup_r+0x6a>
 80068a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d002      	beq.n	80068b6 <__swsetup_r+0x66>
 80068b0:	4630      	mov	r0, r6
 80068b2:	f001 ffcd 	bl	8008850 <_free_r>
 80068b6:	2300      	movs	r3, #0
 80068b8:	6363      	str	r3, [r4, #52]	; 0x34
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068c0:	81a3      	strh	r3, [r4, #12]
 80068c2:	2300      	movs	r3, #0
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f043 0308 	orr.w	r3, r3, #8
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	b94b      	cbnz	r3, 80068ea <__swsetup_r+0x9a>
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e0:	d003      	beq.n	80068ea <__swsetup_r+0x9a>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4630      	mov	r0, r6
 80068e6:	f001 fb39 	bl	8007f5c <__smakebuf_r>
 80068ea:	89a2      	ldrh	r2, [r4, #12]
 80068ec:	f012 0301 	ands.w	r3, r2, #1
 80068f0:	d00c      	beq.n	800690c <__swsetup_r+0xbc>
 80068f2:	2300      	movs	r3, #0
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	6963      	ldr	r3, [r4, #20]
 80068f8:	425b      	negs	r3, r3
 80068fa:	61a3      	str	r3, [r4, #24]
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	b953      	cbnz	r3, 8006916 <__swsetup_r+0xc6>
 8006900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006904:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006908:	d1ba      	bne.n	8006880 <__swsetup_r+0x30>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	0792      	lsls	r2, r2, #30
 800690e:	bf58      	it	pl
 8006910:	6963      	ldrpl	r3, [r4, #20]
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	e7f2      	b.n	80068fc <__swsetup_r+0xac>
 8006916:	2000      	movs	r0, #0
 8006918:	e7f7      	b.n	800690a <__swsetup_r+0xba>
 800691a:	bf00      	nop
 800691c:	20000020 	.word	0x20000020
 8006920:	08009010 	.word	0x08009010
 8006924:	08009030 	.word	0x08009030
 8006928:	08008ff0 	.word	0x08008ff0

0800692c <quorem>:
 800692c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	6903      	ldr	r3, [r0, #16]
 8006932:	690c      	ldr	r4, [r1, #16]
 8006934:	4680      	mov	r8, r0
 8006936:	42a3      	cmp	r3, r4
 8006938:	f2c0 8084 	blt.w	8006a44 <quorem+0x118>
 800693c:	3c01      	subs	r4, #1
 800693e:	f101 0714 	add.w	r7, r1, #20
 8006942:	f100 0614 	add.w	r6, r0, #20
 8006946:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800694a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800694e:	3501      	adds	r5, #1
 8006950:	fbb0 f5f5 	udiv	r5, r0, r5
 8006954:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006958:	eb06 030c 	add.w	r3, r6, ip
 800695c:	eb07 090c 	add.w	r9, r7, ip
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	b39d      	cbz	r5, 80069cc <quorem+0xa0>
 8006964:	f04f 0a00 	mov.w	sl, #0
 8006968:	4638      	mov	r0, r7
 800696a:	46b6      	mov	lr, r6
 800696c:	46d3      	mov	fp, sl
 800696e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006972:	b293      	uxth	r3, r2
 8006974:	fb05 a303 	mla	r3, r5, r3, sl
 8006978:	0c12      	lsrs	r2, r2, #16
 800697a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800697e:	fb05 a202 	mla	r2, r5, r2, sl
 8006982:	b29b      	uxth	r3, r3
 8006984:	ebab 0303 	sub.w	r3, fp, r3
 8006988:	f8de b000 	ldr.w	fp, [lr]
 800698c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006990:	fa1f fb8b 	uxth.w	fp, fp
 8006994:	445b      	add	r3, fp
 8006996:	fa1f fb82 	uxth.w	fp, r2
 800699a:	f8de 2000 	ldr.w	r2, [lr]
 800699e:	4581      	cmp	r9, r0
 80069a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80069a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80069b2:	f84e 3b04 	str.w	r3, [lr], #4
 80069b6:	d2da      	bcs.n	800696e <quorem+0x42>
 80069b8:	f856 300c 	ldr.w	r3, [r6, ip]
 80069bc:	b933      	cbnz	r3, 80069cc <quorem+0xa0>
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	3b04      	subs	r3, #4
 80069c2:	429e      	cmp	r6, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	d331      	bcc.n	8006a2c <quorem+0x100>
 80069c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80069cc:	4640      	mov	r0, r8
 80069ce:	f001 fd8b 	bl	80084e8 <__mcmp>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	db26      	blt.n	8006a24 <quorem+0xf8>
 80069d6:	4630      	mov	r0, r6
 80069d8:	f04f 0c00 	mov.w	ip, #0
 80069dc:	3501      	adds	r5, #1
 80069de:	f857 1b04 	ldr.w	r1, [r7], #4
 80069e2:	f8d0 e000 	ldr.w	lr, [r0]
 80069e6:	b28b      	uxth	r3, r1
 80069e8:	ebac 0303 	sub.w	r3, ip, r3
 80069ec:	fa1f f28e 	uxth.w	r2, lr
 80069f0:	4413      	add	r3, r2
 80069f2:	0c0a      	lsrs	r2, r1, #16
 80069f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a02:	45b9      	cmp	r9, r7
 8006a04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a08:	f840 3b04 	str.w	r3, [r0], #4
 8006a0c:	d2e7      	bcs.n	80069de <quorem+0xb2>
 8006a0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006a12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006a16:	b92a      	cbnz	r2, 8006a24 <quorem+0xf8>
 8006a18:	3b04      	subs	r3, #4
 8006a1a:	429e      	cmp	r6, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	d30b      	bcc.n	8006a38 <quorem+0x10c>
 8006a20:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a24:	4628      	mov	r0, r5
 8006a26:	b003      	add	sp, #12
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	3b04      	subs	r3, #4
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d1c9      	bne.n	80069c8 <quorem+0x9c>
 8006a34:	3c01      	subs	r4, #1
 8006a36:	e7c4      	b.n	80069c2 <quorem+0x96>
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	3b04      	subs	r3, #4
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	d1ef      	bne.n	8006a20 <quorem+0xf4>
 8006a40:	3c01      	subs	r4, #1
 8006a42:	e7ea      	b.n	8006a1a <quorem+0xee>
 8006a44:	2000      	movs	r0, #0
 8006a46:	e7ee      	b.n	8006a26 <quorem+0xfa>

08006a48 <_dtoa_r>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	461f      	mov	r7, r3
 8006a50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a52:	b095      	sub	sp, #84	; 0x54
 8006a54:	4604      	mov	r4, r0
 8006a56:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006a5a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006a5e:	b93d      	cbnz	r5, 8006a70 <_dtoa_r+0x28>
 8006a60:	2010      	movs	r0, #16
 8006a62:	f001 fabb 	bl	8007fdc <malloc>
 8006a66:	6260      	str	r0, [r4, #36]	; 0x24
 8006a68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a6c:	6005      	str	r5, [r0, #0]
 8006a6e:	60c5      	str	r5, [r0, #12]
 8006a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	b151      	cbz	r1, 8006a8c <_dtoa_r+0x44>
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4093      	lsls	r3, r2
 8006a7c:	604a      	str	r2, [r1, #4]
 8006a7e:	608b      	str	r3, [r1, #8]
 8006a80:	4620      	mov	r0, r4
 8006a82:	f001 fb12 	bl	80080aa <_Bfree>
 8006a86:	2200      	movs	r2, #0
 8006a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	1e3b      	subs	r3, r7, #0
 8006a8e:	bfaf      	iteee	ge
 8006a90:	2300      	movge	r3, #0
 8006a92:	2201      	movlt	r2, #1
 8006a94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	9303      	strlt	r3, [sp, #12]
 8006a9a:	bfac      	ite	ge
 8006a9c:	f8c8 3000 	strge.w	r3, [r8]
 8006aa0:	f8c8 2000 	strlt.w	r2, [r8]
 8006aa4:	4bae      	ldr	r3, [pc, #696]	; (8006d60 <_dtoa_r+0x318>)
 8006aa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006aaa:	ea33 0308 	bics.w	r3, r3, r8
 8006aae:	d11b      	bne.n	8006ae8 <_dtoa_r+0xa0>
 8006ab0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ab4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	9b02      	ldr	r3, [sp, #8]
 8006aba:	b923      	cbnz	r3, 8006ac6 <_dtoa_r+0x7e>
 8006abc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f000 8545 	beq.w	8007550 <_dtoa_r+0xb08>
 8006ac6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ac8:	b953      	cbnz	r3, 8006ae0 <_dtoa_r+0x98>
 8006aca:	4ba6      	ldr	r3, [pc, #664]	; (8006d64 <_dtoa_r+0x31c>)
 8006acc:	e021      	b.n	8006b12 <_dtoa_r+0xca>
 8006ace:	4ba6      	ldr	r3, [pc, #664]	; (8006d68 <_dtoa_r+0x320>)
 8006ad0:	9306      	str	r3, [sp, #24]
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	9806      	ldr	r0, [sp, #24]
 8006ada:	b015      	add	sp, #84	; 0x54
 8006adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae0:	4ba0      	ldr	r3, [pc, #640]	; (8006d64 <_dtoa_r+0x31c>)
 8006ae2:	9306      	str	r3, [sp, #24]
 8006ae4:	3303      	adds	r3, #3
 8006ae6:	e7f5      	b.n	8006ad4 <_dtoa_r+0x8c>
 8006ae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	4630      	mov	r0, r6
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7f9 ff58 	bl	80009a8 <__aeabi_dcmpeq>
 8006af8:	4682      	mov	sl, r0
 8006afa:	b160      	cbz	r0, 8006b16 <_dtoa_r+0xce>
 8006afc:	2301      	movs	r3, #1
 8006afe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8520 	beq.w	800754a <_dtoa_r+0xb02>
 8006b0a:	4b98      	ldr	r3, [pc, #608]	; (8006d6c <_dtoa_r+0x324>)
 8006b0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	9306      	str	r3, [sp, #24]
 8006b14:	e7e0      	b.n	8006ad8 <_dtoa_r+0x90>
 8006b16:	ab12      	add	r3, sp, #72	; 0x48
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	ab13      	add	r3, sp, #76	; 0x4c
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	4632      	mov	r2, r6
 8006b20:	463b      	mov	r3, r7
 8006b22:	4620      	mov	r0, r4
 8006b24:	f001 fdce 	bl	80086c4 <__d2b>
 8006b28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b2c:	4683      	mov	fp, r0
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	d07d      	beq.n	8006c2e <_dtoa_r+0x1e6>
 8006b32:	46b0      	mov	r8, r6
 8006b34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b38:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006b3c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006b40:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b44:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4b89      	ldr	r3, [pc, #548]	; (8006d70 <_dtoa_r+0x328>)
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	4649      	mov	r1, r9
 8006b50:	f7f9 fb0a 	bl	8000168 <__aeabi_dsub>
 8006b54:	a37c      	add	r3, pc, #496	; (adr r3, 8006d48 <_dtoa_r+0x300>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fcbd 	bl	80004d8 <__aeabi_dmul>
 8006b5e:	a37c      	add	r3, pc, #496	; (adr r3, 8006d50 <_dtoa_r+0x308>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fb02 	bl	800016c <__adddf3>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	f7f9 fc49 	bl	8000404 <__aeabi_i2d>
 8006b72:	a379      	add	r3, pc, #484	; (adr r3, 8006d58 <_dtoa_r+0x310>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fcae 	bl	80004d8 <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4630      	mov	r0, r6
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7f9 faf2 	bl	800016c <__adddf3>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	f7f9 ff54 	bl	8000a38 <__aeabi_d2iz>
 8006b90:	2200      	movs	r2, #0
 8006b92:	4682      	mov	sl, r0
 8006b94:	2300      	movs	r3, #0
 8006b96:	4630      	mov	r0, r6
 8006b98:	4639      	mov	r1, r7
 8006b9a:	f7f9 ff0f 	bl	80009bc <__aeabi_dcmplt>
 8006b9e:	b148      	cbz	r0, 8006bb4 <_dtoa_r+0x16c>
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	f7f9 fc2f 	bl	8000404 <__aeabi_i2d>
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	463b      	mov	r3, r7
 8006baa:	f7f9 fefd 	bl	80009a8 <__aeabi_dcmpeq>
 8006bae:	b908      	cbnz	r0, 8006bb4 <_dtoa_r+0x16c>
 8006bb0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006bb4:	f1ba 0f16 	cmp.w	sl, #22
 8006bb8:	d85a      	bhi.n	8006c70 <_dtoa_r+0x228>
 8006bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bbe:	496d      	ldr	r1, [pc, #436]	; (8006d74 <_dtoa_r+0x32c>)
 8006bc0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc8:	f7f9 ff16 	bl	80009f8 <__aeabi_dcmpgt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d051      	beq.n	8006c74 <_dtoa_r+0x22c>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bda:	1b5d      	subs	r5, r3, r5
 8006bdc:	1e6b      	subs	r3, r5, #1
 8006bde:	9307      	str	r3, [sp, #28]
 8006be0:	bf43      	ittte	mi
 8006be2:	2300      	movmi	r3, #0
 8006be4:	f1c5 0901 	rsbmi	r9, r5, #1
 8006be8:	9307      	strmi	r3, [sp, #28]
 8006bea:	f04f 0900 	movpl.w	r9, #0
 8006bee:	f1ba 0f00 	cmp.w	sl, #0
 8006bf2:	db41      	blt.n	8006c78 <_dtoa_r+0x230>
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006bfa:	4453      	add	r3, sl
 8006bfc:	9307      	str	r3, [sp, #28]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9308      	str	r3, [sp, #32]
 8006c02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	f200 808f 	bhi.w	8006d28 <_dtoa_r+0x2e0>
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	bfc4      	itt	gt
 8006c0e:	3b04      	subgt	r3, #4
 8006c10:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006c12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c14:	bfc8      	it	gt
 8006c16:	2500      	movgt	r5, #0
 8006c18:	f1a3 0302 	sub.w	r3, r3, #2
 8006c1c:	bfd8      	it	le
 8006c1e:	2501      	movle	r5, #1
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	f200 808d 	bhi.w	8006d40 <_dtoa_r+0x2f8>
 8006c26:	e8df f003 	tbb	[pc, r3]
 8006c2a:	7d7b      	.short	0x7d7b
 8006c2c:	6f2f      	.short	0x6f2f
 8006c2e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006c32:	441d      	add	r5, r3
 8006c34:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006c38:	2820      	cmp	r0, #32
 8006c3a:	dd13      	ble.n	8006c64 <_dtoa_r+0x21c>
 8006c3c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	fa08 f800 	lsl.w	r8, r8, r0
 8006c46:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006c4a:	fa23 f000 	lsr.w	r0, r3, r0
 8006c4e:	ea48 0000 	orr.w	r0, r8, r0
 8006c52:	f7f9 fbc7 	bl	80003e4 <__aeabi_ui2d>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4680      	mov	r8, r0
 8006c5a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006c5e:	3d01      	subs	r5, #1
 8006c60:	9310      	str	r3, [sp, #64]	; 0x40
 8006c62:	e771      	b.n	8006b48 <_dtoa_r+0x100>
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	f1c0 0020 	rsb	r0, r0, #32
 8006c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c6e:	e7f0      	b.n	8006c52 <_dtoa_r+0x20a>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e7b0      	b.n	8006bd6 <_dtoa_r+0x18e>
 8006c74:	900d      	str	r0, [sp, #52]	; 0x34
 8006c76:	e7af      	b.n	8006bd8 <_dtoa_r+0x190>
 8006c78:	f1ca 0300 	rsb	r3, sl, #0
 8006c7c:	9308      	str	r3, [sp, #32]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	eba9 090a 	sub.w	r9, r9, sl
 8006c84:	930c      	str	r3, [sp, #48]	; 0x30
 8006c86:	e7bc      	b.n	8006c02 <_dtoa_r+0x1ba>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dd74      	ble.n	8006d7c <_dtoa_r+0x334>
 8006c92:	4698      	mov	r8, r3
 8006c94:	9304      	str	r3, [sp, #16]
 8006c96:	2200      	movs	r2, #0
 8006c98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c9a:	6072      	str	r2, [r6, #4]
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	f102 0014 	add.w	r0, r2, #20
 8006ca2:	4298      	cmp	r0, r3
 8006ca4:	6871      	ldr	r1, [r6, #4]
 8006ca6:	d96e      	bls.n	8006d86 <_dtoa_r+0x33e>
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f001 f9ca 	bl	8008042 <_Balloc>
 8006cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb0:	6030      	str	r0, [r6, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f1b8 0f0e 	cmp.w	r8, #14
 8006cb8:	9306      	str	r3, [sp, #24]
 8006cba:	f200 80ed 	bhi.w	8006e98 <_dtoa_r+0x450>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	f000 80ea 	beq.w	8006e98 <_dtoa_r+0x450>
 8006cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cc8:	f1ba 0f00 	cmp.w	sl, #0
 8006ccc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006cd0:	dd77      	ble.n	8006dc2 <_dtoa_r+0x37a>
 8006cd2:	4a28      	ldr	r2, [pc, #160]	; (8006d74 <_dtoa_r+0x32c>)
 8006cd4:	f00a 030f 	and.w	r3, sl, #15
 8006cd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006cdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ce0:	06f0      	lsls	r0, r6, #27
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006cea:	d568      	bpl.n	8006dbe <_dtoa_r+0x376>
 8006cec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006cf0:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <_dtoa_r+0x330>)
 8006cf2:	2503      	movs	r5, #3
 8006cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cf8:	f7f9 fd18 	bl	800072c <__aeabi_ddiv>
 8006cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d00:	f006 060f 	and.w	r6, r6, #15
 8006d04:	4f1c      	ldr	r7, [pc, #112]	; (8006d78 <_dtoa_r+0x330>)
 8006d06:	e04f      	b.n	8006da8 <_dtoa_r+0x360>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d0e:	4453      	add	r3, sl
 8006d10:	f103 0801 	add.w	r8, r3, #1
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	4643      	mov	r3, r8
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	bfb8      	it	lt
 8006d1c:	2301      	movlt	r3, #1
 8006d1e:	e7ba      	b.n	8006c96 <_dtoa_r+0x24e>
 8006d20:	2300      	movs	r3, #0
 8006d22:	e7b2      	b.n	8006c8a <_dtoa_r+0x242>
 8006d24:	2300      	movs	r3, #0
 8006d26:	e7f0      	b.n	8006d0a <_dtoa_r+0x2c2>
 8006d28:	2501      	movs	r5, #1
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d2e:	931e      	str	r3, [sp, #120]	; 0x78
 8006d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d34:	2200      	movs	r2, #0
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	4698      	mov	r8, r3
 8006d3a:	2312      	movs	r3, #18
 8006d3c:	921f      	str	r2, [sp, #124]	; 0x7c
 8006d3e:	e7aa      	b.n	8006c96 <_dtoa_r+0x24e>
 8006d40:	2301      	movs	r3, #1
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	e7f4      	b.n	8006d30 <_dtoa_r+0x2e8>
 8006d46:	bf00      	nop
 8006d48:	636f4361 	.word	0x636f4361
 8006d4c:	3fd287a7 	.word	0x3fd287a7
 8006d50:	8b60c8b3 	.word	0x8b60c8b3
 8006d54:	3fc68a28 	.word	0x3fc68a28
 8006d58:	509f79fb 	.word	0x509f79fb
 8006d5c:	3fd34413 	.word	0x3fd34413
 8006d60:	7ff00000 	.word	0x7ff00000
 8006d64:	08008fe9 	.word	0x08008fe9
 8006d68:	08008fe0 	.word	0x08008fe0
 8006d6c:	08008f69 	.word	0x08008f69
 8006d70:	3ff80000 	.word	0x3ff80000
 8006d74:	08009088 	.word	0x08009088
 8006d78:	08009060 	.word	0x08009060
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	4698      	mov	r8, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	e7da      	b.n	8006d3c <_dtoa_r+0x2f4>
 8006d86:	3101      	adds	r1, #1
 8006d88:	6071      	str	r1, [r6, #4]
 8006d8a:	0052      	lsls	r2, r2, #1
 8006d8c:	e787      	b.n	8006c9e <_dtoa_r+0x256>
 8006d8e:	07f1      	lsls	r1, r6, #31
 8006d90:	d508      	bpl.n	8006da4 <_dtoa_r+0x35c>
 8006d92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d9a:	f7f9 fb9d 	bl	80004d8 <__aeabi_dmul>
 8006d9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006da2:	3501      	adds	r5, #1
 8006da4:	1076      	asrs	r6, r6, #1
 8006da6:	3708      	adds	r7, #8
 8006da8:	2e00      	cmp	r6, #0
 8006daa:	d1f0      	bne.n	8006d8e <_dtoa_r+0x346>
 8006dac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db4:	f7f9 fcba 	bl	800072c <__aeabi_ddiv>
 8006db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dbc:	e01b      	b.n	8006df6 <_dtoa_r+0x3ae>
 8006dbe:	2502      	movs	r5, #2
 8006dc0:	e7a0      	b.n	8006d04 <_dtoa_r+0x2bc>
 8006dc2:	f000 80a4 	beq.w	8006f0e <_dtoa_r+0x4c6>
 8006dc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006dca:	f1ca 0600 	rsb	r6, sl, #0
 8006dce:	4ba0      	ldr	r3, [pc, #640]	; (8007050 <_dtoa_r+0x608>)
 8006dd0:	f006 020f 	and.w	r2, r6, #15
 8006dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	2502      	movs	r5, #2
 8006de2:	2300      	movs	r3, #0
 8006de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de8:	4f9a      	ldr	r7, [pc, #616]	; (8007054 <_dtoa_r+0x60c>)
 8006dea:	1136      	asrs	r6, r6, #4
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	f040 8083 	bne.w	8006ef8 <_dtoa_r+0x4b0>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e0      	bne.n	8006db8 <_dtoa_r+0x370>
 8006df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 808a 	beq.w	8006f12 <_dtoa_r+0x4ca>
 8006dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4b92      	ldr	r3, [pc, #584]	; (8007058 <_dtoa_r+0x610>)
 8006e0e:	f7f9 fdd5 	bl	80009bc <__aeabi_dcmplt>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d07d      	beq.n	8006f12 <_dtoa_r+0x4ca>
 8006e16:	f1b8 0f00 	cmp.w	r8, #0
 8006e1a:	d07a      	beq.n	8006f12 <_dtoa_r+0x4ca>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dd36      	ble.n	8006e90 <_dtoa_r+0x448>
 8006e22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e26:	2200      	movs	r2, #0
 8006e28:	4b8c      	ldr	r3, [pc, #560]	; (800705c <_dtoa_r+0x614>)
 8006e2a:	f7f9 fb55 	bl	80004d8 <__aeabi_dmul>
 8006e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e32:	9e04      	ldr	r6, [sp, #16]
 8006e34:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8006e38:	3501      	adds	r5, #1
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f7f9 fae2 	bl	8000404 <__aeabi_i2d>
 8006e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e44:	f7f9 fb48 	bl	80004d8 <__aeabi_dmul>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4b85      	ldr	r3, [pc, #532]	; (8007060 <_dtoa_r+0x618>)
 8006e4c:	f7f9 f98e 	bl	800016c <__adddf3>
 8006e50:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006e54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e58:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e5a:	2e00      	cmp	r6, #0
 8006e5c:	d15c      	bne.n	8006f18 <_dtoa_r+0x4d0>
 8006e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	4b7f      	ldr	r3, [pc, #508]	; (8007064 <_dtoa_r+0x61c>)
 8006e66:	f7f9 f97f 	bl	8000168 <__aeabi_dsub>
 8006e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e72:	f7f9 fdc1 	bl	80009f8 <__aeabi_dcmpgt>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f040 8281 	bne.w	800737e <_dtoa_r+0x936>
 8006e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e82:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e86:	f7f9 fd99 	bl	80009bc <__aeabi_dcmplt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f040 8275 	bne.w	800737a <_dtoa_r+0x932>
 8006e90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006e94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f2c0 814b 	blt.w	8007136 <_dtoa_r+0x6ee>
 8006ea0:	f1ba 0f0e 	cmp.w	sl, #14
 8006ea4:	f300 8147 	bgt.w	8007136 <_dtoa_r+0x6ee>
 8006ea8:	4b69      	ldr	r3, [pc, #420]	; (8007050 <_dtoa_r+0x608>)
 8006eaa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006eb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f280 80d7 	bge.w	800706c <_dtoa_r+0x624>
 8006ebe:	f1b8 0f00 	cmp.w	r8, #0
 8006ec2:	f300 80d3 	bgt.w	800706c <_dtoa_r+0x624>
 8006ec6:	f040 8257 	bne.w	8007378 <_dtoa_r+0x930>
 8006eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4b64      	ldr	r3, [pc, #400]	; (8007064 <_dtoa_r+0x61c>)
 8006ed2:	f7f9 fb01 	bl	80004d8 <__aeabi_dmul>
 8006ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eda:	f7f9 fd83 	bl	80009e4 <__aeabi_dcmpge>
 8006ede:	4646      	mov	r6, r8
 8006ee0:	4647      	mov	r7, r8
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f040 822d 	bne.w	8007342 <_dtoa_r+0x8fa>
 8006ee8:	9b06      	ldr	r3, [sp, #24]
 8006eea:	9a06      	ldr	r2, [sp, #24]
 8006eec:	1c5d      	adds	r5, r3, #1
 8006eee:	2331      	movs	r3, #49	; 0x31
 8006ef0:	f10a 0a01 	add.w	sl, sl, #1
 8006ef4:	7013      	strb	r3, [r2, #0]
 8006ef6:	e228      	b.n	800734a <_dtoa_r+0x902>
 8006ef8:	07f2      	lsls	r2, r6, #31
 8006efa:	d505      	bpl.n	8006f08 <_dtoa_r+0x4c0>
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f7f9 faea 	bl	80004d8 <__aeabi_dmul>
 8006f04:	2301      	movs	r3, #1
 8006f06:	3501      	adds	r5, #1
 8006f08:	1076      	asrs	r6, r6, #1
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	e76e      	b.n	8006dec <_dtoa_r+0x3a4>
 8006f0e:	2502      	movs	r5, #2
 8006f10:	e771      	b.n	8006df6 <_dtoa_r+0x3ae>
 8006f12:	4657      	mov	r7, sl
 8006f14:	4646      	mov	r6, r8
 8006f16:	e790      	b.n	8006e3a <_dtoa_r+0x3f2>
 8006f18:	4b4d      	ldr	r3, [pc, #308]	; (8007050 <_dtoa_r+0x608>)
 8006f1a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f1e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d048      	beq.n	8006fba <_dtoa_r+0x572>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	494e      	ldr	r1, [pc, #312]	; (8007068 <_dtoa_r+0x620>)
 8006f30:	f7f9 fbfc 	bl	800072c <__aeabi_ddiv>
 8006f34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f38:	f7f9 f916 	bl	8000168 <__aeabi_dsub>
 8006f3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f40:	9d06      	ldr	r5, [sp, #24]
 8006f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f46:	f7f9 fd77 	bl	8000a38 <__aeabi_d2iz>
 8006f4a:	9011      	str	r0, [sp, #68]	; 0x44
 8006f4c:	f7f9 fa5a 	bl	8000404 <__aeabi_i2d>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f58:	f7f9 f906 	bl	8000168 <__aeabi_dsub>
 8006f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f62:	3330      	adds	r3, #48	; 0x30
 8006f64:	f805 3b01 	strb.w	r3, [r5], #1
 8006f68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f6c:	f7f9 fd26 	bl	80009bc <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d163      	bne.n	800703c <_dtoa_r+0x5f4>
 8006f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f78:	2000      	movs	r0, #0
 8006f7a:	4937      	ldr	r1, [pc, #220]	; (8007058 <_dtoa_r+0x610>)
 8006f7c:	f7f9 f8f4 	bl	8000168 <__aeabi_dsub>
 8006f80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f84:	f7f9 fd1a 	bl	80009bc <__aeabi_dcmplt>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	f040 80b5 	bne.w	80070f8 <_dtoa_r+0x6b0>
 8006f8e:	9b06      	ldr	r3, [sp, #24]
 8006f90:	1aeb      	subs	r3, r5, r3
 8006f92:	429e      	cmp	r6, r3
 8006f94:	f77f af7c 	ble.w	8006e90 <_dtoa_r+0x448>
 8006f98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4b2f      	ldr	r3, [pc, #188]	; (800705c <_dtoa_r+0x614>)
 8006fa0:	f7f9 fa9a 	bl	80004d8 <__aeabi_dmul>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fae:	4b2b      	ldr	r3, [pc, #172]	; (800705c <_dtoa_r+0x614>)
 8006fb0:	f7f9 fa92 	bl	80004d8 <__aeabi_dmul>
 8006fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb8:	e7c3      	b.n	8006f42 <_dtoa_r+0x4fa>
 8006fba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fbe:	f7f9 fa8b 	bl	80004d8 <__aeabi_dmul>
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006fc8:	199d      	adds	r5, r3, r6
 8006fca:	461e      	mov	r6, r3
 8006fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd0:	f7f9 fd32 	bl	8000a38 <__aeabi_d2iz>
 8006fd4:	9011      	str	r0, [sp, #68]	; 0x44
 8006fd6:	f7f9 fa15 	bl	8000404 <__aeabi_i2d>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe2:	f7f9 f8c1 	bl	8000168 <__aeabi_dsub>
 8006fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fec:	3330      	adds	r3, #48	; 0x30
 8006fee:	f806 3b01 	strb.w	r3, [r6], #1
 8006ff2:	42ae      	cmp	r6, r5
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	d124      	bne.n	8007044 <_dtoa_r+0x5fc>
 8006ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ffe:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <_dtoa_r+0x620>)
 8007000:	f7f9 f8b4 	bl	800016c <__adddf3>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700c:	f7f9 fcf4 	bl	80009f8 <__aeabi_dcmpgt>
 8007010:	2800      	cmp	r0, #0
 8007012:	d171      	bne.n	80070f8 <_dtoa_r+0x6b0>
 8007014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007018:	2000      	movs	r0, #0
 800701a:	4913      	ldr	r1, [pc, #76]	; (8007068 <_dtoa_r+0x620>)
 800701c:	f7f9 f8a4 	bl	8000168 <__aeabi_dsub>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007028:	f7f9 fcc8 	bl	80009bc <__aeabi_dcmplt>
 800702c:	2800      	cmp	r0, #0
 800702e:	f43f af2f 	beq.w	8006e90 <_dtoa_r+0x448>
 8007032:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007036:	1e6a      	subs	r2, r5, #1
 8007038:	2b30      	cmp	r3, #48	; 0x30
 800703a:	d001      	beq.n	8007040 <_dtoa_r+0x5f8>
 800703c:	46ba      	mov	sl, r7
 800703e:	e04a      	b.n	80070d6 <_dtoa_r+0x68e>
 8007040:	4615      	mov	r5, r2
 8007042:	e7f6      	b.n	8007032 <_dtoa_r+0x5ea>
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <_dtoa_r+0x614>)
 8007046:	f7f9 fa47 	bl	80004d8 <__aeabi_dmul>
 800704a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800704e:	e7bd      	b.n	8006fcc <_dtoa_r+0x584>
 8007050:	08009088 	.word	0x08009088
 8007054:	08009060 	.word	0x08009060
 8007058:	3ff00000 	.word	0x3ff00000
 800705c:	40240000 	.word	0x40240000
 8007060:	401c0000 	.word	0x401c0000
 8007064:	40140000 	.word	0x40140000
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	9d06      	ldr	r5, [sp, #24]
 800706e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007076:	4630      	mov	r0, r6
 8007078:	4639      	mov	r1, r7
 800707a:	f7f9 fb57 	bl	800072c <__aeabi_ddiv>
 800707e:	f7f9 fcdb 	bl	8000a38 <__aeabi_d2iz>
 8007082:	4681      	mov	r9, r0
 8007084:	f7f9 f9be 	bl	8000404 <__aeabi_i2d>
 8007088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800708c:	f7f9 fa24 	bl	80004d8 <__aeabi_dmul>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4630      	mov	r0, r6
 8007096:	4639      	mov	r1, r7
 8007098:	f7f9 f866 	bl	8000168 <__aeabi_dsub>
 800709c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80070a0:	f805 6b01 	strb.w	r6, [r5], #1
 80070a4:	9e06      	ldr	r6, [sp, #24]
 80070a6:	4602      	mov	r2, r0
 80070a8:	1bae      	subs	r6, r5, r6
 80070aa:	45b0      	cmp	r8, r6
 80070ac:	460b      	mov	r3, r1
 80070ae:	d135      	bne.n	800711c <_dtoa_r+0x6d4>
 80070b0:	f7f9 f85c 	bl	800016c <__adddf3>
 80070b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b8:	4606      	mov	r6, r0
 80070ba:	460f      	mov	r7, r1
 80070bc:	f7f9 fc9c 	bl	80009f8 <__aeabi_dcmpgt>
 80070c0:	b9c8      	cbnz	r0, 80070f6 <_dtoa_r+0x6ae>
 80070c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 80070ce:	b110      	cbz	r0, 80070d6 <_dtoa_r+0x68e>
 80070d0:	f019 0f01 	tst.w	r9, #1
 80070d4:	d10f      	bne.n	80070f6 <_dtoa_r+0x6ae>
 80070d6:	4659      	mov	r1, fp
 80070d8:	4620      	mov	r0, r4
 80070da:	f000 ffe6 	bl	80080aa <_Bfree>
 80070de:	2300      	movs	r3, #0
 80070e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070e2:	702b      	strb	r3, [r5, #0]
 80070e4:	f10a 0301 	add.w	r3, sl, #1
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f43f acf3 	beq.w	8006ad8 <_dtoa_r+0x90>
 80070f2:	601d      	str	r5, [r3, #0]
 80070f4:	e4f0      	b.n	8006ad8 <_dtoa_r+0x90>
 80070f6:	4657      	mov	r7, sl
 80070f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070fc:	1e6b      	subs	r3, r5, #1
 80070fe:	2a39      	cmp	r2, #57	; 0x39
 8007100:	d106      	bne.n	8007110 <_dtoa_r+0x6c8>
 8007102:	9a06      	ldr	r2, [sp, #24]
 8007104:	429a      	cmp	r2, r3
 8007106:	d107      	bne.n	8007118 <_dtoa_r+0x6d0>
 8007108:	2330      	movs	r3, #48	; 0x30
 800710a:	7013      	strb	r3, [r2, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	3701      	adds	r7, #1
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	3201      	adds	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e791      	b.n	800703c <_dtoa_r+0x5f4>
 8007118:	461d      	mov	r5, r3
 800711a:	e7ed      	b.n	80070f8 <_dtoa_r+0x6b0>
 800711c:	2200      	movs	r2, #0
 800711e:	4b99      	ldr	r3, [pc, #612]	; (8007384 <_dtoa_r+0x93c>)
 8007120:	f7f9 f9da 	bl	80004d8 <__aeabi_dmul>
 8007124:	2200      	movs	r2, #0
 8007126:	2300      	movs	r3, #0
 8007128:	4606      	mov	r6, r0
 800712a:	460f      	mov	r7, r1
 800712c:	f7f9 fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8007130:	2800      	cmp	r0, #0
 8007132:	d09e      	beq.n	8007072 <_dtoa_r+0x62a>
 8007134:	e7cf      	b.n	80070d6 <_dtoa_r+0x68e>
 8007136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007138:	2a00      	cmp	r2, #0
 800713a:	f000 8088 	beq.w	800724e <_dtoa_r+0x806>
 800713e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007140:	2a01      	cmp	r2, #1
 8007142:	dc6d      	bgt.n	8007220 <_dtoa_r+0x7d8>
 8007144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007146:	2a00      	cmp	r2, #0
 8007148:	d066      	beq.n	8007218 <_dtoa_r+0x7d0>
 800714a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800714e:	464d      	mov	r5, r9
 8007150:	9e08      	ldr	r6, [sp, #32]
 8007152:	9a07      	ldr	r2, [sp, #28]
 8007154:	2101      	movs	r1, #1
 8007156:	441a      	add	r2, r3
 8007158:	4620      	mov	r0, r4
 800715a:	4499      	add	r9, r3
 800715c:	9207      	str	r2, [sp, #28]
 800715e:	f001 f882 	bl	8008266 <__i2b>
 8007162:	4607      	mov	r7, r0
 8007164:	2d00      	cmp	r5, #0
 8007166:	dd0b      	ble.n	8007180 <_dtoa_r+0x738>
 8007168:	9b07      	ldr	r3, [sp, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	dd08      	ble.n	8007180 <_dtoa_r+0x738>
 800716e:	42ab      	cmp	r3, r5
 8007170:	bfa8      	it	ge
 8007172:	462b      	movge	r3, r5
 8007174:	9a07      	ldr	r2, [sp, #28]
 8007176:	eba9 0903 	sub.w	r9, r9, r3
 800717a:	1aed      	subs	r5, r5, r3
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	b1eb      	cbz	r3, 80071c0 <_dtoa_r+0x778>
 8007184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d065      	beq.n	8007256 <_dtoa_r+0x80e>
 800718a:	b18e      	cbz	r6, 80071b0 <_dtoa_r+0x768>
 800718c:	4639      	mov	r1, r7
 800718e:	4632      	mov	r2, r6
 8007190:	4620      	mov	r0, r4
 8007192:	f001 f907 	bl	80083a4 <__pow5mult>
 8007196:	465a      	mov	r2, fp
 8007198:	4601      	mov	r1, r0
 800719a:	4607      	mov	r7, r0
 800719c:	4620      	mov	r0, r4
 800719e:	f001 f86b 	bl	8008278 <__multiply>
 80071a2:	4659      	mov	r1, fp
 80071a4:	900a      	str	r0, [sp, #40]	; 0x28
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 ff7f 	bl	80080aa <_Bfree>
 80071ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ae:	469b      	mov	fp, r3
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	1b9a      	subs	r2, r3, r6
 80071b4:	d004      	beq.n	80071c0 <_dtoa_r+0x778>
 80071b6:	4659      	mov	r1, fp
 80071b8:	4620      	mov	r0, r4
 80071ba:	f001 f8f3 	bl	80083a4 <__pow5mult>
 80071be:	4683      	mov	fp, r0
 80071c0:	2101      	movs	r1, #1
 80071c2:	4620      	mov	r0, r4
 80071c4:	f001 f84f 	bl	8008266 <__i2b>
 80071c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071ca:	4606      	mov	r6, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 81c6 	beq.w	800755e <_dtoa_r+0xb16>
 80071d2:	461a      	mov	r2, r3
 80071d4:	4601      	mov	r1, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	f001 f8e4 	bl	80083a4 <__pow5mult>
 80071dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071de:	4606      	mov	r6, r0
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	dc3e      	bgt.n	8007262 <_dtoa_r+0x81a>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d137      	bne.n	800725a <_dtoa_r+0x812>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d134      	bne.n	800725e <_dtoa_r+0x816>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071fa:	0d1b      	lsrs	r3, r3, #20
 80071fc:	051b      	lsls	r3, r3, #20
 80071fe:	b12b      	cbz	r3, 800720c <_dtoa_r+0x7c4>
 8007200:	9b07      	ldr	r3, [sp, #28]
 8007202:	f109 0901 	add.w	r9, r9, #1
 8007206:	3301      	adds	r3, #1
 8007208:	9307      	str	r3, [sp, #28]
 800720a:	2301      	movs	r3, #1
 800720c:	9308      	str	r3, [sp, #32]
 800720e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007210:	2b00      	cmp	r3, #0
 8007212:	d128      	bne.n	8007266 <_dtoa_r+0x81e>
 8007214:	2001      	movs	r0, #1
 8007216:	e02e      	b.n	8007276 <_dtoa_r+0x82e>
 8007218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800721a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800721e:	e796      	b.n	800714e <_dtoa_r+0x706>
 8007220:	9b08      	ldr	r3, [sp, #32]
 8007222:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8007226:	42b3      	cmp	r3, r6
 8007228:	bfb7      	itett	lt
 800722a:	9b08      	ldrlt	r3, [sp, #32]
 800722c:	1b9e      	subge	r6, r3, r6
 800722e:	1af2      	sublt	r2, r6, r3
 8007230:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007232:	bfbf      	itttt	lt
 8007234:	9608      	strlt	r6, [sp, #32]
 8007236:	189b      	addlt	r3, r3, r2
 8007238:	930c      	strlt	r3, [sp, #48]	; 0x30
 800723a:	2600      	movlt	r6, #0
 800723c:	f1b8 0f00 	cmp.w	r8, #0
 8007240:	bfb9      	ittee	lt
 8007242:	eba9 0508 	sublt.w	r5, r9, r8
 8007246:	2300      	movlt	r3, #0
 8007248:	464d      	movge	r5, r9
 800724a:	4643      	movge	r3, r8
 800724c:	e781      	b.n	8007152 <_dtoa_r+0x70a>
 800724e:	9e08      	ldr	r6, [sp, #32]
 8007250:	464d      	mov	r5, r9
 8007252:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007254:	e786      	b.n	8007164 <_dtoa_r+0x71c>
 8007256:	9a08      	ldr	r2, [sp, #32]
 8007258:	e7ad      	b.n	80071b6 <_dtoa_r+0x76e>
 800725a:	2300      	movs	r3, #0
 800725c:	e7d6      	b.n	800720c <_dtoa_r+0x7c4>
 800725e:	9b02      	ldr	r3, [sp, #8]
 8007260:	e7d4      	b.n	800720c <_dtoa_r+0x7c4>
 8007262:	2300      	movs	r3, #0
 8007264:	9308      	str	r3, [sp, #32]
 8007266:	6933      	ldr	r3, [r6, #16]
 8007268:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800726c:	6918      	ldr	r0, [r3, #16]
 800726e:	f000 ffac 	bl	80081ca <__hi0bits>
 8007272:	f1c0 0020 	rsb	r0, r0, #32
 8007276:	9b07      	ldr	r3, [sp, #28]
 8007278:	4418      	add	r0, r3
 800727a:	f010 001f 	ands.w	r0, r0, #31
 800727e:	d047      	beq.n	8007310 <_dtoa_r+0x8c8>
 8007280:	f1c0 0320 	rsb	r3, r0, #32
 8007284:	2b04      	cmp	r3, #4
 8007286:	dd3b      	ble.n	8007300 <_dtoa_r+0x8b8>
 8007288:	9b07      	ldr	r3, [sp, #28]
 800728a:	f1c0 001c 	rsb	r0, r0, #28
 800728e:	4481      	add	r9, r0
 8007290:	4405      	add	r5, r0
 8007292:	4403      	add	r3, r0
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	f1b9 0f00 	cmp.w	r9, #0
 800729a:	dd05      	ble.n	80072a8 <_dtoa_r+0x860>
 800729c:	4659      	mov	r1, fp
 800729e:	464a      	mov	r2, r9
 80072a0:	4620      	mov	r0, r4
 80072a2:	f001 f8cd 	bl	8008440 <__lshift>
 80072a6:	4683      	mov	fp, r0
 80072a8:	9b07      	ldr	r3, [sp, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dd05      	ble.n	80072ba <_dtoa_r+0x872>
 80072ae:	4631      	mov	r1, r6
 80072b0:	461a      	mov	r2, r3
 80072b2:	4620      	mov	r0, r4
 80072b4:	f001 f8c4 	bl	8008440 <__lshift>
 80072b8:	4606      	mov	r6, r0
 80072ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072bc:	b353      	cbz	r3, 8007314 <_dtoa_r+0x8cc>
 80072be:	4631      	mov	r1, r6
 80072c0:	4658      	mov	r0, fp
 80072c2:	f001 f911 	bl	80084e8 <__mcmp>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	da24      	bge.n	8007314 <_dtoa_r+0x8cc>
 80072ca:	2300      	movs	r3, #0
 80072cc:	4659      	mov	r1, fp
 80072ce:	220a      	movs	r2, #10
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 ff01 	bl	80080d8 <__multadd>
 80072d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80072dc:	4683      	mov	fp, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8144 	beq.w	800756c <_dtoa_r+0xb24>
 80072e4:	2300      	movs	r3, #0
 80072e6:	4639      	mov	r1, r7
 80072e8:	220a      	movs	r2, #10
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fef4 	bl	80080d8 <__multadd>
 80072f0:	9b04      	ldr	r3, [sp, #16]
 80072f2:	4607      	mov	r7, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dc4d      	bgt.n	8007394 <_dtoa_r+0x94c>
 80072f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	dd4a      	ble.n	8007394 <_dtoa_r+0x94c>
 80072fe:	e011      	b.n	8007324 <_dtoa_r+0x8dc>
 8007300:	d0c9      	beq.n	8007296 <_dtoa_r+0x84e>
 8007302:	9a07      	ldr	r2, [sp, #28]
 8007304:	331c      	adds	r3, #28
 8007306:	441a      	add	r2, r3
 8007308:	4499      	add	r9, r3
 800730a:	441d      	add	r5, r3
 800730c:	4613      	mov	r3, r2
 800730e:	e7c1      	b.n	8007294 <_dtoa_r+0x84c>
 8007310:	4603      	mov	r3, r0
 8007312:	e7f6      	b.n	8007302 <_dtoa_r+0x8ba>
 8007314:	f1b8 0f00 	cmp.w	r8, #0
 8007318:	dc36      	bgt.n	8007388 <_dtoa_r+0x940>
 800731a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800731c:	2b02      	cmp	r3, #2
 800731e:	dd33      	ble.n	8007388 <_dtoa_r+0x940>
 8007320:	f8cd 8010 	str.w	r8, [sp, #16]
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	b963      	cbnz	r3, 8007342 <_dtoa_r+0x8fa>
 8007328:	4631      	mov	r1, r6
 800732a:	2205      	movs	r2, #5
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fed3 	bl	80080d8 <__multadd>
 8007332:	4601      	mov	r1, r0
 8007334:	4606      	mov	r6, r0
 8007336:	4658      	mov	r0, fp
 8007338:	f001 f8d6 	bl	80084e8 <__mcmp>
 800733c:	2800      	cmp	r0, #0
 800733e:	f73f add3 	bgt.w	8006ee8 <_dtoa_r+0x4a0>
 8007342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007344:	9d06      	ldr	r5, [sp, #24]
 8007346:	ea6f 0a03 	mvn.w	sl, r3
 800734a:	f04f 0900 	mov.w	r9, #0
 800734e:	4631      	mov	r1, r6
 8007350:	4620      	mov	r0, r4
 8007352:	f000 feaa 	bl	80080aa <_Bfree>
 8007356:	2f00      	cmp	r7, #0
 8007358:	f43f aebd 	beq.w	80070d6 <_dtoa_r+0x68e>
 800735c:	f1b9 0f00 	cmp.w	r9, #0
 8007360:	d005      	beq.n	800736e <_dtoa_r+0x926>
 8007362:	45b9      	cmp	r9, r7
 8007364:	d003      	beq.n	800736e <_dtoa_r+0x926>
 8007366:	4649      	mov	r1, r9
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fe9e 	bl	80080aa <_Bfree>
 800736e:	4639      	mov	r1, r7
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fe9a 	bl	80080aa <_Bfree>
 8007376:	e6ae      	b.n	80070d6 <_dtoa_r+0x68e>
 8007378:	2600      	movs	r6, #0
 800737a:	4637      	mov	r7, r6
 800737c:	e7e1      	b.n	8007342 <_dtoa_r+0x8fa>
 800737e:	46ba      	mov	sl, r7
 8007380:	4637      	mov	r7, r6
 8007382:	e5b1      	b.n	8006ee8 <_dtoa_r+0x4a0>
 8007384:	40240000 	.word	0x40240000
 8007388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738a:	f8cd 8010 	str.w	r8, [sp, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 80f3 	beq.w	800757a <_dtoa_r+0xb32>
 8007394:	2d00      	cmp	r5, #0
 8007396:	dd05      	ble.n	80073a4 <_dtoa_r+0x95c>
 8007398:	4639      	mov	r1, r7
 800739a:	462a      	mov	r2, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f001 f84f 	bl	8008440 <__lshift>
 80073a2:	4607      	mov	r7, r0
 80073a4:	9b08      	ldr	r3, [sp, #32]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d04c      	beq.n	8007444 <_dtoa_r+0x9fc>
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fe48 	bl	8008042 <_Balloc>
 80073b2:	4605      	mov	r5, r0
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	f107 010c 	add.w	r1, r7, #12
 80073ba:	3202      	adds	r2, #2
 80073bc:	0092      	lsls	r2, r2, #2
 80073be:	300c      	adds	r0, #12
 80073c0:	f000 fe34 	bl	800802c <memcpy>
 80073c4:	2201      	movs	r2, #1
 80073c6:	4629      	mov	r1, r5
 80073c8:	4620      	mov	r0, r4
 80073ca:	f001 f839 	bl	8008440 <__lshift>
 80073ce:	46b9      	mov	r9, r7
 80073d0:	4607      	mov	r7, r0
 80073d2:	9b06      	ldr	r3, [sp, #24]
 80073d4:	9307      	str	r3, [sp, #28]
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	9308      	str	r3, [sp, #32]
 80073de:	4631      	mov	r1, r6
 80073e0:	4658      	mov	r0, fp
 80073e2:	f7ff faa3 	bl	800692c <quorem>
 80073e6:	4649      	mov	r1, r9
 80073e8:	4605      	mov	r5, r0
 80073ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80073ee:	4658      	mov	r0, fp
 80073f0:	f001 f87a 	bl	80084e8 <__mcmp>
 80073f4:	463a      	mov	r2, r7
 80073f6:	9002      	str	r0, [sp, #8]
 80073f8:	4631      	mov	r1, r6
 80073fa:	4620      	mov	r0, r4
 80073fc:	f001 f88e 	bl	800851c <__mdiff>
 8007400:	68c3      	ldr	r3, [r0, #12]
 8007402:	4602      	mov	r2, r0
 8007404:	bb03      	cbnz	r3, 8007448 <_dtoa_r+0xa00>
 8007406:	4601      	mov	r1, r0
 8007408:	9009      	str	r0, [sp, #36]	; 0x24
 800740a:	4658      	mov	r0, fp
 800740c:	f001 f86c 	bl	80084e8 <__mcmp>
 8007410:	4603      	mov	r3, r0
 8007412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007414:	4611      	mov	r1, r2
 8007416:	4620      	mov	r0, r4
 8007418:	9309      	str	r3, [sp, #36]	; 0x24
 800741a:	f000 fe46 	bl	80080aa <_Bfree>
 800741e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007420:	b9a3      	cbnz	r3, 800744c <_dtoa_r+0xa04>
 8007422:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007424:	b992      	cbnz	r2, 800744c <_dtoa_r+0xa04>
 8007426:	9a08      	ldr	r2, [sp, #32]
 8007428:	b982      	cbnz	r2, 800744c <_dtoa_r+0xa04>
 800742a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800742e:	d029      	beq.n	8007484 <_dtoa_r+0xa3c>
 8007430:	9b02      	ldr	r3, [sp, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dd01      	ble.n	800743a <_dtoa_r+0x9f2>
 8007436:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800743a:	9b07      	ldr	r3, [sp, #28]
 800743c:	1c5d      	adds	r5, r3, #1
 800743e:	f883 8000 	strb.w	r8, [r3]
 8007442:	e784      	b.n	800734e <_dtoa_r+0x906>
 8007444:	4638      	mov	r0, r7
 8007446:	e7c2      	b.n	80073ce <_dtoa_r+0x986>
 8007448:	2301      	movs	r3, #1
 800744a:	e7e3      	b.n	8007414 <_dtoa_r+0x9cc>
 800744c:	9a02      	ldr	r2, [sp, #8]
 800744e:	2a00      	cmp	r2, #0
 8007450:	db04      	blt.n	800745c <_dtoa_r+0xa14>
 8007452:	d123      	bne.n	800749c <_dtoa_r+0xa54>
 8007454:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007456:	bb0a      	cbnz	r2, 800749c <_dtoa_r+0xa54>
 8007458:	9a08      	ldr	r2, [sp, #32]
 800745a:	b9fa      	cbnz	r2, 800749c <_dtoa_r+0xa54>
 800745c:	2b00      	cmp	r3, #0
 800745e:	ddec      	ble.n	800743a <_dtoa_r+0x9f2>
 8007460:	4659      	mov	r1, fp
 8007462:	2201      	movs	r2, #1
 8007464:	4620      	mov	r0, r4
 8007466:	f000 ffeb 	bl	8008440 <__lshift>
 800746a:	4631      	mov	r1, r6
 800746c:	4683      	mov	fp, r0
 800746e:	f001 f83b 	bl	80084e8 <__mcmp>
 8007472:	2800      	cmp	r0, #0
 8007474:	dc03      	bgt.n	800747e <_dtoa_r+0xa36>
 8007476:	d1e0      	bne.n	800743a <_dtoa_r+0x9f2>
 8007478:	f018 0f01 	tst.w	r8, #1
 800747c:	d0dd      	beq.n	800743a <_dtoa_r+0x9f2>
 800747e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007482:	d1d8      	bne.n	8007436 <_dtoa_r+0x9ee>
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	9a07      	ldr	r2, [sp, #28]
 8007488:	1c5d      	adds	r5, r3, #1
 800748a:	2339      	movs	r3, #57	; 0x39
 800748c:	7013      	strb	r3, [r2, #0]
 800748e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007492:	1e6a      	subs	r2, r5, #1
 8007494:	2b39      	cmp	r3, #57	; 0x39
 8007496:	d04d      	beq.n	8007534 <_dtoa_r+0xaec>
 8007498:	3301      	adds	r3, #1
 800749a:	e052      	b.n	8007542 <_dtoa_r+0xafa>
 800749c:	9a07      	ldr	r2, [sp, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f102 0501 	add.w	r5, r2, #1
 80074a4:	dd06      	ble.n	80074b4 <_dtoa_r+0xa6c>
 80074a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074aa:	d0eb      	beq.n	8007484 <_dtoa_r+0xa3c>
 80074ac:	f108 0801 	add.w	r8, r8, #1
 80074b0:	9b07      	ldr	r3, [sp, #28]
 80074b2:	e7c4      	b.n	800743e <_dtoa_r+0x9f6>
 80074b4:	9b06      	ldr	r3, [sp, #24]
 80074b6:	9a04      	ldr	r2, [sp, #16]
 80074b8:	1aeb      	subs	r3, r5, r3
 80074ba:	4293      	cmp	r3, r2
 80074bc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80074c0:	d021      	beq.n	8007506 <_dtoa_r+0xabe>
 80074c2:	4659      	mov	r1, fp
 80074c4:	2300      	movs	r3, #0
 80074c6:	220a      	movs	r2, #10
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fe05 	bl	80080d8 <__multadd>
 80074ce:	45b9      	cmp	r9, r7
 80074d0:	4683      	mov	fp, r0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	f04f 020a 	mov.w	r2, #10
 80074da:	4649      	mov	r1, r9
 80074dc:	4620      	mov	r0, r4
 80074de:	d105      	bne.n	80074ec <_dtoa_r+0xaa4>
 80074e0:	f000 fdfa 	bl	80080d8 <__multadd>
 80074e4:	4681      	mov	r9, r0
 80074e6:	4607      	mov	r7, r0
 80074e8:	9507      	str	r5, [sp, #28]
 80074ea:	e778      	b.n	80073de <_dtoa_r+0x996>
 80074ec:	f000 fdf4 	bl	80080d8 <__multadd>
 80074f0:	4639      	mov	r1, r7
 80074f2:	4681      	mov	r9, r0
 80074f4:	2300      	movs	r3, #0
 80074f6:	220a      	movs	r2, #10
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fded 	bl	80080d8 <__multadd>
 80074fe:	4607      	mov	r7, r0
 8007500:	e7f2      	b.n	80074e8 <_dtoa_r+0xaa0>
 8007502:	f04f 0900 	mov.w	r9, #0
 8007506:	4659      	mov	r1, fp
 8007508:	2201      	movs	r2, #1
 800750a:	4620      	mov	r0, r4
 800750c:	f000 ff98 	bl	8008440 <__lshift>
 8007510:	4631      	mov	r1, r6
 8007512:	4683      	mov	fp, r0
 8007514:	f000 ffe8 	bl	80084e8 <__mcmp>
 8007518:	2800      	cmp	r0, #0
 800751a:	dcb8      	bgt.n	800748e <_dtoa_r+0xa46>
 800751c:	d102      	bne.n	8007524 <_dtoa_r+0xadc>
 800751e:	f018 0f01 	tst.w	r8, #1
 8007522:	d1b4      	bne.n	800748e <_dtoa_r+0xa46>
 8007524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007528:	1e6a      	subs	r2, r5, #1
 800752a:	2b30      	cmp	r3, #48	; 0x30
 800752c:	f47f af0f 	bne.w	800734e <_dtoa_r+0x906>
 8007530:	4615      	mov	r5, r2
 8007532:	e7f7      	b.n	8007524 <_dtoa_r+0xadc>
 8007534:	9b06      	ldr	r3, [sp, #24]
 8007536:	4293      	cmp	r3, r2
 8007538:	d105      	bne.n	8007546 <_dtoa_r+0xafe>
 800753a:	2331      	movs	r3, #49	; 0x31
 800753c:	9a06      	ldr	r2, [sp, #24]
 800753e:	f10a 0a01 	add.w	sl, sl, #1
 8007542:	7013      	strb	r3, [r2, #0]
 8007544:	e703      	b.n	800734e <_dtoa_r+0x906>
 8007546:	4615      	mov	r5, r2
 8007548:	e7a1      	b.n	800748e <_dtoa_r+0xa46>
 800754a:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <_dtoa_r+0xb60>)
 800754c:	f7ff bae1 	b.w	8006b12 <_dtoa_r+0xca>
 8007550:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007552:	2b00      	cmp	r3, #0
 8007554:	f47f aabb 	bne.w	8006ace <_dtoa_r+0x86>
 8007558:	4b14      	ldr	r3, [pc, #80]	; (80075ac <_dtoa_r+0xb64>)
 800755a:	f7ff bada 	b.w	8006b12 <_dtoa_r+0xca>
 800755e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007560:	2b01      	cmp	r3, #1
 8007562:	f77f ae3f 	ble.w	80071e4 <_dtoa_r+0x79c>
 8007566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007568:	9308      	str	r3, [sp, #32]
 800756a:	e653      	b.n	8007214 <_dtoa_r+0x7cc>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	dc03      	bgt.n	800757a <_dtoa_r+0xb32>
 8007572:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007574:	2b02      	cmp	r3, #2
 8007576:	f73f aed5 	bgt.w	8007324 <_dtoa_r+0x8dc>
 800757a:	9d06      	ldr	r5, [sp, #24]
 800757c:	4631      	mov	r1, r6
 800757e:	4658      	mov	r0, fp
 8007580:	f7ff f9d4 	bl	800692c <quorem>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800758a:	f805 8b01 	strb.w	r8, [r5], #1
 800758e:	9a04      	ldr	r2, [sp, #16]
 8007590:	1aeb      	subs	r3, r5, r3
 8007592:	429a      	cmp	r2, r3
 8007594:	ddb5      	ble.n	8007502 <_dtoa_r+0xaba>
 8007596:	4659      	mov	r1, fp
 8007598:	2300      	movs	r3, #0
 800759a:	220a      	movs	r2, #10
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fd9b 	bl	80080d8 <__multadd>
 80075a2:	4683      	mov	fp, r0
 80075a4:	e7ea      	b.n	800757c <_dtoa_r+0xb34>
 80075a6:	bf00      	nop
 80075a8:	08008f68 	.word	0x08008f68
 80075ac:	08008fe0 	.word	0x08008fe0

080075b0 <__sflush_r>:
 80075b0:	898a      	ldrh	r2, [r1, #12]
 80075b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	4605      	mov	r5, r0
 80075b8:	0710      	lsls	r0, r2, #28
 80075ba:	460c      	mov	r4, r1
 80075bc:	d458      	bmi.n	8007670 <__sflush_r+0xc0>
 80075be:	684b      	ldr	r3, [r1, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dc05      	bgt.n	80075d0 <__sflush_r+0x20>
 80075c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	dc02      	bgt.n	80075d0 <__sflush_r+0x20>
 80075ca:	2000      	movs	r0, #0
 80075cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d2:	2e00      	cmp	r6, #0
 80075d4:	d0f9      	beq.n	80075ca <__sflush_r+0x1a>
 80075d6:	2300      	movs	r3, #0
 80075d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075dc:	682f      	ldr	r7, [r5, #0]
 80075de:	6a21      	ldr	r1, [r4, #32]
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	d032      	beq.n	800764a <__sflush_r+0x9a>
 80075e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	075a      	lsls	r2, r3, #29
 80075ea:	d505      	bpl.n	80075f8 <__sflush_r+0x48>
 80075ec:	6863      	ldr	r3, [r4, #4]
 80075ee:	1ac0      	subs	r0, r0, r3
 80075f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f2:	b10b      	cbz	r3, 80075f8 <__sflush_r+0x48>
 80075f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075f6:	1ac0      	subs	r0, r0, r3
 80075f8:	2300      	movs	r3, #0
 80075fa:	4602      	mov	r2, r0
 80075fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075fe:	6a21      	ldr	r1, [r4, #32]
 8007600:	4628      	mov	r0, r5
 8007602:	47b0      	blx	r6
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	d106      	bne.n	8007618 <__sflush_r+0x68>
 800760a:	6829      	ldr	r1, [r5, #0]
 800760c:	291d      	cmp	r1, #29
 800760e:	d848      	bhi.n	80076a2 <__sflush_r+0xf2>
 8007610:	4a29      	ldr	r2, [pc, #164]	; (80076b8 <__sflush_r+0x108>)
 8007612:	40ca      	lsrs	r2, r1
 8007614:	07d6      	lsls	r6, r2, #31
 8007616:	d544      	bpl.n	80076a2 <__sflush_r+0xf2>
 8007618:	2200      	movs	r2, #0
 800761a:	6062      	str	r2, [r4, #4]
 800761c:	6922      	ldr	r2, [r4, #16]
 800761e:	04d9      	lsls	r1, r3, #19
 8007620:	6022      	str	r2, [r4, #0]
 8007622:	d504      	bpl.n	800762e <__sflush_r+0x7e>
 8007624:	1c42      	adds	r2, r0, #1
 8007626:	d101      	bne.n	800762c <__sflush_r+0x7c>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b903      	cbnz	r3, 800762e <__sflush_r+0x7e>
 800762c:	6560      	str	r0, [r4, #84]	; 0x54
 800762e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007630:	602f      	str	r7, [r5, #0]
 8007632:	2900      	cmp	r1, #0
 8007634:	d0c9      	beq.n	80075ca <__sflush_r+0x1a>
 8007636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800763a:	4299      	cmp	r1, r3
 800763c:	d002      	beq.n	8007644 <__sflush_r+0x94>
 800763e:	4628      	mov	r0, r5
 8007640:	f001 f906 	bl	8008850 <_free_r>
 8007644:	2000      	movs	r0, #0
 8007646:	6360      	str	r0, [r4, #52]	; 0x34
 8007648:	e7c0      	b.n	80075cc <__sflush_r+0x1c>
 800764a:	2301      	movs	r3, #1
 800764c:	4628      	mov	r0, r5
 800764e:	47b0      	blx	r6
 8007650:	1c41      	adds	r1, r0, #1
 8007652:	d1c8      	bne.n	80075e6 <__sflush_r+0x36>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0c5      	beq.n	80075e6 <__sflush_r+0x36>
 800765a:	2b1d      	cmp	r3, #29
 800765c:	d001      	beq.n	8007662 <__sflush_r+0xb2>
 800765e:	2b16      	cmp	r3, #22
 8007660:	d101      	bne.n	8007666 <__sflush_r+0xb6>
 8007662:	602f      	str	r7, [r5, #0]
 8007664:	e7b1      	b.n	80075ca <__sflush_r+0x1a>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	e7ad      	b.n	80075cc <__sflush_r+0x1c>
 8007670:	690f      	ldr	r7, [r1, #16]
 8007672:	2f00      	cmp	r7, #0
 8007674:	d0a9      	beq.n	80075ca <__sflush_r+0x1a>
 8007676:	0793      	lsls	r3, r2, #30
 8007678:	bf18      	it	ne
 800767a:	2300      	movne	r3, #0
 800767c:	680e      	ldr	r6, [r1, #0]
 800767e:	bf08      	it	eq
 8007680:	694b      	ldreq	r3, [r1, #20]
 8007682:	eba6 0807 	sub.w	r8, r6, r7
 8007686:	600f      	str	r7, [r1, #0]
 8007688:	608b      	str	r3, [r1, #8]
 800768a:	f1b8 0f00 	cmp.w	r8, #0
 800768e:	dd9c      	ble.n	80075ca <__sflush_r+0x1a>
 8007690:	4643      	mov	r3, r8
 8007692:	463a      	mov	r2, r7
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	4628      	mov	r0, r5
 8007698:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800769a:	47b0      	blx	r6
 800769c:	2800      	cmp	r0, #0
 800769e:	dc06      	bgt.n	80076ae <__sflush_r+0xfe>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ac:	e78e      	b.n	80075cc <__sflush_r+0x1c>
 80076ae:	4407      	add	r7, r0
 80076b0:	eba8 0800 	sub.w	r8, r8, r0
 80076b4:	e7e9      	b.n	800768a <__sflush_r+0xda>
 80076b6:	bf00      	nop
 80076b8:	20400001 	.word	0x20400001

080076bc <_fflush_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	690b      	ldr	r3, [r1, #16]
 80076c0:	4605      	mov	r5, r0
 80076c2:	460c      	mov	r4, r1
 80076c4:	b1db      	cbz	r3, 80076fe <_fflush_r+0x42>
 80076c6:	b118      	cbz	r0, 80076d0 <_fflush_r+0x14>
 80076c8:	6983      	ldr	r3, [r0, #24]
 80076ca:	b90b      	cbnz	r3, 80076d0 <_fflush_r+0x14>
 80076cc:	f000 f860 	bl	8007790 <__sinit>
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <_fflush_r+0x48>)
 80076d2:	429c      	cmp	r4, r3
 80076d4:	d109      	bne.n	80076ea <_fflush_r+0x2e>
 80076d6:	686c      	ldr	r4, [r5, #4]
 80076d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076dc:	b17b      	cbz	r3, 80076fe <_fflush_r+0x42>
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e6:	f7ff bf63 	b.w	80075b0 <__sflush_r>
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <_fflush_r+0x4c>)
 80076ec:	429c      	cmp	r4, r3
 80076ee:	d101      	bne.n	80076f4 <_fflush_r+0x38>
 80076f0:	68ac      	ldr	r4, [r5, #8]
 80076f2:	e7f1      	b.n	80076d8 <_fflush_r+0x1c>
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <_fflush_r+0x50>)
 80076f6:	429c      	cmp	r4, r3
 80076f8:	bf08      	it	eq
 80076fa:	68ec      	ldreq	r4, [r5, #12]
 80076fc:	e7ec      	b.n	80076d8 <_fflush_r+0x1c>
 80076fe:	2000      	movs	r0, #0
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	08009010 	.word	0x08009010
 8007708:	08009030 	.word	0x08009030
 800770c:	08008ff0 	.word	0x08008ff0

08007710 <std>:
 8007710:	2300      	movs	r3, #0
 8007712:	b510      	push	{r4, lr}
 8007714:	4604      	mov	r4, r0
 8007716:	e9c0 3300 	strd	r3, r3, [r0]
 800771a:	6083      	str	r3, [r0, #8]
 800771c:	8181      	strh	r1, [r0, #12]
 800771e:	6643      	str	r3, [r0, #100]	; 0x64
 8007720:	81c2      	strh	r2, [r0, #14]
 8007722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007726:	6183      	str	r3, [r0, #24]
 8007728:	4619      	mov	r1, r3
 800772a:	2208      	movs	r2, #8
 800772c:	305c      	adds	r0, #92	; 0x5c
 800772e:	f7fd fc85 	bl	800503c <memset>
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x38>)
 8007734:	6224      	str	r4, [r4, #32]
 8007736:	6263      	str	r3, [r4, #36]	; 0x24
 8007738:	4b04      	ldr	r3, [pc, #16]	; (800774c <std+0x3c>)
 800773a:	62a3      	str	r3, [r4, #40]	; 0x28
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <std+0x40>)
 800773e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <std+0x44>)
 8007742:	6323      	str	r3, [r4, #48]	; 0x30
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	08008c39 	.word	0x08008c39
 800774c:	08008c5b 	.word	0x08008c5b
 8007750:	08008c93 	.word	0x08008c93
 8007754:	08008cb7 	.word	0x08008cb7

08007758 <_cleanup_r>:
 8007758:	4901      	ldr	r1, [pc, #4]	; (8007760 <_cleanup_r+0x8>)
 800775a:	f000 b885 	b.w	8007868 <_fwalk_reent>
 800775e:	bf00      	nop
 8007760:	080076bd 	.word	0x080076bd

08007764 <__sfmoreglue>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	2568      	movs	r5, #104	; 0x68
 8007768:	1e4a      	subs	r2, r1, #1
 800776a:	4355      	muls	r5, r2
 800776c:	460e      	mov	r6, r1
 800776e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007772:	f001 f8b9 	bl	80088e8 <_malloc_r>
 8007776:	4604      	mov	r4, r0
 8007778:	b140      	cbz	r0, 800778c <__sfmoreglue+0x28>
 800777a:	2100      	movs	r1, #0
 800777c:	e9c0 1600 	strd	r1, r6, [r0]
 8007780:	300c      	adds	r0, #12
 8007782:	60a0      	str	r0, [r4, #8]
 8007784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007788:	f7fd fc58 	bl	800503c <memset>
 800778c:	4620      	mov	r0, r4
 800778e:	bd70      	pop	{r4, r5, r6, pc}

08007790 <__sinit>:
 8007790:	6983      	ldr	r3, [r0, #24]
 8007792:	b510      	push	{r4, lr}
 8007794:	4604      	mov	r4, r0
 8007796:	bb33      	cbnz	r3, 80077e6 <__sinit+0x56>
 8007798:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800779c:	6503      	str	r3, [r0, #80]	; 0x50
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <__sinit+0x58>)
 80077a0:	4a12      	ldr	r2, [pc, #72]	; (80077ec <__sinit+0x5c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6282      	str	r2, [r0, #40]	; 0x28
 80077a6:	4298      	cmp	r0, r3
 80077a8:	bf04      	itt	eq
 80077aa:	2301      	moveq	r3, #1
 80077ac:	6183      	streq	r3, [r0, #24]
 80077ae:	f000 f81f 	bl	80077f0 <__sfp>
 80077b2:	6060      	str	r0, [r4, #4]
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 f81b 	bl	80077f0 <__sfp>
 80077ba:	60a0      	str	r0, [r4, #8]
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 f817 	bl	80077f0 <__sfp>
 80077c2:	2200      	movs	r2, #0
 80077c4:	60e0      	str	r0, [r4, #12]
 80077c6:	2104      	movs	r1, #4
 80077c8:	6860      	ldr	r0, [r4, #4]
 80077ca:	f7ff ffa1 	bl	8007710 <std>
 80077ce:	2201      	movs	r2, #1
 80077d0:	2109      	movs	r1, #9
 80077d2:	68a0      	ldr	r0, [r4, #8]
 80077d4:	f7ff ff9c 	bl	8007710 <std>
 80077d8:	2202      	movs	r2, #2
 80077da:	2112      	movs	r1, #18
 80077dc:	68e0      	ldr	r0, [r4, #12]
 80077de:	f7ff ff97 	bl	8007710 <std>
 80077e2:	2301      	movs	r3, #1
 80077e4:	61a3      	str	r3, [r4, #24]
 80077e6:	bd10      	pop	{r4, pc}
 80077e8:	08008f54 	.word	0x08008f54
 80077ec:	08007759 	.word	0x08007759

080077f0 <__sfp>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <__sfp+0x70>)
 80077f4:	4607      	mov	r7, r0
 80077f6:	681e      	ldr	r6, [r3, #0]
 80077f8:	69b3      	ldr	r3, [r6, #24]
 80077fa:	b913      	cbnz	r3, 8007802 <__sfp+0x12>
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7ff ffc7 	bl	8007790 <__sinit>
 8007802:	3648      	adds	r6, #72	; 0x48
 8007804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007808:	3b01      	subs	r3, #1
 800780a:	d503      	bpl.n	8007814 <__sfp+0x24>
 800780c:	6833      	ldr	r3, [r6, #0]
 800780e:	b133      	cbz	r3, 800781e <__sfp+0x2e>
 8007810:	6836      	ldr	r6, [r6, #0]
 8007812:	e7f7      	b.n	8007804 <__sfp+0x14>
 8007814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007818:	b16d      	cbz	r5, 8007836 <__sfp+0x46>
 800781a:	3468      	adds	r4, #104	; 0x68
 800781c:	e7f4      	b.n	8007808 <__sfp+0x18>
 800781e:	2104      	movs	r1, #4
 8007820:	4638      	mov	r0, r7
 8007822:	f7ff ff9f 	bl	8007764 <__sfmoreglue>
 8007826:	6030      	str	r0, [r6, #0]
 8007828:	2800      	cmp	r0, #0
 800782a:	d1f1      	bne.n	8007810 <__sfp+0x20>
 800782c:	230c      	movs	r3, #12
 800782e:	4604      	mov	r4, r0
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	4620      	mov	r0, r4
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <__sfp+0x74>)
 8007838:	6665      	str	r5, [r4, #100]	; 0x64
 800783a:	e9c4 5500 	strd	r5, r5, [r4]
 800783e:	60a5      	str	r5, [r4, #8]
 8007840:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007844:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007848:	2208      	movs	r2, #8
 800784a:	4629      	mov	r1, r5
 800784c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007850:	f7fd fbf4 	bl	800503c <memset>
 8007854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800785c:	e7e9      	b.n	8007832 <__sfp+0x42>
 800785e:	bf00      	nop
 8007860:	08008f54 	.word	0x08008f54
 8007864:	ffff0001 	.word	0xffff0001

08007868 <_fwalk_reent>:
 8007868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800786c:	4680      	mov	r8, r0
 800786e:	4689      	mov	r9, r1
 8007870:	2600      	movs	r6, #0
 8007872:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007876:	b914      	cbnz	r4, 800787e <_fwalk_reent+0x16>
 8007878:	4630      	mov	r0, r6
 800787a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007882:	3f01      	subs	r7, #1
 8007884:	d501      	bpl.n	800788a <_fwalk_reent+0x22>
 8007886:	6824      	ldr	r4, [r4, #0]
 8007888:	e7f5      	b.n	8007876 <_fwalk_reent+0xe>
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d907      	bls.n	80078a0 <_fwalk_reent+0x38>
 8007890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007894:	3301      	adds	r3, #1
 8007896:	d003      	beq.n	80078a0 <_fwalk_reent+0x38>
 8007898:	4629      	mov	r1, r5
 800789a:	4640      	mov	r0, r8
 800789c:	47c8      	blx	r9
 800789e:	4306      	orrs	r6, r0
 80078a0:	3568      	adds	r5, #104	; 0x68
 80078a2:	e7ee      	b.n	8007882 <_fwalk_reent+0x1a>

080078a4 <rshift>:
 80078a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a6:	6906      	ldr	r6, [r0, #16]
 80078a8:	114b      	asrs	r3, r1, #5
 80078aa:	429e      	cmp	r6, r3
 80078ac:	f100 0414 	add.w	r4, r0, #20
 80078b0:	dd31      	ble.n	8007916 <rshift+0x72>
 80078b2:	f011 011f 	ands.w	r1, r1, #31
 80078b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80078ba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80078be:	d108      	bne.n	80078d2 <rshift+0x2e>
 80078c0:	4621      	mov	r1, r4
 80078c2:	42b2      	cmp	r2, r6
 80078c4:	460b      	mov	r3, r1
 80078c6:	d211      	bcs.n	80078ec <rshift+0x48>
 80078c8:	f852 3b04 	ldr.w	r3, [r2], #4
 80078cc:	f841 3b04 	str.w	r3, [r1], #4
 80078d0:	e7f7      	b.n	80078c2 <rshift+0x1e>
 80078d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80078d6:	4623      	mov	r3, r4
 80078d8:	f1c1 0c20 	rsb	ip, r1, #32
 80078dc:	40cd      	lsrs	r5, r1
 80078de:	3204      	adds	r2, #4
 80078e0:	42b2      	cmp	r2, r6
 80078e2:	4617      	mov	r7, r2
 80078e4:	d30d      	bcc.n	8007902 <rshift+0x5e>
 80078e6:	601d      	str	r5, [r3, #0]
 80078e8:	b105      	cbz	r5, 80078ec <rshift+0x48>
 80078ea:	3304      	adds	r3, #4
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	eba3 0204 	sub.w	r2, r3, r4
 80078f2:	bf08      	it	eq
 80078f4:	2300      	moveq	r3, #0
 80078f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078fa:	6102      	str	r2, [r0, #16]
 80078fc:	bf08      	it	eq
 80078fe:	6143      	streq	r3, [r0, #20]
 8007900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007902:	683f      	ldr	r7, [r7, #0]
 8007904:	fa07 f70c 	lsl.w	r7, r7, ip
 8007908:	433d      	orrs	r5, r7
 800790a:	f843 5b04 	str.w	r5, [r3], #4
 800790e:	f852 5b04 	ldr.w	r5, [r2], #4
 8007912:	40cd      	lsrs	r5, r1
 8007914:	e7e4      	b.n	80078e0 <rshift+0x3c>
 8007916:	4623      	mov	r3, r4
 8007918:	e7e8      	b.n	80078ec <rshift+0x48>

0800791a <__hexdig_fun>:
 800791a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800791e:	2b09      	cmp	r3, #9
 8007920:	d802      	bhi.n	8007928 <__hexdig_fun+0xe>
 8007922:	3820      	subs	r0, #32
 8007924:	b2c0      	uxtb	r0, r0
 8007926:	4770      	bx	lr
 8007928:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800792c:	2b05      	cmp	r3, #5
 800792e:	d801      	bhi.n	8007934 <__hexdig_fun+0x1a>
 8007930:	3847      	subs	r0, #71	; 0x47
 8007932:	e7f7      	b.n	8007924 <__hexdig_fun+0xa>
 8007934:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007938:	2b05      	cmp	r3, #5
 800793a:	d801      	bhi.n	8007940 <__hexdig_fun+0x26>
 800793c:	3827      	subs	r0, #39	; 0x27
 800793e:	e7f1      	b.n	8007924 <__hexdig_fun+0xa>
 8007940:	2000      	movs	r0, #0
 8007942:	4770      	bx	lr

08007944 <__gethex>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	b08b      	sub	sp, #44	; 0x2c
 800794a:	9002      	str	r0, [sp, #8]
 800794c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800794e:	468a      	mov	sl, r1
 8007950:	4690      	mov	r8, r2
 8007952:	9306      	str	r3, [sp, #24]
 8007954:	f000 face 	bl	8007ef4 <__localeconv_l>
 8007958:	6803      	ldr	r3, [r0, #0]
 800795a:	f04f 0b00 	mov.w	fp, #0
 800795e:	4618      	mov	r0, r3
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	f7f8 fbf5 	bl	8000150 <strlen>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	9001      	str	r0, [sp, #4]
 800796a:	4403      	add	r3, r0
 800796c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007970:	9307      	str	r3, [sp, #28]
 8007972:	f8da 3000 	ldr.w	r3, [sl]
 8007976:	3302      	adds	r3, #2
 8007978:	461f      	mov	r7, r3
 800797a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800797e:	2830      	cmp	r0, #48	; 0x30
 8007980:	d06c      	beq.n	8007a5c <__gethex+0x118>
 8007982:	f7ff ffca 	bl	800791a <__hexdig_fun>
 8007986:	4604      	mov	r4, r0
 8007988:	2800      	cmp	r0, #0
 800798a:	d16a      	bne.n	8007a62 <__gethex+0x11e>
 800798c:	9a01      	ldr	r2, [sp, #4]
 800798e:	9903      	ldr	r1, [sp, #12]
 8007990:	4638      	mov	r0, r7
 8007992:	f001 f994 	bl	8008cbe <strncmp>
 8007996:	2800      	cmp	r0, #0
 8007998:	d166      	bne.n	8007a68 <__gethex+0x124>
 800799a:	9b01      	ldr	r3, [sp, #4]
 800799c:	5cf8      	ldrb	r0, [r7, r3]
 800799e:	18fe      	adds	r6, r7, r3
 80079a0:	f7ff ffbb 	bl	800791a <__hexdig_fun>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d062      	beq.n	8007a6e <__gethex+0x12a>
 80079a8:	4633      	mov	r3, r6
 80079aa:	7818      	ldrb	r0, [r3, #0]
 80079ac:	461f      	mov	r7, r3
 80079ae:	2830      	cmp	r0, #48	; 0x30
 80079b0:	f103 0301 	add.w	r3, r3, #1
 80079b4:	d0f9      	beq.n	80079aa <__gethex+0x66>
 80079b6:	f7ff ffb0 	bl	800791a <__hexdig_fun>
 80079ba:	fab0 f580 	clz	r5, r0
 80079be:	4634      	mov	r4, r6
 80079c0:	f04f 0b01 	mov.w	fp, #1
 80079c4:	096d      	lsrs	r5, r5, #5
 80079c6:	463a      	mov	r2, r7
 80079c8:	4616      	mov	r6, r2
 80079ca:	7830      	ldrb	r0, [r6, #0]
 80079cc:	3201      	adds	r2, #1
 80079ce:	f7ff ffa4 	bl	800791a <__hexdig_fun>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d1f8      	bne.n	80079c8 <__gethex+0x84>
 80079d6:	9a01      	ldr	r2, [sp, #4]
 80079d8:	9903      	ldr	r1, [sp, #12]
 80079da:	4630      	mov	r0, r6
 80079dc:	f001 f96f 	bl	8008cbe <strncmp>
 80079e0:	b950      	cbnz	r0, 80079f8 <__gethex+0xb4>
 80079e2:	b954      	cbnz	r4, 80079fa <__gethex+0xb6>
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	18f4      	adds	r4, r6, r3
 80079e8:	4622      	mov	r2, r4
 80079ea:	4616      	mov	r6, r2
 80079ec:	7830      	ldrb	r0, [r6, #0]
 80079ee:	3201      	adds	r2, #1
 80079f0:	f7ff ff93 	bl	800791a <__hexdig_fun>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1f8      	bne.n	80079ea <__gethex+0xa6>
 80079f8:	b10c      	cbz	r4, 80079fe <__gethex+0xba>
 80079fa:	1ba4      	subs	r4, r4, r6
 80079fc:	00a4      	lsls	r4, r4, #2
 80079fe:	7833      	ldrb	r3, [r6, #0]
 8007a00:	2b50      	cmp	r3, #80	; 0x50
 8007a02:	d001      	beq.n	8007a08 <__gethex+0xc4>
 8007a04:	2b70      	cmp	r3, #112	; 0x70
 8007a06:	d140      	bne.n	8007a8a <__gethex+0x146>
 8007a08:	7873      	ldrb	r3, [r6, #1]
 8007a0a:	2b2b      	cmp	r3, #43	; 0x2b
 8007a0c:	d031      	beq.n	8007a72 <__gethex+0x12e>
 8007a0e:	2b2d      	cmp	r3, #45	; 0x2d
 8007a10:	d033      	beq.n	8007a7a <__gethex+0x136>
 8007a12:	f04f 0900 	mov.w	r9, #0
 8007a16:	1c71      	adds	r1, r6, #1
 8007a18:	7808      	ldrb	r0, [r1, #0]
 8007a1a:	f7ff ff7e 	bl	800791a <__hexdig_fun>
 8007a1e:	1e43      	subs	r3, r0, #1
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b18      	cmp	r3, #24
 8007a24:	d831      	bhi.n	8007a8a <__gethex+0x146>
 8007a26:	f1a0 0210 	sub.w	r2, r0, #16
 8007a2a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a2e:	f7ff ff74 	bl	800791a <__hexdig_fun>
 8007a32:	1e43      	subs	r3, r0, #1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b18      	cmp	r3, #24
 8007a38:	d922      	bls.n	8007a80 <__gethex+0x13c>
 8007a3a:	f1b9 0f00 	cmp.w	r9, #0
 8007a3e:	d000      	beq.n	8007a42 <__gethex+0xfe>
 8007a40:	4252      	negs	r2, r2
 8007a42:	4414      	add	r4, r2
 8007a44:	f8ca 1000 	str.w	r1, [sl]
 8007a48:	b30d      	cbz	r5, 8007a8e <__gethex+0x14a>
 8007a4a:	f1bb 0f00 	cmp.w	fp, #0
 8007a4e:	bf0c      	ite	eq
 8007a50:	2706      	moveq	r7, #6
 8007a52:	2700      	movne	r7, #0
 8007a54:	4638      	mov	r0, r7
 8007a56:	b00b      	add	sp, #44	; 0x2c
 8007a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5c:	f10b 0b01 	add.w	fp, fp, #1
 8007a60:	e78a      	b.n	8007978 <__gethex+0x34>
 8007a62:	2500      	movs	r5, #0
 8007a64:	462c      	mov	r4, r5
 8007a66:	e7ae      	b.n	80079c6 <__gethex+0x82>
 8007a68:	463e      	mov	r6, r7
 8007a6a:	2501      	movs	r5, #1
 8007a6c:	e7c7      	b.n	80079fe <__gethex+0xba>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	e7fb      	b.n	8007a6a <__gethex+0x126>
 8007a72:	f04f 0900 	mov.w	r9, #0
 8007a76:	1cb1      	adds	r1, r6, #2
 8007a78:	e7ce      	b.n	8007a18 <__gethex+0xd4>
 8007a7a:	f04f 0901 	mov.w	r9, #1
 8007a7e:	e7fa      	b.n	8007a76 <__gethex+0x132>
 8007a80:	230a      	movs	r3, #10
 8007a82:	fb03 0202 	mla	r2, r3, r2, r0
 8007a86:	3a10      	subs	r2, #16
 8007a88:	e7cf      	b.n	8007a2a <__gethex+0xe6>
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	e7da      	b.n	8007a44 <__gethex+0x100>
 8007a8e:	4629      	mov	r1, r5
 8007a90:	1bf3      	subs	r3, r6, r7
 8007a92:	3b01      	subs	r3, #1
 8007a94:	2b07      	cmp	r3, #7
 8007a96:	dc49      	bgt.n	8007b2c <__gethex+0x1e8>
 8007a98:	9802      	ldr	r0, [sp, #8]
 8007a9a:	f000 fad2 	bl	8008042 <_Balloc>
 8007a9e:	f04f 0b00 	mov.w	fp, #0
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	46da      	mov	sl, fp
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	f100 0914 	add.w	r9, r0, #20
 8007aac:	f1c3 0301 	rsb	r3, r3, #1
 8007ab0:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ab4:	9308      	str	r3, [sp, #32]
 8007ab6:	42b7      	cmp	r7, r6
 8007ab8:	d33b      	bcc.n	8007b32 <__gethex+0x1ee>
 8007aba:	9804      	ldr	r0, [sp, #16]
 8007abc:	f840 ab04 	str.w	sl, [r0], #4
 8007ac0:	eba0 0009 	sub.w	r0, r0, r9
 8007ac4:	1080      	asrs	r0, r0, #2
 8007ac6:	6128      	str	r0, [r5, #16]
 8007ac8:	0147      	lsls	r7, r0, #5
 8007aca:	4650      	mov	r0, sl
 8007acc:	f000 fb7d 	bl	80081ca <__hi0bits>
 8007ad0:	f8d8 6000 	ldr.w	r6, [r8]
 8007ad4:	1a3f      	subs	r7, r7, r0
 8007ad6:	42b7      	cmp	r7, r6
 8007ad8:	dd64      	ble.n	8007ba4 <__gethex+0x260>
 8007ada:	1bbf      	subs	r7, r7, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 fe87 	bl	80087f2 <__any_on>
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	b178      	cbz	r0, 8007b08 <__gethex+0x1c4>
 8007ae8:	f04f 0a01 	mov.w	sl, #1
 8007aec:	1e7b      	subs	r3, r7, #1
 8007aee:	1159      	asrs	r1, r3, #5
 8007af0:	f003 021f 	and.w	r2, r3, #31
 8007af4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007af8:	fa0a f202 	lsl.w	r2, sl, r2
 8007afc:	420a      	tst	r2, r1
 8007afe:	d003      	beq.n	8007b08 <__gethex+0x1c4>
 8007b00:	4553      	cmp	r3, sl
 8007b02:	dc46      	bgt.n	8007b92 <__gethex+0x24e>
 8007b04:	f04f 0a02 	mov.w	sl, #2
 8007b08:	4639      	mov	r1, r7
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f7ff feca 	bl	80078a4 <rshift>
 8007b10:	443c      	add	r4, r7
 8007b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	da52      	bge.n	8007bc0 <__gethex+0x27c>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	9802      	ldr	r0, [sp, #8]
 8007b1e:	f000 fac4 	bl	80080aa <_Bfree>
 8007b22:	2300      	movs	r3, #0
 8007b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b26:	27a3      	movs	r7, #163	; 0xa3
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	e793      	b.n	8007a54 <__gethex+0x110>
 8007b2c:	3101      	adds	r1, #1
 8007b2e:	105b      	asrs	r3, r3, #1
 8007b30:	e7b0      	b.n	8007a94 <__gethex+0x150>
 8007b32:	1e73      	subs	r3, r6, #1
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	9a07      	ldr	r2, [sp, #28]
 8007b38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d018      	beq.n	8007b72 <__gethex+0x22e>
 8007b40:	f1bb 0f20 	cmp.w	fp, #32
 8007b44:	d107      	bne.n	8007b56 <__gethex+0x212>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	f8c3 a000 	str.w	sl, [r3]
 8007b4c:	f04f 0a00 	mov.w	sl, #0
 8007b50:	46d3      	mov	fp, sl
 8007b52:	3304      	adds	r3, #4
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007b5a:	f7ff fede 	bl	800791a <__hexdig_fun>
 8007b5e:	f000 000f 	and.w	r0, r0, #15
 8007b62:	fa00 f00b 	lsl.w	r0, r0, fp
 8007b66:	ea4a 0a00 	orr.w	sl, sl, r0
 8007b6a:	f10b 0b04 	add.w	fp, fp, #4
 8007b6e:	9b05      	ldr	r3, [sp, #20]
 8007b70:	e00d      	b.n	8007b8e <__gethex+0x24a>
 8007b72:	9b05      	ldr	r3, [sp, #20]
 8007b74:	9a08      	ldr	r2, [sp, #32]
 8007b76:	4413      	add	r3, r2
 8007b78:	42bb      	cmp	r3, r7
 8007b7a:	d3e1      	bcc.n	8007b40 <__gethex+0x1fc>
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	9a01      	ldr	r2, [sp, #4]
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	9309      	str	r3, [sp, #36]	; 0x24
 8007b84:	f001 f89b 	bl	8008cbe <strncmp>
 8007b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1d8      	bne.n	8007b40 <__gethex+0x1fc>
 8007b8e:	461e      	mov	r6, r3
 8007b90:	e791      	b.n	8007ab6 <__gethex+0x172>
 8007b92:	1eb9      	subs	r1, r7, #2
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 fe2c 	bl	80087f2 <__any_on>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d0b2      	beq.n	8007b04 <__gethex+0x1c0>
 8007b9e:	f04f 0a03 	mov.w	sl, #3
 8007ba2:	e7b1      	b.n	8007b08 <__gethex+0x1c4>
 8007ba4:	da09      	bge.n	8007bba <__gethex+0x276>
 8007ba6:	1bf7      	subs	r7, r6, r7
 8007ba8:	4629      	mov	r1, r5
 8007baa:	463a      	mov	r2, r7
 8007bac:	9802      	ldr	r0, [sp, #8]
 8007bae:	f000 fc47 	bl	8008440 <__lshift>
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	1be4      	subs	r4, r4, r7
 8007bb6:	f100 0914 	add.w	r9, r0, #20
 8007bba:	f04f 0a00 	mov.w	sl, #0
 8007bbe:	e7a8      	b.n	8007b12 <__gethex+0x1ce>
 8007bc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007bc4:	42a0      	cmp	r0, r4
 8007bc6:	dd6b      	ble.n	8007ca0 <__gethex+0x35c>
 8007bc8:	1b04      	subs	r4, r0, r4
 8007bca:	42a6      	cmp	r6, r4
 8007bcc:	dc2e      	bgt.n	8007c2c <__gethex+0x2e8>
 8007bce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d022      	beq.n	8007c1c <__gethex+0x2d8>
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d024      	beq.n	8007c24 <__gethex+0x2e0>
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d115      	bne.n	8007c0a <__gethex+0x2c6>
 8007bde:	42a6      	cmp	r6, r4
 8007be0:	d113      	bne.n	8007c0a <__gethex+0x2c6>
 8007be2:	2e01      	cmp	r6, #1
 8007be4:	dc0b      	bgt.n	8007bfe <__gethex+0x2ba>
 8007be6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bea:	9a06      	ldr	r2, [sp, #24]
 8007bec:	2762      	movs	r7, #98	; 0x62
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	612b      	str	r3, [r5, #16]
 8007bf4:	f8c9 3000 	str.w	r3, [r9]
 8007bf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bfa:	601d      	str	r5, [r3, #0]
 8007bfc:	e72a      	b.n	8007a54 <__gethex+0x110>
 8007bfe:	1e71      	subs	r1, r6, #1
 8007c00:	4628      	mov	r0, r5
 8007c02:	f000 fdf6 	bl	80087f2 <__any_on>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d1ed      	bne.n	8007be6 <__gethex+0x2a2>
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	9802      	ldr	r0, [sp, #8]
 8007c0e:	f000 fa4c 	bl	80080aa <_Bfree>
 8007c12:	2300      	movs	r3, #0
 8007c14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c16:	2750      	movs	r7, #80	; 0x50
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e71b      	b.n	8007a54 <__gethex+0x110>
 8007c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0e1      	beq.n	8007be6 <__gethex+0x2a2>
 8007c22:	e7f2      	b.n	8007c0a <__gethex+0x2c6>
 8007c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1dd      	bne.n	8007be6 <__gethex+0x2a2>
 8007c2a:	e7ee      	b.n	8007c0a <__gethex+0x2c6>
 8007c2c:	1e67      	subs	r7, r4, #1
 8007c2e:	f1ba 0f00 	cmp.w	sl, #0
 8007c32:	d132      	bne.n	8007c9a <__gethex+0x356>
 8007c34:	b127      	cbz	r7, 8007c40 <__gethex+0x2fc>
 8007c36:	4639      	mov	r1, r7
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 fdda 	bl	80087f2 <__any_on>
 8007c3e:	4682      	mov	sl, r0
 8007c40:	2301      	movs	r3, #1
 8007c42:	117a      	asrs	r2, r7, #5
 8007c44:	f007 071f 	and.w	r7, r7, #31
 8007c48:	fa03 f707 	lsl.w	r7, r3, r7
 8007c4c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007c50:	4621      	mov	r1, r4
 8007c52:	421f      	tst	r7, r3
 8007c54:	f04f 0702 	mov.w	r7, #2
 8007c58:	4628      	mov	r0, r5
 8007c5a:	bf18      	it	ne
 8007c5c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007c60:	1b36      	subs	r6, r6, r4
 8007c62:	f7ff fe1f 	bl	80078a4 <rshift>
 8007c66:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007c6a:	f1ba 0f00 	cmp.w	sl, #0
 8007c6e:	d048      	beq.n	8007d02 <__gethex+0x3be>
 8007c70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d015      	beq.n	8007ca4 <__gethex+0x360>
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d017      	beq.n	8007cac <__gethex+0x368>
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d109      	bne.n	8007c94 <__gethex+0x350>
 8007c80:	f01a 0f02 	tst.w	sl, #2
 8007c84:	d006      	beq.n	8007c94 <__gethex+0x350>
 8007c86:	f8d9 3000 	ldr.w	r3, [r9]
 8007c8a:	ea4a 0a03 	orr.w	sl, sl, r3
 8007c8e:	f01a 0f01 	tst.w	sl, #1
 8007c92:	d10e      	bne.n	8007cb2 <__gethex+0x36e>
 8007c94:	f047 0710 	orr.w	r7, r7, #16
 8007c98:	e033      	b.n	8007d02 <__gethex+0x3be>
 8007c9a:	f04f 0a01 	mov.w	sl, #1
 8007c9e:	e7cf      	b.n	8007c40 <__gethex+0x2fc>
 8007ca0:	2701      	movs	r7, #1
 8007ca2:	e7e2      	b.n	8007c6a <__gethex+0x326>
 8007ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ca6:	f1c3 0301 	rsb	r3, r3, #1
 8007caa:	9315      	str	r3, [sp, #84]	; 0x54
 8007cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0f0      	beq.n	8007c94 <__gethex+0x350>
 8007cb2:	f04f 0c00 	mov.w	ip, #0
 8007cb6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007cba:	f105 0314 	add.w	r3, r5, #20
 8007cbe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007cc2:	eb03 010a 	add.w	r1, r3, sl
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ccc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007cd0:	d01c      	beq.n	8007d0c <__gethex+0x3c8>
 8007cd2:	3201      	adds	r2, #1
 8007cd4:	6002      	str	r2, [r0, #0]
 8007cd6:	2f02      	cmp	r7, #2
 8007cd8:	f105 0314 	add.w	r3, r5, #20
 8007cdc:	d138      	bne.n	8007d50 <__gethex+0x40c>
 8007cde:	f8d8 2000 	ldr.w	r2, [r8]
 8007ce2:	3a01      	subs	r2, #1
 8007ce4:	42b2      	cmp	r2, r6
 8007ce6:	d10a      	bne.n	8007cfe <__gethex+0x3ba>
 8007ce8:	2201      	movs	r2, #1
 8007cea:	1171      	asrs	r1, r6, #5
 8007cec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cf0:	f006 061f 	and.w	r6, r6, #31
 8007cf4:	fa02 f606 	lsl.w	r6, r2, r6
 8007cf8:	421e      	tst	r6, r3
 8007cfa:	bf18      	it	ne
 8007cfc:	4617      	movne	r7, r2
 8007cfe:	f047 0720 	orr.w	r7, r7, #32
 8007d02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d04:	601d      	str	r5, [r3, #0]
 8007d06:	9b06      	ldr	r3, [sp, #24]
 8007d08:	601c      	str	r4, [r3, #0]
 8007d0a:	e6a3      	b.n	8007a54 <__gethex+0x110>
 8007d0c:	4299      	cmp	r1, r3
 8007d0e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d12:	d8d8      	bhi.n	8007cc6 <__gethex+0x382>
 8007d14:	68ab      	ldr	r3, [r5, #8]
 8007d16:	4599      	cmp	r9, r3
 8007d18:	db12      	blt.n	8007d40 <__gethex+0x3fc>
 8007d1a:	6869      	ldr	r1, [r5, #4]
 8007d1c:	9802      	ldr	r0, [sp, #8]
 8007d1e:	3101      	adds	r1, #1
 8007d20:	f000 f98f 	bl	8008042 <_Balloc>
 8007d24:	4683      	mov	fp, r0
 8007d26:	692a      	ldr	r2, [r5, #16]
 8007d28:	f105 010c 	add.w	r1, r5, #12
 8007d2c:	3202      	adds	r2, #2
 8007d2e:	0092      	lsls	r2, r2, #2
 8007d30:	300c      	adds	r0, #12
 8007d32:	f000 f97b 	bl	800802c <memcpy>
 8007d36:	4629      	mov	r1, r5
 8007d38:	9802      	ldr	r0, [sp, #8]
 8007d3a:	f000 f9b6 	bl	80080aa <_Bfree>
 8007d3e:	465d      	mov	r5, fp
 8007d40:	692b      	ldr	r3, [r5, #16]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	612a      	str	r2, [r5, #16]
 8007d46:	2201      	movs	r2, #1
 8007d48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007d4c:	615a      	str	r2, [r3, #20]
 8007d4e:	e7c2      	b.n	8007cd6 <__gethex+0x392>
 8007d50:	692a      	ldr	r2, [r5, #16]
 8007d52:	454a      	cmp	r2, r9
 8007d54:	dd0b      	ble.n	8007d6e <__gethex+0x42a>
 8007d56:	2101      	movs	r1, #1
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f7ff fda3 	bl	80078a4 <rshift>
 8007d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d62:	3401      	adds	r4, #1
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	f6ff aed8 	blt.w	8007b1a <__gethex+0x1d6>
 8007d6a:	2701      	movs	r7, #1
 8007d6c:	e7c7      	b.n	8007cfe <__gethex+0x3ba>
 8007d6e:	f016 061f 	ands.w	r6, r6, #31
 8007d72:	d0fa      	beq.n	8007d6a <__gethex+0x426>
 8007d74:	449a      	add	sl, r3
 8007d76:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007d7a:	f000 fa26 	bl	80081ca <__hi0bits>
 8007d7e:	f1c6 0620 	rsb	r6, r6, #32
 8007d82:	42b0      	cmp	r0, r6
 8007d84:	dbe7      	blt.n	8007d56 <__gethex+0x412>
 8007d86:	e7f0      	b.n	8007d6a <__gethex+0x426>

08007d88 <L_shift>:
 8007d88:	f1c2 0208 	rsb	r2, r2, #8
 8007d8c:	0092      	lsls	r2, r2, #2
 8007d8e:	b570      	push	{r4, r5, r6, lr}
 8007d90:	f1c2 0620 	rsb	r6, r2, #32
 8007d94:	6843      	ldr	r3, [r0, #4]
 8007d96:	6804      	ldr	r4, [r0, #0]
 8007d98:	fa03 f506 	lsl.w	r5, r3, r6
 8007d9c:	432c      	orrs	r4, r5
 8007d9e:	40d3      	lsrs	r3, r2
 8007da0:	6004      	str	r4, [r0, #0]
 8007da2:	f840 3f04 	str.w	r3, [r0, #4]!
 8007da6:	4288      	cmp	r0, r1
 8007da8:	d3f4      	bcc.n	8007d94 <L_shift+0xc>
 8007daa:	bd70      	pop	{r4, r5, r6, pc}

08007dac <__match>:
 8007dac:	b530      	push	{r4, r5, lr}
 8007dae:	6803      	ldr	r3, [r0, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007db6:	b914      	cbnz	r4, 8007dbe <__match+0x12>
 8007db8:	6003      	str	r3, [r0, #0]
 8007dba:	2001      	movs	r0, #1
 8007dbc:	bd30      	pop	{r4, r5, pc}
 8007dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007dc6:	2d19      	cmp	r5, #25
 8007dc8:	bf98      	it	ls
 8007dca:	3220      	addls	r2, #32
 8007dcc:	42a2      	cmp	r2, r4
 8007dce:	d0f0      	beq.n	8007db2 <__match+0x6>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e7f3      	b.n	8007dbc <__match+0x10>

08007dd4 <__hexnan>:
 8007dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	2500      	movs	r5, #0
 8007dda:	680b      	ldr	r3, [r1, #0]
 8007ddc:	4682      	mov	sl, r0
 8007dde:	115f      	asrs	r7, r3, #5
 8007de0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007de4:	f013 031f 	ands.w	r3, r3, #31
 8007de8:	bf18      	it	ne
 8007dea:	3704      	addne	r7, #4
 8007dec:	1f3e      	subs	r6, r7, #4
 8007dee:	4690      	mov	r8, r2
 8007df0:	46b1      	mov	r9, r6
 8007df2:	4634      	mov	r4, r6
 8007df4:	46ab      	mov	fp, r5
 8007df6:	b087      	sub	sp, #28
 8007df8:	6801      	ldr	r1, [r0, #0]
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	f847 5c04 	str.w	r5, [r7, #-4]
 8007e00:	9502      	str	r5, [sp, #8]
 8007e02:	784a      	ldrb	r2, [r1, #1]
 8007e04:	1c4b      	adds	r3, r1, #1
 8007e06:	9303      	str	r3, [sp, #12]
 8007e08:	b342      	cbz	r2, 8007e5c <__hexnan+0x88>
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	9105      	str	r1, [sp, #20]
 8007e0e:	9204      	str	r2, [sp, #16]
 8007e10:	f7ff fd83 	bl	800791a <__hexdig_fun>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d143      	bne.n	8007ea0 <__hexnan+0xcc>
 8007e18:	9a04      	ldr	r2, [sp, #16]
 8007e1a:	9905      	ldr	r1, [sp, #20]
 8007e1c:	2a20      	cmp	r2, #32
 8007e1e:	d818      	bhi.n	8007e52 <__hexnan+0x7e>
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	459b      	cmp	fp, r3
 8007e24:	dd13      	ble.n	8007e4e <__hexnan+0x7a>
 8007e26:	454c      	cmp	r4, r9
 8007e28:	d206      	bcs.n	8007e38 <__hexnan+0x64>
 8007e2a:	2d07      	cmp	r5, #7
 8007e2c:	dc04      	bgt.n	8007e38 <__hexnan+0x64>
 8007e2e:	462a      	mov	r2, r5
 8007e30:	4649      	mov	r1, r9
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7ff ffa8 	bl	8007d88 <L_shift>
 8007e38:	4544      	cmp	r4, r8
 8007e3a:	d944      	bls.n	8007ec6 <__hexnan+0xf2>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f1a4 0904 	sub.w	r9, r4, #4
 8007e42:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e46:	461d      	mov	r5, r3
 8007e48:	464c      	mov	r4, r9
 8007e4a:	f8cd b008 	str.w	fp, [sp, #8]
 8007e4e:	9903      	ldr	r1, [sp, #12]
 8007e50:	e7d7      	b.n	8007e02 <__hexnan+0x2e>
 8007e52:	2a29      	cmp	r2, #41	; 0x29
 8007e54:	d14a      	bne.n	8007eec <__hexnan+0x118>
 8007e56:	3102      	adds	r1, #2
 8007e58:	f8ca 1000 	str.w	r1, [sl]
 8007e5c:	f1bb 0f00 	cmp.w	fp, #0
 8007e60:	d044      	beq.n	8007eec <__hexnan+0x118>
 8007e62:	454c      	cmp	r4, r9
 8007e64:	d206      	bcs.n	8007e74 <__hexnan+0xa0>
 8007e66:	2d07      	cmp	r5, #7
 8007e68:	dc04      	bgt.n	8007e74 <__hexnan+0xa0>
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7ff ff8a 	bl	8007d88 <L_shift>
 8007e74:	4544      	cmp	r4, r8
 8007e76:	d928      	bls.n	8007eca <__hexnan+0xf6>
 8007e78:	4643      	mov	r3, r8
 8007e7a:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e7e:	42a6      	cmp	r6, r4
 8007e80:	f843 2b04 	str.w	r2, [r3], #4
 8007e84:	d2f9      	bcs.n	8007e7a <__hexnan+0xa6>
 8007e86:	2200      	movs	r2, #0
 8007e88:	f843 2b04 	str.w	r2, [r3], #4
 8007e8c:	429e      	cmp	r6, r3
 8007e8e:	d2fb      	bcs.n	8007e88 <__hexnan+0xb4>
 8007e90:	6833      	ldr	r3, [r6, #0]
 8007e92:	b91b      	cbnz	r3, 8007e9c <__hexnan+0xc8>
 8007e94:	4546      	cmp	r6, r8
 8007e96:	d127      	bne.n	8007ee8 <__hexnan+0x114>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	6033      	str	r3, [r6, #0]
 8007e9c:	2005      	movs	r0, #5
 8007e9e:	e026      	b.n	8007eee <__hexnan+0x11a>
 8007ea0:	3501      	adds	r5, #1
 8007ea2:	2d08      	cmp	r5, #8
 8007ea4:	f10b 0b01 	add.w	fp, fp, #1
 8007ea8:	dd06      	ble.n	8007eb8 <__hexnan+0xe4>
 8007eaa:	4544      	cmp	r4, r8
 8007eac:	d9cf      	bls.n	8007e4e <__hexnan+0x7a>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2501      	movs	r5, #1
 8007eb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eb6:	3c04      	subs	r4, #4
 8007eb8:	6822      	ldr	r2, [r4, #0]
 8007eba:	f000 000f 	and.w	r0, r0, #15
 8007ebe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007ec2:	6020      	str	r0, [r4, #0]
 8007ec4:	e7c3      	b.n	8007e4e <__hexnan+0x7a>
 8007ec6:	2508      	movs	r5, #8
 8007ec8:	e7c1      	b.n	8007e4e <__hexnan+0x7a>
 8007eca:	9b01      	ldr	r3, [sp, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0df      	beq.n	8007e90 <__hexnan+0xbc>
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ed4:	f1c3 0320 	rsb	r3, r3, #32
 8007ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8007edc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007ee0:	401a      	ands	r2, r3
 8007ee2:	f847 2c04 	str.w	r2, [r7, #-4]
 8007ee6:	e7d3      	b.n	8007e90 <__hexnan+0xbc>
 8007ee8:	3e04      	subs	r6, #4
 8007eea:	e7d1      	b.n	8007e90 <__hexnan+0xbc>
 8007eec:	2004      	movs	r0, #4
 8007eee:	b007      	add	sp, #28
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ef4 <__localeconv_l>:
 8007ef4:	30f0      	adds	r0, #240	; 0xf0
 8007ef6:	4770      	bx	lr

08007ef8 <_localeconv_r>:
 8007ef8:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <_localeconv_r+0x14>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a18      	ldr	r0, [r3, #32]
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <_localeconv_r+0x18>)
 8007f00:	2800      	cmp	r0, #0
 8007f02:	bf08      	it	eq
 8007f04:	4618      	moveq	r0, r3
 8007f06:	30f0      	adds	r0, #240	; 0xf0
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000020 	.word	0x20000020
 8007f10:	20000084 	.word	0x20000084

08007f14 <__swhatbuf_r>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	460e      	mov	r6, r1
 8007f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1c:	b096      	sub	sp, #88	; 0x58
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	4614      	mov	r4, r2
 8007f22:	461d      	mov	r5, r3
 8007f24:	da07      	bge.n	8007f36 <__swhatbuf_r+0x22>
 8007f26:	2300      	movs	r3, #0
 8007f28:	602b      	str	r3, [r5, #0]
 8007f2a:	89b3      	ldrh	r3, [r6, #12]
 8007f2c:	061a      	lsls	r2, r3, #24
 8007f2e:	d410      	bmi.n	8007f52 <__swhatbuf_r+0x3e>
 8007f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f34:	e00e      	b.n	8007f54 <__swhatbuf_r+0x40>
 8007f36:	466a      	mov	r2, sp
 8007f38:	f000 ff02 	bl	8008d40 <_fstat_r>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	dbf2      	blt.n	8007f26 <__swhatbuf_r+0x12>
 8007f40:	9a01      	ldr	r2, [sp, #4]
 8007f42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f4a:	425a      	negs	r2, r3
 8007f4c:	415a      	adcs	r2, r3
 8007f4e:	602a      	str	r2, [r5, #0]
 8007f50:	e7ee      	b.n	8007f30 <__swhatbuf_r+0x1c>
 8007f52:	2340      	movs	r3, #64	; 0x40
 8007f54:	2000      	movs	r0, #0
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	b016      	add	sp, #88	; 0x58
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}

08007f5c <__smakebuf_r>:
 8007f5c:	898b      	ldrh	r3, [r1, #12]
 8007f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f60:	079d      	lsls	r5, r3, #30
 8007f62:	4606      	mov	r6, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	d507      	bpl.n	8007f78 <__smakebuf_r+0x1c>
 8007f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	2301      	movs	r3, #1
 8007f72:	6163      	str	r3, [r4, #20]
 8007f74:	b002      	add	sp, #8
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	ab01      	add	r3, sp, #4
 8007f7a:	466a      	mov	r2, sp
 8007f7c:	f7ff ffca 	bl	8007f14 <__swhatbuf_r>
 8007f80:	9900      	ldr	r1, [sp, #0]
 8007f82:	4605      	mov	r5, r0
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 fcaf 	bl	80088e8 <_malloc_r>
 8007f8a:	b948      	cbnz	r0, 8007fa0 <__smakebuf_r+0x44>
 8007f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f90:	059a      	lsls	r2, r3, #22
 8007f92:	d4ef      	bmi.n	8007f74 <__smakebuf_r+0x18>
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	f043 0302 	orr.w	r3, r3, #2
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	e7e3      	b.n	8007f68 <__smakebuf_r+0xc>
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <__smakebuf_r+0x7c>)
 8007fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	6020      	str	r0, [r4, #0]
 8007fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	6120      	str	r0, [r4, #16]
 8007fb2:	6163      	str	r3, [r4, #20]
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	b15b      	cbz	r3, 8007fd0 <__smakebuf_r+0x74>
 8007fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f000 fed1 	bl	8008d64 <_isatty_r>
 8007fc2:	b128      	cbz	r0, 8007fd0 <__smakebuf_r+0x74>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	431d      	orrs	r5, r3
 8007fd4:	81a5      	strh	r5, [r4, #12]
 8007fd6:	e7cd      	b.n	8007f74 <__smakebuf_r+0x18>
 8007fd8:	08007759 	.word	0x08007759

08007fdc <malloc>:
 8007fdc:	4b02      	ldr	r3, [pc, #8]	; (8007fe8 <malloc+0xc>)
 8007fde:	4601      	mov	r1, r0
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	f000 bc81 	b.w	80088e8 <_malloc_r>
 8007fe6:	bf00      	nop
 8007fe8:	20000020 	.word	0x20000020

08007fec <__ascii_mbtowc>:
 8007fec:	b082      	sub	sp, #8
 8007fee:	b901      	cbnz	r1, 8007ff2 <__ascii_mbtowc+0x6>
 8007ff0:	a901      	add	r1, sp, #4
 8007ff2:	b142      	cbz	r2, 8008006 <__ascii_mbtowc+0x1a>
 8007ff4:	b14b      	cbz	r3, 800800a <__ascii_mbtowc+0x1e>
 8007ff6:	7813      	ldrb	r3, [r2, #0]
 8007ff8:	600b      	str	r3, [r1, #0]
 8007ffa:	7812      	ldrb	r2, [r2, #0]
 8007ffc:	1c10      	adds	r0, r2, #0
 8007ffe:	bf18      	it	ne
 8008000:	2001      	movne	r0, #1
 8008002:	b002      	add	sp, #8
 8008004:	4770      	bx	lr
 8008006:	4610      	mov	r0, r2
 8008008:	e7fb      	b.n	8008002 <__ascii_mbtowc+0x16>
 800800a:	f06f 0001 	mvn.w	r0, #1
 800800e:	e7f8      	b.n	8008002 <__ascii_mbtowc+0x16>

08008010 <memchr>:
 8008010:	b510      	push	{r4, lr}
 8008012:	b2c9      	uxtb	r1, r1
 8008014:	4402      	add	r2, r0
 8008016:	4290      	cmp	r0, r2
 8008018:	4603      	mov	r3, r0
 800801a:	d101      	bne.n	8008020 <memchr+0x10>
 800801c:	2300      	movs	r3, #0
 800801e:	e003      	b.n	8008028 <memchr+0x18>
 8008020:	781c      	ldrb	r4, [r3, #0]
 8008022:	3001      	adds	r0, #1
 8008024:	428c      	cmp	r4, r1
 8008026:	d1f6      	bne.n	8008016 <memchr+0x6>
 8008028:	4618      	mov	r0, r3
 800802a:	bd10      	pop	{r4, pc}

0800802c <memcpy>:
 800802c:	b510      	push	{r4, lr}
 800802e:	1e43      	subs	r3, r0, #1
 8008030:	440a      	add	r2, r1
 8008032:	4291      	cmp	r1, r2
 8008034:	d100      	bne.n	8008038 <memcpy+0xc>
 8008036:	bd10      	pop	{r4, pc}
 8008038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800803c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008040:	e7f7      	b.n	8008032 <memcpy+0x6>

08008042 <_Balloc>:
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008046:	4604      	mov	r4, r0
 8008048:	460e      	mov	r6, r1
 800804a:	b93d      	cbnz	r5, 800805c <_Balloc+0x1a>
 800804c:	2010      	movs	r0, #16
 800804e:	f7ff ffc5 	bl	8007fdc <malloc>
 8008052:	6260      	str	r0, [r4, #36]	; 0x24
 8008054:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008058:	6005      	str	r5, [r0, #0]
 800805a:	60c5      	str	r5, [r0, #12]
 800805c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800805e:	68eb      	ldr	r3, [r5, #12]
 8008060:	b183      	cbz	r3, 8008084 <_Balloc+0x42>
 8008062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800806a:	b9b8      	cbnz	r0, 800809c <_Balloc+0x5a>
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f506 	lsl.w	r5, r1, r6
 8008072:	1d6a      	adds	r2, r5, #5
 8008074:	0092      	lsls	r2, r2, #2
 8008076:	4620      	mov	r0, r4
 8008078:	f000 fbdc 	bl	8008834 <_calloc_r>
 800807c:	b160      	cbz	r0, 8008098 <_Balloc+0x56>
 800807e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008082:	e00e      	b.n	80080a2 <_Balloc+0x60>
 8008084:	2221      	movs	r2, #33	; 0x21
 8008086:	2104      	movs	r1, #4
 8008088:	4620      	mov	r0, r4
 800808a:	f000 fbd3 	bl	8008834 <_calloc_r>
 800808e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008090:	60e8      	str	r0, [r5, #12]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e4      	bne.n	8008062 <_Balloc+0x20>
 8008098:	2000      	movs	r0, #0
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	6802      	ldr	r2, [r0, #0]
 800809e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80080a2:	2300      	movs	r3, #0
 80080a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080a8:	e7f7      	b.n	800809a <_Balloc+0x58>

080080aa <_Bfree>:
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080ae:	4606      	mov	r6, r0
 80080b0:	460d      	mov	r5, r1
 80080b2:	b93c      	cbnz	r4, 80080c4 <_Bfree+0x1a>
 80080b4:	2010      	movs	r0, #16
 80080b6:	f7ff ff91 	bl	8007fdc <malloc>
 80080ba:	6270      	str	r0, [r6, #36]	; 0x24
 80080bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080c0:	6004      	str	r4, [r0, #0]
 80080c2:	60c4      	str	r4, [r0, #12]
 80080c4:	b13d      	cbz	r5, 80080d6 <_Bfree+0x2c>
 80080c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80080c8:	686a      	ldr	r2, [r5, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080d0:	6029      	str	r1, [r5, #0]
 80080d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80080d6:	bd70      	pop	{r4, r5, r6, pc}

080080d8 <__multadd>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	461f      	mov	r7, r3
 80080de:	4606      	mov	r6, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	2300      	movs	r3, #0
 80080e4:	690d      	ldr	r5, [r1, #16]
 80080e6:	f101 0c14 	add.w	ip, r1, #20
 80080ea:	f8dc 0000 	ldr.w	r0, [ip]
 80080ee:	3301      	adds	r3, #1
 80080f0:	b281      	uxth	r1, r0
 80080f2:	fb02 7101 	mla	r1, r2, r1, r7
 80080f6:	0c00      	lsrs	r0, r0, #16
 80080f8:	0c0f      	lsrs	r7, r1, #16
 80080fa:	fb02 7000 	mla	r0, r2, r0, r7
 80080fe:	b289      	uxth	r1, r1
 8008100:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008104:	429d      	cmp	r5, r3
 8008106:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800810a:	f84c 1b04 	str.w	r1, [ip], #4
 800810e:	dcec      	bgt.n	80080ea <__multadd+0x12>
 8008110:	b1d7      	cbz	r7, 8008148 <__multadd+0x70>
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	42ab      	cmp	r3, r5
 8008116:	dc12      	bgt.n	800813e <__multadd+0x66>
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	4630      	mov	r0, r6
 800811c:	3101      	adds	r1, #1
 800811e:	f7ff ff90 	bl	8008042 <_Balloc>
 8008122:	4680      	mov	r8, r0
 8008124:	6922      	ldr	r2, [r4, #16]
 8008126:	f104 010c 	add.w	r1, r4, #12
 800812a:	3202      	adds	r2, #2
 800812c:	0092      	lsls	r2, r2, #2
 800812e:	300c      	adds	r0, #12
 8008130:	f7ff ff7c 	bl	800802c <memcpy>
 8008134:	4621      	mov	r1, r4
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ffb7 	bl	80080aa <_Bfree>
 800813c:	4644      	mov	r4, r8
 800813e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008142:	3501      	adds	r5, #1
 8008144:	615f      	str	r7, [r3, #20]
 8008146:	6125      	str	r5, [r4, #16]
 8008148:	4620      	mov	r0, r4
 800814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800814e <__s2b>:
 800814e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008152:	4615      	mov	r5, r2
 8008154:	2209      	movs	r2, #9
 8008156:	461f      	mov	r7, r3
 8008158:	3308      	adds	r3, #8
 800815a:	460c      	mov	r4, r1
 800815c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008160:	4606      	mov	r6, r0
 8008162:	2201      	movs	r2, #1
 8008164:	2100      	movs	r1, #0
 8008166:	429a      	cmp	r2, r3
 8008168:	db20      	blt.n	80081ac <__s2b+0x5e>
 800816a:	4630      	mov	r0, r6
 800816c:	f7ff ff69 	bl	8008042 <_Balloc>
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	2d09      	cmp	r5, #9
 8008174:	6143      	str	r3, [r0, #20]
 8008176:	f04f 0301 	mov.w	r3, #1
 800817a:	6103      	str	r3, [r0, #16]
 800817c:	dd19      	ble.n	80081b2 <__s2b+0x64>
 800817e:	f104 0809 	add.w	r8, r4, #9
 8008182:	46c1      	mov	r9, r8
 8008184:	442c      	add	r4, r5
 8008186:	f819 3b01 	ldrb.w	r3, [r9], #1
 800818a:	4601      	mov	r1, r0
 800818c:	3b30      	subs	r3, #48	; 0x30
 800818e:	220a      	movs	r2, #10
 8008190:	4630      	mov	r0, r6
 8008192:	f7ff ffa1 	bl	80080d8 <__multadd>
 8008196:	45a1      	cmp	r9, r4
 8008198:	d1f5      	bne.n	8008186 <__s2b+0x38>
 800819a:	eb08 0405 	add.w	r4, r8, r5
 800819e:	3c08      	subs	r4, #8
 80081a0:	1b2d      	subs	r5, r5, r4
 80081a2:	1963      	adds	r3, r4, r5
 80081a4:	42bb      	cmp	r3, r7
 80081a6:	db07      	blt.n	80081b8 <__s2b+0x6a>
 80081a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ac:	0052      	lsls	r2, r2, #1
 80081ae:	3101      	adds	r1, #1
 80081b0:	e7d9      	b.n	8008166 <__s2b+0x18>
 80081b2:	340a      	adds	r4, #10
 80081b4:	2509      	movs	r5, #9
 80081b6:	e7f3      	b.n	80081a0 <__s2b+0x52>
 80081b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081bc:	4601      	mov	r1, r0
 80081be:	3b30      	subs	r3, #48	; 0x30
 80081c0:	220a      	movs	r2, #10
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff88 	bl	80080d8 <__multadd>
 80081c8:	e7eb      	b.n	80081a2 <__s2b+0x54>

080081ca <__hi0bits>:
 80081ca:	0c02      	lsrs	r2, r0, #16
 80081cc:	0412      	lsls	r2, r2, #16
 80081ce:	4603      	mov	r3, r0
 80081d0:	b9b2      	cbnz	r2, 8008200 <__hi0bits+0x36>
 80081d2:	0403      	lsls	r3, r0, #16
 80081d4:	2010      	movs	r0, #16
 80081d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80081da:	bf04      	itt	eq
 80081dc:	021b      	lsleq	r3, r3, #8
 80081de:	3008      	addeq	r0, #8
 80081e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80081e4:	bf04      	itt	eq
 80081e6:	011b      	lsleq	r3, r3, #4
 80081e8:	3004      	addeq	r0, #4
 80081ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80081ee:	bf04      	itt	eq
 80081f0:	009b      	lsleq	r3, r3, #2
 80081f2:	3002      	addeq	r0, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	db06      	blt.n	8008206 <__hi0bits+0x3c>
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	d503      	bpl.n	8008204 <__hi0bits+0x3a>
 80081fc:	3001      	adds	r0, #1
 80081fe:	4770      	bx	lr
 8008200:	2000      	movs	r0, #0
 8008202:	e7e8      	b.n	80081d6 <__hi0bits+0xc>
 8008204:	2020      	movs	r0, #32
 8008206:	4770      	bx	lr

08008208 <__lo0bits>:
 8008208:	6803      	ldr	r3, [r0, #0]
 800820a:	4601      	mov	r1, r0
 800820c:	f013 0207 	ands.w	r2, r3, #7
 8008210:	d00b      	beq.n	800822a <__lo0bits+0x22>
 8008212:	07da      	lsls	r2, r3, #31
 8008214:	d423      	bmi.n	800825e <__lo0bits+0x56>
 8008216:	0798      	lsls	r0, r3, #30
 8008218:	bf49      	itett	mi
 800821a:	085b      	lsrmi	r3, r3, #1
 800821c:	089b      	lsrpl	r3, r3, #2
 800821e:	2001      	movmi	r0, #1
 8008220:	600b      	strmi	r3, [r1, #0]
 8008222:	bf5c      	itt	pl
 8008224:	600b      	strpl	r3, [r1, #0]
 8008226:	2002      	movpl	r0, #2
 8008228:	4770      	bx	lr
 800822a:	b298      	uxth	r0, r3
 800822c:	b9a8      	cbnz	r0, 800825a <__lo0bits+0x52>
 800822e:	2010      	movs	r0, #16
 8008230:	0c1b      	lsrs	r3, r3, #16
 8008232:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008236:	bf04      	itt	eq
 8008238:	0a1b      	lsreq	r3, r3, #8
 800823a:	3008      	addeq	r0, #8
 800823c:	071a      	lsls	r2, r3, #28
 800823e:	bf04      	itt	eq
 8008240:	091b      	lsreq	r3, r3, #4
 8008242:	3004      	addeq	r0, #4
 8008244:	079a      	lsls	r2, r3, #30
 8008246:	bf04      	itt	eq
 8008248:	089b      	lsreq	r3, r3, #2
 800824a:	3002      	addeq	r0, #2
 800824c:	07da      	lsls	r2, r3, #31
 800824e:	d402      	bmi.n	8008256 <__lo0bits+0x4e>
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	d006      	beq.n	8008262 <__lo0bits+0x5a>
 8008254:	3001      	adds	r0, #1
 8008256:	600b      	str	r3, [r1, #0]
 8008258:	4770      	bx	lr
 800825a:	4610      	mov	r0, r2
 800825c:	e7e9      	b.n	8008232 <__lo0bits+0x2a>
 800825e:	2000      	movs	r0, #0
 8008260:	4770      	bx	lr
 8008262:	2020      	movs	r0, #32
 8008264:	4770      	bx	lr

08008266 <__i2b>:
 8008266:	b510      	push	{r4, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	2101      	movs	r1, #1
 800826c:	f7ff fee9 	bl	8008042 <_Balloc>
 8008270:	2201      	movs	r2, #1
 8008272:	6144      	str	r4, [r0, #20]
 8008274:	6102      	str	r2, [r0, #16]
 8008276:	bd10      	pop	{r4, pc}

08008278 <__multiply>:
 8008278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	4614      	mov	r4, r2
 800827e:	690a      	ldr	r2, [r1, #16]
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	4688      	mov	r8, r1
 8008284:	429a      	cmp	r2, r3
 8008286:	bfbe      	ittt	lt
 8008288:	460b      	movlt	r3, r1
 800828a:	46a0      	movlt	r8, r4
 800828c:	461c      	movlt	r4, r3
 800828e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008292:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008296:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800829a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800829e:	eb07 0609 	add.w	r6, r7, r9
 80082a2:	42b3      	cmp	r3, r6
 80082a4:	bfb8      	it	lt
 80082a6:	3101      	addlt	r1, #1
 80082a8:	f7ff fecb 	bl	8008042 <_Balloc>
 80082ac:	f100 0514 	add.w	r5, r0, #20
 80082b0:	462b      	mov	r3, r5
 80082b2:	2200      	movs	r2, #0
 80082b4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80082b8:	4573      	cmp	r3, lr
 80082ba:	d316      	bcc.n	80082ea <__multiply+0x72>
 80082bc:	f104 0214 	add.w	r2, r4, #20
 80082c0:	f108 0114 	add.w	r1, r8, #20
 80082c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80082c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	9201      	str	r2, [sp, #4]
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d80c      	bhi.n	80082f0 <__multiply+0x78>
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	dd03      	ble.n	80082e2 <__multiply+0x6a>
 80082da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d05d      	beq.n	800839e <__multiply+0x126>
 80082e2:	6106      	str	r6, [r0, #16]
 80082e4:	b003      	add	sp, #12
 80082e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	f843 2b04 	str.w	r2, [r3], #4
 80082ee:	e7e3      	b.n	80082b8 <__multiply+0x40>
 80082f0:	f8b2 b000 	ldrh.w	fp, [r2]
 80082f4:	f1bb 0f00 	cmp.w	fp, #0
 80082f8:	d023      	beq.n	8008342 <__multiply+0xca>
 80082fa:	4689      	mov	r9, r1
 80082fc:	46ac      	mov	ip, r5
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	f859 4b04 	ldr.w	r4, [r9], #4
 8008306:	f8dc a000 	ldr.w	sl, [ip]
 800830a:	b2a3      	uxth	r3, r4
 800830c:	fa1f fa8a 	uxth.w	sl, sl
 8008310:	fb0b a303 	mla	r3, fp, r3, sl
 8008314:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008318:	f8dc 4000 	ldr.w	r4, [ip]
 800831c:	4443      	add	r3, r8
 800831e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008322:	fb0b 840a 	mla	r4, fp, sl, r8
 8008326:	46e2      	mov	sl, ip
 8008328:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800832c:	b29b      	uxth	r3, r3
 800832e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008332:	454f      	cmp	r7, r9
 8008334:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008338:	f84a 3b04 	str.w	r3, [sl], #4
 800833c:	d82b      	bhi.n	8008396 <__multiply+0x11e>
 800833e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008342:	9b01      	ldr	r3, [sp, #4]
 8008344:	3204      	adds	r2, #4
 8008346:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800834a:	f1ba 0f00 	cmp.w	sl, #0
 800834e:	d020      	beq.n	8008392 <__multiply+0x11a>
 8008350:	4689      	mov	r9, r1
 8008352:	46a8      	mov	r8, r5
 8008354:	f04f 0b00 	mov.w	fp, #0
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	f8b9 c000 	ldrh.w	ip, [r9]
 800835e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008362:	b29b      	uxth	r3, r3
 8008364:	fb0a 440c 	mla	r4, sl, ip, r4
 8008368:	46c4      	mov	ip, r8
 800836a:	445c      	add	r4, fp
 800836c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008370:	f84c 3b04 	str.w	r3, [ip], #4
 8008374:	f859 3b04 	ldr.w	r3, [r9], #4
 8008378:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	fb0a b303 	mla	r3, sl, r3, fp
 8008382:	454f      	cmp	r7, r9
 8008384:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008388:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800838c:	d805      	bhi.n	800839a <__multiply+0x122>
 800838e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008392:	3504      	adds	r5, #4
 8008394:	e79b      	b.n	80082ce <__multiply+0x56>
 8008396:	46d4      	mov	ip, sl
 8008398:	e7b3      	b.n	8008302 <__multiply+0x8a>
 800839a:	46e0      	mov	r8, ip
 800839c:	e7dd      	b.n	800835a <__multiply+0xe2>
 800839e:	3e01      	subs	r6, #1
 80083a0:	e799      	b.n	80082d6 <__multiply+0x5e>
	...

080083a4 <__pow5mult>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	4615      	mov	r5, r2
 80083aa:	f012 0203 	ands.w	r2, r2, #3
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	d007      	beq.n	80083c4 <__pow5mult+0x20>
 80083b4:	4c21      	ldr	r4, [pc, #132]	; (800843c <__pow5mult+0x98>)
 80083b6:	3a01      	subs	r2, #1
 80083b8:	2300      	movs	r3, #0
 80083ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083be:	f7ff fe8b 	bl	80080d8 <__multadd>
 80083c2:	4607      	mov	r7, r0
 80083c4:	10ad      	asrs	r5, r5, #2
 80083c6:	d035      	beq.n	8008434 <__pow5mult+0x90>
 80083c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083ca:	b93c      	cbnz	r4, 80083dc <__pow5mult+0x38>
 80083cc:	2010      	movs	r0, #16
 80083ce:	f7ff fe05 	bl	8007fdc <malloc>
 80083d2:	6270      	str	r0, [r6, #36]	; 0x24
 80083d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d8:	6004      	str	r4, [r0, #0]
 80083da:	60c4      	str	r4, [r0, #12]
 80083dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083e4:	b94c      	cbnz	r4, 80083fa <__pow5mult+0x56>
 80083e6:	f240 2171 	movw	r1, #625	; 0x271
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ff3b 	bl	8008266 <__i2b>
 80083f0:	2300      	movs	r3, #0
 80083f2:	4604      	mov	r4, r0
 80083f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80083f8:	6003      	str	r3, [r0, #0]
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	07eb      	lsls	r3, r5, #31
 8008400:	d50a      	bpl.n	8008418 <__pow5mult+0x74>
 8008402:	4639      	mov	r1, r7
 8008404:	4622      	mov	r2, r4
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ff36 	bl	8008278 <__multiply>
 800840c:	4681      	mov	r9, r0
 800840e:	4639      	mov	r1, r7
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff fe4a 	bl	80080aa <_Bfree>
 8008416:	464f      	mov	r7, r9
 8008418:	106d      	asrs	r5, r5, #1
 800841a:	d00b      	beq.n	8008434 <__pow5mult+0x90>
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	b938      	cbnz	r0, 8008430 <__pow5mult+0x8c>
 8008420:	4622      	mov	r2, r4
 8008422:	4621      	mov	r1, r4
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ff27 	bl	8008278 <__multiply>
 800842a:	6020      	str	r0, [r4, #0]
 800842c:	f8c0 8000 	str.w	r8, [r0]
 8008430:	4604      	mov	r4, r0
 8008432:	e7e4      	b.n	80083fe <__pow5mult+0x5a>
 8008434:	4638      	mov	r0, r7
 8008436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843a:	bf00      	nop
 800843c:	08009150 	.word	0x08009150

08008440 <__lshift>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	460c      	mov	r4, r1
 8008446:	4607      	mov	r7, r0
 8008448:	4616      	mov	r6, r2
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008450:	eb0a 0903 	add.w	r9, sl, r3
 8008454:	6849      	ldr	r1, [r1, #4]
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	f109 0501 	add.w	r5, r9, #1
 800845c:	42ab      	cmp	r3, r5
 800845e:	db32      	blt.n	80084c6 <__lshift+0x86>
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff fdee 	bl	8008042 <_Balloc>
 8008466:	2300      	movs	r3, #0
 8008468:	4680      	mov	r8, r0
 800846a:	461a      	mov	r2, r3
 800846c:	f100 0114 	add.w	r1, r0, #20
 8008470:	4553      	cmp	r3, sl
 8008472:	db2b      	blt.n	80084cc <__lshift+0x8c>
 8008474:	6920      	ldr	r0, [r4, #16]
 8008476:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800847a:	f104 0314 	add.w	r3, r4, #20
 800847e:	f016 021f 	ands.w	r2, r6, #31
 8008482:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008486:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800848a:	d025      	beq.n	80084d8 <__lshift+0x98>
 800848c:	2000      	movs	r0, #0
 800848e:	f1c2 0e20 	rsb	lr, r2, #32
 8008492:	468a      	mov	sl, r1
 8008494:	681e      	ldr	r6, [r3, #0]
 8008496:	4096      	lsls	r6, r2
 8008498:	4330      	orrs	r0, r6
 800849a:	f84a 0b04 	str.w	r0, [sl], #4
 800849e:	f853 0b04 	ldr.w	r0, [r3], #4
 80084a2:	459c      	cmp	ip, r3
 80084a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80084a8:	d814      	bhi.n	80084d4 <__lshift+0x94>
 80084aa:	6048      	str	r0, [r1, #4]
 80084ac:	b108      	cbz	r0, 80084b2 <__lshift+0x72>
 80084ae:	f109 0502 	add.w	r5, r9, #2
 80084b2:	3d01      	subs	r5, #1
 80084b4:	4638      	mov	r0, r7
 80084b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80084ba:	4621      	mov	r1, r4
 80084bc:	f7ff fdf5 	bl	80080aa <_Bfree>
 80084c0:	4640      	mov	r0, r8
 80084c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c6:	3101      	adds	r1, #1
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	e7c7      	b.n	800845c <__lshift+0x1c>
 80084cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80084d0:	3301      	adds	r3, #1
 80084d2:	e7cd      	b.n	8008470 <__lshift+0x30>
 80084d4:	4651      	mov	r1, sl
 80084d6:	e7dc      	b.n	8008492 <__lshift+0x52>
 80084d8:	3904      	subs	r1, #4
 80084da:	f853 2b04 	ldr.w	r2, [r3], #4
 80084de:	459c      	cmp	ip, r3
 80084e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80084e4:	d8f9      	bhi.n	80084da <__lshift+0x9a>
 80084e6:	e7e4      	b.n	80084b2 <__lshift+0x72>

080084e8 <__mcmp>:
 80084e8:	6903      	ldr	r3, [r0, #16]
 80084ea:	690a      	ldr	r2, [r1, #16]
 80084ec:	b530      	push	{r4, r5, lr}
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	d10c      	bne.n	800850c <__mcmp+0x24>
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	3014      	adds	r0, #20
 80084f6:	3114      	adds	r1, #20
 80084f8:	1884      	adds	r4, r0, r2
 80084fa:	4411      	add	r1, r2
 80084fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008504:	4295      	cmp	r5, r2
 8008506:	d003      	beq.n	8008510 <__mcmp+0x28>
 8008508:	d305      	bcc.n	8008516 <__mcmp+0x2e>
 800850a:	2301      	movs	r3, #1
 800850c:	4618      	mov	r0, r3
 800850e:	bd30      	pop	{r4, r5, pc}
 8008510:	42a0      	cmp	r0, r4
 8008512:	d3f3      	bcc.n	80084fc <__mcmp+0x14>
 8008514:	e7fa      	b.n	800850c <__mcmp+0x24>
 8008516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800851a:	e7f7      	b.n	800850c <__mcmp+0x24>

0800851c <__mdiff>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	460d      	mov	r5, r1
 8008522:	4607      	mov	r7, r0
 8008524:	4611      	mov	r1, r2
 8008526:	4628      	mov	r0, r5
 8008528:	4614      	mov	r4, r2
 800852a:	f7ff ffdd 	bl	80084e8 <__mcmp>
 800852e:	1e06      	subs	r6, r0, #0
 8008530:	d108      	bne.n	8008544 <__mdiff+0x28>
 8008532:	4631      	mov	r1, r6
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff fd84 	bl	8008042 <_Balloc>
 800853a:	2301      	movs	r3, #1
 800853c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008544:	bfa4      	itt	ge
 8008546:	4623      	movge	r3, r4
 8008548:	462c      	movge	r4, r5
 800854a:	4638      	mov	r0, r7
 800854c:	6861      	ldr	r1, [r4, #4]
 800854e:	bfa6      	itte	ge
 8008550:	461d      	movge	r5, r3
 8008552:	2600      	movge	r6, #0
 8008554:	2601      	movlt	r6, #1
 8008556:	f7ff fd74 	bl	8008042 <_Balloc>
 800855a:	f04f 0e00 	mov.w	lr, #0
 800855e:	60c6      	str	r6, [r0, #12]
 8008560:	692b      	ldr	r3, [r5, #16]
 8008562:	6926      	ldr	r6, [r4, #16]
 8008564:	f104 0214 	add.w	r2, r4, #20
 8008568:	f105 0914 	add.w	r9, r5, #20
 800856c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008570:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008574:	f100 0114 	add.w	r1, r0, #20
 8008578:	f852 ab04 	ldr.w	sl, [r2], #4
 800857c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008580:	fa1f f38a 	uxth.w	r3, sl
 8008584:	4473      	add	r3, lr
 8008586:	b2ac      	uxth	r4, r5
 8008588:	1b1b      	subs	r3, r3, r4
 800858a:	0c2c      	lsrs	r4, r5, #16
 800858c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008590:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008594:	b29b      	uxth	r3, r3
 8008596:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800859a:	45c8      	cmp	r8, r9
 800859c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80085a0:	4694      	mov	ip, r2
 80085a2:	f841 4b04 	str.w	r4, [r1], #4
 80085a6:	d8e7      	bhi.n	8008578 <__mdiff+0x5c>
 80085a8:	45bc      	cmp	ip, r7
 80085aa:	d304      	bcc.n	80085b6 <__mdiff+0x9a>
 80085ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80085b0:	b183      	cbz	r3, 80085d4 <__mdiff+0xb8>
 80085b2:	6106      	str	r6, [r0, #16]
 80085b4:	e7c4      	b.n	8008540 <__mdiff+0x24>
 80085b6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80085ba:	b2a2      	uxth	r2, r4
 80085bc:	4472      	add	r2, lr
 80085be:	1413      	asrs	r3, r2, #16
 80085c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80085c4:	b292      	uxth	r2, r2
 80085c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085ca:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80085ce:	f841 2b04 	str.w	r2, [r1], #4
 80085d2:	e7e9      	b.n	80085a8 <__mdiff+0x8c>
 80085d4:	3e01      	subs	r6, #1
 80085d6:	e7e9      	b.n	80085ac <__mdiff+0x90>

080085d8 <__ulp>:
 80085d8:	4b10      	ldr	r3, [pc, #64]	; (800861c <__ulp+0x44>)
 80085da:	400b      	ands	r3, r1
 80085dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dd02      	ble.n	80085ea <__ulp+0x12>
 80085e4:	2000      	movs	r0, #0
 80085e6:	4619      	mov	r1, r3
 80085e8:	4770      	bx	lr
 80085ea:	425b      	negs	r3, r3
 80085ec:	151b      	asrs	r3, r3, #20
 80085ee:	2b13      	cmp	r3, #19
 80085f0:	f04f 0000 	mov.w	r0, #0
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	dc04      	bgt.n	8008604 <__ulp+0x2c>
 80085fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80085fe:	fa42 f103 	asr.w	r1, r2, r3
 8008602:	4770      	bx	lr
 8008604:	2201      	movs	r2, #1
 8008606:	3b14      	subs	r3, #20
 8008608:	2b1e      	cmp	r3, #30
 800860a:	bfce      	itee	gt
 800860c:	4613      	movgt	r3, r2
 800860e:	f1c3 031f 	rsble	r3, r3, #31
 8008612:	fa02 f303 	lslle.w	r3, r2, r3
 8008616:	4618      	mov	r0, r3
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	7ff00000 	.word	0x7ff00000

08008620 <__b2d>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	6907      	ldr	r7, [r0, #16]
 8008626:	f100 0914 	add.w	r9, r0, #20
 800862a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800862e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008632:	f1a7 0804 	sub.w	r8, r7, #4
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff fdc7 	bl	80081ca <__hi0bits>
 800863c:	f1c0 0320 	rsb	r3, r0, #32
 8008640:	280a      	cmp	r0, #10
 8008642:	600b      	str	r3, [r1, #0]
 8008644:	491e      	ldr	r1, [pc, #120]	; (80086c0 <__b2d+0xa0>)
 8008646:	dc17      	bgt.n	8008678 <__b2d+0x58>
 8008648:	45c1      	cmp	r9, r8
 800864a:	bf28      	it	cs
 800864c:	2200      	movcs	r2, #0
 800864e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008652:	fa26 f30c 	lsr.w	r3, r6, ip
 8008656:	bf38      	it	cc
 8008658:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800865c:	ea43 0501 	orr.w	r5, r3, r1
 8008660:	f100 0315 	add.w	r3, r0, #21
 8008664:	fa06 f303 	lsl.w	r3, r6, r3
 8008668:	fa22 f20c 	lsr.w	r2, r2, ip
 800866c:	ea43 0402 	orr.w	r4, r3, r2
 8008670:	4620      	mov	r0, r4
 8008672:	4629      	mov	r1, r5
 8008674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008678:	45c1      	cmp	r9, r8
 800867a:	bf3a      	itte	cc
 800867c:	f1a7 0808 	subcc.w	r8, r7, #8
 8008680:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008684:	2200      	movcs	r2, #0
 8008686:	f1b0 030b 	subs.w	r3, r0, #11
 800868a:	d015      	beq.n	80086b8 <__b2d+0x98>
 800868c:	409e      	lsls	r6, r3
 800868e:	f1c3 0720 	rsb	r7, r3, #32
 8008692:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008696:	fa22 f107 	lsr.w	r1, r2, r7
 800869a:	45c8      	cmp	r8, r9
 800869c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80086a0:	ea46 0501 	orr.w	r5, r6, r1
 80086a4:	bf94      	ite	ls
 80086a6:	2100      	movls	r1, #0
 80086a8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80086ac:	fa02 f003 	lsl.w	r0, r2, r3
 80086b0:	40f9      	lsrs	r1, r7
 80086b2:	ea40 0401 	orr.w	r4, r0, r1
 80086b6:	e7db      	b.n	8008670 <__b2d+0x50>
 80086b8:	ea46 0501 	orr.w	r5, r6, r1
 80086bc:	4614      	mov	r4, r2
 80086be:	e7d7      	b.n	8008670 <__b2d+0x50>
 80086c0:	3ff00000 	.word	0x3ff00000

080086c4 <__d2b>:
 80086c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086c8:	461c      	mov	r4, r3
 80086ca:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80086ce:	2101      	movs	r1, #1
 80086d0:	4690      	mov	r8, r2
 80086d2:	f7ff fcb6 	bl	8008042 <_Balloc>
 80086d6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80086da:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80086de:	4607      	mov	r7, r0
 80086e0:	bb34      	cbnz	r4, 8008730 <__d2b+0x6c>
 80086e2:	9201      	str	r2, [sp, #4]
 80086e4:	f1b8 0200 	subs.w	r2, r8, #0
 80086e8:	d027      	beq.n	800873a <__d2b+0x76>
 80086ea:	a802      	add	r0, sp, #8
 80086ec:	f840 2d08 	str.w	r2, [r0, #-8]!
 80086f0:	f7ff fd8a 	bl	8008208 <__lo0bits>
 80086f4:	9900      	ldr	r1, [sp, #0]
 80086f6:	b1f0      	cbz	r0, 8008736 <__d2b+0x72>
 80086f8:	9a01      	ldr	r2, [sp, #4]
 80086fa:	f1c0 0320 	rsb	r3, r0, #32
 80086fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008702:	430b      	orrs	r3, r1
 8008704:	40c2      	lsrs	r2, r0
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	9201      	str	r2, [sp, #4]
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	bf14      	ite	ne
 8008710:	2102      	movne	r1, #2
 8008712:	2101      	moveq	r1, #1
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	6139      	str	r1, [r7, #16]
 8008718:	b1c4      	cbz	r4, 800874c <__d2b+0x88>
 800871a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800871e:	4404      	add	r4, r0
 8008720:	6034      	str	r4, [r6, #0]
 8008722:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008726:	6028      	str	r0, [r5, #0]
 8008728:	4638      	mov	r0, r7
 800872a:	b002      	add	sp, #8
 800872c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008730:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008734:	e7d5      	b.n	80086e2 <__d2b+0x1e>
 8008736:	6179      	str	r1, [r7, #20]
 8008738:	e7e7      	b.n	800870a <__d2b+0x46>
 800873a:	a801      	add	r0, sp, #4
 800873c:	f7ff fd64 	bl	8008208 <__lo0bits>
 8008740:	2101      	movs	r1, #1
 8008742:	9b01      	ldr	r3, [sp, #4]
 8008744:	6139      	str	r1, [r7, #16]
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	3020      	adds	r0, #32
 800874a:	e7e5      	b.n	8008718 <__d2b+0x54>
 800874c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008750:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008754:	6030      	str	r0, [r6, #0]
 8008756:	6918      	ldr	r0, [r3, #16]
 8008758:	f7ff fd37 	bl	80081ca <__hi0bits>
 800875c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008760:	e7e1      	b.n	8008726 <__d2b+0x62>

08008762 <__ratio>:
 8008762:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008766:	4688      	mov	r8, r1
 8008768:	4669      	mov	r1, sp
 800876a:	4681      	mov	r9, r0
 800876c:	f7ff ff58 	bl	8008620 <__b2d>
 8008770:	468b      	mov	fp, r1
 8008772:	4606      	mov	r6, r0
 8008774:	460f      	mov	r7, r1
 8008776:	4640      	mov	r0, r8
 8008778:	a901      	add	r1, sp, #4
 800877a:	f7ff ff51 	bl	8008620 <__b2d>
 800877e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008782:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008786:	460d      	mov	r5, r1
 8008788:	eba3 0c02 	sub.w	ip, r3, r2
 800878c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008796:	2b00      	cmp	r3, #0
 8008798:	bfd5      	itete	le
 800879a:	460a      	movle	r2, r1
 800879c:	463a      	movgt	r2, r7
 800879e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087a2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80087a6:	bfd8      	it	le
 80087a8:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80087ac:	462b      	mov	r3, r5
 80087ae:	4602      	mov	r2, r0
 80087b0:	4659      	mov	r1, fp
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7f7 ffba 	bl	800072c <__aeabi_ddiv>
 80087b8:	b003      	add	sp, #12
 80087ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087be <__copybits>:
 80087be:	3901      	subs	r1, #1
 80087c0:	b510      	push	{r4, lr}
 80087c2:	1149      	asrs	r1, r1, #5
 80087c4:	6914      	ldr	r4, [r2, #16]
 80087c6:	3101      	adds	r1, #1
 80087c8:	f102 0314 	add.w	r3, r2, #20
 80087cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	4602      	mov	r2, r0
 80087d8:	d303      	bcc.n	80087e2 <__copybits+0x24>
 80087da:	2300      	movs	r3, #0
 80087dc:	428a      	cmp	r2, r1
 80087de:	d305      	bcc.n	80087ec <__copybits+0x2e>
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e6:	f840 2b04 	str.w	r2, [r0], #4
 80087ea:	e7f3      	b.n	80087d4 <__copybits+0x16>
 80087ec:	f842 3b04 	str.w	r3, [r2], #4
 80087f0:	e7f4      	b.n	80087dc <__copybits+0x1e>

080087f2 <__any_on>:
 80087f2:	f100 0214 	add.w	r2, r0, #20
 80087f6:	6900      	ldr	r0, [r0, #16]
 80087f8:	114b      	asrs	r3, r1, #5
 80087fa:	4298      	cmp	r0, r3
 80087fc:	b510      	push	{r4, lr}
 80087fe:	db11      	blt.n	8008824 <__any_on+0x32>
 8008800:	dd0a      	ble.n	8008818 <__any_on+0x26>
 8008802:	f011 011f 	ands.w	r1, r1, #31
 8008806:	d007      	beq.n	8008818 <__any_on+0x26>
 8008808:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800880c:	fa24 f001 	lsr.w	r0, r4, r1
 8008810:	fa00 f101 	lsl.w	r1, r0, r1
 8008814:	428c      	cmp	r4, r1
 8008816:	d10b      	bne.n	8008830 <__any_on+0x3e>
 8008818:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800881c:	4293      	cmp	r3, r2
 800881e:	d803      	bhi.n	8008828 <__any_on+0x36>
 8008820:	2000      	movs	r0, #0
 8008822:	bd10      	pop	{r4, pc}
 8008824:	4603      	mov	r3, r0
 8008826:	e7f7      	b.n	8008818 <__any_on+0x26>
 8008828:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800882c:	2900      	cmp	r1, #0
 800882e:	d0f5      	beq.n	800881c <__any_on+0x2a>
 8008830:	2001      	movs	r0, #1
 8008832:	e7f6      	b.n	8008822 <__any_on+0x30>

08008834 <_calloc_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	fb02 f401 	mul.w	r4, r2, r1
 800883a:	4621      	mov	r1, r4
 800883c:	f000 f854 	bl	80088e8 <_malloc_r>
 8008840:	4605      	mov	r5, r0
 8008842:	b118      	cbz	r0, 800884c <_calloc_r+0x18>
 8008844:	4622      	mov	r2, r4
 8008846:	2100      	movs	r1, #0
 8008848:	f7fc fbf8 	bl	800503c <memset>
 800884c:	4628      	mov	r0, r5
 800884e:	bd38      	pop	{r3, r4, r5, pc}

08008850 <_free_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4605      	mov	r5, r0
 8008854:	2900      	cmp	r1, #0
 8008856:	d043      	beq.n	80088e0 <_free_r+0x90>
 8008858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800885c:	1f0c      	subs	r4, r1, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	bfb8      	it	lt
 8008862:	18e4      	addlt	r4, r4, r3
 8008864:	f000 faa0 	bl	8008da8 <__malloc_lock>
 8008868:	4a1e      	ldr	r2, [pc, #120]	; (80088e4 <_free_r+0x94>)
 800886a:	6813      	ldr	r3, [r2, #0]
 800886c:	4610      	mov	r0, r2
 800886e:	b933      	cbnz	r3, 800887e <_free_r+0x2e>
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	6014      	str	r4, [r2, #0]
 8008874:	4628      	mov	r0, r5
 8008876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800887a:	f000 ba96 	b.w	8008daa <__malloc_unlock>
 800887e:	42a3      	cmp	r3, r4
 8008880:	d90b      	bls.n	800889a <_free_r+0x4a>
 8008882:	6821      	ldr	r1, [r4, #0]
 8008884:	1862      	adds	r2, r4, r1
 8008886:	4293      	cmp	r3, r2
 8008888:	bf01      	itttt	eq
 800888a:	681a      	ldreq	r2, [r3, #0]
 800888c:	685b      	ldreq	r3, [r3, #4]
 800888e:	1852      	addeq	r2, r2, r1
 8008890:	6022      	streq	r2, [r4, #0]
 8008892:	6063      	str	r3, [r4, #4]
 8008894:	6004      	str	r4, [r0, #0]
 8008896:	e7ed      	b.n	8008874 <_free_r+0x24>
 8008898:	4613      	mov	r3, r2
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	b10a      	cbz	r2, 80088a2 <_free_r+0x52>
 800889e:	42a2      	cmp	r2, r4
 80088a0:	d9fa      	bls.n	8008898 <_free_r+0x48>
 80088a2:	6819      	ldr	r1, [r3, #0]
 80088a4:	1858      	adds	r0, r3, r1
 80088a6:	42a0      	cmp	r0, r4
 80088a8:	d10b      	bne.n	80088c2 <_free_r+0x72>
 80088aa:	6820      	ldr	r0, [r4, #0]
 80088ac:	4401      	add	r1, r0
 80088ae:	1858      	adds	r0, r3, r1
 80088b0:	4282      	cmp	r2, r0
 80088b2:	6019      	str	r1, [r3, #0]
 80088b4:	d1de      	bne.n	8008874 <_free_r+0x24>
 80088b6:	6810      	ldr	r0, [r2, #0]
 80088b8:	6852      	ldr	r2, [r2, #4]
 80088ba:	4401      	add	r1, r0
 80088bc:	6019      	str	r1, [r3, #0]
 80088be:	605a      	str	r2, [r3, #4]
 80088c0:	e7d8      	b.n	8008874 <_free_r+0x24>
 80088c2:	d902      	bls.n	80088ca <_free_r+0x7a>
 80088c4:	230c      	movs	r3, #12
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	e7d4      	b.n	8008874 <_free_r+0x24>
 80088ca:	6820      	ldr	r0, [r4, #0]
 80088cc:	1821      	adds	r1, r4, r0
 80088ce:	428a      	cmp	r2, r1
 80088d0:	bf01      	itttt	eq
 80088d2:	6811      	ldreq	r1, [r2, #0]
 80088d4:	6852      	ldreq	r2, [r2, #4]
 80088d6:	1809      	addeq	r1, r1, r0
 80088d8:	6021      	streq	r1, [r4, #0]
 80088da:	6062      	str	r2, [r4, #4]
 80088dc:	605c      	str	r4, [r3, #4]
 80088de:	e7c9      	b.n	8008874 <_free_r+0x24>
 80088e0:	bd38      	pop	{r3, r4, r5, pc}
 80088e2:	bf00      	nop
 80088e4:	200002dc 	.word	0x200002dc

080088e8 <_malloc_r>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	1ccd      	adds	r5, r1, #3
 80088ec:	f025 0503 	bic.w	r5, r5, #3
 80088f0:	3508      	adds	r5, #8
 80088f2:	2d0c      	cmp	r5, #12
 80088f4:	bf38      	it	cc
 80088f6:	250c      	movcc	r5, #12
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	4606      	mov	r6, r0
 80088fc:	db01      	blt.n	8008902 <_malloc_r+0x1a>
 80088fe:	42a9      	cmp	r1, r5
 8008900:	d903      	bls.n	800890a <_malloc_r+0x22>
 8008902:	230c      	movs	r3, #12
 8008904:	6033      	str	r3, [r6, #0]
 8008906:	2000      	movs	r0, #0
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	f000 fa4d 	bl	8008da8 <__malloc_lock>
 800890e:	4a21      	ldr	r2, [pc, #132]	; (8008994 <_malloc_r+0xac>)
 8008910:	6814      	ldr	r4, [r2, #0]
 8008912:	4621      	mov	r1, r4
 8008914:	b991      	cbnz	r1, 800893c <_malloc_r+0x54>
 8008916:	4c20      	ldr	r4, [pc, #128]	; (8008998 <_malloc_r+0xb0>)
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	b91b      	cbnz	r3, 8008924 <_malloc_r+0x3c>
 800891c:	4630      	mov	r0, r6
 800891e:	f000 f97b 	bl	8008c18 <_sbrk_r>
 8008922:	6020      	str	r0, [r4, #0]
 8008924:	4629      	mov	r1, r5
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f976 	bl	8008c18 <_sbrk_r>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d124      	bne.n	800897a <_malloc_r+0x92>
 8008930:	230c      	movs	r3, #12
 8008932:	4630      	mov	r0, r6
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	f000 fa38 	bl	8008daa <__malloc_unlock>
 800893a:	e7e4      	b.n	8008906 <_malloc_r+0x1e>
 800893c:	680b      	ldr	r3, [r1, #0]
 800893e:	1b5b      	subs	r3, r3, r5
 8008940:	d418      	bmi.n	8008974 <_malloc_r+0x8c>
 8008942:	2b0b      	cmp	r3, #11
 8008944:	d90f      	bls.n	8008966 <_malloc_r+0x7e>
 8008946:	600b      	str	r3, [r1, #0]
 8008948:	18cc      	adds	r4, r1, r3
 800894a:	50cd      	str	r5, [r1, r3]
 800894c:	4630      	mov	r0, r6
 800894e:	f000 fa2c 	bl	8008daa <__malloc_unlock>
 8008952:	f104 000b 	add.w	r0, r4, #11
 8008956:	1d23      	adds	r3, r4, #4
 8008958:	f020 0007 	bic.w	r0, r0, #7
 800895c:	1ac3      	subs	r3, r0, r3
 800895e:	d0d3      	beq.n	8008908 <_malloc_r+0x20>
 8008960:	425a      	negs	r2, r3
 8008962:	50e2      	str	r2, [r4, r3]
 8008964:	e7d0      	b.n	8008908 <_malloc_r+0x20>
 8008966:	684b      	ldr	r3, [r1, #4]
 8008968:	428c      	cmp	r4, r1
 800896a:	bf16      	itet	ne
 800896c:	6063      	strne	r3, [r4, #4]
 800896e:	6013      	streq	r3, [r2, #0]
 8008970:	460c      	movne	r4, r1
 8008972:	e7eb      	b.n	800894c <_malloc_r+0x64>
 8008974:	460c      	mov	r4, r1
 8008976:	6849      	ldr	r1, [r1, #4]
 8008978:	e7cc      	b.n	8008914 <_malloc_r+0x2c>
 800897a:	1cc4      	adds	r4, r0, #3
 800897c:	f024 0403 	bic.w	r4, r4, #3
 8008980:	42a0      	cmp	r0, r4
 8008982:	d005      	beq.n	8008990 <_malloc_r+0xa8>
 8008984:	1a21      	subs	r1, r4, r0
 8008986:	4630      	mov	r0, r6
 8008988:	f000 f946 	bl	8008c18 <_sbrk_r>
 800898c:	3001      	adds	r0, #1
 800898e:	d0cf      	beq.n	8008930 <_malloc_r+0x48>
 8008990:	6025      	str	r5, [r4, #0]
 8008992:	e7db      	b.n	800894c <_malloc_r+0x64>
 8008994:	200002dc 	.word	0x200002dc
 8008998:	200002e0 	.word	0x200002e0

0800899c <__sfputc_r>:
 800899c:	6893      	ldr	r3, [r2, #8]
 800899e:	b410      	push	{r4}
 80089a0:	3b01      	subs	r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	6093      	str	r3, [r2, #8]
 80089a6:	da07      	bge.n	80089b8 <__sfputc_r+0x1c>
 80089a8:	6994      	ldr	r4, [r2, #24]
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	db01      	blt.n	80089b2 <__sfputc_r+0x16>
 80089ae:	290a      	cmp	r1, #10
 80089b0:	d102      	bne.n	80089b8 <__sfputc_r+0x1c>
 80089b2:	bc10      	pop	{r4}
 80089b4:	f7fd befa 	b.w	80067ac <__swbuf_r>
 80089b8:	6813      	ldr	r3, [r2, #0]
 80089ba:	1c58      	adds	r0, r3, #1
 80089bc:	6010      	str	r0, [r2, #0]
 80089be:	7019      	strb	r1, [r3, #0]
 80089c0:	4608      	mov	r0, r1
 80089c2:	bc10      	pop	{r4}
 80089c4:	4770      	bx	lr

080089c6 <__sfputs_r>:
 80089c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	18d5      	adds	r5, r2, r3
 80089d0:	42ac      	cmp	r4, r5
 80089d2:	d101      	bne.n	80089d8 <__sfputs_r+0x12>
 80089d4:	2000      	movs	r0, #0
 80089d6:	e007      	b.n	80089e8 <__sfputs_r+0x22>
 80089d8:	463a      	mov	r2, r7
 80089da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff ffdc 	bl	800899c <__sfputc_r>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d1f3      	bne.n	80089d0 <__sfputs_r+0xa>
 80089e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089ec <_vfiprintf_r>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	460c      	mov	r4, r1
 80089f2:	b09d      	sub	sp, #116	; 0x74
 80089f4:	4617      	mov	r7, r2
 80089f6:	461d      	mov	r5, r3
 80089f8:	4606      	mov	r6, r0
 80089fa:	b118      	cbz	r0, 8008a04 <_vfiprintf_r+0x18>
 80089fc:	6983      	ldr	r3, [r0, #24]
 80089fe:	b90b      	cbnz	r3, 8008a04 <_vfiprintf_r+0x18>
 8008a00:	f7fe fec6 	bl	8007790 <__sinit>
 8008a04:	4b7c      	ldr	r3, [pc, #496]	; (8008bf8 <_vfiprintf_r+0x20c>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	d158      	bne.n	8008abc <_vfiprintf_r+0xd0>
 8008a0a:	6874      	ldr	r4, [r6, #4]
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	0718      	lsls	r0, r3, #28
 8008a10:	d55e      	bpl.n	8008ad0 <_vfiprintf_r+0xe4>
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d05b      	beq.n	8008ad0 <_vfiprintf_r+0xe4>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a1c:	2320      	movs	r3, #32
 8008a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a22:	2330      	movs	r3, #48	; 0x30
 8008a24:	f04f 0b01 	mov.w	fp, #1
 8008a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a2c:	9503      	str	r5, [sp, #12]
 8008a2e:	46b8      	mov	r8, r7
 8008a30:	4645      	mov	r5, r8
 8008a32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a36:	b10b      	cbz	r3, 8008a3c <_vfiprintf_r+0x50>
 8008a38:	2b25      	cmp	r3, #37	; 0x25
 8008a3a:	d154      	bne.n	8008ae6 <_vfiprintf_r+0xfa>
 8008a3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008a40:	d00b      	beq.n	8008a5a <_vfiprintf_r+0x6e>
 8008a42:	4653      	mov	r3, sl
 8008a44:	463a      	mov	r2, r7
 8008a46:	4621      	mov	r1, r4
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff ffbc 	bl	80089c6 <__sfputs_r>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f000 80c2 	beq.w	8008bd8 <_vfiprintf_r+0x1ec>
 8008a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a56:	4453      	add	r3, sl
 8008a58:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5a:	f898 3000 	ldrb.w	r3, [r8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 80ba 	beq.w	8008bd8 <_vfiprintf_r+0x1ec>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	9307      	str	r3, [sp, #28]
 8008a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a76:	931a      	str	r3, [sp, #104]	; 0x68
 8008a78:	46a8      	mov	r8, r5
 8008a7a:	2205      	movs	r2, #5
 8008a7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008a80:	485e      	ldr	r0, [pc, #376]	; (8008bfc <_vfiprintf_r+0x210>)
 8008a82:	f7ff fac5 	bl	8008010 <memchr>
 8008a86:	9b04      	ldr	r3, [sp, #16]
 8008a88:	bb78      	cbnz	r0, 8008aea <_vfiprintf_r+0xfe>
 8008a8a:	06d9      	lsls	r1, r3, #27
 8008a8c:	bf44      	itt	mi
 8008a8e:	2220      	movmi	r2, #32
 8008a90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a94:	071a      	lsls	r2, r3, #28
 8008a96:	bf44      	itt	mi
 8008a98:	222b      	movmi	r2, #43	; 0x2b
 8008a9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a9e:	782a      	ldrb	r2, [r5, #0]
 8008aa0:	2a2a      	cmp	r2, #42	; 0x2a
 8008aa2:	d02a      	beq.n	8008afa <_vfiprintf_r+0x10e>
 8008aa4:	46a8      	mov	r8, r5
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	250a      	movs	r5, #10
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	4641      	mov	r1, r8
 8008aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab2:	3b30      	subs	r3, #48	; 0x30
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d969      	bls.n	8008b8c <_vfiprintf_r+0x1a0>
 8008ab8:	b360      	cbz	r0, 8008b14 <_vfiprintf_r+0x128>
 8008aba:	e024      	b.n	8008b06 <_vfiprintf_r+0x11a>
 8008abc:	4b50      	ldr	r3, [pc, #320]	; (8008c00 <_vfiprintf_r+0x214>)
 8008abe:	429c      	cmp	r4, r3
 8008ac0:	d101      	bne.n	8008ac6 <_vfiprintf_r+0xda>
 8008ac2:	68b4      	ldr	r4, [r6, #8]
 8008ac4:	e7a2      	b.n	8008a0c <_vfiprintf_r+0x20>
 8008ac6:	4b4f      	ldr	r3, [pc, #316]	; (8008c04 <_vfiprintf_r+0x218>)
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	bf08      	it	eq
 8008acc:	68f4      	ldreq	r4, [r6, #12]
 8008ace:	e79d      	b.n	8008a0c <_vfiprintf_r+0x20>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f7fd febc 	bl	8006850 <__swsetup_r>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d09d      	beq.n	8008a18 <_vfiprintf_r+0x2c>
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ae0:	b01d      	add	sp, #116	; 0x74
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae6:	46a8      	mov	r8, r5
 8008ae8:	e7a2      	b.n	8008a30 <_vfiprintf_r+0x44>
 8008aea:	4a44      	ldr	r2, [pc, #272]	; (8008bfc <_vfiprintf_r+0x210>)
 8008aec:	4645      	mov	r5, r8
 8008aee:	1a80      	subs	r0, r0, r2
 8008af0:	fa0b f000 	lsl.w	r0, fp, r0
 8008af4:	4318      	orrs	r0, r3
 8008af6:	9004      	str	r0, [sp, #16]
 8008af8:	e7be      	b.n	8008a78 <_vfiprintf_r+0x8c>
 8008afa:	9a03      	ldr	r2, [sp, #12]
 8008afc:	1d11      	adds	r1, r2, #4
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	9103      	str	r1, [sp, #12]
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	db01      	blt.n	8008b0a <_vfiprintf_r+0x11e>
 8008b06:	9207      	str	r2, [sp, #28]
 8008b08:	e004      	b.n	8008b14 <_vfiprintf_r+0x128>
 8008b0a:	4252      	negs	r2, r2
 8008b0c:	f043 0302 	orr.w	r3, r3, #2
 8008b10:	9207      	str	r2, [sp, #28]
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	f898 3000 	ldrb.w	r3, [r8]
 8008b18:	2b2e      	cmp	r3, #46	; 0x2e
 8008b1a:	d10e      	bne.n	8008b3a <_vfiprintf_r+0x14e>
 8008b1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008b20:	2b2a      	cmp	r3, #42	; 0x2a
 8008b22:	d138      	bne.n	8008b96 <_vfiprintf_r+0x1aa>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	f108 0802 	add.w	r8, r8, #2
 8008b2a:	1d1a      	adds	r2, r3, #4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	9203      	str	r2, [sp, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bfb8      	it	lt
 8008b34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b38:	9305      	str	r3, [sp, #20]
 8008b3a:	4d33      	ldr	r5, [pc, #204]	; (8008c08 <_vfiprintf_r+0x21c>)
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	f898 1000 	ldrb.w	r1, [r8]
 8008b42:	4628      	mov	r0, r5
 8008b44:	f7ff fa64 	bl	8008010 <memchr>
 8008b48:	b140      	cbz	r0, 8008b5c <_vfiprintf_r+0x170>
 8008b4a:	2340      	movs	r3, #64	; 0x40
 8008b4c:	1b40      	subs	r0, r0, r5
 8008b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b52:	9b04      	ldr	r3, [sp, #16]
 8008b54:	f108 0801 	add.w	r8, r8, #1
 8008b58:	4303      	orrs	r3, r0
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	f898 1000 	ldrb.w	r1, [r8]
 8008b60:	2206      	movs	r2, #6
 8008b62:	482a      	ldr	r0, [pc, #168]	; (8008c0c <_vfiprintf_r+0x220>)
 8008b64:	f108 0701 	add.w	r7, r8, #1
 8008b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b6c:	f7ff fa50 	bl	8008010 <memchr>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d037      	beq.n	8008be4 <_vfiprintf_r+0x1f8>
 8008b74:	4b26      	ldr	r3, [pc, #152]	; (8008c10 <_vfiprintf_r+0x224>)
 8008b76:	bb1b      	cbnz	r3, 8008bc0 <_vfiprintf_r+0x1d4>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	3307      	adds	r3, #7
 8008b7c:	f023 0307 	bic.w	r3, r3, #7
 8008b80:	3308      	adds	r3, #8
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b86:	444b      	add	r3, r9
 8008b88:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8a:	e750      	b.n	8008a2e <_vfiprintf_r+0x42>
 8008b8c:	fb05 3202 	mla	r2, r5, r2, r3
 8008b90:	2001      	movs	r0, #1
 8008b92:	4688      	mov	r8, r1
 8008b94:	e78a      	b.n	8008aac <_vfiprintf_r+0xc0>
 8008b96:	2300      	movs	r3, #0
 8008b98:	250a      	movs	r5, #10
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f108 0801 	add.w	r8, r8, #1
 8008ba0:	9305      	str	r3, [sp, #20]
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ba8:	3a30      	subs	r2, #48	; 0x30
 8008baa:	2a09      	cmp	r2, #9
 8008bac:	d903      	bls.n	8008bb6 <_vfiprintf_r+0x1ca>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0c3      	beq.n	8008b3a <_vfiprintf_r+0x14e>
 8008bb2:	9105      	str	r1, [sp, #20]
 8008bb4:	e7c1      	b.n	8008b3a <_vfiprintf_r+0x14e>
 8008bb6:	fb05 2101 	mla	r1, r5, r1, r2
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	e7f0      	b.n	8008ba2 <_vfiprintf_r+0x1b6>
 8008bc0:	ab03      	add	r3, sp, #12
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	4b13      	ldr	r3, [pc, #76]	; (8008c14 <_vfiprintf_r+0x228>)
 8008bc8:	a904      	add	r1, sp, #16
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7fc fad0 	bl	8005170 <_printf_float>
 8008bd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008bd4:	4681      	mov	r9, r0
 8008bd6:	d1d5      	bne.n	8008b84 <_vfiprintf_r+0x198>
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	065b      	lsls	r3, r3, #25
 8008bdc:	f53f af7e 	bmi.w	8008adc <_vfiprintf_r+0xf0>
 8008be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008be2:	e77d      	b.n	8008ae0 <_vfiprintf_r+0xf4>
 8008be4:	ab03      	add	r3, sp, #12
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	4622      	mov	r2, r4
 8008bea:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <_vfiprintf_r+0x228>)
 8008bec:	a904      	add	r1, sp, #16
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7fc fd6a 	bl	80056c8 <_printf_i>
 8008bf4:	e7ec      	b.n	8008bd0 <_vfiprintf_r+0x1e4>
 8008bf6:	bf00      	nop
 8008bf8:	08009010 	.word	0x08009010
 8008bfc:	0800915c 	.word	0x0800915c
 8008c00:	08009030 	.word	0x08009030
 8008c04:	08008ff0 	.word	0x08008ff0
 8008c08:	08009162 	.word	0x08009162
 8008c0c:	08009166 	.word	0x08009166
 8008c10:	08005171 	.word	0x08005171
 8008c14:	080089c7 	.word	0x080089c7

08008c18 <_sbrk_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4c05      	ldr	r4, [pc, #20]	; (8008c34 <_sbrk_r+0x1c>)
 8008c1e:	4605      	mov	r5, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	f7f9 fb88 	bl	8002338 <_sbrk>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_sbrk_r+0x1a>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_sbrk_r+0x1a>
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	2000045c 	.word	0x2000045c

08008c38 <__sread>:
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c40:	f000 f8b4 	bl	8008dac <_read_r>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	bfab      	itete	ge
 8008c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c4c:	181b      	addge	r3, r3, r0
 8008c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c52:	bfac      	ite	ge
 8008c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c56:	81a3      	strhlt	r3, [r4, #12]
 8008c58:	bd10      	pop	{r4, pc}

08008c5a <__swrite>:
 8008c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5e:	461f      	mov	r7, r3
 8008c60:	898b      	ldrh	r3, [r1, #12]
 8008c62:	4605      	mov	r5, r0
 8008c64:	05db      	lsls	r3, r3, #23
 8008c66:	460c      	mov	r4, r1
 8008c68:	4616      	mov	r6, r2
 8008c6a:	d505      	bpl.n	8008c78 <__swrite+0x1e>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c74:	f000 f886 	bl	8008d84 <_lseek_r>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c80:	81a3      	strh	r3, [r4, #12]
 8008c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c86:	463b      	mov	r3, r7
 8008c88:	4628      	mov	r0, r5
 8008c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	f000 b835 	b.w	8008cfc <_write_r>

08008c92 <__sseek>:
 8008c92:	b510      	push	{r4, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9a:	f000 f873 	bl	8008d84 <_lseek_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	bf15      	itete	ne
 8008ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cae:	81a3      	strheq	r3, [r4, #12]
 8008cb0:	bf18      	it	ne
 8008cb2:	81a3      	strhne	r3, [r4, #12]
 8008cb4:	bd10      	pop	{r4, pc}

08008cb6 <__sclose>:
 8008cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cba:	f000 b831 	b.w	8008d20 <_close_r>

08008cbe <strncmp>:
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	b16a      	cbz	r2, 8008cde <strncmp+0x20>
 8008cc2:	3901      	subs	r1, #1
 8008cc4:	1884      	adds	r4, r0, r2
 8008cc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008cca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d103      	bne.n	8008cda <strncmp+0x1c>
 8008cd2:	42a0      	cmp	r0, r4
 8008cd4:	d001      	beq.n	8008cda <strncmp+0x1c>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f5      	bne.n	8008cc6 <strncmp+0x8>
 8008cda:	1a98      	subs	r0, r3, r2
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	4610      	mov	r0, r2
 8008ce0:	e7fc      	b.n	8008cdc <strncmp+0x1e>

08008ce2 <__ascii_wctomb>:
 8008ce2:	b149      	cbz	r1, 8008cf8 <__ascii_wctomb+0x16>
 8008ce4:	2aff      	cmp	r2, #255	; 0xff
 8008ce6:	bf8b      	itete	hi
 8008ce8:	238a      	movhi	r3, #138	; 0x8a
 8008cea:	700a      	strbls	r2, [r1, #0]
 8008cec:	6003      	strhi	r3, [r0, #0]
 8008cee:	2001      	movls	r0, #1
 8008cf0:	bf88      	it	hi
 8008cf2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008cf6:	4770      	bx	lr
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4770      	bx	lr

08008cfc <_write_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4605      	mov	r5, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	4611      	mov	r1, r2
 8008d04:	2200      	movs	r2, #0
 8008d06:	4c05      	ldr	r4, [pc, #20]	; (8008d1c <_write_r+0x20>)
 8008d08:	6022      	str	r2, [r4, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f7f9 f85c 	bl	8001dc8 <_write>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_write_r+0x1e>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_write_r+0x1e>
 8008d18:	602b      	str	r3, [r5, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	2000045c 	.word	0x2000045c

08008d20 <_close_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	2300      	movs	r3, #0
 8008d24:	4c05      	ldr	r4, [pc, #20]	; (8008d3c <_close_r+0x1c>)
 8008d26:	4605      	mov	r5, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	f7f9 f878 	bl	8001e20 <_close>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_close_r+0x1a>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_close_r+0x1a>
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	2000045c 	.word	0x2000045c

08008d40 <_fstat_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	2300      	movs	r3, #0
 8008d44:	4c06      	ldr	r4, [pc, #24]	; (8008d60 <_fstat_r+0x20>)
 8008d46:	4605      	mov	r5, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	f7f9 f8b7 	bl	8001ec0 <_fstat>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	d102      	bne.n	8008d5c <_fstat_r+0x1c>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	b103      	cbz	r3, 8008d5c <_fstat_r+0x1c>
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	bd38      	pop	{r3, r4, r5, pc}
 8008d5e:	bf00      	nop
 8008d60:	2000045c 	.word	0x2000045c

08008d64 <_isatty_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	2300      	movs	r3, #0
 8008d68:	4c05      	ldr	r4, [pc, #20]	; (8008d80 <_isatty_r+0x1c>)
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	f7f9 f814 	bl	8001d9c <_isatty>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_isatty_r+0x1a>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_isatty_r+0x1a>
 8008d7c:	602b      	str	r3, [r5, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	2000045c 	.word	0x2000045c

08008d84 <_lseek_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4605      	mov	r5, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4c05      	ldr	r4, [pc, #20]	; (8008da4 <_lseek_r+0x20>)
 8008d90:	6022      	str	r2, [r4, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	f7f9 f85b 	bl	8001e4e <_lseek>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d102      	bne.n	8008da2 <_lseek_r+0x1e>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	b103      	cbz	r3, 8008da2 <_lseek_r+0x1e>
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	2000045c 	.word	0x2000045c

08008da8 <__malloc_lock>:
 8008da8:	4770      	bx	lr

08008daa <__malloc_unlock>:
 8008daa:	4770      	bx	lr

08008dac <_read_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4605      	mov	r5, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	2200      	movs	r2, #0
 8008db6:	4c05      	ldr	r4, [pc, #20]	; (8008dcc <_read_r+0x20>)
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f7f9 f858 	bl	8001e70 <_read>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_read_r+0x1e>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_read_r+0x1e>
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	2000045c 	.word	0x2000045c

08008dd0 <_init>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr

08008ddc <_fini>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr
