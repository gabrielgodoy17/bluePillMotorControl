
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006c40  08006c40  00016c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08007038  08007038  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007038  08007038  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08007040  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000208  08007248  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08007248  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb6d  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4d  00000000  00000000  0002bd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002e410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018614  00000000  00000000  0002ef58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094b3  00000000  00000000  0004756c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b7ec  00000000  00000000  00050a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc20b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  000dc288  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000e02c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000e0360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c28 	.word	0x08006c28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08006c28 	.word	0x08006c28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
//			break;
	}

}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8000ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6178      	str	r0, [r7, #20]
	if(htim->Instance == TIM1){
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a98      	ldr	r2, [pc, #608]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	f040 82f2 	bne.w	80010c2 <HAL_TIM_PeriodElapsedCallback+0x5fa>
		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 8000ade:	4b97      	ldr	r3, [pc, #604]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b94      	ldr	r3, [pc, #592]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af2:	4413      	add	r3, r2
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000af8:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 8000afa:	4b92      	ldr	r3, [pc, #584]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b92      	ldr	r3, [pc, #584]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc7d 	bl	8000404 <__aeabi_i2d>
 8000b0a:	4b90      	ldr	r3, [pc, #576]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b0c:	cb18      	ldmia	r3, {r3, r4}
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4623      	mov	r3, r4
 8000b12:	f7ff fe0b 	bl	800072c <__aeabi_ddiv>
 8000b16:	4603      	mov	r3, r0
 8000b18:	460c      	mov	r4, r1
 8000b1a:	4a8d      	ldr	r2, [pc, #564]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b1c:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 8000b20:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b26:	a382      	add	r3, pc, #520	; (adr r3, 8000d30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fdfe 	bl	800072c <__aeabi_ddiv>
 8000b30:	4603      	mov	r3, r0
 8000b32:	460c      	mov	r4, r1
 8000b34:	4618      	mov	r0, r3
 8000b36:	4621      	mov	r1, r4
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b85      	ldr	r3, [pc, #532]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b3e:	f7ff fccb 	bl	80004d8 <__aeabi_dmul>
 8000b42:	4603      	mov	r3, r0
 8000b44:	460c      	mov	r4, r1
 8000b46:	4a84      	ldr	r2, [pc, #528]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b48:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8000b4c:	4b7d      	ldr	r3, [pc, #500]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a7d      	ldr	r2, [pc, #500]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000b52:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 8000b54:	4b81      	ldr	r3, [pc, #516]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	4413      	add	r3, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b7d      	ldr	r3, [pc, #500]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b6e:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 8000b70:	4b7c      	ldr	r3, [pc, #496]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b7c      	ldr	r3, [pc, #496]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fc42 	bl	8000404 <__aeabi_i2d>
 8000b80:	4b72      	ldr	r3, [pc, #456]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b82:	cb18      	ldmia	r3, {r3, r4}
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	f7ff fdd0 	bl	800072c <__aeabi_ddiv>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	460c      	mov	r4, r1
 8000b90:	4a76      	ldr	r2, [pc, #472]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b92:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 8000b96:	4b75      	ldr	r3, [pc, #468]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b9c:	a364      	add	r3, pc, #400	; (adr r3, 8000d30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba2:	f7ff fdc3 	bl	800072c <__aeabi_ddiv>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460c      	mov	r4, r1
 8000baa:	4618      	mov	r0, r3
 8000bac:	4621      	mov	r1, r4
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	4b68      	ldr	r3, [pc, #416]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	460c      	mov	r4, r1
 8000bbc:	4a6c      	ldr	r2, [pc, #432]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000bbe:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 8000bc2:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a68      	ldr	r2, [pc, #416]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000bc8:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 8000bca:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	f040 82b6 	bne.w	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bda:	4b5f      	ldr	r3, [pc, #380]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000bdc:	cb18      	ldmia	r3, {r3, r4}
 8000bde:	461a      	mov	r2, r3
 8000be0:	4623      	mov	r3, r4
 8000be2:	f7ff fac1 	bl	8000168 <__aeabi_dsub>
 8000be6:	4603      	mov	r3, r0
 8000be8:	460c      	mov	r4, r1
 8000bea:	4a64      	ldr	r2, [pc, #400]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bec:	e9c2 3400 	strd	r3, r4, [r2]
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//			}else if(error_vel_act>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
			if(stop1==1){
 8000bf0:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d106      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x13e>
			  Ui_anterior=0;
 8000bf8:	4a62      	ldr	r2, [pc, #392]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	f04f 0400 	mov.w	r4, #0
 8000c02:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 8000c06:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc0c 	bl	8000428 <__aeabi_f2d>
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c12:	cb18      	ldmia	r3, {r3, r4}
 8000c14:	461a      	mov	r2, r3
 8000c16:	4623      	mov	r3, r4
 8000c18:	f7ff fc5e 	bl	80004d8 <__aeabi_dmul>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	460c      	mov	r4, r1
 8000c20:	4a5a      	ldr	r2, [pc, #360]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c22:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_ant);
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fbfc 	bl	8000428 <__aeabi_f2d>
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c32:	cb18      	ldmia	r3, {r3, r4}
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	f7ff fc4e 	bl	80004d8 <__aeabi_dmul>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	460c      	mov	r4, r1
 8000c40:	4618      	mov	r0, r3
 8000c42:	4621      	mov	r1, r4
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c46:	cb18      	ldmia	r3, {r3, r4}
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	f7ff fc44 	bl	80004d8 <__aeabi_dmul>
 8000c50:	4603      	mov	r3, r0
 8000c52:	460c      	mov	r4, r1
 8000c54:	4618      	mov	r0, r3
 8000c56:	4621      	mov	r1, r4
 8000c58:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c5a:	cb18      	ldmia	r3, {r3, r4}
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f7ff fa84 	bl	800016c <__adddf3>
 8000c64:	4603      	mov	r3, r0
 8000c66:	460c      	mov	r4, r1
 8000c68:	4a4b      	ldr	r2, [pc, #300]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c6a:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbd8 	bl	8000428 <__aeabi_f2d>
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c7a:	cb18      	ldmia	r3, {r3, r4}
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4623      	mov	r3, r4
 8000c80:	f7ff fd54 	bl	800072c <__aeabi_ddiv>
 8000c84:	4603      	mov	r3, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	461d      	mov	r5, r3
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c92:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c94:	cb18      	ldmia	r3, {r3, r4}
 8000c96:	461a      	mov	r2, r3
 8000c98:	4623      	mov	r3, r4
 8000c9a:	f7ff fa65 	bl	8000168 <__aeabi_dsub>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460c      	mov	r4, r1
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	4631      	mov	r1, r6
 8000caa:	f7ff fc15 	bl	80004d8 <__aeabi_dmul>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460c      	mov	r4, r1
 8000cb2:	4a3b      	ldr	r2, [pc, #236]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cb4:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna>0){
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	f7ff fe97 	bl	80009f8 <__aeabi_dcmpgt>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d06b      	beq.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid +(Up + Ui_actual + Ud));
 8000cd0:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb85 	bl	80003e4 <__aeabi_ui2d>
 8000cda:	4605      	mov	r5, r0
 8000cdc:	460e      	mov	r6, r1
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ce6:	cb18      	ldmia	r3, {r3, r4}
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4623      	mov	r3, r4
 8000cec:	f7ff fa3e 	bl	800016c <__adddf3>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	4621      	mov	r1, r4
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cfa:	cb18      	ldmia	r3, {r3, r4}
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4623      	mov	r3, r4
 8000d00:	f7ff fa34 	bl	800016c <__adddf3>
 8000d04:	4603      	mov	r3, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	4631      	mov	r1, r6
 8000d10:	f7ff fa2c 	bl	800016c <__adddf3>
 8000d14:	4603      	mov	r3, r0
 8000d16:	460c      	mov	r4, r1
 8000d18:	469a      	mov	sl, r3
 8000d1a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8000d1e:	4650      	mov	r0, sl
 8000d20:	4659      	mov	r1, fp
 8000d22:	f7ff feb1 	bl	8000a88 <__aeabi_d2uiz>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e07a      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x35c>
 8000d2e:	bf00      	nop
 8000d30:	00000000 	.word	0x00000000
 8000d34:	40bce000 	.word	0x40bce000
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	20000224 	.word	0x20000224
 8000d40:	20000388 	.word	0x20000388
 8000d44:	2000022c 	.word	0x2000022c
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000240 	.word	0x20000240
 8000d54:	404e0000 	.word	0x404e0000
 8000d58:	20000248 	.word	0x20000248
 8000d5c:	20000230 	.word	0x20000230
 8000d60:	2000033c 	.word	0x2000033c
 8000d64:	20000238 	.word	0x20000238
 8000d68:	20000234 	.word	0x20000234
 8000d6c:	20000250 	.word	0x20000250
 8000d70:	20000258 	.word	0x20000258
 8000d74:	20000020 	.word	0x20000020
 8000d78:	20000280 	.word	0x20000280
 8000d7c:	20000260 	.word	0x20000260
 8000d80:	20000024 	.word	0x20000024
 8000d84:	20000290 	.word	0x20000290
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200002a0 	.word	0x200002a0
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20000268 	.word	0x20000268
 8000d98:	20000298 	.word	0x20000298
 8000d9c:	20000010 	.word	0x20000010
 8000da0:	200002a8 	.word	0x200002a8
 8000da4:	200002d0 	.word	0x200002d0
			}else if(velocidad_consigna<0){
 8000da8:	4ba0      	ldr	r3, [pc, #640]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	f7ff fe01 	bl	80009bc <__aeabi_dcmplt>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02e      	beq.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x356>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid -(Up + Ui_actual + Ud));
 8000dc0:	4b9b      	ldr	r3, [pc, #620]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fb0d 	bl	80003e4 <__aeabi_ui2d>
 8000dca:	4605      	mov	r5, r0
 8000dcc:	460e      	mov	r6, r1
 8000dce:	4b99      	ldr	r3, [pc, #612]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd4:	4b98      	ldr	r3, [pc, #608]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000dd6:	cb18      	ldmia	r3, {r3, r4}
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4623      	mov	r3, r4
 8000ddc:	f7ff f9c6 	bl	800016c <__adddf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	4618      	mov	r0, r3
 8000de6:	4621      	mov	r1, r4
 8000de8:	4b94      	ldr	r3, [pc, #592]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000dea:	cb18      	ldmia	r3, {r3, r4}
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	f7ff f9bc 	bl	800016c <__adddf3>
 8000df4:	4603      	mov	r3, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	4631      	mov	r1, r6
 8000e00:	f7ff f9b2 	bl	8000168 <__aeabi_dsub>
 8000e04:	4603      	mov	r3, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	4698      	mov	r8, r3
 8000e0a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8000e0e:	4640      	mov	r0, r8
 8000e10:	4649      	mov	r1, r9
 8000e12:	f7ff fe39 	bl	8000a88 <__aeabi_d2uiz>
 8000e16:	4602      	mov	r2, r0
 8000e18:	4b85      	ldr	r3, [pc, #532]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e002      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x35c>
			}else{
				duty_cycle_pid = 0;
 8000e1e:	4b84      	ldr	r3, [pc, #528]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
			}
      if(duty_cycle_pid > 14000){
 8000e24:	4b82      	ldr	r3, [pc, #520]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d903      	bls.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x370>
				duty_cycle_pid=14000;
 8000e30:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e32:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000e36:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8000e38:	4b81      	ldr	r3, [pc, #516]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a7c      	ldr	r2, [pc, #496]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8000e42:	4b7d      	ldr	r3, [pc, #500]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e44:	cb18      	ldmia	r3, {r3, r4}
 8000e46:	4a7f      	ldr	r2, [pc, #508]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000e48:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 8000e4c:	4b7e      	ldr	r3, [pc, #504]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000e4e:	cb18      	ldmia	r3, {r3, r4}
 8000e50:	4a7e      	ldr	r2, [pc, #504]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000e52:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 8000e56:	4b7e      	ldr	r3, [pc, #504]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e5c:	4b7d      	ldr	r3, [pc, #500]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000e5e:	cb18      	ldmia	r3, {r3, r4}
 8000e60:	461a      	mov	r2, r3
 8000e62:	4623      	mov	r3, r4
 8000e64:	f7ff f980 	bl	8000168 <__aeabi_dsub>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4a7a      	ldr	r2, [pc, #488]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e6e:	e9c2 3400 	strd	r3, r4, [r2]
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
//			}else if(error_vel_act2>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
//     }
			if(stop2==1){
 8000e72:	4b7a      	ldr	r3, [pc, #488]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d106      	bne.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				Ui_anterior2=0;
 8000e7a:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	f04f 0400 	mov.w	r4, #0
 8000e84:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2=KP2 * error_vel_act2;
 8000e88:	4b76      	ldr	r3, [pc, #472]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff facb 	bl	8000428 <__aeabi_f2d>
 8000e92:	4b71      	ldr	r3, [pc, #452]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e94:	cb18      	ldmia	r3, {r3, r4}
 8000e96:	461a      	mov	r2, r3
 8000e98:	4623      	mov	r3, r4
 8000e9a:	f7ff fb1d 	bl	80004d8 <__aeabi_dmul>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	4a71      	ldr	r2, [pc, #452]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000ea4:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 8000ea8:	4b70      	ldr	r3, [pc, #448]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fabb 	bl	8000428 <__aeabi_f2d>
 8000eb2:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000eb4:	cb18      	ldmia	r3, {r3, r4}
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff fb0d 	bl	80004d8 <__aeabi_dmul>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000ec8:	cb18      	ldmia	r3, {r3, r4}
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4623      	mov	r3, r4
 8000ece:	f7ff fb03 	bl	80004d8 <__aeabi_dmul>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	4621      	mov	r1, r4
 8000eda:	4b61      	ldr	r3, [pc, #388]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000edc:	cb18      	ldmia	r3, {r3, r4}
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4623      	mov	r3, r4
 8000ee2:	f7ff f943 	bl	800016c <__adddf3>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4a63      	ldr	r2, [pc, #396]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000eec:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 8000ef0:	4b62      	ldr	r3, [pc, #392]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fa97 	bl	8000428 <__aeabi_f2d>
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000efc:	cb18      	ldmia	r3, {r3, r4}
 8000efe:	461a      	mov	r2, r3
 8000f00:	4623      	mov	r3, r4
 8000f02:	f7ff fc13 	bl	800072c <__aeabi_ddiv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	460c      	mov	r4, r1
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	4626      	mov	r6, r4
 8000f0e:	4b52      	ldr	r3, [pc, #328]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000f16:	cb18      	ldmia	r3, {r3, r4}
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	f7ff f924 	bl	8000168 <__aeabi_dsub>
 8000f20:	4603      	mov	r3, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	461a      	mov	r2, r3
 8000f26:	4623      	mov	r3, r4
 8000f28:	4628      	mov	r0, r5
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	f7ff fad4 	bl	80004d8 <__aeabi_dmul>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4a52      	ldr	r2, [pc, #328]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000f36:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna2 > 0){
 8000f3a:	4b45      	ldr	r3, [pc, #276]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	f7ff fd56 	bl	80009f8 <__aeabi_dcmpgt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02f      	beq.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x4ea>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 +(Up2 + Ui_actual2 + Ud2));
 8000f52:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa44 	bl	80003e4 <__aeabi_ui2d>
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	460e      	mov	r6, r1
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000f68:	cb18      	ldmia	r3, {r3, r4}
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	f7ff f8fd 	bl	800016c <__adddf3>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	4618      	mov	r0, r3
 8000f78:	4621      	mov	r1, r4
 8000f7a:	4b41      	ldr	r3, [pc, #260]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000f7c:	cb18      	ldmia	r3, {r3, r4}
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4623      	mov	r3, r4
 8000f82:	f7ff f8f3 	bl	800016c <__adddf3>
 8000f86:	4603      	mov	r3, r0
 8000f88:	460c      	mov	r4, r1
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	4628      	mov	r0, r5
 8000f90:	4631      	mov	r1, r6
 8000f92:	f7ff f8eb 	bl	800016c <__adddf3>
 8000f96:	4603      	mov	r3, r0
 8000f98:	460c      	mov	r4, r1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa6:	f7ff fd6f 	bl	8000a88 <__aeabi_d2uiz>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e06d      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x5c6>
			}else if(velocidad_consigna2 < 0){
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	f7ff fcfc 	bl	80009bc <__aeabi_dcmplt>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d05e      	beq.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x5c0>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 -(Up2 + Ui_actual2 + Ud2));
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa08 	bl	80003e4 <__aeabi_ui2d>
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	460e      	mov	r6, r1
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fe0:	cb18      	ldmia	r3, {r3, r4}
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	f7ff f8c1 	bl	800016c <__adddf3>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000ff4:	cb18      	ldmia	r3, {r3, r4}
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	f7ff f8b7 	bl	800016c <__adddf3>
 8000ffe:	4603      	mov	r3, r0
 8001000:	460c      	mov	r4, r1
 8001002:	461a      	mov	r2, r3
 8001004:	4623      	mov	r3, r4
 8001006:	4628      	mov	r0, r5
 8001008:	4631      	mov	r1, r6
 800100a:	f7ff f8ad 	bl	8000168 <__aeabi_dsub>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800101e:	f7ff fd33 	bl	8000a88 <__aeabi_d2uiz>
 8001022:	4602      	mov	r2, r0
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e031      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x5c6>
 800102a:	bf00      	nop
 800102c:	20000280 	.word	0x20000280
 8001030:	200002d0 	.word	0x200002d0
 8001034:	200002a0 	.word	0x200002a0
 8001038:	20000298 	.word	0x20000298
 800103c:	200002a8 	.word	0x200002a8
 8001040:	20000444 	.word	0x20000444
 8001044:	20000290 	.word	0x20000290
 8001048:	20000260 	.word	0x20000260
 800104c:	20000268 	.word	0x20000268
 8001050:	20000288 	.word	0x20000288
 8001054:	20000258 	.word	0x20000258
 8001058:	20000270 	.word	0x20000270
 800105c:	20000028 	.word	0x20000028
 8001060:	200002b0 	.word	0x200002b0
 8001064:	20000014 	.word	0x20000014
 8001068:	200002c0 	.word	0x200002c0
 800106c:	20000018 	.word	0x20000018
 8001070:	20000000 	.word	0x20000000
 8001074:	20000278 	.word	0x20000278
 8001078:	200002b8 	.word	0x200002b8
 800107c:	2000001c 	.word	0x2000001c
 8001080:	200002c8 	.word	0x200002c8
 8001084:	200002d4 	.word	0x200002d4
			}else{
				duty_cycle_pid2 = 0;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
			}
			if(duty_cycle_pid2 > 14000){
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001096:	4293      	cmp	r3, r2
 8001098:	d903      	bls.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x5da>
				duty_cycle_pid2=14000;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800109c:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80010a0:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a29      	ldr	r2, [pc, #164]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80010ae:	cb18      	ldmia	r3, {r3, r4}
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80010b2:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x694>)
 80010b8:	cb18      	ldmia	r3, {r3, r4}
 80010ba:	4a29      	ldr	r2, [pc, #164]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80010bc:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 80010c0:	e03e      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM3){
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d11a      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x63a>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	085b      	lsrs	r3, r3, #1
 80010da:	429a      	cmp	r2, r3
 80010dc:	d908      	bls.n	80010f0 <HAL_TIM_PeriodElapsedCallback+0x628>
			contOUFlow--;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010e6:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 80010e8:	4821      	ldr	r0, [pc, #132]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80010ea:	f003 fff5 	bl	80050d8 <puts>
}
 80010ee:	e027      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow++;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010f8:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 80010fa:	481e      	ldr	r0, [pc, #120]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010fc:	f003 ffec 	bl	80050d8 <puts>
}
 8001100:	e01e      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM4){
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d119      	bne.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	429a      	cmp	r2, r3
 800111c:	d908      	bls.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x668>
			contOUFlow2--;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3b01      	subs	r3, #1
 8001124:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001126:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 8001128:	4816      	ldr	r0, [pc, #88]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800112a:	f003 ffd5 	bl	80050d8 <puts>
}
 800112e:	e007      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow2++;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001138:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800113c:	f003 ffcc 	bl	80050d8 <puts>
}
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114a:	bf00      	nop
 800114c:	200002d4 	.word	0x200002d4
 8001150:	20000444 	.word	0x20000444
 8001154:	200002b8 	.word	0x200002b8
 8001158:	200002b0 	.word	0x200002b0
 800115c:	20000270 	.word	0x20000270
 8001160:	20000278 	.word	0x20000278
 8001164:	40000400 	.word	0x40000400
 8001168:	20000388 	.word	0x20000388
 800116c:	20000224 	.word	0x20000224
 8001170:	08006d30 	.word	0x08006d30
 8001174:	08006d44 	.word	0x08006d44
 8001178:	40000800 	.word	0x40000800
 800117c:	2000033c 	.word	0x2000033c
 8001180:	20000230 	.word	0x20000230
 8001184:	08006d58 	.word	0x08006d58
 8001188:	08006d6c 	.word	0x08006d6c

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fdea 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f88a 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 faca 	bl	8001730 <MX_GPIO_Init>
  MX_TIM2_Init();
 800119c:	f000 f9a0 	bl	80014e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011a0:	f000 f900 	bl	80013a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011a4:	f000 fa1c 	bl	80015e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011a8:	f000 fa6e 	bl	8001688 <MX_TIM4_Init>
  MX_SPI2_Init();
 80011ac:	f000 f8c4 	bl	8001338 <MX_SPI2_Init>

	//RetargetInit(&huart2);
	//HAL_UART_Receive_IT(&huart2, &byte, 1);
    //HAL_SPI_Receive_IT(&hspi2, &byte, 1);

	HAL_TIM_Base_Start_IT(&htim1);
 80011b0:	4835      	ldr	r0, [pc, #212]	; (8001288 <main+0xfc>)
 80011b2:	f002 f943 	bl	800343c <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80011b6:	2100      	movs	r1, #0
 80011b8:	4833      	ldr	r0, [pc, #204]	; (8001288 <main+0xfc>)
 80011ba:	f002 f9e9 	bl	8003590 <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 80011be:	4833      	ldr	r0, [pc, #204]	; (800128c <main+0x100>)
 80011c0:	f002 f8f2 	bl	80033a8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80011c4:	2100      	movs	r1, #0
 80011c6:	4831      	ldr	r0, [pc, #196]	; (800128c <main+0x100>)
 80011c8:	f002 fb22 	bl	8003810 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80011cc:	2108      	movs	r1, #8
 80011ce:	482f      	ldr	r0, [pc, #188]	; (800128c <main+0x100>)
 80011d0:	f002 fb1e 	bl	8003810 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80011d4:	482e      	ldr	r0, [pc, #184]	; (8001290 <main+0x104>)
 80011d6:	f002 f931 	bl	800343c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80011da:	213c      	movs	r1, #60	; 0x3c
 80011dc:	482c      	ldr	r0, [pc, #176]	; (8001290 <main+0x104>)
 80011de:	f002 fca1 	bl	8003b24 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 80011e2:	482c      	ldr	r0, [pc, #176]	; (8001294 <main+0x108>)
 80011e4:	f002 f92a 	bl	800343c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80011e8:	213c      	movs	r1, #60	; 0x3c
 80011ea:	482a      	ldr	r0, [pc, #168]	; (8001294 <main+0x108>)
 80011ec:	f002 fc9a 	bl	8003b24 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2110      	movs	r1, #16
 80011f4:	4828      	ldr	r0, [pc, #160]	; (8001298 <main+0x10c>)
 80011f6:	f001 f919 	bl	800242c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2120      	movs	r1, #32
 80011fe:	4826      	ldr	r0, [pc, #152]	; (8001298 <main+0x10c>)
 8001200:	f001 f914 	bl	800242c <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120a:	4823      	ldr	r0, [pc, #140]	; (8001298 <main+0x10c>)
 800120c:	f001 f90e 	bl	800242c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001216:	4820      	ldr	r0, [pc, #128]	; (8001298 <main+0x10c>)
 8001218:	f001 f908 	bl	800242c <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <main+0x104>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <main+0x108>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	byte=':';
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <main+0x110>)
 800122e:	223a      	movs	r2, #58	; 0x3a
 8001230:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	4819      	ldr	r0, [pc, #100]	; (80012a0 <main+0x114>)
 800123a:	f001 f8f7 	bl	800242c <HAL_GPIO_WritePin>
	while (1) {
		//transmision spi
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <main+0x114>)
 8001246:	f001 f8f1 	bl	800242c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &byte, 1,1);
 800124a:	2301      	movs	r3, #1
 800124c:	2201      	movs	r2, #1
 800124e:	4913      	ldr	r1, [pc, #76]	; (800129c <main+0x110>)
 8001250:	4814      	ldr	r0, [pc, #80]	; (80012a4 <main+0x118>)
 8001252:	f001 fd71 	bl	8002d38 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125c:	4810      	ldr	r0, [pc, #64]	; (80012a0 <main+0x114>)
 800125e:	f001 f8e5 	bl	800242c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <main+0x11c>)
 800126a:	f001 f8df 	bl	800242c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800126e:	2064      	movs	r0, #100	; 0x64
 8001270:	f000 fddc 	bl	8001e2c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <main+0x11c>)
 800127c:	f001 f8d6 	bl	800242c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001280:	2064      	movs	r0, #100	; 0x64
 8001282:	f000 fdd3 	bl	8001e2c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001286:	e7da      	b.n	800123e <main+0xb2>
 8001288:	200003fc 	.word	0x200003fc
 800128c:	20000444 	.word	0x20000444
 8001290:	20000388 	.word	0x20000388
 8001294:	2000033c 	.word	0x2000033c
 8001298:	40010800 	.word	0x40010800
 800129c:	200003f8 	.word	0x200003f8
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	200002e4 	.word	0x200002e4
 80012a8:	40011000 	.word	0x40011000

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	; 0x40
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fb6a 	bl	8004994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 f8b1 	bl	800245c <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001300:	f000 fa84 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fb1c 	bl	800295c <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800132a:	f000 fa6f 	bl	800180c <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3740      	adds	r7, #64	; 0x40
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_SPI2_Init+0x64>)
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <MX_SPI2_Init+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPI2_Init+0x64>)
 8001344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001348:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_SPI2_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPI2_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPI2_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPI2_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPI2_Init+0x64>)
 8001364:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001368:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPI2_Init+0x64>)
 800136c:	2238      	movs	r2, #56	; 0x38
 800136e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_SPI2_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPI2_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_SPI2_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPI2_Init+0x64>)
 8001384:	220a      	movs	r2, #10
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_SPI2_Init+0x64>)
 800138a:	f001 fc51 	bl	8002c30 <HAL_SPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001394:	f000 fa3a 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200002e4 	.word	0x200002e4
 80013a0:	40003800 	.word	0x40003800

080013a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	; 0x58
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fad9 	bl	8004994 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <MX_TIM1_Init+0x134>)
 80013e4:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <MX_TIM1_Init+0x138>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <MX_TIM1_Init+0x134>)
 80013ea:	220b      	movs	r2, #11
 80013ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <MX_TIM1_Init+0x134>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <MX_TIM1_Init+0x134>)
 80013f6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80013fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_TIM1_Init+0x134>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <MX_TIM1_Init+0x134>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_TIM1_Init+0x134>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140e:	4832      	ldr	r0, [pc, #200]	; (80014d8 <MX_TIM1_Init+0x134>)
 8001410:	f001 ff7a 	bl	8003308 <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800141a:	f000 f9f7 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001424:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001428:	4619      	mov	r1, r3
 800142a:	482b      	ldr	r0, [pc, #172]	; (80014d8 <MX_TIM1_Init+0x134>)
 800142c:	f002 fe46 	bl	80040bc <HAL_TIM_ConfigClockSource>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001436:	f000 f9e9 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800143a:	4827      	ldr	r0, [pc, #156]	; (80014d8 <MX_TIM1_Init+0x134>)
 800143c:	f002 f850 	bl	80034e0 <HAL_TIM_OC_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001446:	f000 f9e1 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001456:	4619      	mov	r1, r3
 8001458:	481f      	ldr	r0, [pc, #124]	; (80014d8 <MX_TIM1_Init+0x134>)
 800145a:	f003 f9af 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001464:	f000 f9d2 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <MX_TIM1_Init+0x134>)
 800148e:	f002 fcff 	bl	8003e90 <HAL_TIM_OC_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001498:	f000 f9b8 	bl	800180c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM1_Init+0x134>)
 80014c0:	f003 f9da 	bl	8004878 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014ca:	f000 f99f 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3758      	adds	r7, #88	; 0x58
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003fc 	.word	0x200003fc
 80014dc:	40012c00 	.word	0x40012c00

080014e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	; 0x38
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001510:	4b32      	ldr	r3, [pc, #200]	; (80015dc <MX_TIM2_Init+0xfc>)
 8001512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001516:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <MX_TIM2_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <MX_TIM2_Init+0xfc>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <MX_TIM2_Init+0xfc>)
 8001526:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800152a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <MX_TIM2_Init+0xfc>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <MX_TIM2_Init+0xfc>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001538:	4828      	ldr	r0, [pc, #160]	; (80015dc <MX_TIM2_Init+0xfc>)
 800153a:	f001 fee5 	bl	8003308 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001544:	f000 f962 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800154e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001552:	4619      	mov	r1, r3
 8001554:	4821      	ldr	r0, [pc, #132]	; (80015dc <MX_TIM2_Init+0xfc>)
 8001556:	f002 fdb1 	bl	80040bc <HAL_TIM_ConfigClockSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001560:	f000 f954 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001564:	481d      	ldr	r0, [pc, #116]	; (80015dc <MX_TIM2_Init+0xfc>)
 8001566:	f002 f8fb 	bl	8003760 <HAL_TIM_PWM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001570:	f000 f94c 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4619      	mov	r1, r3
 8001582:	4816      	ldr	r0, [pc, #88]	; (80015dc <MX_TIM2_Init+0xfc>)
 8001584:	f003 f91a 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800158e:	f000 f93d 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001592:	2360      	movs	r3, #96	; 0x60
 8001594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_TIM2_Init+0xfc>)
 80015aa:	f002 fcc9 	bl	8003f40 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015b4:	f000 f92a 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2208      	movs	r2, #8
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <MX_TIM2_Init+0xfc>)
 80015c0:	f002 fcbe 	bl	8003f40 <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015ca:	f000 f91f 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <MX_TIM2_Init+0xfc>)
 80015d0:	f000 fa74 	bl	8001abc <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3738      	adds	r7, #56	; 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000444 	.word	0x20000444

080015e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2224      	movs	r2, #36	; 0x24
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 f9d0 	bl	8004994 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <MX_TIM3_Init+0xa0>)
 80015fe:	4a21      	ldr	r2, [pc, #132]	; (8001684 <MX_TIM3_Init+0xa4>)
 8001600:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_TIM3_Init+0xa0>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_TIM3_Init+0xa0>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_TIM3_Init+0xa0>)
 8001610:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001614:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_TIM3_Init+0xa0>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_TIM3_Init+0xa0>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001622:	2303      	movs	r3, #3
 8001624:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800162a:	2301      	movs	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800163a:	2301      	movs	r3, #1
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM3_Init+0xa0>)
 800164e:	f002 f9c7 	bl	80039e0 <HAL_TIM_Encoder_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 f8d8 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_TIM3_Init+0xa0>)
 800166a:	f003 f8a7 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001674:	f000 f8ca 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3730      	adds	r7, #48	; 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000388 	.word	0x20000388
 8001684:	40000400 	.word	0x40000400

08001688 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f003 f97c 	bl	8004994 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_TIM4_Init+0xa0>)
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <MX_TIM4_Init+0xa4>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_TIM4_Init+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_TIM4_Init+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM4_Init+0xa0>)
 80016b8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80016bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_TIM4_Init+0xa0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_TIM4_Init+0xa0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ca:	2303      	movs	r3, #3
 80016cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e2:	2301      	movs	r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_TIM4_Init+0xa0>)
 80016f6:	f002 f973 	bl	80039e0 <HAL_TIM_Encoder_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001700:	f000 f884 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_TIM4_Init+0xa0>)
 8001712:	f003 f853 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800171c:	f000 f876 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3730      	adds	r7, #48	; 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000033c 	.word	0x2000033c
 800172c:	40000800 	.word	0x40000800

08001730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <MX_GPIO_Init+0xd0>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <MX_GPIO_Init+0xd0>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <MX_GPIO_Init+0xd0>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <MX_GPIO_Init+0xd0>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <MX_GPIO_Init+0xd0>)
 8001762:	f043 0320 	orr.w	r3, r3, #32
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_GPIO_Init+0xd0>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <MX_GPIO_Init+0xd0>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <MX_GPIO_Init+0xd0>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MX_GPIO_Init+0xd0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_GPIO_Init+0xd0>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <MX_GPIO_Init+0xd0>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_GPIO_Init+0xd0>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	4816      	ldr	r0, [pc, #88]	; (8001804 <MX_GPIO_Init+0xd4>)
 80017ac:	f000 fe3e 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 80017b6:	4814      	ldr	r0, [pc, #80]	; (8001808 <MX_GPIO_Init+0xd8>)
 80017b8:	f000 fe38 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4619      	mov	r1, r3
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <MX_GPIO_Init+0xd4>)
 80017d6:	f000 fccf 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 80017da:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_GPIO_Init+0xd8>)
 80017f4:	f000 fcc0 	bl	8002178 <HAL_GPIO_Init>

}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	40011000 	.word	0x40011000
 8001808:	40010800 	.word	0x40010800

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <HAL_MspInit+0x5c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_MspInit+0x5c>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_MspInit+0x5c>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_MspInit+0x5c>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_MspInit+0x60>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_MspInit+0x60>)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000

0800187c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HAL_SPI_MspInit+0x9c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d139      	bne.n	8001910 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_SPI_MspInit+0xa0>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_SPI_MspInit+0xa0>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_SPI_MspInit+0xa0>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_SPI_MspInit+0xa0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_SPI_MspInit+0xa0>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_SPI_MspInit+0xa0>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80018cc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80018d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	4619      	mov	r1, r3
 80018e0:	480f      	ldr	r0, [pc, #60]	; (8001920 <HAL_SPI_MspInit+0xa4>)
 80018e2:	f000 fc49 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <HAL_SPI_MspInit+0xa4>)
 80018fc:	f000 fc3c 	bl	8002178 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2024      	movs	r0, #36	; 0x24
 8001906:	f000 fb8a 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800190a:	2024      	movs	r0, #36	; 0x24
 800190c:	f000 fba3 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40003800 	.word	0x40003800
 800191c:	40021000 	.word	0x40021000
 8001920:	40010c00 	.word	0x40010c00

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_TIM_Base_MspInit+0x98>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12c      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <HAL_TIM_Base_MspInit+0x9c>)
 800193c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2018      	movs	r0, #24
 8001954:	f000 fb63 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001958:	2018      	movs	r0, #24
 800195a:	f000 fb7c 	bl	8002056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2019      	movs	r0, #25
 8001964:	f000 fb5b 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001968:	2019      	movs	r0, #25
 800196a:	f000 fb74 	bl	8002056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	201a      	movs	r0, #26
 8001974:	f000 fb53 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001978:	201a      	movs	r0, #26
 800197a:	f000 fb6c 	bl	8002056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	201b      	movs	r0, #27
 8001984:	f000 fb4b 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001988:	201b      	movs	r0, #27
 800198a:	f000 fb64 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800198e:	e010      	b.n	80019b2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001998:	d10b      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_TIM_Base_MspInit+0x9c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_TIM_Base_MspInit+0x9c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_TIM_Base_MspInit+0x9c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_TIM_Encoder_MspInit+0xe4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d12c      	bne.n	8001a3e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	4a30      	ldr	r2, [pc, #192]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	61d3      	str	r3, [r2, #28]
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a2a      	ldr	r2, [pc, #168]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0318 	add.w	r3, r7, #24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a28:	f000 fba6 	bl	8002178 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	201d      	movs	r0, #29
 8001a32:	f000 faf4 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a36:	201d      	movs	r0, #29
 8001a38:	f000 fb0d 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a3c:	e030      	b.n	8001aa0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d12b      	bne.n	8001aa0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	61d3      	str	r3, [r2, #28]
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a11      	ldr	r2, [pc, #68]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a8c:	f000 fb74 	bl	8002178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	201e      	movs	r0, #30
 8001a96:	f000 fac2 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a9a:	201e      	movs	r0, #30
 8001a9c:	f000 fadb 	bl	8002056 <HAL_NVIC_EnableIRQ>
}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40000800 	.word	0x40000800
 8001ab8:	40010c00 	.word	0x40010c00

08001abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ada:	d142      	bne.n	8001b62 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_TIM_MspPostInit+0xb0>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_TIM_MspPostInit+0xb0>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_TIM_MspPostInit+0xb0>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_TIM_MspPostInit+0xb0>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_TIM_MspPostInit+0xb0>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_TIM_MspPostInit+0xb0>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4814      	ldr	r0, [pc, #80]	; (8001b70 <HAL_TIM_MspPostInit+0xb4>)
 8001b20:	f000 fb2a 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480e      	ldr	r0, [pc, #56]	; (8001b74 <HAL_TIM_MspPostInit+0xb8>)
 8001b3a:	f000 fb1d 	bl	8002178 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_TIM_MspPostInit+0xbc>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_TIM_MspPostInit+0xbc>)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	40010000 	.word	0x40010000

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <HardFault_Handler+0x4>

08001b8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <MemManage_Handler+0x4>

08001b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <BusFault_Handler+0x4>

08001b9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <UsageFault_Handler+0x4>

08001ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f914 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM1_BRK_IRQHandler+0x10>)
 8001bd6:	f002 f852 	bl	8003c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003fc 	.word	0x200003fc

08001be4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM1_UP_IRQHandler+0x10>)
 8001bea:	f002 f848 	bl	8003c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003fc 	.word	0x200003fc

08001bf8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001bfe:	f002 f83e 	bl	8003c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200003fc 	.word	0x200003fc

08001c0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM1_CC_IRQHandler+0x10>)
 8001c12:	f002 f834 	bl	8003c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200003fc 	.word	0x200003fc

08001c20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM3_IRQHandler+0x10>)
 8001c26:	f002 f82a 	bl	8003c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000388 	.word	0x20000388

08001c34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM4_IRQHandler+0x10>)
 8001c3a:	f002 f820 	bl	8003c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000033c 	.word	0x2000033c

08001c48 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <SPI2_IRQHandler+0x10>)
 8001c4e:	f001 f9af 	bl	8002fb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200002e4 	.word	0x200002e4

08001c5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <_sbrk+0x50>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <_sbrk+0x16>
		heap_end = &end;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <_sbrk+0x50>)
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <_sbrk+0x54>)
 8001c70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <_sbrk+0x50>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <_sbrk+0x50>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	466a      	mov	r2, sp
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d907      	bls.n	8001c96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c86:	f002 fe5b 	bl	8004940 <__errno>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c94:	e006      	b.n	8001ca4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <_sbrk+0x50>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a03      	ldr	r2, [pc, #12]	; (8001cac <_sbrk+0x50>)
 8001ca0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200002d8 	.word	0x200002d8
 8001cb0:	20000498 	.word	0x20000498

08001cb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <SystemInit+0x5c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <SystemInit+0x5c>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <SystemInit+0x5c>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4911      	ldr	r1, [pc, #68]	; (8001d10 <SystemInit+0x5c>)
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <SystemInit+0x60>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <SystemInit+0x5c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <SystemInit+0x5c>)
 8001cd6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <SystemInit+0x5c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SystemInit+0x5c>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <SystemInit+0x5c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <SystemInit+0x5c>)
 8001cf2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cf6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SystemInit+0x5c>)
 8001cfa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cfe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SystemInit+0x64>)
 8001d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d06:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	f8ff0000 	.word	0xf8ff0000
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d42:	f7ff ffb7 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f002 fe01 	bl	800494c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7ff fa1f 	bl	800118c <main>
  bx lr
 8001d4e:	4770      	bx	lr
  ldr r3, =_sidata
 8001d50:	08007040 	.word	0x08007040
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d58:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 8001d5c:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8001d60:	20000494 	.word	0x20000494

08001d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_Init+0x28>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_Init+0x28>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f945 	bl	8002008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fd48 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f95d 	bl	8002072 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd0:	f000 f925 	bl	800201e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000002c 	.word	0x2000002c
 8001dec:	20000034 	.word	0x20000034
 8001df0:	20000030 	.word	0x20000030

08001df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_IncTick+0x1c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x20>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <HAL_IncTick+0x20>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000034 	.word	0x20000034
 8001e14:	2000048c 	.word	0x2000048c

08001e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_GetTick+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	2000048c 	.word	0x2000048c

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_Delay+0x40>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffe0 	bl	8001e18 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000034 	.word	0x20000034

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <__NVIC_EnableIRQ+0x34>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd4:	d301      	bcc.n	8001fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00f      	b.n	8001ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <SysTick_Config+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe8:	f7ff ff90 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <SysTick_Config+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SysTick_Config+0x40>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010

08002008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff2d 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002030:	f7ff ff42 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 8002034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7ff ff90 	bl	8001f60 <NVIC_EncodePriority>
 8002040:	4602      	mov	r2, r0
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff5f 	bl	8001f0c <__NVIC_SetPriority>
}
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff35 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffa2 	bl	8001fc4 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d005      	beq.n	80020ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e051      	b.n	8002152 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 020e 	bic.w	r2, r2, #14
 80020bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_DMA_Abort_IT+0xd0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d029      	beq.n	800212c <HAL_DMA_Abort_IT+0xa0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a20      	ldr	r2, [pc, #128]	; (8002160 <HAL_DMA_Abort_IT+0xd4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d022      	beq.n	8002128 <HAL_DMA_Abort_IT+0x9c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <HAL_DMA_Abort_IT+0xd8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d01a      	beq.n	8002122 <HAL_DMA_Abort_IT+0x96>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_DMA_Abort_IT+0xdc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d012      	beq.n	800211c <HAL_DMA_Abort_IT+0x90>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_DMA_Abort_IT+0xe0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00a      	beq.n	8002116 <HAL_DMA_Abort_IT+0x8a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_DMA_Abort_IT+0xe4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d102      	bne.n	8002110 <HAL_DMA_Abort_IT+0x84>
 800210a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800210e:	e00e      	b.n	800212e <HAL_DMA_Abort_IT+0xa2>
 8002110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002114:	e00b      	b.n	800212e <HAL_DMA_Abort_IT+0xa2>
 8002116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211a:	e008      	b.n	800212e <HAL_DMA_Abort_IT+0xa2>
 800211c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002120:	e005      	b.n	800212e <HAL_DMA_Abort_IT+0xa2>
 8002122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002126:	e002      	b.n	800212e <HAL_DMA_Abort_IT+0xa2>
 8002128:	2310      	movs	r3, #16
 800212a:	e000      	b.n	800212e <HAL_DMA_Abort_IT+0xa2>
 800212c:	2301      	movs	r3, #1
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_DMA_Abort_IT+0xe8>)
 8002130:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
    } 
  }
  return status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40020008 	.word	0x40020008
 8002160:	4002001c 	.word	0x4002001c
 8002164:	40020030 	.word	0x40020030
 8002168:	40020044 	.word	0x40020044
 800216c:	40020058 	.word	0x40020058
 8002170:	4002006c 	.word	0x4002006c
 8002174:	40020000 	.word	0x40020000

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b08b      	sub	sp, #44	; 0x2c
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	e127      	b.n	80023dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800218c:	2201      	movs	r2, #1
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 8116 	bne.w	80023d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d034      	beq.n	800221c <HAL_GPIO_Init+0xa4>
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d80d      	bhi.n	80021d2 <HAL_GPIO_Init+0x5a>
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d02b      	beq.n	8002212 <HAL_GPIO_Init+0x9a>
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d804      	bhi.n	80021c8 <HAL_GPIO_Init+0x50>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d031      	beq.n	8002226 <HAL_GPIO_Init+0xae>
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d01c      	beq.n	8002200 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021c6:	e048      	b.n	800225a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d043      	beq.n	8002254 <HAL_GPIO_Init+0xdc>
 80021cc:	2b11      	cmp	r3, #17
 80021ce:	d01b      	beq.n	8002208 <HAL_GPIO_Init+0x90>
          break;
 80021d0:	e043      	b.n	800225a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021d2:	4a89      	ldr	r2, [pc, #548]	; (80023f8 <HAL_GPIO_Init+0x280>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d026      	beq.n	8002226 <HAL_GPIO_Init+0xae>
 80021d8:	4a87      	ldr	r2, [pc, #540]	; (80023f8 <HAL_GPIO_Init+0x280>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d806      	bhi.n	80021ec <HAL_GPIO_Init+0x74>
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_GPIO_Init+0x284>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d020      	beq.n	8002226 <HAL_GPIO_Init+0xae>
 80021e4:	4a86      	ldr	r2, [pc, #536]	; (8002400 <HAL_GPIO_Init+0x288>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01d      	beq.n	8002226 <HAL_GPIO_Init+0xae>
          break;
 80021ea:	e036      	b.n	800225a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021ec:	4a85      	ldr	r2, [pc, #532]	; (8002404 <HAL_GPIO_Init+0x28c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0xae>
 80021f2:	4a85      	ldr	r2, [pc, #532]	; (8002408 <HAL_GPIO_Init+0x290>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d016      	beq.n	8002226 <HAL_GPIO_Init+0xae>
 80021f8:	4a84      	ldr	r2, [pc, #528]	; (800240c <HAL_GPIO_Init+0x294>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0xae>
          break;
 80021fe:	e02c      	b.n	800225a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e028      	b.n	800225a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	3304      	adds	r3, #4
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e023      	b.n	800225a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	3308      	adds	r3, #8
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e01e      	b.n	800225a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	330c      	adds	r3, #12
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e019      	b.n	800225a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222e:	2304      	movs	r3, #4
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e012      	b.n	800225a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800223c:	2308      	movs	r3, #8
 800223e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	611a      	str	r2, [r3, #16]
          break;
 8002246:	e008      	b.n	800225a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	615a      	str	r2, [r3, #20]
          break;
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
          break;
 8002258:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2bff      	cmp	r3, #255	; 0xff
 800225e:	d801      	bhi.n	8002264 <HAL_GPIO_Init+0xec>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	e001      	b.n	8002268 <HAL_GPIO_Init+0xf0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d802      	bhi.n	8002276 <HAL_GPIO_Init+0xfe>
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x104>
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	3b08      	subs	r3, #8
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	210f      	movs	r1, #15
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	401a      	ands	r2, r3
 800228e:	6a39      	ldr	r1, [r7, #32]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	431a      	orrs	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8096 	beq.w	80023d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022aa:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_GPIO_Init+0x298>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_GPIO_Init+0x298>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6193      	str	r3, [r2, #24]
 80022b6:	4b56      	ldr	r3, [pc, #344]	; (8002410 <HAL_GPIO_Init+0x298>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c2:	4a54      	ldr	r2, [pc, #336]	; (8002414 <HAL_GPIO_Init+0x29c>)
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_GPIO_Init+0x2a0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0x19e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_GPIO_Init+0x2a4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_GPIO_Init+0x19a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a49      	ldr	r2, [pc, #292]	; (8002420 <HAL_GPIO_Init+0x2a8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x196>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_GPIO_Init+0x2ac>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_GPIO_Init+0x192>
 8002306:	2303      	movs	r3, #3
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x1a0>
 800230a:	2304      	movs	r3, #4
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x1a0>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x1a0>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x1a0>
 8002316:	2300      	movs	r3, #0
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002328:	493a      	ldr	r1, [pc, #232]	; (8002414 <HAL_GPIO_Init+0x29c>)
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4938      	ldr	r1, [pc, #224]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
 800234e:	e006      	b.n	800235e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002350:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	43db      	mvns	r3, r3
 8002358:	4933      	ldr	r1, [pc, #204]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 800235a:	4013      	ands	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800236a:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	492e      	ldr	r1, [pc, #184]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
 8002376:	e006      	b.n	8002386 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	43db      	mvns	r3, r3
 8002380:	4929      	ldr	r1, [pc, #164]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 8002382:	4013      	ands	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	4924      	ldr	r1, [pc, #144]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
 800239e:	e006      	b.n	80023ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	491f      	ldr	r1, [pc, #124]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	491a      	ldr	r1, [pc, #104]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60cb      	str	r3, [r1, #12]
 80023c6:	e006      	b.n	80023d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4915      	ldr	r1, [pc, #84]	; (8002428 <HAL_GPIO_Init+0x2b0>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3301      	adds	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f47f aed0 	bne.w	800218c <HAL_GPIO_Init+0x14>
  }
}
 80023ec:	bf00      	nop
 80023ee:	372c      	adds	r7, #44	; 0x2c
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	10210000 	.word	0x10210000
 80023fc:	10110000 	.word	0x10110000
 8002400:	10120000 	.word	0x10120000
 8002404:	10310000 	.word	0x10310000
 8002408:	10320000 	.word	0x10320000
 800240c:	10220000 	.word	0x10220000
 8002410:	40021000 	.word	0x40021000
 8002414:	40010000 	.word	0x40010000
 8002418:	40010800 	.word	0x40010800
 800241c:	40010c00 	.word	0x40010c00
 8002420:	40011000 	.word	0x40011000
 8002424:	40011400 	.word	0x40011400
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	611a      	str	r2, [r3, #16]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e26c      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8087 	beq.w	800258a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800247c:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b04      	cmp	r3, #4
 8002486:	d00c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002488:	4b8f      	ldr	r3, [pc, #572]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d112      	bne.n	80024ba <HAL_RCC_OscConfig+0x5e>
 8002494:	4b8c      	ldr	r3, [pc, #560]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d10b      	bne.n	80024ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a2:	4b89      	ldr	r3, [pc, #548]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d06c      	beq.n	8002588 <HAL_RCC_OscConfig+0x12c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d168      	bne.n	8002588 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e246      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x76>
 80024c4:	4b80      	ldr	r3, [pc, #512]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a7f      	ldr	r2, [pc, #508]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	e02e      	b.n	8002530 <HAL_RCC_OscConfig+0xd4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x98>
 80024da:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a77      	ldr	r2, [pc, #476]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xd4>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0xbc>
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a71      	ldr	r2, [pc, #452]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xd4>
 8002518:	4b6b      	ldr	r3, [pc, #428]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6a      	ldr	r2, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a67      	ldr	r2, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fc6e 	bl	8001e18 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fc6a 	bl	8001e18 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1fa      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xe4>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fc5a 	bl	8001e18 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fc56 	bl	8001e18 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1e6      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x10c>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002596:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025a2:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x18c>
 80025ae:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x176>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1ba      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4939      	ldr	r1, [pc, #228]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_RCC_OscConfig+0x270>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7ff fc0f 	bl	8001e18 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7ff fc0b 	bl	8001e18 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e19b      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b2a      	ldr	r3, [pc, #168]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4927      	ldr	r1, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_RCC_OscConfig+0x270>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff fbee 	bl	8001e18 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7ff fbea 	bl	8001e18 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e17a      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d03a      	beq.n	80026e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002678:	f7ff fbce 	bl	8001e18 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff fbca 	bl	8001e18 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e15a      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800269e:	2001      	movs	r0, #1
 80026a0:	f000 faa8 	bl	8002bf4 <RCC_Delay>
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7ff fbb4 	bl	8001e18 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b2:	e00f      	b.n	80026d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b4:	f7ff fbb0 	bl	8001e18 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d908      	bls.n	80026d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e140      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	42420000 	.word	0x42420000
 80026d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e9      	bne.n	80026b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a6 	beq.w	800283a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f2:	4b97      	ldr	r3, [pc, #604]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10d      	bne.n	800271a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b94      	ldr	r3, [pc, #592]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a93      	ldr	r2, [pc, #588]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]
 800270a:	4b91      	ldr	r3, [pc, #580]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b8e      	ldr	r3, [pc, #568]	; (8002954 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a8a      	ldr	r2, [pc, #552]	; (8002954 <HAL_RCC_OscConfig+0x4f8>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7ff fb71 	bl	8001e18 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7ff fb6d 	bl	8001e18 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	; 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0fd      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b81      	ldr	r3, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x4f8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x312>
 8002760:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a7a      	ldr	r2, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	e02d      	b.n	80027ca <HAL_RCC_OscConfig+0x36e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x334>
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4a75      	ldr	r2, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	6213      	str	r3, [r2, #32]
 8002782:	4b73      	ldr	r3, [pc, #460]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a72      	ldr	r2, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	e01c      	b.n	80027ca <HAL_RCC_OscConfig+0x36e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x356>
 8002798:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a6c      	ldr	r2, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6213      	str	r3, [r2, #32]
 80027a4:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a69      	ldr	r2, [pc, #420]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6213      	str	r3, [r2, #32]
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x36e>
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a66      	ldr	r2, [pc, #408]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d015      	beq.n	80027fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7ff fb21 	bl	8001e18 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7ff fb1d 	bl	8001e18 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0ab      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	4b57      	ldr	r3, [pc, #348]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ee      	beq.n	80027da <HAL_RCC_OscConfig+0x37e>
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7ff fb0b 	bl	8001e18 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7ff fb07 	bl	8001e18 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e095      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ee      	bne.n	8002806 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d105      	bne.n	800283a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b48      	ldr	r3, [pc, #288]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4a47      	ldr	r2, [pc, #284]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002838:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8081 	beq.w	8002946 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002844:	4b42      	ldr	r3, [pc, #264]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d061      	beq.n	8002914 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d146      	bne.n	80028e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_RCC_OscConfig+0x4fc>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7ff fadb 	bl	8001e18 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7ff fad7 	bl	8001e18 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e067      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002878:	4b35      	ldr	r3, [pc, #212]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d108      	bne.n	80028a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	492d      	ldr	r1, [pc, #180]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a19      	ldr	r1, [r3, #32]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	430b      	orrs	r3, r1
 80028b2:	4927      	ldr	r1, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_OscConfig+0x4fc>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7ff faab 	bl	8001e18 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7ff faa7 	bl	8001e18 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e037      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x46a>
 80028e4:	e02f      	b.n	8002946 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <HAL_RCC_OscConfig+0x4fc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff fa94 	bl	8001e18 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7ff fa90 	bl	8001e18 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e020      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x498>
 8002912:	e018      	b.n	8002946 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e013      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	429a      	cmp	r2, r3
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
 8002958:	42420060 	.word	0x42420060

0800295c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0d0      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d910      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4965      	ldr	r1, [pc, #404]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d040      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d115      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e073      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e06b      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4936      	ldr	r1, [pc, #216]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7ff f9e4 	bl	8001e18 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7ff f9e0 	bl	8001e18 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e053      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d210      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 0207 	bic.w	r2, r3, #7
 8002a92:	4922      	ldr	r1, [pc, #136]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4601      	mov	r1, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	fa21 f303 	lsr.w	r3, r1, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1cc>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1d0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f942 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08006d94 	.word	0x08006d94
 8002b28:	2000002c 	.word	0x2000002c
 8002b2c:	20000030 	.word	0x20000030

08002b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	b490      	push	{r4, r7}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b38:	1d3c      	adds	r4, r7, #4
 8002b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b40:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x40>
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x46>
 8002b6e:	e02d      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b70:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b72:	623b      	str	r3, [r7, #32]
      break;
 8002b74:	e02d      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	0c9b      	lsrs	r3, r3, #18
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b82:	4413      	add	r3, r2
 8002b84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0c5b      	lsrs	r3, r3, #17
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ba8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bae:	fb02 f203 	mul.w	r2, r2, r3
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	e004      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	623b      	str	r3, [r7, #32]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bce:	623b      	str	r3, [r7, #32]
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3728      	adds	r7, #40	; 0x28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc90      	pop	{r4, r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	08006d80 	.word	0x08006d80
 8002be4:	08006d90 	.word	0x08006d90
 8002be8:	40021000 	.word	0x40021000
 8002bec:	007a1200 	.word	0x007a1200
 8002bf0:	003d0900 	.word	0x003d0900

08002bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <RCC_Delay+0x34>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <RCC_Delay+0x38>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a5b      	lsrs	r3, r3, #9
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c10:	bf00      	nop
  }
  while (Delay --);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	60fa      	str	r2, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f9      	bne.n	8002c10 <RCC_Delay+0x1c>
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000002c 	.word	0x2000002c
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e076      	b.n	8002d30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c52:	d009      	beq.n	8002c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
 8002c5a:	e005      	b.n	8002c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe fdfa 	bl	800187c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	0c1a      	lsrs	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 0204 	and.w	r2, r2, #4
 8002d0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_SPI_Transmit+0x22>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e126      	b.n	8002fa8 <HAL_SPI_Transmit+0x270>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d62:	f7ff f859 	bl	8001e18 <HAL_GetTick>
 8002d66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d7c:	e10b      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_SPI_Transmit+0x52>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d8e:	e102      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2203      	movs	r2, #3
 8002d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd6:	d10f      	bne.n	8002df8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d007      	beq.n	8002e16 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d14b      	bne.n	8002eb8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_SPI_Transmit+0xf6>
 8002e28:	8afb      	ldrh	r3, [r7, #22]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d13e      	bne.n	8002eac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e52:	e02b      	b.n	8002eac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d112      	bne.n	8002e88 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	1c9a      	adds	r2, r3, #2
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e86:	e011      	b.n	8002eac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e88:	f7fe ffc6 	bl	8001e18 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d803      	bhi.n	8002ea0 <HAL_SPI_Transmit+0x168>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Transmit+0x16e>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eaa:	e074      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ce      	bne.n	8002e54 <HAL_SPI_Transmit+0x11c>
 8002eb6:	e04c      	b.n	8002f52 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_Transmit+0x18e>
 8002ec0:	8afb      	ldrh	r3, [r7, #22]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d140      	bne.n	8002f48 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eec:	e02c      	b.n	8002f48 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d113      	bne.n	8002f24 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f22:	e011      	b.n	8002f48 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f24:	f7fe ff78 	bl	8001e18 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d803      	bhi.n	8002f3c <HAL_SPI_Transmit+0x204>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f3a:	d102      	bne.n	8002f42 <HAL_SPI_Transmit+0x20a>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f46:	e026      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1cd      	bne.n	8002eee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f9b8 	bl	80032cc <SPI_EndRxTxTransaction>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e000      	b.n	8002f96 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	099b      	lsrs	r3, r3, #6
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
    return;
 8002ff2:	e0bf      	b.n	8003174 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_SPI_IRQHandler+0x66>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	09db      	lsrs	r3, r3, #7
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
    return;
 8003014:	e0ae      	b.n	8003174 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_SPI_IRQHandler+0x80>
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80a2 	beq.w	8003174 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 809b 	beq.w	8003174 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d023      	beq.n	8003092 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b03      	cmp	r3, #3
 8003054:	d011      	beq.n	800307a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f043 0204 	orr.w	r2, r3, #4
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	e00b      	b.n	8003092 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
        return;
 8003090:	e070      	b.n	8003174 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d050      	beq.n	8003172 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <HAL_SPI_IRQHandler+0x14c>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d034      	beq.n	8003166 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0203 	bic.w	r2, r2, #3
 800310a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d011      	beq.n	8003138 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_SPI_IRQHandler+0x1cc>)
 800311a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe ffb3 	bl	800208c <HAL_DMA_Abort_IT>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	2b00      	cmp	r3, #0
 800313e:	d016      	beq.n	800316e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <HAL_SPI_IRQHandler+0x1cc>)
 8003146:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe ff9d 	bl	800208c <HAL_DMA_Abort_IT>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003164:	e003      	b.n	800316e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f80a 	bl	8003180 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800316c:	e000      	b.n	8003170 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800316e:	bf00      	nop
    return;
 8003170:	bf00      	nop
 8003172:	bf00      	nop
  }
}
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	08003193 	.word	0x08003193

08003180 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff ffe7 	bl	8003180 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031cc:	f7fe fe24 	bl	8001e18 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	4413      	add	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031dc:	f7fe fe1c 	bl	8001e18 <HAL_GetTick>
 80031e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	0d1b      	lsrs	r3, r3, #20
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f2:	e054      	b.n	800329e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031fa:	d050      	beq.n	800329e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031fc:	f7fe fe0c 	bl	8001e18 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	429a      	cmp	r2, r3
 800320a:	d902      	bls.n	8003212 <SPI_WaitFlagStateUntilTimeout+0x56>
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d13d      	bne.n	800328e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003220:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800322a:	d111      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x94>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003234:	d004      	beq.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d107      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d10f      	bne.n	800327a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e017      	b.n	80032be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3b01      	subs	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4013      	ands	r3, r2
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d19b      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	2000002c 	.word	0x2000002c

080032cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff ff6a 	bl	80031bc <SPI_WaitFlagStateUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e000      	b.n	8003300 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e041      	b.n	800339e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe faf8 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 ff94 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d001      	beq.n	80033c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e032      	b.n	8003426 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_TIM_Base_Start+0x88>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_TIM_Base_Start+0x48>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d009      	beq.n	80033f0 <HAL_TIM_Base_Start+0x48>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_TIM_Base_Start+0x8c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIM_Base_Start+0x48>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_TIM_Base_Start+0x90>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d111      	bne.n	8003414 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d010      	beq.n	8003424 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	e007      	b.n	8003424 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800

0800343c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e03a      	b.n	80034ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_TIM_Base_Start_IT+0x98>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x58>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d009      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x58>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x58>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a13      	ldr	r2, [pc, #76]	; (80034dc <HAL_TIM_Base_Start_IT+0xa0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d111      	bne.n	80034b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d010      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	e007      	b.n	80034c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800

080034e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e041      	b.n	8003576 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f839 	bl	800357e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f000 fea8 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_TIM_OC_Start_IT+0x24>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e022      	b.n	80035fa <HAL_TIM_OC_Start_IT+0x6a>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d109      	bne.n	80035ce <HAL_TIM_OC_Start_IT+0x3e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e015      	b.n	80035fa <HAL_TIM_OC_Start_IT+0x6a>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d109      	bne.n	80035e8 <HAL_TIM_OC_Start_IT+0x58>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e008      	b.n	80035fa <HAL_TIM_OC_Start_IT+0x6a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0a4      	b.n	800374c <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <HAL_TIM_OC_Start_IT+0x82>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003610:	e013      	b.n	800363a <HAL_TIM_OC_Start_IT+0xaa>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d104      	bne.n	8003622 <HAL_TIM_OC_Start_IT+0x92>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003620:	e00b      	b.n	800363a <HAL_TIM_OC_Start_IT+0xaa>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d104      	bne.n	8003632 <HAL_TIM_OC_Start_IT+0xa2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003630:	e003      	b.n	800363a <HAL_TIM_OC_Start_IT+0xaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d841      	bhi.n	80036c4 <HAL_TIM_OC_Start_IT+0x134>
 8003640:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_TIM_OC_Start_IT+0xb8>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	0800367d 	.word	0x0800367d
 800364c:	080036c5 	.word	0x080036c5
 8003650:	080036c5 	.word	0x080036c5
 8003654:	080036c5 	.word	0x080036c5
 8003658:	0800368f 	.word	0x0800368f
 800365c:	080036c5 	.word	0x080036c5
 8003660:	080036c5 	.word	0x080036c5
 8003664:	080036c5 	.word	0x080036c5
 8003668:	080036a1 	.word	0x080036a1
 800366c:	080036c5 	.word	0x080036c5
 8003670:	080036c5 	.word	0x080036c5
 8003674:	080036c5 	.word	0x080036c5
 8003678:	080036b3 	.word	0x080036b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0202 	orr.w	r2, r2, #2
 800368a:	60da      	str	r2, [r3, #12]
      break;
 800368c:	e01b      	b.n	80036c6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0204 	orr.w	r2, r2, #4
 800369c:	60da      	str	r2, [r3, #12]
      break;
 800369e:	e012      	b.n	80036c6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0208 	orr.w	r2, r2, #8
 80036ae:	60da      	str	r2, [r3, #12]
      break;
 80036b0:	e009      	b.n	80036c6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0210 	orr.w	r2, r2, #16
 80036c0:	60da      	str	r2, [r3, #12]
      break;
 80036c2:	e000      	b.n	80036c6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80036c4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f850 	bl	8004774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_TIM_OC_Start_IT+0x1c4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d107      	bne.n	80036ee <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_TIM_OC_Start_IT+0x1c4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_TIM_OC_Start_IT+0x186>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d009      	beq.n	8003716 <HAL_TIM_OC_Start_IT+0x186>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a14      	ldr	r2, [pc, #80]	; (8003758 <HAL_TIM_OC_Start_IT+0x1c8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIM_OC_Start_IT+0x186>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a12      	ldr	r2, [pc, #72]	; (800375c <HAL_TIM_OC_Start_IT+0x1cc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d111      	bne.n	800373a <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d010      	beq.n	800374a <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	e007      	b.n	800374a <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800

08003760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e041      	b.n	80037f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f839 	bl	80037fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 fd68 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_TIM_PWM_Start_IT+0x24>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e022      	b.n	800387a <HAL_TIM_PWM_Start_IT+0x6a>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d109      	bne.n	800384e <HAL_TIM_PWM_Start_IT+0x3e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e015      	b.n	800387a <HAL_TIM_PWM_Start_IT+0x6a>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d109      	bne.n	8003868 <HAL_TIM_PWM_Start_IT+0x58>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e008      	b.n	800387a <HAL_TIM_PWM_Start_IT+0x6a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0a4      	b.n	80039cc <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start_IT+0x82>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003890:	e013      	b.n	80038ba <HAL_TIM_PWM_Start_IT+0xaa>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Start_IT+0x92>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a0:	e00b      	b.n	80038ba <HAL_TIM_PWM_Start_IT+0xaa>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_PWM_Start_IT+0xa2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b0:	e003      	b.n	80038ba <HAL_TIM_PWM_Start_IT+0xaa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	d841      	bhi.n	8003944 <HAL_TIM_PWM_Start_IT+0x134>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <HAL_TIM_PWM_Start_IT+0xb8>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	08003945 	.word	0x08003945
 80038d0:	08003945 	.word	0x08003945
 80038d4:	08003945 	.word	0x08003945
 80038d8:	0800390f 	.word	0x0800390f
 80038dc:	08003945 	.word	0x08003945
 80038e0:	08003945 	.word	0x08003945
 80038e4:	08003945 	.word	0x08003945
 80038e8:	08003921 	.word	0x08003921
 80038ec:	08003945 	.word	0x08003945
 80038f0:	08003945 	.word	0x08003945
 80038f4:	08003945 	.word	0x08003945
 80038f8:	08003933 	.word	0x08003933
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0202 	orr.w	r2, r2, #2
 800390a:	60da      	str	r2, [r3, #12]
      break;
 800390c:	e01b      	b.n	8003946 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0204 	orr.w	r2, r2, #4
 800391c:	60da      	str	r2, [r3, #12]
      break;
 800391e:	e012      	b.n	8003946 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	60da      	str	r2, [r3, #12]
      break;
 8003930:	e009      	b.n	8003946 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0210 	orr.w	r2, r2, #16
 8003940:	60da      	str	r2, [r3, #12]
      break;
 8003942:	e000      	b.n	8003946 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003944:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2201      	movs	r2, #1
 800394c:	6839      	ldr	r1, [r7, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 ff10 	bl	8004774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d107      	bne.n	800396e <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_TIM_PWM_Start_IT+0x186>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d009      	beq.n	8003996 <HAL_TIM_PWM_Start_IT+0x186>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_TIM_PWM_Start_IT+0x186>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a12      	ldr	r2, [pc, #72]	; (80039dc <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d010      	beq.n	80039ca <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b8:	e007      	b.n	80039ca <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800

080039e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e093      	b.n	8003b1c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7fd ffdb 	bl	80019c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a24:	f023 0307 	bic.w	r3, r3, #7
 8003a28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f000 fc1d 	bl	8004274 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	4313      	orrs	r3, r2
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a80:	f023 030c 	bic.w	r3, r3, #12
 8003a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	011a      	lsls	r2, r3, #4
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	031b      	lsls	r3, r3, #12
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	4313      	orrs	r3, r2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d110      	bne.n	8003b76 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d102      	bne.n	8003b60 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b5a:	7b7b      	ldrb	r3, [r7, #13]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e088      	b.n	8003c76 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b74:	e031      	b.n	8003bda <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d110      	bne.n	8003b9e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b7c:	7bbb      	ldrb	r3, [r7, #14]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d102      	bne.n	8003b88 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b82:	7b3b      	ldrb	r3, [r7, #12]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d001      	beq.n	8003b8c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e074      	b.n	8003c76 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b9c:	e01d      	b.n	8003bda <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d108      	bne.n	8003bb6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d105      	bne.n	8003bb6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003baa:	7b7b      	ldrb	r3, [r7, #13]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d102      	bne.n	8003bb6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bb0:	7b3b      	ldrb	r3, [r7, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e05d      	b.n	8003c76 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_TIM_Encoder_Start_IT+0xc2>
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d010      	beq.n	8003c06 <HAL_TIM_Encoder_Start_IT+0xe2>
 8003be4:	e01f      	b.n	8003c26 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2201      	movs	r2, #1
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fdc0 	bl	8004774 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0202 	orr.w	r2, r2, #2
 8003c02:	60da      	str	r2, [r3, #12]
      break;
 8003c04:	e02e      	b.n	8003c64 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fdb0 	bl	8004774 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0204 	orr.w	r2, r2, #4
 8003c22:	60da      	str	r2, [r3, #12]
      break;
 8003c24:	e01e      	b.n	8003c64 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fda0 	bl	8004774 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2104      	movs	r1, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fd99 	bl	8004774 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0202 	orr.w	r2, r2, #2
 8003c50:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0204 	orr.w	r2, r2, #4
 8003c60:	60da      	str	r2, [r3, #12]
      break;
 8003c62:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d122      	bne.n	8003cda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d11b      	bne.n	8003cda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f06f 0202 	mvn.w	r2, #2
 8003caa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fabb 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003cc6:	e005      	b.n	8003cd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 faae 	bl	800422a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fabd 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d122      	bne.n	8003d2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d11b      	bne.n	8003d2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f06f 0204 	mvn.w	r2, #4
 8003cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fa91 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003d1a:	e005      	b.n	8003d28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa84 	bl	800422a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa93 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d122      	bne.n	8003d82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d11b      	bne.n	8003d82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f06f 0208 	mvn.w	r2, #8
 8003d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2204      	movs	r2, #4
 8003d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fa67 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003d6e:	e005      	b.n	8003d7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa5a 	bl	800422a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa69 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d122      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	d11b      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f06f 0210 	mvn.w	r2, #16
 8003da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2208      	movs	r2, #8
 8003dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa3d 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003dc2:	e005      	b.n	8003dd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa30 	bl	800422a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa3f 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d10e      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f06f 0201 	mvn.w	r2, #1
 8003dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc fe63 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0c:	2b80      	cmp	r3, #128	; 0x80
 8003e0e:	d10e      	bne.n	8003e2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b80      	cmp	r3, #128	; 0x80
 8003e1c:	d107      	bne.n	8003e2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fd7f 	bl	800492c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d10e      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d107      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa03 	bl	8004260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d10e      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f06f 0220 	mvn.w	r2, #32
 8003e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fd4a 	bl	800491a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_OC_ConfigChannel+0x1a>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e046      	b.n	8003f38 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d839      	bhi.n	8003f2c <HAL_TIM_OC_ConfigChannel+0x9c>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f2d 	.word	0x08003f2d
 8003ec8:	08003f2d 	.word	0x08003f2d
 8003ecc:	08003f2d 	.word	0x08003f2d
 8003ed0:	08003f03 	.word	0x08003f03
 8003ed4:	08003f2d 	.word	0x08003f2d
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003f2d 	.word	0x08003f2d
 8003ee0:	08003f11 	.word	0x08003f11
 8003ee4:	08003f2d 	.word	0x08003f2d
 8003ee8:	08003f2d 	.word	0x08003f2d
 8003eec:	08003f2d 	.word	0x08003f2d
 8003ef0:	08003f1f 	.word	0x08003f1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fa1c 	bl	8004338 <TIM_OC1_SetConfig>
      break;
 8003f00:	e015      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fa7b 	bl	8004404 <TIM_OC2_SetConfig>
      break;
 8003f0e:	e00e      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fade 	bl	80044d8 <TIM_OC3_SetConfig>
      break;
 8003f1c:	e007      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fb41 	bl	80045ac <TIM_OC4_SetConfig>
      break;
 8003f2a:	e000      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e0ac      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b0c      	cmp	r3, #12
 8003f66:	f200 809f 	bhi.w	80040a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003fa5 	.word	0x08003fa5
 8003f74:	080040a9 	.word	0x080040a9
 8003f78:	080040a9 	.word	0x080040a9
 8003f7c:	080040a9 	.word	0x080040a9
 8003f80:	08003fe5 	.word	0x08003fe5
 8003f84:	080040a9 	.word	0x080040a9
 8003f88:	080040a9 	.word	0x080040a9
 8003f8c:	080040a9 	.word	0x080040a9
 8003f90:	08004027 	.word	0x08004027
 8003f94:	080040a9 	.word	0x080040a9
 8003f98:	080040a9 	.word	0x080040a9
 8003f9c:	080040a9 	.word	0x080040a9
 8003fa0:	08004067 	.word	0x08004067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f9c4 	bl	8004338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6999      	ldr	r1, [r3, #24]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	619a      	str	r2, [r3, #24]
      break;
 8003fe2:	e062      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa0a 	bl	8004404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	021a      	lsls	r2, r3, #8
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	619a      	str	r2, [r3, #24]
      break;
 8004024:	e041      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fa53 	bl	80044d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0208 	orr.w	r2, r2, #8
 8004040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0204 	bic.w	r2, r2, #4
 8004050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69d9      	ldr	r1, [r3, #28]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	61da      	str	r2, [r3, #28]
      break;
 8004064:	e021      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fa9d 	bl	80045ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	61da      	str	r2, [r3, #28]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIM_ConfigClockSource+0x18>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e0a6      	b.n	8004222 <HAL_TIM_ConfigClockSource+0x166>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d067      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0x120>
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d80b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x6c>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d073      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x140>
 8004114:	2b10      	cmp	r3, #16
 8004116:	d802      	bhi.n	800411e <HAL_TIM_ConfigClockSource+0x62>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d06f      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800411c:	e078      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800411e:	2b20      	cmp	r3, #32
 8004120:	d06c      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x140>
 8004122:	2b30      	cmp	r3, #48	; 0x30
 8004124:	d06a      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004126:	e073      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004128:	2b70      	cmp	r3, #112	; 0x70
 800412a:	d00d      	beq.n	8004148 <HAL_TIM_ConfigClockSource+0x8c>
 800412c:	2b70      	cmp	r3, #112	; 0x70
 800412e:	d804      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x7e>
 8004130:	2b50      	cmp	r3, #80	; 0x50
 8004132:	d033      	beq.n	800419c <HAL_TIM_ConfigClockSource+0xe0>
 8004134:	2b60      	cmp	r3, #96	; 0x60
 8004136:	d041      	beq.n	80041bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004138:	e06a      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d066      	beq.n	800420e <HAL_TIM_ConfigClockSource+0x152>
 8004140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004144:	d017      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004146:	e063      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6899      	ldr	r1, [r3, #8]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f000 faed 	bl	8004736 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800416a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]
      break;
 8004174:	e04c      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6899      	ldr	r1, [r3, #8]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f000 fad6 	bl	8004736 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004198:	609a      	str	r2, [r3, #8]
      break;
 800419a:	e039      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f000 fa4d 	bl	8004648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2150      	movs	r1, #80	; 0x50
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 faa4 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80041ba:	e029      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f000 fa6b 	bl	80046a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2160      	movs	r1, #96	; 0x60
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fa94 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80041da:	e019      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f000 fa2d 	bl	8004648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2140      	movs	r1, #64	; 0x40
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fa84 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80041fa:	e009      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f000 fa7b 	bl	8004702 <TIM_ITRx_SetConfig>
        break;
 800420c:	e000      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800420e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
	...

08004274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a29      	ldr	r2, [pc, #164]	; (800432c <TIM_Base_SetConfig+0xb8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0x30>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0x30>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a26      	ldr	r2, [pc, #152]	; (8004330 <TIM_Base_SetConfig+0xbc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0x30>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a25      	ldr	r2, [pc, #148]	; (8004334 <TIM_Base_SetConfig+0xc0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d108      	bne.n	80042b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	; (800432c <TIM_Base_SetConfig+0xb8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <TIM_Base_SetConfig+0x62>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c4:	d007      	beq.n	80042d6 <TIM_Base_SetConfig+0x62>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <TIM_Base_SetConfig+0xbc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_Base_SetConfig+0x62>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <TIM_Base_SetConfig+0xc0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a07      	ldr	r2, [pc, #28]	; (800432c <TIM_Base_SetConfig+0xb8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800

08004338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <TIM_OC1_SetConfig+0xc8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10c      	bne.n	80043ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0308 	bic.w	r3, r3, #8
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <TIM_OC1_SetConfig+0xc8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d111      	bne.n	80043da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40012c00 	.word	0x40012c00

08004404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0210 	bic.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0320 	bic.w	r3, r3, #32
 800444e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <TIM_OC2_SetConfig+0xd0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10d      	bne.n	8004480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <TIM_OC2_SetConfig+0xd0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d113      	bne.n	80044b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800448e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	40012c00 	.word	0x40012c00

080044d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <TIM_OC3_SetConfig+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10d      	bne.n	8004552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800453c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <TIM_OC3_SetConfig+0xd0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d113      	bne.n	8004582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	621a      	str	r2, [r3, #32]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40012c00 	.word	0x40012c00

080045ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	031b      	lsls	r3, r3, #12
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0f      	ldr	r2, [pc, #60]	; (8004644 <TIM_OC4_SetConfig+0x98>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d109      	bne.n	8004620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40012c00 	.word	0x40012c00

08004648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f023 030a 	bic.w	r3, r3, #10
 8004684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f023 0210 	bic.w	r2, r3, #16
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	031b      	lsls	r3, r3, #12
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	621a      	str	r2, [r3, #32]
}
 80046f8:	bf00      	nop
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	f043 0307 	orr.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004736:	b480      	push	{r7}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004750:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	431a      	orrs	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	609a      	str	r2, [r3, #8]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	43db      	mvns	r3, r3
 8004796:	401a      	ands	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e046      	b.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a16      	ldr	r2, [pc, #88]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004820:	d009      	beq.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a10      	ldr	r2, [pc, #64]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10c      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	4313      	orrs	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800

08004878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004890:	2302      	movs	r3, #2
 8004892:	e03d      	b.n	8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
	...

08004940 <__errno>:
 8004940:	4b01      	ldr	r3, [pc, #4]	; (8004948 <__errno+0x8>)
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000038 	.word	0x20000038

0800494c <__libc_init_array>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	2500      	movs	r5, #0
 8004950:	4e0c      	ldr	r6, [pc, #48]	; (8004984 <__libc_init_array+0x38>)
 8004952:	4c0d      	ldr	r4, [pc, #52]	; (8004988 <__libc_init_array+0x3c>)
 8004954:	1ba4      	subs	r4, r4, r6
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	42a5      	cmp	r5, r4
 800495a:	d109      	bne.n	8004970 <__libc_init_array+0x24>
 800495c:	f002 f964 	bl	8006c28 <_init>
 8004960:	2500      	movs	r5, #0
 8004962:	4e0a      	ldr	r6, [pc, #40]	; (800498c <__libc_init_array+0x40>)
 8004964:	4c0a      	ldr	r4, [pc, #40]	; (8004990 <__libc_init_array+0x44>)
 8004966:	1ba4      	subs	r4, r4, r6
 8004968:	10a4      	asrs	r4, r4, #2
 800496a:	42a5      	cmp	r5, r4
 800496c:	d105      	bne.n	800497a <__libc_init_array+0x2e>
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004974:	4798      	blx	r3
 8004976:	3501      	adds	r5, #1
 8004978:	e7ee      	b.n	8004958 <__libc_init_array+0xc>
 800497a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800497e:	4798      	blx	r3
 8004980:	3501      	adds	r5, #1
 8004982:	e7f2      	b.n	800496a <__libc_init_array+0x1e>
 8004984:	08007038 	.word	0x08007038
 8004988:	08007038 	.word	0x08007038
 800498c:	08007038 	.word	0x08007038
 8004990:	0800703c 	.word	0x0800703c

08004994 <memset>:
 8004994:	4603      	mov	r3, r0
 8004996:	4402      	add	r2, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <__cvt>:
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049aa:	461e      	mov	r6, r3
 80049ac:	bfbb      	ittet	lt
 80049ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049b2:	461e      	movlt	r6, r3
 80049b4:	2300      	movge	r3, #0
 80049b6:	232d      	movlt	r3, #45	; 0x2d
 80049b8:	b088      	sub	sp, #32
 80049ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80049bc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80049c0:	f027 0720 	bic.w	r7, r7, #32
 80049c4:	2f46      	cmp	r7, #70	; 0x46
 80049c6:	4614      	mov	r4, r2
 80049c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049ca:	700b      	strb	r3, [r1, #0]
 80049cc:	d004      	beq.n	80049d8 <__cvt+0x34>
 80049ce:	2f45      	cmp	r7, #69	; 0x45
 80049d0:	d100      	bne.n	80049d4 <__cvt+0x30>
 80049d2:	3501      	adds	r5, #1
 80049d4:	2302      	movs	r3, #2
 80049d6:	e000      	b.n	80049da <__cvt+0x36>
 80049d8:	2303      	movs	r3, #3
 80049da:	aa07      	add	r2, sp, #28
 80049dc:	9204      	str	r2, [sp, #16]
 80049de:	aa06      	add	r2, sp, #24
 80049e0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049e4:	e9cd 3500 	strd	r3, r5, [sp]
 80049e8:	4622      	mov	r2, r4
 80049ea:	4633      	mov	r3, r6
 80049ec:	f000 fccc 	bl	8005388 <_dtoa_r>
 80049f0:	2f47      	cmp	r7, #71	; 0x47
 80049f2:	4680      	mov	r8, r0
 80049f4:	d102      	bne.n	80049fc <__cvt+0x58>
 80049f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049f8:	07db      	lsls	r3, r3, #31
 80049fa:	d526      	bpl.n	8004a4a <__cvt+0xa6>
 80049fc:	2f46      	cmp	r7, #70	; 0x46
 80049fe:	eb08 0905 	add.w	r9, r8, r5
 8004a02:	d111      	bne.n	8004a28 <__cvt+0x84>
 8004a04:	f898 3000 	ldrb.w	r3, [r8]
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d10a      	bne.n	8004a22 <__cvt+0x7e>
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4620      	mov	r0, r4
 8004a12:	4631      	mov	r1, r6
 8004a14:	f7fb ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004a18:	b918      	cbnz	r0, 8004a22 <__cvt+0x7e>
 8004a1a:	f1c5 0501 	rsb	r5, r5, #1
 8004a1e:	f8ca 5000 	str.w	r5, [sl]
 8004a22:	f8da 3000 	ldr.w	r3, [sl]
 8004a26:	4499      	add	r9, r3
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	4631      	mov	r1, r6
 8004a30:	f7fb ffba 	bl	80009a8 <__aeabi_dcmpeq>
 8004a34:	b938      	cbnz	r0, 8004a46 <__cvt+0xa2>
 8004a36:	2230      	movs	r2, #48	; 0x30
 8004a38:	9b07      	ldr	r3, [sp, #28]
 8004a3a:	454b      	cmp	r3, r9
 8004a3c:	d205      	bcs.n	8004a4a <__cvt+0xa6>
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	9107      	str	r1, [sp, #28]
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e7f8      	b.n	8004a38 <__cvt+0x94>
 8004a46:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	9b07      	ldr	r3, [sp, #28]
 8004a4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a50:	eba3 0308 	sub.w	r3, r3, r8
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	b008      	add	sp, #32
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a5c <__exponent>:
 8004a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	bfb4      	ite	lt
 8004a62:	232d      	movlt	r3, #45	; 0x2d
 8004a64:	232b      	movge	r3, #43	; 0x2b
 8004a66:	4604      	mov	r4, r0
 8004a68:	bfb8      	it	lt
 8004a6a:	4249      	neglt	r1, r1
 8004a6c:	2909      	cmp	r1, #9
 8004a6e:	f804 2b02 	strb.w	r2, [r4], #2
 8004a72:	7043      	strb	r3, [r0, #1]
 8004a74:	dd21      	ble.n	8004aba <__exponent+0x5e>
 8004a76:	f10d 0307 	add.w	r3, sp, #7
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	260a      	movs	r6, #10
 8004a7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a82:	fb06 1115 	mls	r1, r6, r5, r1
 8004a86:	2d09      	cmp	r5, #9
 8004a88:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004a8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a90:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004a94:	4629      	mov	r1, r5
 8004a96:	dc09      	bgt.n	8004aac <__exponent+0x50>
 8004a98:	3130      	adds	r1, #48	; 0x30
 8004a9a:	3b02      	subs	r3, #2
 8004a9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004aa0:	42bb      	cmp	r3, r7
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	d304      	bcc.n	8004ab0 <__exponent+0x54>
 8004aa6:	1a10      	subs	r0, r2, r0
 8004aa8:	b003      	add	sp, #12
 8004aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aac:	4613      	mov	r3, r2
 8004aae:	e7e6      	b.n	8004a7e <__exponent+0x22>
 8004ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ab4:	f804 2b01 	strb.w	r2, [r4], #1
 8004ab8:	e7f2      	b.n	8004aa0 <__exponent+0x44>
 8004aba:	2330      	movs	r3, #48	; 0x30
 8004abc:	4419      	add	r1, r3
 8004abe:	7083      	strb	r3, [r0, #2]
 8004ac0:	1d02      	adds	r2, r0, #4
 8004ac2:	70c1      	strb	r1, [r0, #3]
 8004ac4:	e7ef      	b.n	8004aa6 <__exponent+0x4a>
	...

08004ac8 <_printf_float>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	b091      	sub	sp, #68	; 0x44
 8004ace:	460c      	mov	r4, r1
 8004ad0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004ad2:	4693      	mov	fp, r2
 8004ad4:	461e      	mov	r6, r3
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	f001 fb84 	bl	80061e4 <_localeconv_r>
 8004adc:	6803      	ldr	r3, [r0, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae2:	f7fb fb35 	bl	8000150 <strlen>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	930e      	str	r3, [sp, #56]	; 0x38
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	900a      	str	r0, [sp, #40]	; 0x28
 8004aee:	3307      	adds	r3, #7
 8004af0:	f023 0307 	bic.w	r3, r3, #7
 8004af4:	f103 0208 	add.w	r2, r3, #8
 8004af8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004afc:	f8d4 a000 	ldr.w	sl, [r4]
 8004b00:	603a      	str	r2, [r7, #0]
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b0a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b18:	4ba6      	ldr	r3, [pc, #664]	; (8004db4 <_printf_float+0x2ec>)
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b1e:	f7fb ff75 	bl	8000a0c <__aeabi_dcmpun>
 8004b22:	bb68      	cbnz	r0, 8004b80 <_printf_float+0xb8>
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b28:	4ba2      	ldr	r3, [pc, #648]	; (8004db4 <_printf_float+0x2ec>)
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b2e:	f7fb ff4f 	bl	80009d0 <__aeabi_dcmple>
 8004b32:	bb28      	cbnz	r0, 8004b80 <_printf_float+0xb8>
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	4638      	mov	r0, r7
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	f7fb ff3e 	bl	80009bc <__aeabi_dcmplt>
 8004b40:	b110      	cbz	r0, 8004b48 <_printf_float+0x80>
 8004b42:	232d      	movs	r3, #45	; 0x2d
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	4f9b      	ldr	r7, [pc, #620]	; (8004db8 <_printf_float+0x2f0>)
 8004b4a:	4b9c      	ldr	r3, [pc, #624]	; (8004dbc <_printf_float+0x2f4>)
 8004b4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b50:	bf98      	it	ls
 8004b52:	461f      	movls	r7, r3
 8004b54:	2303      	movs	r3, #3
 8004b56:	f04f 0900 	mov.w	r9, #0
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	f02a 0304 	bic.w	r3, sl, #4
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	9600      	str	r6, [sp, #0]
 8004b64:	465b      	mov	r3, fp
 8004b66:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f9e2 	bl	8004f34 <_printf_common>
 8004b70:	3001      	adds	r0, #1
 8004b72:	f040 8090 	bne.w	8004c96 <_printf_float+0x1ce>
 8004b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b7a:	b011      	add	sp, #68	; 0x44
 8004b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b80:	463a      	mov	r2, r7
 8004b82:	464b      	mov	r3, r9
 8004b84:	4638      	mov	r0, r7
 8004b86:	4649      	mov	r1, r9
 8004b88:	f7fb ff40 	bl	8000a0c <__aeabi_dcmpun>
 8004b8c:	b110      	cbz	r0, 8004b94 <_printf_float+0xcc>
 8004b8e:	4f8c      	ldr	r7, [pc, #560]	; (8004dc0 <_printf_float+0x2f8>)
 8004b90:	4b8c      	ldr	r3, [pc, #560]	; (8004dc4 <_printf_float+0x2fc>)
 8004b92:	e7db      	b.n	8004b4c <_printf_float+0x84>
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	a80d      	add	r0, sp, #52	; 0x34
 8004b9e:	a90e      	add	r1, sp, #56	; 0x38
 8004ba0:	d140      	bne.n	8004c24 <_printf_float+0x15c>
 8004ba2:	2306      	movs	r3, #6
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	f04f 0c00 	mov.w	ip, #0
 8004baa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004bae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004bb2:	6863      	ldr	r3, [r4, #4]
 8004bb4:	6022      	str	r2, [r4, #0]
 8004bb6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f7ff feed 	bl	80049a4 <__cvt>
 8004bca:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004bce:	2b47      	cmp	r3, #71	; 0x47
 8004bd0:	4607      	mov	r7, r0
 8004bd2:	d109      	bne.n	8004be8 <_printf_float+0x120>
 8004bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bd6:	1cd8      	adds	r0, r3, #3
 8004bd8:	db02      	blt.n	8004be0 <_printf_float+0x118>
 8004bda:	6862      	ldr	r2, [r4, #4]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	dd47      	ble.n	8004c70 <_printf_float+0x1a8>
 8004be0:	f1a8 0802 	sub.w	r8, r8, #2
 8004be4:	fa5f f888 	uxtb.w	r8, r8
 8004be8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004bec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bee:	d824      	bhi.n	8004c3a <_printf_float+0x172>
 8004bf0:	3901      	subs	r1, #1
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bf8:	910d      	str	r1, [sp, #52]	; 0x34
 8004bfa:	f7ff ff2f 	bl	8004a5c <__exponent>
 8004bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c00:	4681      	mov	r9, r0
 8004c02:	1813      	adds	r3, r2, r0
 8004c04:	2a01      	cmp	r2, #1
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	dc02      	bgt.n	8004c10 <_printf_float+0x148>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	07d1      	lsls	r1, r2, #31
 8004c0e:	d501      	bpl.n	8004c14 <_printf_float+0x14c>
 8004c10:	3301      	adds	r3, #1
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0a2      	beq.n	8004b62 <_printf_float+0x9a>
 8004c1c:	232d      	movs	r3, #45	; 0x2d
 8004c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c22:	e79e      	b.n	8004b62 <_printf_float+0x9a>
 8004c24:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004c28:	f000 816e 	beq.w	8004f08 <_printf_float+0x440>
 8004c2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c30:	d1b9      	bne.n	8004ba6 <_printf_float+0xde>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1b7      	bne.n	8004ba6 <_printf_float+0xde>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e7b4      	b.n	8004ba4 <_printf_float+0xdc>
 8004c3a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c3e:	d119      	bne.n	8004c74 <_printf_float+0x1ac>
 8004c40:	2900      	cmp	r1, #0
 8004c42:	6863      	ldr	r3, [r4, #4]
 8004c44:	dd0c      	ble.n	8004c60 <_printf_float+0x198>
 8004c46:	6121      	str	r1, [r4, #16]
 8004c48:	b913      	cbnz	r3, 8004c50 <_printf_float+0x188>
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	07d2      	lsls	r2, r2, #31
 8004c4e:	d502      	bpl.n	8004c56 <_printf_float+0x18e>
 8004c50:	3301      	adds	r3, #1
 8004c52:	440b      	add	r3, r1
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c58:	f04f 0900 	mov.w	r9, #0
 8004c5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c5e:	e7d9      	b.n	8004c14 <_printf_float+0x14c>
 8004c60:	b913      	cbnz	r3, 8004c68 <_printf_float+0x1a0>
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	07d0      	lsls	r0, r2, #31
 8004c66:	d501      	bpl.n	8004c6c <_printf_float+0x1a4>
 8004c68:	3302      	adds	r3, #2
 8004c6a:	e7f3      	b.n	8004c54 <_printf_float+0x18c>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e7f1      	b.n	8004c54 <_printf_float+0x18c>
 8004c70:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004c74:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	db05      	blt.n	8004c88 <_printf_float+0x1c0>
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	07d1      	lsls	r1, r2, #31
 8004c82:	d5e8      	bpl.n	8004c56 <_printf_float+0x18e>
 8004c84:	3301      	adds	r3, #1
 8004c86:	e7e5      	b.n	8004c54 <_printf_float+0x18c>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bfcc      	ite	gt
 8004c8c:	2301      	movgt	r3, #1
 8004c8e:	f1c3 0302 	rsble	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	e7de      	b.n	8004c54 <_printf_float+0x18c>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	055a      	lsls	r2, r3, #21
 8004c9a:	d407      	bmi.n	8004cac <_printf_float+0x1e4>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	463a      	mov	r2, r7
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b0      	blx	r6
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d129      	bne.n	8004cfe <_printf_float+0x236>
 8004caa:	e764      	b.n	8004b76 <_printf_float+0xae>
 8004cac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004cb0:	f240 80d7 	bls.w	8004e62 <_printf_float+0x39a>
 8004cb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f7fb fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8004cc0:	b388      	cbz	r0, 8004d26 <_printf_float+0x25e>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <_printf_float+0x300>)
 8004cc6:	4659      	mov	r1, fp
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b0      	blx	r6
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f43f af52 	beq.w	8004b76 <_printf_float+0xae>
 8004cd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	db02      	blt.n	8004ce0 <_printf_float+0x218>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	07d8      	lsls	r0, r3, #31
 8004cde:	d50e      	bpl.n	8004cfe <_printf_float+0x236>
 8004ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b0      	blx	r6
 8004cea:	3001      	adds	r0, #1
 8004cec:	f43f af43 	beq.w	8004b76 <_printf_float+0xae>
 8004cf0:	2700      	movs	r7, #0
 8004cf2:	f104 081a 	add.w	r8, r4, #26
 8004cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	42bb      	cmp	r3, r7
 8004cfc:	dc09      	bgt.n	8004d12 <_printf_float+0x24a>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	079f      	lsls	r7, r3, #30
 8004d02:	f100 80fd 	bmi.w	8004f00 <_printf_float+0x438>
 8004d06:	68e0      	ldr	r0, [r4, #12]
 8004d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d0a:	4298      	cmp	r0, r3
 8004d0c:	bfb8      	it	lt
 8004d0e:	4618      	movlt	r0, r3
 8004d10:	e733      	b.n	8004b7a <_printf_float+0xb2>
 8004d12:	2301      	movs	r3, #1
 8004d14:	4642      	mov	r2, r8
 8004d16:	4659      	mov	r1, fp
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b0      	blx	r6
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f af2a 	beq.w	8004b76 <_printf_float+0xae>
 8004d22:	3701      	adds	r7, #1
 8004d24:	e7e7      	b.n	8004cf6 <_printf_float+0x22e>
 8004d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dc2b      	bgt.n	8004d84 <_printf_float+0x2bc>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <_printf_float+0x300>)
 8004d30:	4659      	mov	r1, fp
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b0      	blx	r6
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f af1d 	beq.w	8004b76 <_printf_float+0xae>
 8004d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d3e:	b923      	cbnz	r3, 8004d4a <_printf_float+0x282>
 8004d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d42:	b913      	cbnz	r3, 8004d4a <_printf_float+0x282>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	d5d9      	bpl.n	8004cfe <_printf_float+0x236>
 8004d4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d4e:	4659      	mov	r1, fp
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b0      	blx	r6
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f af0e 	beq.w	8004b76 <_printf_float+0xae>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	f104 091a 	add.w	r9, r4, #26
 8004d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d64:	425b      	negs	r3, r3
 8004d66:	4543      	cmp	r3, r8
 8004d68:	dc01      	bgt.n	8004d6e <_printf_float+0x2a6>
 8004d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d6c:	e797      	b.n	8004c9e <_printf_float+0x1d6>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	464a      	mov	r2, r9
 8004d72:	4659      	mov	r1, fp
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b0      	blx	r6
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f43f aefc 	beq.w	8004b76 <_printf_float+0xae>
 8004d7e:	f108 0801 	add.w	r8, r8, #1
 8004d82:	e7ee      	b.n	8004d62 <_printf_float+0x29a>
 8004d84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	bfa8      	it	ge
 8004d8c:	461a      	movge	r2, r3
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	4690      	mov	r8, r2
 8004d92:	dd07      	ble.n	8004da4 <_printf_float+0x2dc>
 8004d94:	4613      	mov	r3, r2
 8004d96:	4659      	mov	r1, fp
 8004d98:	463a      	mov	r2, r7
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b0      	blx	r6
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f aee9 	beq.w	8004b76 <_printf_float+0xae>
 8004da4:	f104 031a 	add.w	r3, r4, #26
 8004da8:	f04f 0a00 	mov.w	sl, #0
 8004dac:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db2:	e015      	b.n	8004de0 <_printf_float+0x318>
 8004db4:	7fefffff 	.word	0x7fefffff
 8004db8:	08006dac 	.word	0x08006dac
 8004dbc:	08006da8 	.word	0x08006da8
 8004dc0:	08006db4 	.word	0x08006db4
 8004dc4:	08006db0 	.word	0x08006db0
 8004dc8:	08006db8 	.word	0x08006db8
 8004dcc:	2301      	movs	r3, #1
 8004dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b0      	blx	r6
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f aecd 	beq.w	8004b76 <_printf_float+0xae>
 8004ddc:	f10a 0a01 	add.w	sl, sl, #1
 8004de0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004de4:	eba9 0308 	sub.w	r3, r9, r8
 8004de8:	4553      	cmp	r3, sl
 8004dea:	dcef      	bgt.n	8004dcc <_printf_float+0x304>
 8004dec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004df0:	429a      	cmp	r2, r3
 8004df2:	444f      	add	r7, r9
 8004df4:	db14      	blt.n	8004e20 <_printf_float+0x358>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	07da      	lsls	r2, r3, #31
 8004dfa:	d411      	bmi.n	8004e20 <_printf_float+0x358>
 8004dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e00:	eba3 0209 	sub.w	r2, r3, r9
 8004e04:	eba3 0901 	sub.w	r9, r3, r1
 8004e08:	4591      	cmp	r9, r2
 8004e0a:	bfa8      	it	ge
 8004e0c:	4691      	movge	r9, r2
 8004e0e:	f1b9 0f00 	cmp.w	r9, #0
 8004e12:	dc0d      	bgt.n	8004e30 <_printf_float+0x368>
 8004e14:	2700      	movs	r7, #0
 8004e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e1a:	f104 081a 	add.w	r8, r4, #26
 8004e1e:	e018      	b.n	8004e52 <_printf_float+0x38a>
 8004e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e24:	4659      	mov	r1, fp
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b0      	blx	r6
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d1e6      	bne.n	8004dfc <_printf_float+0x334>
 8004e2e:	e6a2      	b.n	8004b76 <_printf_float+0xae>
 8004e30:	464b      	mov	r3, r9
 8004e32:	463a      	mov	r2, r7
 8004e34:	4659      	mov	r1, fp
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b0      	blx	r6
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d1ea      	bne.n	8004e14 <_printf_float+0x34c>
 8004e3e:	e69a      	b.n	8004b76 <_printf_float+0xae>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4642      	mov	r2, r8
 8004e44:	4659      	mov	r1, fp
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b0      	blx	r6
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f ae93 	beq.w	8004b76 <_printf_float+0xae>
 8004e50:	3701      	adds	r7, #1
 8004e52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	eba3 0309 	sub.w	r3, r3, r9
 8004e5c:	42bb      	cmp	r3, r7
 8004e5e:	dcef      	bgt.n	8004e40 <_printf_float+0x378>
 8004e60:	e74d      	b.n	8004cfe <_printf_float+0x236>
 8004e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e64:	2a01      	cmp	r2, #1
 8004e66:	dc01      	bgt.n	8004e6c <_printf_float+0x3a4>
 8004e68:	07db      	lsls	r3, r3, #31
 8004e6a:	d538      	bpl.n	8004ede <_printf_float+0x416>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	463a      	mov	r2, r7
 8004e70:	4659      	mov	r1, fp
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b0      	blx	r6
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f ae7d 	beq.w	8004b76 <_printf_float+0xae>
 8004e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e80:	4659      	mov	r1, fp
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b0      	blx	r6
 8004e86:	3001      	adds	r0, #1
 8004e88:	f107 0701 	add.w	r7, r7, #1
 8004e8c:	f43f ae73 	beq.w	8004b76 <_printf_float+0xae>
 8004e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e96:	2200      	movs	r2, #0
 8004e98:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f7fb fd83 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea2:	b9c0      	cbnz	r0, 8004ed6 <_printf_float+0x40e>
 8004ea4:	4643      	mov	r3, r8
 8004ea6:	463a      	mov	r2, r7
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	4628      	mov	r0, r5
 8004eac:	47b0      	blx	r6
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d10d      	bne.n	8004ece <_printf_float+0x406>
 8004eb2:	e660      	b.n	8004b76 <_printf_float+0xae>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	4659      	mov	r1, fp
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b0      	blx	r6
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f43f ae59 	beq.w	8004b76 <_printf_float+0xae>
 8004ec4:	3701      	adds	r7, #1
 8004ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	42bb      	cmp	r3, r7
 8004ecc:	dcf2      	bgt.n	8004eb4 <_printf_float+0x3ec>
 8004ece:	464b      	mov	r3, r9
 8004ed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ed4:	e6e4      	b.n	8004ca0 <_printf_float+0x1d8>
 8004ed6:	2700      	movs	r7, #0
 8004ed8:	f104 081a 	add.w	r8, r4, #26
 8004edc:	e7f3      	b.n	8004ec6 <_printf_float+0x3fe>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e7e1      	b.n	8004ea6 <_printf_float+0x3de>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	4659      	mov	r1, fp
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b0      	blx	r6
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f ae42 	beq.w	8004b76 <_printf_float+0xae>
 8004ef2:	3701      	adds	r7, #1
 8004ef4:	68e3      	ldr	r3, [r4, #12]
 8004ef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	42bb      	cmp	r3, r7
 8004efc:	dcf1      	bgt.n	8004ee2 <_printf_float+0x41a>
 8004efe:	e702      	b.n	8004d06 <_printf_float+0x23e>
 8004f00:	2700      	movs	r7, #0
 8004f02:	f104 0819 	add.w	r8, r4, #25
 8004f06:	e7f5      	b.n	8004ef4 <_printf_float+0x42c>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f43f ae94 	beq.w	8004c36 <_printf_float+0x16e>
 8004f0e:	f04f 0c00 	mov.w	ip, #0
 8004f12:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f16:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004f1a:	6022      	str	r2, [r4, #0]
 8004f1c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f20:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	463a      	mov	r2, r7
 8004f28:	464b      	mov	r3, r9
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f7ff fd3a 	bl	80049a4 <__cvt>
 8004f30:	4607      	mov	r7, r0
 8004f32:	e64f      	b.n	8004bd4 <_printf_float+0x10c>

08004f34 <_printf_common>:
 8004f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f38:	4691      	mov	r9, r2
 8004f3a:	461f      	mov	r7, r3
 8004f3c:	688a      	ldr	r2, [r1, #8]
 8004f3e:	690b      	ldr	r3, [r1, #16]
 8004f40:	4606      	mov	r6, r0
 8004f42:	4293      	cmp	r3, r2
 8004f44:	bfb8      	it	lt
 8004f46:	4613      	movlt	r3, r2
 8004f48:	f8c9 3000 	str.w	r3, [r9]
 8004f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f50:	460c      	mov	r4, r1
 8004f52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f56:	b112      	cbz	r2, 8004f5e <_printf_common+0x2a>
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f8c9 3000 	str.w	r3, [r9]
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	0699      	lsls	r1, r3, #26
 8004f62:	bf42      	ittt	mi
 8004f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f68:	3302      	addmi	r3, #2
 8004f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d107      	bne.n	8004f86 <_printf_common+0x52>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	42ab      	cmp	r3, r5
 8004f84:	dc29      	bgt.n	8004fda <_printf_common+0xa6>
 8004f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	3300      	adds	r3, #0
 8004f8e:	bf18      	it	ne
 8004f90:	2301      	movne	r3, #1
 8004f92:	0692      	lsls	r2, r2, #26
 8004f94:	d42e      	bmi.n	8004ff4 <_printf_common+0xc0>
 8004f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	47c0      	blx	r8
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d021      	beq.n	8004fe8 <_printf_common+0xb4>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	68e5      	ldr	r5, [r4, #12]
 8004fa8:	f003 0306 	and.w	r3, r3, #6
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	bf18      	it	ne
 8004fb0:	2500      	movne	r5, #0
 8004fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8004fb6:	f04f 0900 	mov.w	r9, #0
 8004fba:	bf08      	it	eq
 8004fbc:	1aad      	subeq	r5, r5, r2
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	6922      	ldr	r2, [r4, #16]
 8004fc2:	bf08      	it	eq
 8004fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	bfc4      	itt	gt
 8004fcc:	1a9b      	subgt	r3, r3, r2
 8004fce:	18ed      	addgt	r5, r5, r3
 8004fd0:	341a      	adds	r4, #26
 8004fd2:	454d      	cmp	r5, r9
 8004fd4:	d11a      	bne.n	800500c <_printf_common+0xd8>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e008      	b.n	8004fec <_printf_common+0xb8>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4652      	mov	r2, sl
 8004fde:	4639      	mov	r1, r7
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	47c0      	blx	r8
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d103      	bne.n	8004ff0 <_printf_common+0xbc>
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	e7c2      	b.n	8004f7a <_printf_common+0x46>
 8004ff4:	2030      	movs	r0, #48	; 0x30
 8004ff6:	18e1      	adds	r1, r4, r3
 8004ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005002:	4422      	add	r2, r4
 8005004:	3302      	adds	r3, #2
 8005006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800500a:	e7c4      	b.n	8004f96 <_printf_common+0x62>
 800500c:	2301      	movs	r3, #1
 800500e:	4622      	mov	r2, r4
 8005010:	4639      	mov	r1, r7
 8005012:	4630      	mov	r0, r6
 8005014:	47c0      	blx	r8
 8005016:	3001      	adds	r0, #1
 8005018:	d0e6      	beq.n	8004fe8 <_printf_common+0xb4>
 800501a:	f109 0901 	add.w	r9, r9, #1
 800501e:	e7d8      	b.n	8004fd2 <_printf_common+0x9e>

08005020 <_puts_r>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	460e      	mov	r6, r1
 8005024:	4605      	mov	r5, r0
 8005026:	b118      	cbz	r0, 8005030 <_puts_r+0x10>
 8005028:	6983      	ldr	r3, [r0, #24]
 800502a:	b90b      	cbnz	r3, 8005030 <_puts_r+0x10>
 800502c:	f001 f850 	bl	80060d0 <__sinit>
 8005030:	69ab      	ldr	r3, [r5, #24]
 8005032:	68ac      	ldr	r4, [r5, #8]
 8005034:	b913      	cbnz	r3, 800503c <_puts_r+0x1c>
 8005036:	4628      	mov	r0, r5
 8005038:	f001 f84a 	bl	80060d0 <__sinit>
 800503c:	4b23      	ldr	r3, [pc, #140]	; (80050cc <_puts_r+0xac>)
 800503e:	429c      	cmp	r4, r3
 8005040:	d117      	bne.n	8005072 <_puts_r+0x52>
 8005042:	686c      	ldr	r4, [r5, #4]
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	071b      	lsls	r3, r3, #28
 8005048:	d51d      	bpl.n	8005086 <_puts_r+0x66>
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	b1db      	cbz	r3, 8005086 <_puts_r+0x66>
 800504e:	3e01      	subs	r6, #1
 8005050:	68a3      	ldr	r3, [r4, #8]
 8005052:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005056:	3b01      	subs	r3, #1
 8005058:	60a3      	str	r3, [r4, #8]
 800505a:	b9e9      	cbnz	r1, 8005098 <_puts_r+0x78>
 800505c:	2b00      	cmp	r3, #0
 800505e:	da2e      	bge.n	80050be <_puts_r+0x9e>
 8005060:	4622      	mov	r2, r4
 8005062:	210a      	movs	r1, #10
 8005064:	4628      	mov	r0, r5
 8005066:	f000 f83f 	bl	80050e8 <__swbuf_r>
 800506a:	3001      	adds	r0, #1
 800506c:	d011      	beq.n	8005092 <_puts_r+0x72>
 800506e:	200a      	movs	r0, #10
 8005070:	e011      	b.n	8005096 <_puts_r+0x76>
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <_puts_r+0xb0>)
 8005074:	429c      	cmp	r4, r3
 8005076:	d101      	bne.n	800507c <_puts_r+0x5c>
 8005078:	68ac      	ldr	r4, [r5, #8]
 800507a:	e7e3      	b.n	8005044 <_puts_r+0x24>
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <_puts_r+0xb4>)
 800507e:	429c      	cmp	r4, r3
 8005080:	bf08      	it	eq
 8005082:	68ec      	ldreq	r4, [r5, #12]
 8005084:	e7de      	b.n	8005044 <_puts_r+0x24>
 8005086:	4621      	mov	r1, r4
 8005088:	4628      	mov	r0, r5
 800508a:	f000 f87f 	bl	800518c <__swsetup_r>
 800508e:	2800      	cmp	r0, #0
 8005090:	d0dd      	beq.n	800504e <_puts_r+0x2e>
 8005092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	2b00      	cmp	r3, #0
 800509a:	da04      	bge.n	80050a6 <_puts_r+0x86>
 800509c:	69a2      	ldr	r2, [r4, #24]
 800509e:	429a      	cmp	r2, r3
 80050a0:	dc06      	bgt.n	80050b0 <_puts_r+0x90>
 80050a2:	290a      	cmp	r1, #10
 80050a4:	d004      	beq.n	80050b0 <_puts_r+0x90>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	6022      	str	r2, [r4, #0]
 80050ac:	7019      	strb	r1, [r3, #0]
 80050ae:	e7cf      	b.n	8005050 <_puts_r+0x30>
 80050b0:	4622      	mov	r2, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f818 	bl	80050e8 <__swbuf_r>
 80050b8:	3001      	adds	r0, #1
 80050ba:	d1c9      	bne.n	8005050 <_puts_r+0x30>
 80050bc:	e7e9      	b.n	8005092 <_puts_r+0x72>
 80050be:	200a      	movs	r0, #10
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	6022      	str	r2, [r4, #0]
 80050c6:	7018      	strb	r0, [r3, #0]
 80050c8:	e7e5      	b.n	8005096 <_puts_r+0x76>
 80050ca:	bf00      	nop
 80050cc:	08006de8 	.word	0x08006de8
 80050d0:	08006e08 	.word	0x08006e08
 80050d4:	08006dc8 	.word	0x08006dc8

080050d8 <puts>:
 80050d8:	4b02      	ldr	r3, [pc, #8]	; (80050e4 <puts+0xc>)
 80050da:	4601      	mov	r1, r0
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	f7ff bf9f 	b.w	8005020 <_puts_r>
 80050e2:	bf00      	nop
 80050e4:	20000038 	.word	0x20000038

080050e8 <__swbuf_r>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	460e      	mov	r6, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	4605      	mov	r5, r0
 80050f0:	b118      	cbz	r0, 80050fa <__swbuf_r+0x12>
 80050f2:	6983      	ldr	r3, [r0, #24]
 80050f4:	b90b      	cbnz	r3, 80050fa <__swbuf_r+0x12>
 80050f6:	f000 ffeb 	bl	80060d0 <__sinit>
 80050fa:	4b21      	ldr	r3, [pc, #132]	; (8005180 <__swbuf_r+0x98>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d12a      	bne.n	8005156 <__swbuf_r+0x6e>
 8005100:	686c      	ldr	r4, [r5, #4]
 8005102:	69a3      	ldr	r3, [r4, #24]
 8005104:	60a3      	str	r3, [r4, #8]
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	071a      	lsls	r2, r3, #28
 800510a:	d52e      	bpl.n	800516a <__swbuf_r+0x82>
 800510c:	6923      	ldr	r3, [r4, #16]
 800510e:	b363      	cbz	r3, 800516a <__swbuf_r+0x82>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	b2f6      	uxtb	r6, r6
 8005116:	1ac0      	subs	r0, r0, r3
 8005118:	6963      	ldr	r3, [r4, #20]
 800511a:	4637      	mov	r7, r6
 800511c:	4283      	cmp	r3, r0
 800511e:	dc04      	bgt.n	800512a <__swbuf_r+0x42>
 8005120:	4621      	mov	r1, r4
 8005122:	4628      	mov	r0, r5
 8005124:	f000 ff6a 	bl	8005ffc <_fflush_r>
 8005128:	bb28      	cbnz	r0, 8005176 <__swbuf_r+0x8e>
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	3001      	adds	r0, #1
 800512e:	3b01      	subs	r3, #1
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	701e      	strb	r6, [r3, #0]
 800513a:	6963      	ldr	r3, [r4, #20]
 800513c:	4283      	cmp	r3, r0
 800513e:	d004      	beq.n	800514a <__swbuf_r+0x62>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	07db      	lsls	r3, r3, #31
 8005144:	d519      	bpl.n	800517a <__swbuf_r+0x92>
 8005146:	2e0a      	cmp	r6, #10
 8005148:	d117      	bne.n	800517a <__swbuf_r+0x92>
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 ff55 	bl	8005ffc <_fflush_r>
 8005152:	b190      	cbz	r0, 800517a <__swbuf_r+0x92>
 8005154:	e00f      	b.n	8005176 <__swbuf_r+0x8e>
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <__swbuf_r+0x9c>)
 8005158:	429c      	cmp	r4, r3
 800515a:	d101      	bne.n	8005160 <__swbuf_r+0x78>
 800515c:	68ac      	ldr	r4, [r5, #8]
 800515e:	e7d0      	b.n	8005102 <__swbuf_r+0x1a>
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <__swbuf_r+0xa0>)
 8005162:	429c      	cmp	r4, r3
 8005164:	bf08      	it	eq
 8005166:	68ec      	ldreq	r4, [r5, #12]
 8005168:	e7cb      	b.n	8005102 <__swbuf_r+0x1a>
 800516a:	4621      	mov	r1, r4
 800516c:	4628      	mov	r0, r5
 800516e:	f000 f80d 	bl	800518c <__swsetup_r>
 8005172:	2800      	cmp	r0, #0
 8005174:	d0cc      	beq.n	8005110 <__swbuf_r+0x28>
 8005176:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800517a:	4638      	mov	r0, r7
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517e:	bf00      	nop
 8005180:	08006de8 	.word	0x08006de8
 8005184:	08006e08 	.word	0x08006e08
 8005188:	08006dc8 	.word	0x08006dc8

0800518c <__swsetup_r>:
 800518c:	4b32      	ldr	r3, [pc, #200]	; (8005258 <__swsetup_r+0xcc>)
 800518e:	b570      	push	{r4, r5, r6, lr}
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	4606      	mov	r6, r0
 8005194:	460c      	mov	r4, r1
 8005196:	b125      	cbz	r5, 80051a2 <__swsetup_r+0x16>
 8005198:	69ab      	ldr	r3, [r5, #24]
 800519a:	b913      	cbnz	r3, 80051a2 <__swsetup_r+0x16>
 800519c:	4628      	mov	r0, r5
 800519e:	f000 ff97 	bl	80060d0 <__sinit>
 80051a2:	4b2e      	ldr	r3, [pc, #184]	; (800525c <__swsetup_r+0xd0>)
 80051a4:	429c      	cmp	r4, r3
 80051a6:	d10f      	bne.n	80051c8 <__swsetup_r+0x3c>
 80051a8:	686c      	ldr	r4, [r5, #4]
 80051aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	0715      	lsls	r5, r2, #28
 80051b2:	d42c      	bmi.n	800520e <__swsetup_r+0x82>
 80051b4:	06d0      	lsls	r0, r2, #27
 80051b6:	d411      	bmi.n	80051dc <__swsetup_r+0x50>
 80051b8:	2209      	movs	r2, #9
 80051ba:	6032      	str	r2, [r6, #0]
 80051bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c6:	e03e      	b.n	8005246 <__swsetup_r+0xba>
 80051c8:	4b25      	ldr	r3, [pc, #148]	; (8005260 <__swsetup_r+0xd4>)
 80051ca:	429c      	cmp	r4, r3
 80051cc:	d101      	bne.n	80051d2 <__swsetup_r+0x46>
 80051ce:	68ac      	ldr	r4, [r5, #8]
 80051d0:	e7eb      	b.n	80051aa <__swsetup_r+0x1e>
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <__swsetup_r+0xd8>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	bf08      	it	eq
 80051d8:	68ec      	ldreq	r4, [r5, #12]
 80051da:	e7e6      	b.n	80051aa <__swsetup_r+0x1e>
 80051dc:	0751      	lsls	r1, r2, #29
 80051de:	d512      	bpl.n	8005206 <__swsetup_r+0x7a>
 80051e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051e2:	b141      	cbz	r1, 80051f6 <__swsetup_r+0x6a>
 80051e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d002      	beq.n	80051f2 <__swsetup_r+0x66>
 80051ec:	4630      	mov	r0, r6
 80051ee:	f001 fb7b 	bl	80068e8 <_free_r>
 80051f2:	2300      	movs	r3, #0
 80051f4:	6363      	str	r3, [r4, #52]	; 0x34
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	2300      	movs	r3, #0
 8005200:	6063      	str	r3, [r4, #4]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f043 0308 	orr.w	r3, r3, #8
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	b94b      	cbnz	r3, 8005226 <__swsetup_r+0x9a>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800521c:	d003      	beq.n	8005226 <__swsetup_r+0x9a>
 800521e:	4621      	mov	r1, r4
 8005220:	4630      	mov	r0, r6
 8005222:	f001 f811 	bl	8006248 <__smakebuf_r>
 8005226:	89a2      	ldrh	r2, [r4, #12]
 8005228:	f012 0301 	ands.w	r3, r2, #1
 800522c:	d00c      	beq.n	8005248 <__swsetup_r+0xbc>
 800522e:	2300      	movs	r3, #0
 8005230:	60a3      	str	r3, [r4, #8]
 8005232:	6963      	ldr	r3, [r4, #20]
 8005234:	425b      	negs	r3, r3
 8005236:	61a3      	str	r3, [r4, #24]
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	b953      	cbnz	r3, 8005252 <__swsetup_r+0xc6>
 800523c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005240:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005244:	d1ba      	bne.n	80051bc <__swsetup_r+0x30>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	0792      	lsls	r2, r2, #30
 800524a:	bf58      	it	pl
 800524c:	6963      	ldrpl	r3, [r4, #20]
 800524e:	60a3      	str	r3, [r4, #8]
 8005250:	e7f2      	b.n	8005238 <__swsetup_r+0xac>
 8005252:	2000      	movs	r0, #0
 8005254:	e7f7      	b.n	8005246 <__swsetup_r+0xba>
 8005256:	bf00      	nop
 8005258:	20000038 	.word	0x20000038
 800525c:	08006de8 	.word	0x08006de8
 8005260:	08006e08 	.word	0x08006e08
 8005264:	08006dc8 	.word	0x08006dc8

08005268 <quorem>:
 8005268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	6903      	ldr	r3, [r0, #16]
 800526e:	690c      	ldr	r4, [r1, #16]
 8005270:	4680      	mov	r8, r0
 8005272:	42a3      	cmp	r3, r4
 8005274:	f2c0 8084 	blt.w	8005380 <quorem+0x118>
 8005278:	3c01      	subs	r4, #1
 800527a:	f101 0714 	add.w	r7, r1, #20
 800527e:	f100 0614 	add.w	r6, r0, #20
 8005282:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005286:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800528a:	3501      	adds	r5, #1
 800528c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005290:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005294:	eb06 030c 	add.w	r3, r6, ip
 8005298:	eb07 090c 	add.w	r9, r7, ip
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	b39d      	cbz	r5, 8005308 <quorem+0xa0>
 80052a0:	f04f 0a00 	mov.w	sl, #0
 80052a4:	4638      	mov	r0, r7
 80052a6:	46b6      	mov	lr, r6
 80052a8:	46d3      	mov	fp, sl
 80052aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80052ae:	b293      	uxth	r3, r2
 80052b0:	fb05 a303 	mla	r3, r5, r3, sl
 80052b4:	0c12      	lsrs	r2, r2, #16
 80052b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052ba:	fb05 a202 	mla	r2, r5, r2, sl
 80052be:	b29b      	uxth	r3, r3
 80052c0:	ebab 0303 	sub.w	r3, fp, r3
 80052c4:	f8de b000 	ldr.w	fp, [lr]
 80052c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052cc:	fa1f fb8b 	uxth.w	fp, fp
 80052d0:	445b      	add	r3, fp
 80052d2:	fa1f fb82 	uxth.w	fp, r2
 80052d6:	f8de 2000 	ldr.w	r2, [lr]
 80052da:	4581      	cmp	r9, r0
 80052dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ea:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052ee:	f84e 3b04 	str.w	r3, [lr], #4
 80052f2:	d2da      	bcs.n	80052aa <quorem+0x42>
 80052f4:	f856 300c 	ldr.w	r3, [r6, ip]
 80052f8:	b933      	cbnz	r3, 8005308 <quorem+0xa0>
 80052fa:	9b01      	ldr	r3, [sp, #4]
 80052fc:	3b04      	subs	r3, #4
 80052fe:	429e      	cmp	r6, r3
 8005300:	461a      	mov	r2, r3
 8005302:	d331      	bcc.n	8005368 <quorem+0x100>
 8005304:	f8c8 4010 	str.w	r4, [r8, #16]
 8005308:	4640      	mov	r0, r8
 800530a:	f001 fa17 	bl	800673c <__mcmp>
 800530e:	2800      	cmp	r0, #0
 8005310:	db26      	blt.n	8005360 <quorem+0xf8>
 8005312:	4630      	mov	r0, r6
 8005314:	f04f 0c00 	mov.w	ip, #0
 8005318:	3501      	adds	r5, #1
 800531a:	f857 1b04 	ldr.w	r1, [r7], #4
 800531e:	f8d0 e000 	ldr.w	lr, [r0]
 8005322:	b28b      	uxth	r3, r1
 8005324:	ebac 0303 	sub.w	r3, ip, r3
 8005328:	fa1f f28e 	uxth.w	r2, lr
 800532c:	4413      	add	r3, r2
 800532e:	0c0a      	lsrs	r2, r1, #16
 8005330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005338:	b29b      	uxth	r3, r3
 800533a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800533e:	45b9      	cmp	r9, r7
 8005340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005344:	f840 3b04 	str.w	r3, [r0], #4
 8005348:	d2e7      	bcs.n	800531a <quorem+0xb2>
 800534a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800534e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005352:	b92a      	cbnz	r2, 8005360 <quorem+0xf8>
 8005354:	3b04      	subs	r3, #4
 8005356:	429e      	cmp	r6, r3
 8005358:	461a      	mov	r2, r3
 800535a:	d30b      	bcc.n	8005374 <quorem+0x10c>
 800535c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005360:	4628      	mov	r0, r5
 8005362:	b003      	add	sp, #12
 8005364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	3b04      	subs	r3, #4
 800536c:	2a00      	cmp	r2, #0
 800536e:	d1c9      	bne.n	8005304 <quorem+0x9c>
 8005370:	3c01      	subs	r4, #1
 8005372:	e7c4      	b.n	80052fe <quorem+0x96>
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	3b04      	subs	r3, #4
 8005378:	2a00      	cmp	r2, #0
 800537a:	d1ef      	bne.n	800535c <quorem+0xf4>
 800537c:	3c01      	subs	r4, #1
 800537e:	e7ea      	b.n	8005356 <quorem+0xee>
 8005380:	2000      	movs	r0, #0
 8005382:	e7ee      	b.n	8005362 <quorem+0xfa>
 8005384:	0000      	movs	r0, r0
	...

08005388 <_dtoa_r>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	4616      	mov	r6, r2
 800538e:	461f      	mov	r7, r3
 8005390:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005392:	b095      	sub	sp, #84	; 0x54
 8005394:	4604      	mov	r4, r0
 8005396:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800539a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800539e:	b93d      	cbnz	r5, 80053b0 <_dtoa_r+0x28>
 80053a0:	2010      	movs	r0, #16
 80053a2:	f000 ff91 	bl	80062c8 <malloc>
 80053a6:	6260      	str	r0, [r4, #36]	; 0x24
 80053a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053ac:	6005      	str	r5, [r0, #0]
 80053ae:	60c5      	str	r5, [r0, #12]
 80053b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	b151      	cbz	r1, 80053cc <_dtoa_r+0x44>
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	2301      	movs	r3, #1
 80053ba:	4093      	lsls	r3, r2
 80053bc:	604a      	str	r2, [r1, #4]
 80053be:	608b      	str	r3, [r1, #8]
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 ffda 	bl	800637a <_Bfree>
 80053c6:	2200      	movs	r2, #0
 80053c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	1e3b      	subs	r3, r7, #0
 80053ce:	bfaf      	iteee	ge
 80053d0:	2300      	movge	r3, #0
 80053d2:	2201      	movlt	r2, #1
 80053d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	9303      	strlt	r3, [sp, #12]
 80053da:	bfac      	ite	ge
 80053dc:	f8c8 3000 	strge.w	r3, [r8]
 80053e0:	f8c8 2000 	strlt.w	r2, [r8]
 80053e4:	4bae      	ldr	r3, [pc, #696]	; (80056a0 <_dtoa_r+0x318>)
 80053e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80053ea:	ea33 0308 	bics.w	r3, r3, r8
 80053ee:	d11b      	bne.n	8005428 <_dtoa_r+0xa0>
 80053f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	9b02      	ldr	r3, [sp, #8]
 80053fa:	b923      	cbnz	r3, 8005406 <_dtoa_r+0x7e>
 80053fc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005400:	2800      	cmp	r0, #0
 8005402:	f000 8545 	beq.w	8005e90 <_dtoa_r+0xb08>
 8005406:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005408:	b953      	cbnz	r3, 8005420 <_dtoa_r+0x98>
 800540a:	4ba6      	ldr	r3, [pc, #664]	; (80056a4 <_dtoa_r+0x31c>)
 800540c:	e021      	b.n	8005452 <_dtoa_r+0xca>
 800540e:	4ba6      	ldr	r3, [pc, #664]	; (80056a8 <_dtoa_r+0x320>)
 8005410:	9306      	str	r3, [sp, #24]
 8005412:	3308      	adds	r3, #8
 8005414:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	9806      	ldr	r0, [sp, #24]
 800541a:	b015      	add	sp, #84	; 0x54
 800541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005420:	4ba0      	ldr	r3, [pc, #640]	; (80056a4 <_dtoa_r+0x31c>)
 8005422:	9306      	str	r3, [sp, #24]
 8005424:	3303      	adds	r3, #3
 8005426:	e7f5      	b.n	8005414 <_dtoa_r+0x8c>
 8005428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb fab8 	bl	80009a8 <__aeabi_dcmpeq>
 8005438:	4682      	mov	sl, r0
 800543a:	b160      	cbz	r0, 8005456 <_dtoa_r+0xce>
 800543c:	2301      	movs	r3, #1
 800543e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8520 	beq.w	8005e8a <_dtoa_r+0xb02>
 800544a:	4b98      	ldr	r3, [pc, #608]	; (80056ac <_dtoa_r+0x324>)
 800544c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	3b01      	subs	r3, #1
 8005452:	9306      	str	r3, [sp, #24]
 8005454:	e7e0      	b.n	8005418 <_dtoa_r+0x90>
 8005456:	ab12      	add	r3, sp, #72	; 0x48
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	ab13      	add	r3, sp, #76	; 0x4c
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	4632      	mov	r2, r6
 8005460:	463b      	mov	r3, r7
 8005462:	4620      	mov	r0, r4
 8005464:	f001 f9e2 	bl	800682c <__d2b>
 8005468:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800546c:	4683      	mov	fp, r0
 800546e:	2d00      	cmp	r5, #0
 8005470:	d07d      	beq.n	800556e <_dtoa_r+0x1e6>
 8005472:	46b0      	mov	r8, r6
 8005474:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005478:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800547c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005480:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005484:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005488:	2200      	movs	r2, #0
 800548a:	4b89      	ldr	r3, [pc, #548]	; (80056b0 <_dtoa_r+0x328>)
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fa fe6a 	bl	8000168 <__aeabi_dsub>
 8005494:	a37c      	add	r3, pc, #496	; (adr r3, 8005688 <_dtoa_r+0x300>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fb f81d 	bl	80004d8 <__aeabi_dmul>
 800549e:	a37c      	add	r3, pc, #496	; (adr r3, 8005690 <_dtoa_r+0x308>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fa fe62 	bl	800016c <__adddf3>
 80054a8:	4606      	mov	r6, r0
 80054aa:	4628      	mov	r0, r5
 80054ac:	460f      	mov	r7, r1
 80054ae:	f7fa ffa9 	bl	8000404 <__aeabi_i2d>
 80054b2:	a379      	add	r3, pc, #484	; (adr r3, 8005698 <_dtoa_r+0x310>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f7fb f80e 	bl	80004d8 <__aeabi_dmul>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fa fe52 	bl	800016c <__adddf3>
 80054c8:	4606      	mov	r6, r0
 80054ca:	460f      	mov	r7, r1
 80054cc:	f7fb fab4 	bl	8000a38 <__aeabi_d2iz>
 80054d0:	2200      	movs	r2, #0
 80054d2:	4682      	mov	sl, r0
 80054d4:	2300      	movs	r3, #0
 80054d6:	4630      	mov	r0, r6
 80054d8:	4639      	mov	r1, r7
 80054da:	f7fb fa6f 	bl	80009bc <__aeabi_dcmplt>
 80054de:	b148      	cbz	r0, 80054f4 <_dtoa_r+0x16c>
 80054e0:	4650      	mov	r0, sl
 80054e2:	f7fa ff8f 	bl	8000404 <__aeabi_i2d>
 80054e6:	4632      	mov	r2, r6
 80054e8:	463b      	mov	r3, r7
 80054ea:	f7fb fa5d 	bl	80009a8 <__aeabi_dcmpeq>
 80054ee:	b908      	cbnz	r0, 80054f4 <_dtoa_r+0x16c>
 80054f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054f4:	f1ba 0f16 	cmp.w	sl, #22
 80054f8:	d85a      	bhi.n	80055b0 <_dtoa_r+0x228>
 80054fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054fe:	496d      	ldr	r1, [pc, #436]	; (80056b4 <_dtoa_r+0x32c>)
 8005500:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005508:	f7fb fa76 	bl	80009f8 <__aeabi_dcmpgt>
 800550c:	2800      	cmp	r0, #0
 800550e:	d051      	beq.n	80055b4 <_dtoa_r+0x22c>
 8005510:	2300      	movs	r3, #0
 8005512:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005516:	930d      	str	r3, [sp, #52]	; 0x34
 8005518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800551a:	1b5d      	subs	r5, r3, r5
 800551c:	1e6b      	subs	r3, r5, #1
 800551e:	9307      	str	r3, [sp, #28]
 8005520:	bf43      	ittte	mi
 8005522:	2300      	movmi	r3, #0
 8005524:	f1c5 0901 	rsbmi	r9, r5, #1
 8005528:	9307      	strmi	r3, [sp, #28]
 800552a:	f04f 0900 	movpl.w	r9, #0
 800552e:	f1ba 0f00 	cmp.w	sl, #0
 8005532:	db41      	blt.n	80055b8 <_dtoa_r+0x230>
 8005534:	9b07      	ldr	r3, [sp, #28]
 8005536:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800553a:	4453      	add	r3, sl
 800553c:	9307      	str	r3, [sp, #28]
 800553e:	2300      	movs	r3, #0
 8005540:	9308      	str	r3, [sp, #32]
 8005542:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005544:	2b09      	cmp	r3, #9
 8005546:	f200 808f 	bhi.w	8005668 <_dtoa_r+0x2e0>
 800554a:	2b05      	cmp	r3, #5
 800554c:	bfc4      	itt	gt
 800554e:	3b04      	subgt	r3, #4
 8005550:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005552:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005554:	bfc8      	it	gt
 8005556:	2500      	movgt	r5, #0
 8005558:	f1a3 0302 	sub.w	r3, r3, #2
 800555c:	bfd8      	it	le
 800555e:	2501      	movle	r5, #1
 8005560:	2b03      	cmp	r3, #3
 8005562:	f200 808d 	bhi.w	8005680 <_dtoa_r+0x2f8>
 8005566:	e8df f003 	tbb	[pc, r3]
 800556a:	7d7b      	.short	0x7d7b
 800556c:	6f2f      	.short	0x6f2f
 800556e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005572:	441d      	add	r5, r3
 8005574:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005578:	2820      	cmp	r0, #32
 800557a:	dd13      	ble.n	80055a4 <_dtoa_r+0x21c>
 800557c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	fa08 f800 	lsl.w	r8, r8, r0
 8005586:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800558a:	fa23 f000 	lsr.w	r0, r3, r0
 800558e:	ea48 0000 	orr.w	r0, r8, r0
 8005592:	f7fa ff27 	bl	80003e4 <__aeabi_ui2d>
 8005596:	2301      	movs	r3, #1
 8005598:	4680      	mov	r8, r0
 800559a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800559e:	3d01      	subs	r5, #1
 80055a0:	9310      	str	r3, [sp, #64]	; 0x40
 80055a2:	e771      	b.n	8005488 <_dtoa_r+0x100>
 80055a4:	9b02      	ldr	r3, [sp, #8]
 80055a6:	f1c0 0020 	rsb	r0, r0, #32
 80055aa:	fa03 f000 	lsl.w	r0, r3, r0
 80055ae:	e7f0      	b.n	8005592 <_dtoa_r+0x20a>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e7b0      	b.n	8005516 <_dtoa_r+0x18e>
 80055b4:	900d      	str	r0, [sp, #52]	; 0x34
 80055b6:	e7af      	b.n	8005518 <_dtoa_r+0x190>
 80055b8:	f1ca 0300 	rsb	r3, sl, #0
 80055bc:	9308      	str	r3, [sp, #32]
 80055be:	2300      	movs	r3, #0
 80055c0:	eba9 090a 	sub.w	r9, r9, sl
 80055c4:	930c      	str	r3, [sp, #48]	; 0x30
 80055c6:	e7bc      	b.n	8005542 <_dtoa_r+0x1ba>
 80055c8:	2301      	movs	r3, #1
 80055ca:	9309      	str	r3, [sp, #36]	; 0x24
 80055cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd74      	ble.n	80056bc <_dtoa_r+0x334>
 80055d2:	4698      	mov	r8, r3
 80055d4:	9304      	str	r3, [sp, #16]
 80055d6:	2200      	movs	r2, #0
 80055d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055da:	6072      	str	r2, [r6, #4]
 80055dc:	2204      	movs	r2, #4
 80055de:	f102 0014 	add.w	r0, r2, #20
 80055e2:	4298      	cmp	r0, r3
 80055e4:	6871      	ldr	r1, [r6, #4]
 80055e6:	d96e      	bls.n	80056c6 <_dtoa_r+0x33e>
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 fe92 	bl	8006312 <_Balloc>
 80055ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055f0:	6030      	str	r0, [r6, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f1b8 0f0e 	cmp.w	r8, #14
 80055f8:	9306      	str	r3, [sp, #24]
 80055fa:	f200 80ed 	bhi.w	80057d8 <_dtoa_r+0x450>
 80055fe:	2d00      	cmp	r5, #0
 8005600:	f000 80ea 	beq.w	80057d8 <_dtoa_r+0x450>
 8005604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005608:	f1ba 0f00 	cmp.w	sl, #0
 800560c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005610:	dd77      	ble.n	8005702 <_dtoa_r+0x37a>
 8005612:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <_dtoa_r+0x32c>)
 8005614:	f00a 030f 	and.w	r3, sl, #15
 8005618:	ea4f 162a 	mov.w	r6, sl, asr #4
 800561c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005620:	06f0      	lsls	r0, r6, #27
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800562a:	d568      	bpl.n	80056fe <_dtoa_r+0x376>
 800562c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005630:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <_dtoa_r+0x330>)
 8005632:	2503      	movs	r5, #3
 8005634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005638:	f7fb f878 	bl	800072c <__aeabi_ddiv>
 800563c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005640:	f006 060f 	and.w	r6, r6, #15
 8005644:	4f1c      	ldr	r7, [pc, #112]	; (80056b8 <_dtoa_r+0x330>)
 8005646:	e04f      	b.n	80056e8 <_dtoa_r+0x360>
 8005648:	2301      	movs	r3, #1
 800564a:	9309      	str	r3, [sp, #36]	; 0x24
 800564c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800564e:	4453      	add	r3, sl
 8005650:	f103 0801 	add.w	r8, r3, #1
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	4643      	mov	r3, r8
 8005658:	2b01      	cmp	r3, #1
 800565a:	bfb8      	it	lt
 800565c:	2301      	movlt	r3, #1
 800565e:	e7ba      	b.n	80055d6 <_dtoa_r+0x24e>
 8005660:	2300      	movs	r3, #0
 8005662:	e7b2      	b.n	80055ca <_dtoa_r+0x242>
 8005664:	2300      	movs	r3, #0
 8005666:	e7f0      	b.n	800564a <_dtoa_r+0x2c2>
 8005668:	2501      	movs	r5, #1
 800566a:	2300      	movs	r3, #0
 800566c:	9509      	str	r5, [sp, #36]	; 0x24
 800566e:	931e      	str	r3, [sp, #120]	; 0x78
 8005670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005674:	2200      	movs	r2, #0
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	4698      	mov	r8, r3
 800567a:	2312      	movs	r3, #18
 800567c:	921f      	str	r2, [sp, #124]	; 0x7c
 800567e:	e7aa      	b.n	80055d6 <_dtoa_r+0x24e>
 8005680:	2301      	movs	r3, #1
 8005682:	9309      	str	r3, [sp, #36]	; 0x24
 8005684:	e7f4      	b.n	8005670 <_dtoa_r+0x2e8>
 8005686:	bf00      	nop
 8005688:	636f4361 	.word	0x636f4361
 800568c:	3fd287a7 	.word	0x3fd287a7
 8005690:	8b60c8b3 	.word	0x8b60c8b3
 8005694:	3fc68a28 	.word	0x3fc68a28
 8005698:	509f79fb 	.word	0x509f79fb
 800569c:	3fd34413 	.word	0x3fd34413
 80056a0:	7ff00000 	.word	0x7ff00000
 80056a4:	08006dc3 	.word	0x08006dc3
 80056a8:	08006dba 	.word	0x08006dba
 80056ac:	08006db9 	.word	0x08006db9
 80056b0:	3ff80000 	.word	0x3ff80000
 80056b4:	08006e60 	.word	0x08006e60
 80056b8:	08006e38 	.word	0x08006e38
 80056bc:	2301      	movs	r3, #1
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	4698      	mov	r8, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	e7da      	b.n	800567c <_dtoa_r+0x2f4>
 80056c6:	3101      	adds	r1, #1
 80056c8:	6071      	str	r1, [r6, #4]
 80056ca:	0052      	lsls	r2, r2, #1
 80056cc:	e787      	b.n	80055de <_dtoa_r+0x256>
 80056ce:	07f1      	lsls	r1, r6, #31
 80056d0:	d508      	bpl.n	80056e4 <_dtoa_r+0x35c>
 80056d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056da:	f7fa fefd 	bl	80004d8 <__aeabi_dmul>
 80056de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056e2:	3501      	adds	r5, #1
 80056e4:	1076      	asrs	r6, r6, #1
 80056e6:	3708      	adds	r7, #8
 80056e8:	2e00      	cmp	r6, #0
 80056ea:	d1f0      	bne.n	80056ce <_dtoa_r+0x346>
 80056ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f4:	f7fb f81a 	bl	800072c <__aeabi_ddiv>
 80056f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056fc:	e01b      	b.n	8005736 <_dtoa_r+0x3ae>
 80056fe:	2502      	movs	r5, #2
 8005700:	e7a0      	b.n	8005644 <_dtoa_r+0x2bc>
 8005702:	f000 80a4 	beq.w	800584e <_dtoa_r+0x4c6>
 8005706:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800570a:	f1ca 0600 	rsb	r6, sl, #0
 800570e:	4ba0      	ldr	r3, [pc, #640]	; (8005990 <_dtoa_r+0x608>)
 8005710:	f006 020f 	and.w	r2, r6, #15
 8005714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa fedc 	bl	80004d8 <__aeabi_dmul>
 8005720:	2502      	movs	r5, #2
 8005722:	2300      	movs	r3, #0
 8005724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005728:	4f9a      	ldr	r7, [pc, #616]	; (8005994 <_dtoa_r+0x60c>)
 800572a:	1136      	asrs	r6, r6, #4
 800572c:	2e00      	cmp	r6, #0
 800572e:	f040 8083 	bne.w	8005838 <_dtoa_r+0x4b0>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e0      	bne.n	80056f8 <_dtoa_r+0x370>
 8005736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 808a 	beq.w	8005852 <_dtoa_r+0x4ca>
 800573e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005742:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005746:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800574a:	2200      	movs	r2, #0
 800574c:	4b92      	ldr	r3, [pc, #584]	; (8005998 <_dtoa_r+0x610>)
 800574e:	f7fb f935 	bl	80009bc <__aeabi_dcmplt>
 8005752:	2800      	cmp	r0, #0
 8005754:	d07d      	beq.n	8005852 <_dtoa_r+0x4ca>
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	d07a      	beq.n	8005852 <_dtoa_r+0x4ca>
 800575c:	9b04      	ldr	r3, [sp, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	dd36      	ble.n	80057d0 <_dtoa_r+0x448>
 8005762:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005766:	2200      	movs	r2, #0
 8005768:	4b8c      	ldr	r3, [pc, #560]	; (800599c <_dtoa_r+0x614>)
 800576a:	f7fa feb5 	bl	80004d8 <__aeabi_dmul>
 800576e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005772:	9e04      	ldr	r6, [sp, #16]
 8005774:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005778:	3501      	adds	r5, #1
 800577a:	4628      	mov	r0, r5
 800577c:	f7fa fe42 	bl	8000404 <__aeabi_i2d>
 8005780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005784:	f7fa fea8 	bl	80004d8 <__aeabi_dmul>
 8005788:	2200      	movs	r2, #0
 800578a:	4b85      	ldr	r3, [pc, #532]	; (80059a0 <_dtoa_r+0x618>)
 800578c:	f7fa fcee 	bl	800016c <__adddf3>
 8005790:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005794:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005798:	950b      	str	r5, [sp, #44]	; 0x2c
 800579a:	2e00      	cmp	r6, #0
 800579c:	d15c      	bne.n	8005858 <_dtoa_r+0x4d0>
 800579e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a2:	2200      	movs	r2, #0
 80057a4:	4b7f      	ldr	r3, [pc, #508]	; (80059a4 <_dtoa_r+0x61c>)
 80057a6:	f7fa fcdf 	bl	8000168 <__aeabi_dsub>
 80057aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ac:	462b      	mov	r3, r5
 80057ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057b2:	f7fb f921 	bl	80009f8 <__aeabi_dcmpgt>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f040 8281 	bne.w	8005cbe <_dtoa_r+0x936>
 80057bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057c6:	f7fb f8f9 	bl	80009bc <__aeabi_dcmplt>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f040 8275 	bne.w	8005cba <_dtoa_r+0x932>
 80057d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80057d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f2c0 814b 	blt.w	8005a76 <_dtoa_r+0x6ee>
 80057e0:	f1ba 0f0e 	cmp.w	sl, #14
 80057e4:	f300 8147 	bgt.w	8005a76 <_dtoa_r+0x6ee>
 80057e8:	4b69      	ldr	r3, [pc, #420]	; (8005990 <_dtoa_r+0x608>)
 80057ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f280 80d7 	bge.w	80059ac <_dtoa_r+0x624>
 80057fe:	f1b8 0f00 	cmp.w	r8, #0
 8005802:	f300 80d3 	bgt.w	80059ac <_dtoa_r+0x624>
 8005806:	f040 8257 	bne.w	8005cb8 <_dtoa_r+0x930>
 800580a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800580e:	2200      	movs	r2, #0
 8005810:	4b64      	ldr	r3, [pc, #400]	; (80059a4 <_dtoa_r+0x61c>)
 8005812:	f7fa fe61 	bl	80004d8 <__aeabi_dmul>
 8005816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581a:	f7fb f8e3 	bl	80009e4 <__aeabi_dcmpge>
 800581e:	4646      	mov	r6, r8
 8005820:	4647      	mov	r7, r8
 8005822:	2800      	cmp	r0, #0
 8005824:	f040 822d 	bne.w	8005c82 <_dtoa_r+0x8fa>
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	9a06      	ldr	r2, [sp, #24]
 800582c:	1c5d      	adds	r5, r3, #1
 800582e:	2331      	movs	r3, #49	; 0x31
 8005830:	f10a 0a01 	add.w	sl, sl, #1
 8005834:	7013      	strb	r3, [r2, #0]
 8005836:	e228      	b.n	8005c8a <_dtoa_r+0x902>
 8005838:	07f2      	lsls	r2, r6, #31
 800583a:	d505      	bpl.n	8005848 <_dtoa_r+0x4c0>
 800583c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005840:	f7fa fe4a 	bl	80004d8 <__aeabi_dmul>
 8005844:	2301      	movs	r3, #1
 8005846:	3501      	adds	r5, #1
 8005848:	1076      	asrs	r6, r6, #1
 800584a:	3708      	adds	r7, #8
 800584c:	e76e      	b.n	800572c <_dtoa_r+0x3a4>
 800584e:	2502      	movs	r5, #2
 8005850:	e771      	b.n	8005736 <_dtoa_r+0x3ae>
 8005852:	4657      	mov	r7, sl
 8005854:	4646      	mov	r6, r8
 8005856:	e790      	b.n	800577a <_dtoa_r+0x3f2>
 8005858:	4b4d      	ldr	r3, [pc, #308]	; (8005990 <_dtoa_r+0x608>)
 800585a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800585e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d048      	beq.n	80058fa <_dtoa_r+0x572>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	2000      	movs	r0, #0
 800586e:	494e      	ldr	r1, [pc, #312]	; (80059a8 <_dtoa_r+0x620>)
 8005870:	f7fa ff5c 	bl	800072c <__aeabi_ddiv>
 8005874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005878:	f7fa fc76 	bl	8000168 <__aeabi_dsub>
 800587c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005880:	9d06      	ldr	r5, [sp, #24]
 8005882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005886:	f7fb f8d7 	bl	8000a38 <__aeabi_d2iz>
 800588a:	9011      	str	r0, [sp, #68]	; 0x44
 800588c:	f7fa fdba 	bl	8000404 <__aeabi_i2d>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005898:	f7fa fc66 	bl	8000168 <__aeabi_dsub>
 800589c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800589e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058a2:	3330      	adds	r3, #48	; 0x30
 80058a4:	f805 3b01 	strb.w	r3, [r5], #1
 80058a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058ac:	f7fb f886 	bl	80009bc <__aeabi_dcmplt>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d163      	bne.n	800597c <_dtoa_r+0x5f4>
 80058b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b8:	2000      	movs	r0, #0
 80058ba:	4937      	ldr	r1, [pc, #220]	; (8005998 <_dtoa_r+0x610>)
 80058bc:	f7fa fc54 	bl	8000168 <__aeabi_dsub>
 80058c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058c4:	f7fb f87a 	bl	80009bc <__aeabi_dcmplt>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f040 80b5 	bne.w	8005a38 <_dtoa_r+0x6b0>
 80058ce:	9b06      	ldr	r3, [sp, #24]
 80058d0:	1aeb      	subs	r3, r5, r3
 80058d2:	429e      	cmp	r6, r3
 80058d4:	f77f af7c 	ble.w	80057d0 <_dtoa_r+0x448>
 80058d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058dc:	2200      	movs	r2, #0
 80058de:	4b2f      	ldr	r3, [pc, #188]	; (800599c <_dtoa_r+0x614>)
 80058e0:	f7fa fdfa 	bl	80004d8 <__aeabi_dmul>
 80058e4:	2200      	movs	r2, #0
 80058e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ee:	4b2b      	ldr	r3, [pc, #172]	; (800599c <_dtoa_r+0x614>)
 80058f0:	f7fa fdf2 	bl	80004d8 <__aeabi_dmul>
 80058f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058f8:	e7c3      	b.n	8005882 <_dtoa_r+0x4fa>
 80058fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058fe:	f7fa fdeb 	bl	80004d8 <__aeabi_dmul>
 8005902:	9b06      	ldr	r3, [sp, #24]
 8005904:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005908:	199d      	adds	r5, r3, r6
 800590a:	461e      	mov	r6, r3
 800590c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005910:	f7fb f892 	bl	8000a38 <__aeabi_d2iz>
 8005914:	9011      	str	r0, [sp, #68]	; 0x44
 8005916:	f7fa fd75 	bl	8000404 <__aeabi_i2d>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005922:	f7fa fc21 	bl	8000168 <__aeabi_dsub>
 8005926:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800592c:	3330      	adds	r3, #48	; 0x30
 800592e:	f806 3b01 	strb.w	r3, [r6], #1
 8005932:	42ae      	cmp	r6, r5
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	d124      	bne.n	8005984 <_dtoa_r+0x5fc>
 800593a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <_dtoa_r+0x620>)
 8005940:	f7fa fc14 	bl	800016c <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800594c:	f7fb f854 	bl	80009f8 <__aeabi_dcmpgt>
 8005950:	2800      	cmp	r0, #0
 8005952:	d171      	bne.n	8005a38 <_dtoa_r+0x6b0>
 8005954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005958:	2000      	movs	r0, #0
 800595a:	4913      	ldr	r1, [pc, #76]	; (80059a8 <_dtoa_r+0x620>)
 800595c:	f7fa fc04 	bl	8000168 <__aeabi_dsub>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005968:	f7fb f828 	bl	80009bc <__aeabi_dcmplt>
 800596c:	2800      	cmp	r0, #0
 800596e:	f43f af2f 	beq.w	80057d0 <_dtoa_r+0x448>
 8005972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005976:	1e6a      	subs	r2, r5, #1
 8005978:	2b30      	cmp	r3, #48	; 0x30
 800597a:	d001      	beq.n	8005980 <_dtoa_r+0x5f8>
 800597c:	46ba      	mov	sl, r7
 800597e:	e04a      	b.n	8005a16 <_dtoa_r+0x68e>
 8005980:	4615      	mov	r5, r2
 8005982:	e7f6      	b.n	8005972 <_dtoa_r+0x5ea>
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <_dtoa_r+0x614>)
 8005986:	f7fa fda7 	bl	80004d8 <__aeabi_dmul>
 800598a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800598e:	e7bd      	b.n	800590c <_dtoa_r+0x584>
 8005990:	08006e60 	.word	0x08006e60
 8005994:	08006e38 	.word	0x08006e38
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	40240000 	.word	0x40240000
 80059a0:	401c0000 	.word	0x401c0000
 80059a4:	40140000 	.word	0x40140000
 80059a8:	3fe00000 	.word	0x3fe00000
 80059ac:	9d06      	ldr	r5, [sp, #24]
 80059ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059b6:	4630      	mov	r0, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	f7fa feb7 	bl	800072c <__aeabi_ddiv>
 80059be:	f7fb f83b 	bl	8000a38 <__aeabi_d2iz>
 80059c2:	4681      	mov	r9, r0
 80059c4:	f7fa fd1e 	bl	8000404 <__aeabi_i2d>
 80059c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059cc:	f7fa fd84 	bl	80004d8 <__aeabi_dmul>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4630      	mov	r0, r6
 80059d6:	4639      	mov	r1, r7
 80059d8:	f7fa fbc6 	bl	8000168 <__aeabi_dsub>
 80059dc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80059e0:	f805 6b01 	strb.w	r6, [r5], #1
 80059e4:	9e06      	ldr	r6, [sp, #24]
 80059e6:	4602      	mov	r2, r0
 80059e8:	1bae      	subs	r6, r5, r6
 80059ea:	45b0      	cmp	r8, r6
 80059ec:	460b      	mov	r3, r1
 80059ee:	d135      	bne.n	8005a5c <_dtoa_r+0x6d4>
 80059f0:	f7fa fbbc 	bl	800016c <__adddf3>
 80059f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f8:	4606      	mov	r6, r0
 80059fa:	460f      	mov	r7, r1
 80059fc:	f7fa fffc 	bl	80009f8 <__aeabi_dcmpgt>
 8005a00:	b9c8      	cbnz	r0, 8005a36 <_dtoa_r+0x6ae>
 8005a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a06:	4630      	mov	r0, r6
 8005a08:	4639      	mov	r1, r7
 8005a0a:	f7fa ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 8005a0e:	b110      	cbz	r0, 8005a16 <_dtoa_r+0x68e>
 8005a10:	f019 0f01 	tst.w	r9, #1
 8005a14:	d10f      	bne.n	8005a36 <_dtoa_r+0x6ae>
 8005a16:	4659      	mov	r1, fp
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fcae 	bl	800637a <_Bfree>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a22:	702b      	strb	r3, [r5, #0]
 8005a24:	f10a 0301 	add.w	r3, sl, #1
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f43f acf3 	beq.w	8005418 <_dtoa_r+0x90>
 8005a32:	601d      	str	r5, [r3, #0]
 8005a34:	e4f0      	b.n	8005418 <_dtoa_r+0x90>
 8005a36:	4657      	mov	r7, sl
 8005a38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a3c:	1e6b      	subs	r3, r5, #1
 8005a3e:	2a39      	cmp	r2, #57	; 0x39
 8005a40:	d106      	bne.n	8005a50 <_dtoa_r+0x6c8>
 8005a42:	9a06      	ldr	r2, [sp, #24]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d107      	bne.n	8005a58 <_dtoa_r+0x6d0>
 8005a48:	2330      	movs	r3, #48	; 0x30
 8005a4a:	7013      	strb	r3, [r2, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	3701      	adds	r7, #1
 8005a50:	781a      	ldrb	r2, [r3, #0]
 8005a52:	3201      	adds	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e791      	b.n	800597c <_dtoa_r+0x5f4>
 8005a58:	461d      	mov	r5, r3
 8005a5a:	e7ed      	b.n	8005a38 <_dtoa_r+0x6b0>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4b99      	ldr	r3, [pc, #612]	; (8005cc4 <_dtoa_r+0x93c>)
 8005a60:	f7fa fd3a 	bl	80004d8 <__aeabi_dmul>
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	4606      	mov	r6, r0
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	f7fa ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d09e      	beq.n	80059b2 <_dtoa_r+0x62a>
 8005a74:	e7cf      	b.n	8005a16 <_dtoa_r+0x68e>
 8005a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	f000 8088 	beq.w	8005b8e <_dtoa_r+0x806>
 8005a7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a80:	2a01      	cmp	r2, #1
 8005a82:	dc6d      	bgt.n	8005b60 <_dtoa_r+0x7d8>
 8005a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d066      	beq.n	8005b58 <_dtoa_r+0x7d0>
 8005a8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a8e:	464d      	mov	r5, r9
 8005a90:	9e08      	ldr	r6, [sp, #32]
 8005a92:	9a07      	ldr	r2, [sp, #28]
 8005a94:	2101      	movs	r1, #1
 8005a96:	441a      	add	r2, r3
 8005a98:	4620      	mov	r0, r4
 8005a9a:	4499      	add	r9, r3
 8005a9c:	9207      	str	r2, [sp, #28]
 8005a9e:	f000 fd0c 	bl	80064ba <__i2b>
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	dd0b      	ble.n	8005ac0 <_dtoa_r+0x738>
 8005aa8:	9b07      	ldr	r3, [sp, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dd08      	ble.n	8005ac0 <_dtoa_r+0x738>
 8005aae:	42ab      	cmp	r3, r5
 8005ab0:	bfa8      	it	ge
 8005ab2:	462b      	movge	r3, r5
 8005ab4:	9a07      	ldr	r2, [sp, #28]
 8005ab6:	eba9 0903 	sub.w	r9, r9, r3
 8005aba:	1aed      	subs	r5, r5, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	9b08      	ldr	r3, [sp, #32]
 8005ac2:	b1eb      	cbz	r3, 8005b00 <_dtoa_r+0x778>
 8005ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d065      	beq.n	8005b96 <_dtoa_r+0x80e>
 8005aca:	b18e      	cbz	r6, 8005af0 <_dtoa_r+0x768>
 8005acc:	4639      	mov	r1, r7
 8005ace:	4632      	mov	r2, r6
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fd91 	bl	80065f8 <__pow5mult>
 8005ad6:	465a      	mov	r2, fp
 8005ad8:	4601      	mov	r1, r0
 8005ada:	4607      	mov	r7, r0
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fcf5 	bl	80064cc <__multiply>
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	900a      	str	r0, [sp, #40]	; 0x28
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fc47 	bl	800637a <_Bfree>
 8005aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aee:	469b      	mov	fp, r3
 8005af0:	9b08      	ldr	r3, [sp, #32]
 8005af2:	1b9a      	subs	r2, r3, r6
 8005af4:	d004      	beq.n	8005b00 <_dtoa_r+0x778>
 8005af6:	4659      	mov	r1, fp
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 fd7d 	bl	80065f8 <__pow5mult>
 8005afe:	4683      	mov	fp, r0
 8005b00:	2101      	movs	r1, #1
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 fcd9 	bl	80064ba <__i2b>
 8005b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 81c6 	beq.w	8005e9e <_dtoa_r+0xb16>
 8005b12:	461a      	mov	r2, r3
 8005b14:	4601      	mov	r1, r0
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 fd6e 	bl	80065f8 <__pow5mult>
 8005b1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b1e:	4606      	mov	r6, r0
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	dc3e      	bgt.n	8005ba2 <_dtoa_r+0x81a>
 8005b24:	9b02      	ldr	r3, [sp, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d137      	bne.n	8005b9a <_dtoa_r+0x812>
 8005b2a:	9b03      	ldr	r3, [sp, #12]
 8005b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d134      	bne.n	8005b9e <_dtoa_r+0x816>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b3a:	0d1b      	lsrs	r3, r3, #20
 8005b3c:	051b      	lsls	r3, r3, #20
 8005b3e:	b12b      	cbz	r3, 8005b4c <_dtoa_r+0x7c4>
 8005b40:	9b07      	ldr	r3, [sp, #28]
 8005b42:	f109 0901 	add.w	r9, r9, #1
 8005b46:	3301      	adds	r3, #1
 8005b48:	9307      	str	r3, [sp, #28]
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	9308      	str	r3, [sp, #32]
 8005b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d128      	bne.n	8005ba6 <_dtoa_r+0x81e>
 8005b54:	2001      	movs	r0, #1
 8005b56:	e02e      	b.n	8005bb6 <_dtoa_r+0x82e>
 8005b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b5a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b5e:	e796      	b.n	8005a8e <_dtoa_r+0x706>
 8005b60:	9b08      	ldr	r3, [sp, #32]
 8005b62:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005b66:	42b3      	cmp	r3, r6
 8005b68:	bfb7      	itett	lt
 8005b6a:	9b08      	ldrlt	r3, [sp, #32]
 8005b6c:	1b9e      	subge	r6, r3, r6
 8005b6e:	1af2      	sublt	r2, r6, r3
 8005b70:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b72:	bfbf      	itttt	lt
 8005b74:	9608      	strlt	r6, [sp, #32]
 8005b76:	189b      	addlt	r3, r3, r2
 8005b78:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005b7a:	2600      	movlt	r6, #0
 8005b7c:	f1b8 0f00 	cmp.w	r8, #0
 8005b80:	bfb9      	ittee	lt
 8005b82:	eba9 0508 	sublt.w	r5, r9, r8
 8005b86:	2300      	movlt	r3, #0
 8005b88:	464d      	movge	r5, r9
 8005b8a:	4643      	movge	r3, r8
 8005b8c:	e781      	b.n	8005a92 <_dtoa_r+0x70a>
 8005b8e:	9e08      	ldr	r6, [sp, #32]
 8005b90:	464d      	mov	r5, r9
 8005b92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b94:	e786      	b.n	8005aa4 <_dtoa_r+0x71c>
 8005b96:	9a08      	ldr	r2, [sp, #32]
 8005b98:	e7ad      	b.n	8005af6 <_dtoa_r+0x76e>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e7d6      	b.n	8005b4c <_dtoa_r+0x7c4>
 8005b9e:	9b02      	ldr	r3, [sp, #8]
 8005ba0:	e7d4      	b.n	8005b4c <_dtoa_r+0x7c4>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9308      	str	r3, [sp, #32]
 8005ba6:	6933      	ldr	r3, [r6, #16]
 8005ba8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005bac:	6918      	ldr	r0, [r3, #16]
 8005bae:	f000 fc36 	bl	800641e <__hi0bits>
 8005bb2:	f1c0 0020 	rsb	r0, r0, #32
 8005bb6:	9b07      	ldr	r3, [sp, #28]
 8005bb8:	4418      	add	r0, r3
 8005bba:	f010 001f 	ands.w	r0, r0, #31
 8005bbe:	d047      	beq.n	8005c50 <_dtoa_r+0x8c8>
 8005bc0:	f1c0 0320 	rsb	r3, r0, #32
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	dd3b      	ble.n	8005c40 <_dtoa_r+0x8b8>
 8005bc8:	9b07      	ldr	r3, [sp, #28]
 8005bca:	f1c0 001c 	rsb	r0, r0, #28
 8005bce:	4481      	add	r9, r0
 8005bd0:	4405      	add	r5, r0
 8005bd2:	4403      	add	r3, r0
 8005bd4:	9307      	str	r3, [sp, #28]
 8005bd6:	f1b9 0f00 	cmp.w	r9, #0
 8005bda:	dd05      	ble.n	8005be8 <_dtoa_r+0x860>
 8005bdc:	4659      	mov	r1, fp
 8005bde:	464a      	mov	r2, r9
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fd57 	bl	8006694 <__lshift>
 8005be6:	4683      	mov	fp, r0
 8005be8:	9b07      	ldr	r3, [sp, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dd05      	ble.n	8005bfa <_dtoa_r+0x872>
 8005bee:	4631      	mov	r1, r6
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fd4e 	bl	8006694 <__lshift>
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bfc:	b353      	cbz	r3, 8005c54 <_dtoa_r+0x8cc>
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4658      	mov	r0, fp
 8005c02:	f000 fd9b 	bl	800673c <__mcmp>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	da24      	bge.n	8005c54 <_dtoa_r+0x8cc>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4659      	mov	r1, fp
 8005c0e:	220a      	movs	r2, #10
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 fbc9 	bl	80063a8 <__multadd>
 8005c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c18:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8144 	beq.w	8005eac <_dtoa_r+0xb24>
 8005c24:	2300      	movs	r3, #0
 8005c26:	4639      	mov	r1, r7
 8005c28:	220a      	movs	r2, #10
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fbbc 	bl	80063a8 <__multadd>
 8005c30:	9b04      	ldr	r3, [sp, #16]
 8005c32:	4607      	mov	r7, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	dc4d      	bgt.n	8005cd4 <_dtoa_r+0x94c>
 8005c38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	dd4a      	ble.n	8005cd4 <_dtoa_r+0x94c>
 8005c3e:	e011      	b.n	8005c64 <_dtoa_r+0x8dc>
 8005c40:	d0c9      	beq.n	8005bd6 <_dtoa_r+0x84e>
 8005c42:	9a07      	ldr	r2, [sp, #28]
 8005c44:	331c      	adds	r3, #28
 8005c46:	441a      	add	r2, r3
 8005c48:	4499      	add	r9, r3
 8005c4a:	441d      	add	r5, r3
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	e7c1      	b.n	8005bd4 <_dtoa_r+0x84c>
 8005c50:	4603      	mov	r3, r0
 8005c52:	e7f6      	b.n	8005c42 <_dtoa_r+0x8ba>
 8005c54:	f1b8 0f00 	cmp.w	r8, #0
 8005c58:	dc36      	bgt.n	8005cc8 <_dtoa_r+0x940>
 8005c5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	dd33      	ble.n	8005cc8 <_dtoa_r+0x940>
 8005c60:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	b963      	cbnz	r3, 8005c82 <_dtoa_r+0x8fa>
 8005c68:	4631      	mov	r1, r6
 8005c6a:	2205      	movs	r2, #5
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fb9b 	bl	80063a8 <__multadd>
 8005c72:	4601      	mov	r1, r0
 8005c74:	4606      	mov	r6, r0
 8005c76:	4658      	mov	r0, fp
 8005c78:	f000 fd60 	bl	800673c <__mcmp>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f73f add3 	bgt.w	8005828 <_dtoa_r+0x4a0>
 8005c82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c84:	9d06      	ldr	r5, [sp, #24]
 8005c86:	ea6f 0a03 	mvn.w	sl, r3
 8005c8a:	f04f 0900 	mov.w	r9, #0
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fb72 	bl	800637a <_Bfree>
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	f43f aebd 	beq.w	8005a16 <_dtoa_r+0x68e>
 8005c9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ca0:	d005      	beq.n	8005cae <_dtoa_r+0x926>
 8005ca2:	45b9      	cmp	r9, r7
 8005ca4:	d003      	beq.n	8005cae <_dtoa_r+0x926>
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fb66 	bl	800637a <_Bfree>
 8005cae:	4639      	mov	r1, r7
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f000 fb62 	bl	800637a <_Bfree>
 8005cb6:	e6ae      	b.n	8005a16 <_dtoa_r+0x68e>
 8005cb8:	2600      	movs	r6, #0
 8005cba:	4637      	mov	r7, r6
 8005cbc:	e7e1      	b.n	8005c82 <_dtoa_r+0x8fa>
 8005cbe:	46ba      	mov	sl, r7
 8005cc0:	4637      	mov	r7, r6
 8005cc2:	e5b1      	b.n	8005828 <_dtoa_r+0x4a0>
 8005cc4:	40240000 	.word	0x40240000
 8005cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cca:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80f3 	beq.w	8005eba <_dtoa_r+0xb32>
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	dd05      	ble.n	8005ce4 <_dtoa_r+0x95c>
 8005cd8:	4639      	mov	r1, r7
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fcd9 	bl	8006694 <__lshift>
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	9b08      	ldr	r3, [sp, #32]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d04c      	beq.n	8005d84 <_dtoa_r+0x9fc>
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 fb10 	bl	8006312 <_Balloc>
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	f107 010c 	add.w	r1, r7, #12
 8005cfa:	3202      	adds	r2, #2
 8005cfc:	0092      	lsls	r2, r2, #2
 8005cfe:	300c      	adds	r0, #12
 8005d00:	f000 fafc 	bl	80062fc <memcpy>
 8005d04:	2201      	movs	r2, #1
 8005d06:	4629      	mov	r1, r5
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fcc3 	bl	8006694 <__lshift>
 8005d0e:	46b9      	mov	r9, r7
 8005d10:	4607      	mov	r7, r0
 8005d12:	9b06      	ldr	r3, [sp, #24]
 8005d14:	9307      	str	r3, [sp, #28]
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	9308      	str	r3, [sp, #32]
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4658      	mov	r0, fp
 8005d22:	f7ff faa1 	bl	8005268 <quorem>
 8005d26:	4649      	mov	r1, r9
 8005d28:	4605      	mov	r5, r0
 8005d2a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d2e:	4658      	mov	r0, fp
 8005d30:	f000 fd04 	bl	800673c <__mcmp>
 8005d34:	463a      	mov	r2, r7
 8005d36:	9002      	str	r0, [sp, #8]
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 fd18 	bl	8006770 <__mdiff>
 8005d40:	68c3      	ldr	r3, [r0, #12]
 8005d42:	4602      	mov	r2, r0
 8005d44:	bb03      	cbnz	r3, 8005d88 <_dtoa_r+0xa00>
 8005d46:	4601      	mov	r1, r0
 8005d48:	9009      	str	r0, [sp, #36]	; 0x24
 8005d4a:	4658      	mov	r0, fp
 8005d4c:	f000 fcf6 	bl	800673c <__mcmp>
 8005d50:	4603      	mov	r3, r0
 8005d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d54:	4611      	mov	r1, r2
 8005d56:	4620      	mov	r0, r4
 8005d58:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5a:	f000 fb0e 	bl	800637a <_Bfree>
 8005d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d60:	b9a3      	cbnz	r3, 8005d8c <_dtoa_r+0xa04>
 8005d62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d64:	b992      	cbnz	r2, 8005d8c <_dtoa_r+0xa04>
 8005d66:	9a08      	ldr	r2, [sp, #32]
 8005d68:	b982      	cbnz	r2, 8005d8c <_dtoa_r+0xa04>
 8005d6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d6e:	d029      	beq.n	8005dc4 <_dtoa_r+0xa3c>
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	dd01      	ble.n	8005d7a <_dtoa_r+0x9f2>
 8005d76:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d7a:	9b07      	ldr	r3, [sp, #28]
 8005d7c:	1c5d      	adds	r5, r3, #1
 8005d7e:	f883 8000 	strb.w	r8, [r3]
 8005d82:	e784      	b.n	8005c8e <_dtoa_r+0x906>
 8005d84:	4638      	mov	r0, r7
 8005d86:	e7c2      	b.n	8005d0e <_dtoa_r+0x986>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e7e3      	b.n	8005d54 <_dtoa_r+0x9cc>
 8005d8c:	9a02      	ldr	r2, [sp, #8]
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	db04      	blt.n	8005d9c <_dtoa_r+0xa14>
 8005d92:	d123      	bne.n	8005ddc <_dtoa_r+0xa54>
 8005d94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d96:	bb0a      	cbnz	r2, 8005ddc <_dtoa_r+0xa54>
 8005d98:	9a08      	ldr	r2, [sp, #32]
 8005d9a:	b9fa      	cbnz	r2, 8005ddc <_dtoa_r+0xa54>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	ddec      	ble.n	8005d7a <_dtoa_r+0x9f2>
 8005da0:	4659      	mov	r1, fp
 8005da2:	2201      	movs	r2, #1
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 fc75 	bl	8006694 <__lshift>
 8005daa:	4631      	mov	r1, r6
 8005dac:	4683      	mov	fp, r0
 8005dae:	f000 fcc5 	bl	800673c <__mcmp>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	dc03      	bgt.n	8005dbe <_dtoa_r+0xa36>
 8005db6:	d1e0      	bne.n	8005d7a <_dtoa_r+0x9f2>
 8005db8:	f018 0f01 	tst.w	r8, #1
 8005dbc:	d0dd      	beq.n	8005d7a <_dtoa_r+0x9f2>
 8005dbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dc2:	d1d8      	bne.n	8005d76 <_dtoa_r+0x9ee>
 8005dc4:	9b07      	ldr	r3, [sp, #28]
 8005dc6:	9a07      	ldr	r2, [sp, #28]
 8005dc8:	1c5d      	adds	r5, r3, #1
 8005dca:	2339      	movs	r3, #57	; 0x39
 8005dcc:	7013      	strb	r3, [r2, #0]
 8005dce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dd2:	1e6a      	subs	r2, r5, #1
 8005dd4:	2b39      	cmp	r3, #57	; 0x39
 8005dd6:	d04d      	beq.n	8005e74 <_dtoa_r+0xaec>
 8005dd8:	3301      	adds	r3, #1
 8005dda:	e052      	b.n	8005e82 <_dtoa_r+0xafa>
 8005ddc:	9a07      	ldr	r2, [sp, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f102 0501 	add.w	r5, r2, #1
 8005de4:	dd06      	ble.n	8005df4 <_dtoa_r+0xa6c>
 8005de6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dea:	d0eb      	beq.n	8005dc4 <_dtoa_r+0xa3c>
 8005dec:	f108 0801 	add.w	r8, r8, #1
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	e7c4      	b.n	8005d7e <_dtoa_r+0x9f6>
 8005df4:	9b06      	ldr	r3, [sp, #24]
 8005df6:	9a04      	ldr	r2, [sp, #16]
 8005df8:	1aeb      	subs	r3, r5, r3
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e00:	d021      	beq.n	8005e46 <_dtoa_r+0xabe>
 8005e02:	4659      	mov	r1, fp
 8005e04:	2300      	movs	r3, #0
 8005e06:	220a      	movs	r2, #10
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 facd 	bl	80063a8 <__multadd>
 8005e0e:	45b9      	cmp	r9, r7
 8005e10:	4683      	mov	fp, r0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	f04f 020a 	mov.w	r2, #10
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	d105      	bne.n	8005e2c <_dtoa_r+0xaa4>
 8005e20:	f000 fac2 	bl	80063a8 <__multadd>
 8005e24:	4681      	mov	r9, r0
 8005e26:	4607      	mov	r7, r0
 8005e28:	9507      	str	r5, [sp, #28]
 8005e2a:	e778      	b.n	8005d1e <_dtoa_r+0x996>
 8005e2c:	f000 fabc 	bl	80063a8 <__multadd>
 8005e30:	4639      	mov	r1, r7
 8005e32:	4681      	mov	r9, r0
 8005e34:	2300      	movs	r3, #0
 8005e36:	220a      	movs	r2, #10
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fab5 	bl	80063a8 <__multadd>
 8005e3e:	4607      	mov	r7, r0
 8005e40:	e7f2      	b.n	8005e28 <_dtoa_r+0xaa0>
 8005e42:	f04f 0900 	mov.w	r9, #0
 8005e46:	4659      	mov	r1, fp
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 fc22 	bl	8006694 <__lshift>
 8005e50:	4631      	mov	r1, r6
 8005e52:	4683      	mov	fp, r0
 8005e54:	f000 fc72 	bl	800673c <__mcmp>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	dcb8      	bgt.n	8005dce <_dtoa_r+0xa46>
 8005e5c:	d102      	bne.n	8005e64 <_dtoa_r+0xadc>
 8005e5e:	f018 0f01 	tst.w	r8, #1
 8005e62:	d1b4      	bne.n	8005dce <_dtoa_r+0xa46>
 8005e64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e68:	1e6a      	subs	r2, r5, #1
 8005e6a:	2b30      	cmp	r3, #48	; 0x30
 8005e6c:	f47f af0f 	bne.w	8005c8e <_dtoa_r+0x906>
 8005e70:	4615      	mov	r5, r2
 8005e72:	e7f7      	b.n	8005e64 <_dtoa_r+0xadc>
 8005e74:	9b06      	ldr	r3, [sp, #24]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d105      	bne.n	8005e86 <_dtoa_r+0xafe>
 8005e7a:	2331      	movs	r3, #49	; 0x31
 8005e7c:	9a06      	ldr	r2, [sp, #24]
 8005e7e:	f10a 0a01 	add.w	sl, sl, #1
 8005e82:	7013      	strb	r3, [r2, #0]
 8005e84:	e703      	b.n	8005c8e <_dtoa_r+0x906>
 8005e86:	4615      	mov	r5, r2
 8005e88:	e7a1      	b.n	8005dce <_dtoa_r+0xa46>
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <_dtoa_r+0xb60>)
 8005e8c:	f7ff bae1 	b.w	8005452 <_dtoa_r+0xca>
 8005e90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f47f aabb 	bne.w	800540e <_dtoa_r+0x86>
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <_dtoa_r+0xb64>)
 8005e9a:	f7ff bada 	b.w	8005452 <_dtoa_r+0xca>
 8005e9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	f77f ae3f 	ble.w	8005b24 <_dtoa_r+0x79c>
 8005ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ea8:	9308      	str	r3, [sp, #32]
 8005eaa:	e653      	b.n	8005b54 <_dtoa_r+0x7cc>
 8005eac:	9b04      	ldr	r3, [sp, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dc03      	bgt.n	8005eba <_dtoa_r+0xb32>
 8005eb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	f73f aed5 	bgt.w	8005c64 <_dtoa_r+0x8dc>
 8005eba:	9d06      	ldr	r5, [sp, #24]
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4658      	mov	r0, fp
 8005ec0:	f7ff f9d2 	bl	8005268 <quorem>
 8005ec4:	9b06      	ldr	r3, [sp, #24]
 8005ec6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005eca:	f805 8b01 	strb.w	r8, [r5], #1
 8005ece:	9a04      	ldr	r2, [sp, #16]
 8005ed0:	1aeb      	subs	r3, r5, r3
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	ddb5      	ble.n	8005e42 <_dtoa_r+0xaba>
 8005ed6:	4659      	mov	r1, fp
 8005ed8:	2300      	movs	r3, #0
 8005eda:	220a      	movs	r2, #10
 8005edc:	4620      	mov	r0, r4
 8005ede:	f000 fa63 	bl	80063a8 <__multadd>
 8005ee2:	4683      	mov	fp, r0
 8005ee4:	e7ea      	b.n	8005ebc <_dtoa_r+0xb34>
 8005ee6:	bf00      	nop
 8005ee8:	08006db8 	.word	0x08006db8
 8005eec:	08006dba 	.word	0x08006dba

08005ef0 <__sflush_r>:
 8005ef0:	898a      	ldrh	r2, [r1, #12]
 8005ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	0710      	lsls	r0, r2, #28
 8005efa:	460c      	mov	r4, r1
 8005efc:	d458      	bmi.n	8005fb0 <__sflush_r+0xc0>
 8005efe:	684b      	ldr	r3, [r1, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dc05      	bgt.n	8005f10 <__sflush_r+0x20>
 8005f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dc02      	bgt.n	8005f10 <__sflush_r+0x20>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d0f9      	beq.n	8005f0a <__sflush_r+0x1a>
 8005f16:	2300      	movs	r3, #0
 8005f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f1c:	682f      	ldr	r7, [r5, #0]
 8005f1e:	6a21      	ldr	r1, [r4, #32]
 8005f20:	602b      	str	r3, [r5, #0]
 8005f22:	d032      	beq.n	8005f8a <__sflush_r+0x9a>
 8005f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	075a      	lsls	r2, r3, #29
 8005f2a:	d505      	bpl.n	8005f38 <__sflush_r+0x48>
 8005f2c:	6863      	ldr	r3, [r4, #4]
 8005f2e:	1ac0      	subs	r0, r0, r3
 8005f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f32:	b10b      	cbz	r3, 8005f38 <__sflush_r+0x48>
 8005f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f36:	1ac0      	subs	r0, r0, r3
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f3e:	6a21      	ldr	r1, [r4, #32]
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b0      	blx	r6
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	d106      	bne.n	8005f58 <__sflush_r+0x68>
 8005f4a:	6829      	ldr	r1, [r5, #0]
 8005f4c:	291d      	cmp	r1, #29
 8005f4e:	d848      	bhi.n	8005fe2 <__sflush_r+0xf2>
 8005f50:	4a29      	ldr	r2, [pc, #164]	; (8005ff8 <__sflush_r+0x108>)
 8005f52:	40ca      	lsrs	r2, r1
 8005f54:	07d6      	lsls	r6, r2, #31
 8005f56:	d544      	bpl.n	8005fe2 <__sflush_r+0xf2>
 8005f58:	2200      	movs	r2, #0
 8005f5a:	6062      	str	r2, [r4, #4]
 8005f5c:	6922      	ldr	r2, [r4, #16]
 8005f5e:	04d9      	lsls	r1, r3, #19
 8005f60:	6022      	str	r2, [r4, #0]
 8005f62:	d504      	bpl.n	8005f6e <__sflush_r+0x7e>
 8005f64:	1c42      	adds	r2, r0, #1
 8005f66:	d101      	bne.n	8005f6c <__sflush_r+0x7c>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b903      	cbnz	r3, 8005f6e <__sflush_r+0x7e>
 8005f6c:	6560      	str	r0, [r4, #84]	; 0x54
 8005f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f70:	602f      	str	r7, [r5, #0]
 8005f72:	2900      	cmp	r1, #0
 8005f74:	d0c9      	beq.n	8005f0a <__sflush_r+0x1a>
 8005f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	d002      	beq.n	8005f84 <__sflush_r+0x94>
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 fcb2 	bl	80068e8 <_free_r>
 8005f84:	2000      	movs	r0, #0
 8005f86:	6360      	str	r0, [r4, #52]	; 0x34
 8005f88:	e7c0      	b.n	8005f0c <__sflush_r+0x1c>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b0      	blx	r6
 8005f90:	1c41      	adds	r1, r0, #1
 8005f92:	d1c8      	bne.n	8005f26 <__sflush_r+0x36>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0c5      	beq.n	8005f26 <__sflush_r+0x36>
 8005f9a:	2b1d      	cmp	r3, #29
 8005f9c:	d001      	beq.n	8005fa2 <__sflush_r+0xb2>
 8005f9e:	2b16      	cmp	r3, #22
 8005fa0:	d101      	bne.n	8005fa6 <__sflush_r+0xb6>
 8005fa2:	602f      	str	r7, [r5, #0]
 8005fa4:	e7b1      	b.n	8005f0a <__sflush_r+0x1a>
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	e7ad      	b.n	8005f0c <__sflush_r+0x1c>
 8005fb0:	690f      	ldr	r7, [r1, #16]
 8005fb2:	2f00      	cmp	r7, #0
 8005fb4:	d0a9      	beq.n	8005f0a <__sflush_r+0x1a>
 8005fb6:	0793      	lsls	r3, r2, #30
 8005fb8:	bf18      	it	ne
 8005fba:	2300      	movne	r3, #0
 8005fbc:	680e      	ldr	r6, [r1, #0]
 8005fbe:	bf08      	it	eq
 8005fc0:	694b      	ldreq	r3, [r1, #20]
 8005fc2:	eba6 0807 	sub.w	r8, r6, r7
 8005fc6:	600f      	str	r7, [r1, #0]
 8005fc8:	608b      	str	r3, [r1, #8]
 8005fca:	f1b8 0f00 	cmp.w	r8, #0
 8005fce:	dd9c      	ble.n	8005f0a <__sflush_r+0x1a>
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	463a      	mov	r2, r7
 8005fd4:	6a21      	ldr	r1, [r4, #32]
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fda:	47b0      	blx	r6
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	dc06      	bgt.n	8005fee <__sflush_r+0xfe>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fec:	e78e      	b.n	8005f0c <__sflush_r+0x1c>
 8005fee:	4407      	add	r7, r0
 8005ff0:	eba8 0800 	sub.w	r8, r8, r0
 8005ff4:	e7e9      	b.n	8005fca <__sflush_r+0xda>
 8005ff6:	bf00      	nop
 8005ff8:	20400001 	.word	0x20400001

08005ffc <_fflush_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	690b      	ldr	r3, [r1, #16]
 8006000:	4605      	mov	r5, r0
 8006002:	460c      	mov	r4, r1
 8006004:	b1db      	cbz	r3, 800603e <_fflush_r+0x42>
 8006006:	b118      	cbz	r0, 8006010 <_fflush_r+0x14>
 8006008:	6983      	ldr	r3, [r0, #24]
 800600a:	b90b      	cbnz	r3, 8006010 <_fflush_r+0x14>
 800600c:	f000 f860 	bl	80060d0 <__sinit>
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <_fflush_r+0x48>)
 8006012:	429c      	cmp	r4, r3
 8006014:	d109      	bne.n	800602a <_fflush_r+0x2e>
 8006016:	686c      	ldr	r4, [r5, #4]
 8006018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601c:	b17b      	cbz	r3, 800603e <_fflush_r+0x42>
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006026:	f7ff bf63 	b.w	8005ef0 <__sflush_r>
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <_fflush_r+0x4c>)
 800602c:	429c      	cmp	r4, r3
 800602e:	d101      	bne.n	8006034 <_fflush_r+0x38>
 8006030:	68ac      	ldr	r4, [r5, #8]
 8006032:	e7f1      	b.n	8006018 <_fflush_r+0x1c>
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <_fflush_r+0x50>)
 8006036:	429c      	cmp	r4, r3
 8006038:	bf08      	it	eq
 800603a:	68ec      	ldreq	r4, [r5, #12]
 800603c:	e7ec      	b.n	8006018 <_fflush_r+0x1c>
 800603e:	2000      	movs	r0, #0
 8006040:	bd38      	pop	{r3, r4, r5, pc}
 8006042:	bf00      	nop
 8006044:	08006de8 	.word	0x08006de8
 8006048:	08006e08 	.word	0x08006e08
 800604c:	08006dc8 	.word	0x08006dc8

08006050 <std>:
 8006050:	2300      	movs	r3, #0
 8006052:	b510      	push	{r4, lr}
 8006054:	4604      	mov	r4, r0
 8006056:	e9c0 3300 	strd	r3, r3, [r0]
 800605a:	6083      	str	r3, [r0, #8]
 800605c:	8181      	strh	r1, [r0, #12]
 800605e:	6643      	str	r3, [r0, #100]	; 0x64
 8006060:	81c2      	strh	r2, [r0, #14]
 8006062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006066:	6183      	str	r3, [r0, #24]
 8006068:	4619      	mov	r1, r3
 800606a:	2208      	movs	r2, #8
 800606c:	305c      	adds	r0, #92	; 0x5c
 800606e:	f7fe fc91 	bl	8004994 <memset>
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <std+0x38>)
 8006074:	6224      	str	r4, [r4, #32]
 8006076:	6263      	str	r3, [r4, #36]	; 0x24
 8006078:	4b04      	ldr	r3, [pc, #16]	; (800608c <std+0x3c>)
 800607a:	62a3      	str	r3, [r4, #40]	; 0x28
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <std+0x40>)
 800607e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <std+0x44>)
 8006082:	6323      	str	r3, [r4, #48]	; 0x30
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop
 8006088:	08006a55 	.word	0x08006a55
 800608c:	08006a77 	.word	0x08006a77
 8006090:	08006aaf 	.word	0x08006aaf
 8006094:	08006ad3 	.word	0x08006ad3

08006098 <_cleanup_r>:
 8006098:	4901      	ldr	r1, [pc, #4]	; (80060a0 <_cleanup_r+0x8>)
 800609a:	f000 b885 	b.w	80061a8 <_fwalk_reent>
 800609e:	bf00      	nop
 80060a0:	08005ffd 	.word	0x08005ffd

080060a4 <__sfmoreglue>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	2568      	movs	r5, #104	; 0x68
 80060a8:	1e4a      	subs	r2, r1, #1
 80060aa:	4355      	muls	r5, r2
 80060ac:	460e      	mov	r6, r1
 80060ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060b2:	f000 fc65 	bl	8006980 <_malloc_r>
 80060b6:	4604      	mov	r4, r0
 80060b8:	b140      	cbz	r0, 80060cc <__sfmoreglue+0x28>
 80060ba:	2100      	movs	r1, #0
 80060bc:	e9c0 1600 	strd	r1, r6, [r0]
 80060c0:	300c      	adds	r0, #12
 80060c2:	60a0      	str	r0, [r4, #8]
 80060c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060c8:	f7fe fc64 	bl	8004994 <memset>
 80060cc:	4620      	mov	r0, r4
 80060ce:	bd70      	pop	{r4, r5, r6, pc}

080060d0 <__sinit>:
 80060d0:	6983      	ldr	r3, [r0, #24]
 80060d2:	b510      	push	{r4, lr}
 80060d4:	4604      	mov	r4, r0
 80060d6:	bb33      	cbnz	r3, 8006126 <__sinit+0x56>
 80060d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80060dc:	6503      	str	r3, [r0, #80]	; 0x50
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <__sinit+0x58>)
 80060e0:	4a12      	ldr	r2, [pc, #72]	; (800612c <__sinit+0x5c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6282      	str	r2, [r0, #40]	; 0x28
 80060e6:	4298      	cmp	r0, r3
 80060e8:	bf04      	itt	eq
 80060ea:	2301      	moveq	r3, #1
 80060ec:	6183      	streq	r3, [r0, #24]
 80060ee:	f000 f81f 	bl	8006130 <__sfp>
 80060f2:	6060      	str	r0, [r4, #4]
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 f81b 	bl	8006130 <__sfp>
 80060fa:	60a0      	str	r0, [r4, #8]
 80060fc:	4620      	mov	r0, r4
 80060fe:	f000 f817 	bl	8006130 <__sfp>
 8006102:	2200      	movs	r2, #0
 8006104:	60e0      	str	r0, [r4, #12]
 8006106:	2104      	movs	r1, #4
 8006108:	6860      	ldr	r0, [r4, #4]
 800610a:	f7ff ffa1 	bl	8006050 <std>
 800610e:	2201      	movs	r2, #1
 8006110:	2109      	movs	r1, #9
 8006112:	68a0      	ldr	r0, [r4, #8]
 8006114:	f7ff ff9c 	bl	8006050 <std>
 8006118:	2202      	movs	r2, #2
 800611a:	2112      	movs	r1, #18
 800611c:	68e0      	ldr	r0, [r4, #12]
 800611e:	f7ff ff97 	bl	8006050 <std>
 8006122:	2301      	movs	r3, #1
 8006124:	61a3      	str	r3, [r4, #24]
 8006126:	bd10      	pop	{r4, pc}
 8006128:	08006da4 	.word	0x08006da4
 800612c:	08006099 	.word	0x08006099

08006130 <__sfp>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <__sfp+0x70>)
 8006134:	4607      	mov	r7, r0
 8006136:	681e      	ldr	r6, [r3, #0]
 8006138:	69b3      	ldr	r3, [r6, #24]
 800613a:	b913      	cbnz	r3, 8006142 <__sfp+0x12>
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff ffc7 	bl	80060d0 <__sinit>
 8006142:	3648      	adds	r6, #72	; 0x48
 8006144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006148:	3b01      	subs	r3, #1
 800614a:	d503      	bpl.n	8006154 <__sfp+0x24>
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	b133      	cbz	r3, 800615e <__sfp+0x2e>
 8006150:	6836      	ldr	r6, [r6, #0]
 8006152:	e7f7      	b.n	8006144 <__sfp+0x14>
 8006154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006158:	b16d      	cbz	r5, 8006176 <__sfp+0x46>
 800615a:	3468      	adds	r4, #104	; 0x68
 800615c:	e7f4      	b.n	8006148 <__sfp+0x18>
 800615e:	2104      	movs	r1, #4
 8006160:	4638      	mov	r0, r7
 8006162:	f7ff ff9f 	bl	80060a4 <__sfmoreglue>
 8006166:	6030      	str	r0, [r6, #0]
 8006168:	2800      	cmp	r0, #0
 800616a:	d1f1      	bne.n	8006150 <__sfp+0x20>
 800616c:	230c      	movs	r3, #12
 800616e:	4604      	mov	r4, r0
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <__sfp+0x74>)
 8006178:	6665      	str	r5, [r4, #100]	; 0x64
 800617a:	e9c4 5500 	strd	r5, r5, [r4]
 800617e:	60a5      	str	r5, [r4, #8]
 8006180:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006184:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006188:	2208      	movs	r2, #8
 800618a:	4629      	mov	r1, r5
 800618c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006190:	f7fe fc00 	bl	8004994 <memset>
 8006194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800619c:	e7e9      	b.n	8006172 <__sfp+0x42>
 800619e:	bf00      	nop
 80061a0:	08006da4 	.word	0x08006da4
 80061a4:	ffff0001 	.word	0xffff0001

080061a8 <_fwalk_reent>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	4680      	mov	r8, r0
 80061ae:	4689      	mov	r9, r1
 80061b0:	2600      	movs	r6, #0
 80061b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061b6:	b914      	cbnz	r4, 80061be <_fwalk_reent+0x16>
 80061b8:	4630      	mov	r0, r6
 80061ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061c2:	3f01      	subs	r7, #1
 80061c4:	d501      	bpl.n	80061ca <_fwalk_reent+0x22>
 80061c6:	6824      	ldr	r4, [r4, #0]
 80061c8:	e7f5      	b.n	80061b6 <_fwalk_reent+0xe>
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d907      	bls.n	80061e0 <_fwalk_reent+0x38>
 80061d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061d4:	3301      	adds	r3, #1
 80061d6:	d003      	beq.n	80061e0 <_fwalk_reent+0x38>
 80061d8:	4629      	mov	r1, r5
 80061da:	4640      	mov	r0, r8
 80061dc:	47c8      	blx	r9
 80061de:	4306      	orrs	r6, r0
 80061e0:	3568      	adds	r5, #104	; 0x68
 80061e2:	e7ee      	b.n	80061c2 <_fwalk_reent+0x1a>

080061e4 <_localeconv_r>:
 80061e4:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <_localeconv_r+0x14>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6a18      	ldr	r0, [r3, #32]
 80061ea:	4b04      	ldr	r3, [pc, #16]	; (80061fc <_localeconv_r+0x18>)
 80061ec:	2800      	cmp	r0, #0
 80061ee:	bf08      	it	eq
 80061f0:	4618      	moveq	r0, r3
 80061f2:	30f0      	adds	r0, #240	; 0xf0
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20000038 	.word	0x20000038
 80061fc:	2000009c 	.word	0x2000009c

08006200 <__swhatbuf_r>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	460e      	mov	r6, r1
 8006204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006208:	b096      	sub	sp, #88	; 0x58
 800620a:	2900      	cmp	r1, #0
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	da07      	bge.n	8006222 <__swhatbuf_r+0x22>
 8006212:	2300      	movs	r3, #0
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	89b3      	ldrh	r3, [r6, #12]
 8006218:	061a      	lsls	r2, r3, #24
 800621a:	d410      	bmi.n	800623e <__swhatbuf_r+0x3e>
 800621c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006220:	e00e      	b.n	8006240 <__swhatbuf_r+0x40>
 8006222:	466a      	mov	r2, sp
 8006224:	f000 fc88 	bl	8006b38 <_fstat_r>
 8006228:	2800      	cmp	r0, #0
 800622a:	dbf2      	blt.n	8006212 <__swhatbuf_r+0x12>
 800622c:	9a01      	ldr	r2, [sp, #4]
 800622e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006232:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006236:	425a      	negs	r2, r3
 8006238:	415a      	adcs	r2, r3
 800623a:	602a      	str	r2, [r5, #0]
 800623c:	e7ee      	b.n	800621c <__swhatbuf_r+0x1c>
 800623e:	2340      	movs	r3, #64	; 0x40
 8006240:	2000      	movs	r0, #0
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	b016      	add	sp, #88	; 0x58
 8006246:	bd70      	pop	{r4, r5, r6, pc}

08006248 <__smakebuf_r>:
 8006248:	898b      	ldrh	r3, [r1, #12]
 800624a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800624c:	079d      	lsls	r5, r3, #30
 800624e:	4606      	mov	r6, r0
 8006250:	460c      	mov	r4, r1
 8006252:	d507      	bpl.n	8006264 <__smakebuf_r+0x1c>
 8006254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	2301      	movs	r3, #1
 800625e:	6163      	str	r3, [r4, #20]
 8006260:	b002      	add	sp, #8
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	ab01      	add	r3, sp, #4
 8006266:	466a      	mov	r2, sp
 8006268:	f7ff ffca 	bl	8006200 <__swhatbuf_r>
 800626c:	9900      	ldr	r1, [sp, #0]
 800626e:	4605      	mov	r5, r0
 8006270:	4630      	mov	r0, r6
 8006272:	f000 fb85 	bl	8006980 <_malloc_r>
 8006276:	b948      	cbnz	r0, 800628c <__smakebuf_r+0x44>
 8006278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627c:	059a      	lsls	r2, r3, #22
 800627e:	d4ef      	bmi.n	8006260 <__smakebuf_r+0x18>
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	e7e3      	b.n	8006254 <__smakebuf_r+0xc>
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <__smakebuf_r+0x7c>)
 800628e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	6020      	str	r0, [r4, #0]
 8006294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	6120      	str	r0, [r4, #16]
 800629e:	6163      	str	r3, [r4, #20]
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	b15b      	cbz	r3, 80062bc <__smakebuf_r+0x74>
 80062a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 fc57 	bl	8006b5c <_isatty_r>
 80062ae:	b128      	cbz	r0, 80062bc <__smakebuf_r+0x74>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	431d      	orrs	r5, r3
 80062c0:	81a5      	strh	r5, [r4, #12]
 80062c2:	e7cd      	b.n	8006260 <__smakebuf_r+0x18>
 80062c4:	08006099 	.word	0x08006099

080062c8 <malloc>:
 80062c8:	4b02      	ldr	r3, [pc, #8]	; (80062d4 <malloc+0xc>)
 80062ca:	4601      	mov	r1, r0
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f000 bb57 	b.w	8006980 <_malloc_r>
 80062d2:	bf00      	nop
 80062d4:	20000038 	.word	0x20000038

080062d8 <__ascii_mbtowc>:
 80062d8:	b082      	sub	sp, #8
 80062da:	b901      	cbnz	r1, 80062de <__ascii_mbtowc+0x6>
 80062dc:	a901      	add	r1, sp, #4
 80062de:	b142      	cbz	r2, 80062f2 <__ascii_mbtowc+0x1a>
 80062e0:	b14b      	cbz	r3, 80062f6 <__ascii_mbtowc+0x1e>
 80062e2:	7813      	ldrb	r3, [r2, #0]
 80062e4:	600b      	str	r3, [r1, #0]
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	1c10      	adds	r0, r2, #0
 80062ea:	bf18      	it	ne
 80062ec:	2001      	movne	r0, #1
 80062ee:	b002      	add	sp, #8
 80062f0:	4770      	bx	lr
 80062f2:	4610      	mov	r0, r2
 80062f4:	e7fb      	b.n	80062ee <__ascii_mbtowc+0x16>
 80062f6:	f06f 0001 	mvn.w	r0, #1
 80062fa:	e7f8      	b.n	80062ee <__ascii_mbtowc+0x16>

080062fc <memcpy>:
 80062fc:	b510      	push	{r4, lr}
 80062fe:	1e43      	subs	r3, r0, #1
 8006300:	440a      	add	r2, r1
 8006302:	4291      	cmp	r1, r2
 8006304:	d100      	bne.n	8006308 <memcpy+0xc>
 8006306:	bd10      	pop	{r4, pc}
 8006308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800630c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006310:	e7f7      	b.n	8006302 <memcpy+0x6>

08006312 <_Balloc>:
 8006312:	b570      	push	{r4, r5, r6, lr}
 8006314:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006316:	4604      	mov	r4, r0
 8006318:	460e      	mov	r6, r1
 800631a:	b93d      	cbnz	r5, 800632c <_Balloc+0x1a>
 800631c:	2010      	movs	r0, #16
 800631e:	f7ff ffd3 	bl	80062c8 <malloc>
 8006322:	6260      	str	r0, [r4, #36]	; 0x24
 8006324:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006328:	6005      	str	r5, [r0, #0]
 800632a:	60c5      	str	r5, [r0, #12]
 800632c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800632e:	68eb      	ldr	r3, [r5, #12]
 8006330:	b183      	cbz	r3, 8006354 <_Balloc+0x42>
 8006332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800633a:	b9b8      	cbnz	r0, 800636c <_Balloc+0x5a>
 800633c:	2101      	movs	r1, #1
 800633e:	fa01 f506 	lsl.w	r5, r1, r6
 8006342:	1d6a      	adds	r2, r5, #5
 8006344:	0092      	lsls	r2, r2, #2
 8006346:	4620      	mov	r0, r4
 8006348:	f000 fabf 	bl	80068ca <_calloc_r>
 800634c:	b160      	cbz	r0, 8006368 <_Balloc+0x56>
 800634e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006352:	e00e      	b.n	8006372 <_Balloc+0x60>
 8006354:	2221      	movs	r2, #33	; 0x21
 8006356:	2104      	movs	r1, #4
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fab6 	bl	80068ca <_calloc_r>
 800635e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006360:	60e8      	str	r0, [r5, #12]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e4      	bne.n	8006332 <_Balloc+0x20>
 8006368:	2000      	movs	r0, #0
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	6802      	ldr	r2, [r0, #0]
 800636e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006372:	2300      	movs	r3, #0
 8006374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006378:	e7f7      	b.n	800636a <_Balloc+0x58>

0800637a <_Bfree>:
 800637a:	b570      	push	{r4, r5, r6, lr}
 800637c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800637e:	4606      	mov	r6, r0
 8006380:	460d      	mov	r5, r1
 8006382:	b93c      	cbnz	r4, 8006394 <_Bfree+0x1a>
 8006384:	2010      	movs	r0, #16
 8006386:	f7ff ff9f 	bl	80062c8 <malloc>
 800638a:	6270      	str	r0, [r6, #36]	; 0x24
 800638c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006390:	6004      	str	r4, [r0, #0]
 8006392:	60c4      	str	r4, [r0, #12]
 8006394:	b13d      	cbz	r5, 80063a6 <_Bfree+0x2c>
 8006396:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006398:	686a      	ldr	r2, [r5, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a0:	6029      	str	r1, [r5, #0]
 80063a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80063a6:	bd70      	pop	{r4, r5, r6, pc}

080063a8 <__multadd>:
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	461f      	mov	r7, r3
 80063ae:	4606      	mov	r6, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	2300      	movs	r3, #0
 80063b4:	690d      	ldr	r5, [r1, #16]
 80063b6:	f101 0c14 	add.w	ip, r1, #20
 80063ba:	f8dc 0000 	ldr.w	r0, [ip]
 80063be:	3301      	adds	r3, #1
 80063c0:	b281      	uxth	r1, r0
 80063c2:	fb02 7101 	mla	r1, r2, r1, r7
 80063c6:	0c00      	lsrs	r0, r0, #16
 80063c8:	0c0f      	lsrs	r7, r1, #16
 80063ca:	fb02 7000 	mla	r0, r2, r0, r7
 80063ce:	b289      	uxth	r1, r1
 80063d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063d4:	429d      	cmp	r5, r3
 80063d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063da:	f84c 1b04 	str.w	r1, [ip], #4
 80063de:	dcec      	bgt.n	80063ba <__multadd+0x12>
 80063e0:	b1d7      	cbz	r7, 8006418 <__multadd+0x70>
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	dc12      	bgt.n	800640e <__multadd+0x66>
 80063e8:	6861      	ldr	r1, [r4, #4]
 80063ea:	4630      	mov	r0, r6
 80063ec:	3101      	adds	r1, #1
 80063ee:	f7ff ff90 	bl	8006312 <_Balloc>
 80063f2:	4680      	mov	r8, r0
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	f104 010c 	add.w	r1, r4, #12
 80063fa:	3202      	adds	r2, #2
 80063fc:	0092      	lsls	r2, r2, #2
 80063fe:	300c      	adds	r0, #12
 8006400:	f7ff ff7c 	bl	80062fc <memcpy>
 8006404:	4621      	mov	r1, r4
 8006406:	4630      	mov	r0, r6
 8006408:	f7ff ffb7 	bl	800637a <_Bfree>
 800640c:	4644      	mov	r4, r8
 800640e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006412:	3501      	adds	r5, #1
 8006414:	615f      	str	r7, [r3, #20]
 8006416:	6125      	str	r5, [r4, #16]
 8006418:	4620      	mov	r0, r4
 800641a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800641e <__hi0bits>:
 800641e:	0c02      	lsrs	r2, r0, #16
 8006420:	0412      	lsls	r2, r2, #16
 8006422:	4603      	mov	r3, r0
 8006424:	b9b2      	cbnz	r2, 8006454 <__hi0bits+0x36>
 8006426:	0403      	lsls	r3, r0, #16
 8006428:	2010      	movs	r0, #16
 800642a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800642e:	bf04      	itt	eq
 8006430:	021b      	lsleq	r3, r3, #8
 8006432:	3008      	addeq	r0, #8
 8006434:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006438:	bf04      	itt	eq
 800643a:	011b      	lsleq	r3, r3, #4
 800643c:	3004      	addeq	r0, #4
 800643e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006442:	bf04      	itt	eq
 8006444:	009b      	lsleq	r3, r3, #2
 8006446:	3002      	addeq	r0, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	db06      	blt.n	800645a <__hi0bits+0x3c>
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	d503      	bpl.n	8006458 <__hi0bits+0x3a>
 8006450:	3001      	adds	r0, #1
 8006452:	4770      	bx	lr
 8006454:	2000      	movs	r0, #0
 8006456:	e7e8      	b.n	800642a <__hi0bits+0xc>
 8006458:	2020      	movs	r0, #32
 800645a:	4770      	bx	lr

0800645c <__lo0bits>:
 800645c:	6803      	ldr	r3, [r0, #0]
 800645e:	4601      	mov	r1, r0
 8006460:	f013 0207 	ands.w	r2, r3, #7
 8006464:	d00b      	beq.n	800647e <__lo0bits+0x22>
 8006466:	07da      	lsls	r2, r3, #31
 8006468:	d423      	bmi.n	80064b2 <__lo0bits+0x56>
 800646a:	0798      	lsls	r0, r3, #30
 800646c:	bf49      	itett	mi
 800646e:	085b      	lsrmi	r3, r3, #1
 8006470:	089b      	lsrpl	r3, r3, #2
 8006472:	2001      	movmi	r0, #1
 8006474:	600b      	strmi	r3, [r1, #0]
 8006476:	bf5c      	itt	pl
 8006478:	600b      	strpl	r3, [r1, #0]
 800647a:	2002      	movpl	r0, #2
 800647c:	4770      	bx	lr
 800647e:	b298      	uxth	r0, r3
 8006480:	b9a8      	cbnz	r0, 80064ae <__lo0bits+0x52>
 8006482:	2010      	movs	r0, #16
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	f013 0fff 	tst.w	r3, #255	; 0xff
 800648a:	bf04      	itt	eq
 800648c:	0a1b      	lsreq	r3, r3, #8
 800648e:	3008      	addeq	r0, #8
 8006490:	071a      	lsls	r2, r3, #28
 8006492:	bf04      	itt	eq
 8006494:	091b      	lsreq	r3, r3, #4
 8006496:	3004      	addeq	r0, #4
 8006498:	079a      	lsls	r2, r3, #30
 800649a:	bf04      	itt	eq
 800649c:	089b      	lsreq	r3, r3, #2
 800649e:	3002      	addeq	r0, #2
 80064a0:	07da      	lsls	r2, r3, #31
 80064a2:	d402      	bmi.n	80064aa <__lo0bits+0x4e>
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	d006      	beq.n	80064b6 <__lo0bits+0x5a>
 80064a8:	3001      	adds	r0, #1
 80064aa:	600b      	str	r3, [r1, #0]
 80064ac:	4770      	bx	lr
 80064ae:	4610      	mov	r0, r2
 80064b0:	e7e9      	b.n	8006486 <__lo0bits+0x2a>
 80064b2:	2000      	movs	r0, #0
 80064b4:	4770      	bx	lr
 80064b6:	2020      	movs	r0, #32
 80064b8:	4770      	bx	lr

080064ba <__i2b>:
 80064ba:	b510      	push	{r4, lr}
 80064bc:	460c      	mov	r4, r1
 80064be:	2101      	movs	r1, #1
 80064c0:	f7ff ff27 	bl	8006312 <_Balloc>
 80064c4:	2201      	movs	r2, #1
 80064c6:	6144      	str	r4, [r0, #20]
 80064c8:	6102      	str	r2, [r0, #16]
 80064ca:	bd10      	pop	{r4, pc}

080064cc <__multiply>:
 80064cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d0:	4614      	mov	r4, r2
 80064d2:	690a      	ldr	r2, [r1, #16]
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	4688      	mov	r8, r1
 80064d8:	429a      	cmp	r2, r3
 80064da:	bfbe      	ittt	lt
 80064dc:	460b      	movlt	r3, r1
 80064de:	46a0      	movlt	r8, r4
 80064e0:	461c      	movlt	r4, r3
 80064e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064f2:	eb07 0609 	add.w	r6, r7, r9
 80064f6:	42b3      	cmp	r3, r6
 80064f8:	bfb8      	it	lt
 80064fa:	3101      	addlt	r1, #1
 80064fc:	f7ff ff09 	bl	8006312 <_Balloc>
 8006500:	f100 0514 	add.w	r5, r0, #20
 8006504:	462b      	mov	r3, r5
 8006506:	2200      	movs	r2, #0
 8006508:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800650c:	4573      	cmp	r3, lr
 800650e:	d316      	bcc.n	800653e <__multiply+0x72>
 8006510:	f104 0214 	add.w	r2, r4, #20
 8006514:	f108 0114 	add.w	r1, r8, #20
 8006518:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800651c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	9b00      	ldr	r3, [sp, #0]
 8006524:	9201      	str	r2, [sp, #4]
 8006526:	4293      	cmp	r3, r2
 8006528:	d80c      	bhi.n	8006544 <__multiply+0x78>
 800652a:	2e00      	cmp	r6, #0
 800652c:	dd03      	ble.n	8006536 <__multiply+0x6a>
 800652e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006532:	2b00      	cmp	r3, #0
 8006534:	d05d      	beq.n	80065f2 <__multiply+0x126>
 8006536:	6106      	str	r6, [r0, #16]
 8006538:	b003      	add	sp, #12
 800653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653e:	f843 2b04 	str.w	r2, [r3], #4
 8006542:	e7e3      	b.n	800650c <__multiply+0x40>
 8006544:	f8b2 b000 	ldrh.w	fp, [r2]
 8006548:	f1bb 0f00 	cmp.w	fp, #0
 800654c:	d023      	beq.n	8006596 <__multiply+0xca>
 800654e:	4689      	mov	r9, r1
 8006550:	46ac      	mov	ip, r5
 8006552:	f04f 0800 	mov.w	r8, #0
 8006556:	f859 4b04 	ldr.w	r4, [r9], #4
 800655a:	f8dc a000 	ldr.w	sl, [ip]
 800655e:	b2a3      	uxth	r3, r4
 8006560:	fa1f fa8a 	uxth.w	sl, sl
 8006564:	fb0b a303 	mla	r3, fp, r3, sl
 8006568:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800656c:	f8dc 4000 	ldr.w	r4, [ip]
 8006570:	4443      	add	r3, r8
 8006572:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006576:	fb0b 840a 	mla	r4, fp, sl, r8
 800657a:	46e2      	mov	sl, ip
 800657c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006580:	b29b      	uxth	r3, r3
 8006582:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006586:	454f      	cmp	r7, r9
 8006588:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800658c:	f84a 3b04 	str.w	r3, [sl], #4
 8006590:	d82b      	bhi.n	80065ea <__multiply+0x11e>
 8006592:	f8cc 8004 	str.w	r8, [ip, #4]
 8006596:	9b01      	ldr	r3, [sp, #4]
 8006598:	3204      	adds	r2, #4
 800659a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800659e:	f1ba 0f00 	cmp.w	sl, #0
 80065a2:	d020      	beq.n	80065e6 <__multiply+0x11a>
 80065a4:	4689      	mov	r9, r1
 80065a6:	46a8      	mov	r8, r5
 80065a8:	f04f 0b00 	mov.w	fp, #0
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	f8b9 c000 	ldrh.w	ip, [r9]
 80065b2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	fb0a 440c 	mla	r4, sl, ip, r4
 80065bc:	46c4      	mov	ip, r8
 80065be:	445c      	add	r4, fp
 80065c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065c4:	f84c 3b04 	str.w	r3, [ip], #4
 80065c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80065cc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	fb0a b303 	mla	r3, sl, r3, fp
 80065d6:	454f      	cmp	r7, r9
 80065d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065dc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065e0:	d805      	bhi.n	80065ee <__multiply+0x122>
 80065e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80065e6:	3504      	adds	r5, #4
 80065e8:	e79b      	b.n	8006522 <__multiply+0x56>
 80065ea:	46d4      	mov	ip, sl
 80065ec:	e7b3      	b.n	8006556 <__multiply+0x8a>
 80065ee:	46e0      	mov	r8, ip
 80065f0:	e7dd      	b.n	80065ae <__multiply+0xe2>
 80065f2:	3e01      	subs	r6, #1
 80065f4:	e799      	b.n	800652a <__multiply+0x5e>
	...

080065f8 <__pow5mult>:
 80065f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	4615      	mov	r5, r2
 80065fe:	f012 0203 	ands.w	r2, r2, #3
 8006602:	4606      	mov	r6, r0
 8006604:	460f      	mov	r7, r1
 8006606:	d007      	beq.n	8006618 <__pow5mult+0x20>
 8006608:	4c21      	ldr	r4, [pc, #132]	; (8006690 <__pow5mult+0x98>)
 800660a:	3a01      	subs	r2, #1
 800660c:	2300      	movs	r3, #0
 800660e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006612:	f7ff fec9 	bl	80063a8 <__multadd>
 8006616:	4607      	mov	r7, r0
 8006618:	10ad      	asrs	r5, r5, #2
 800661a:	d035      	beq.n	8006688 <__pow5mult+0x90>
 800661c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800661e:	b93c      	cbnz	r4, 8006630 <__pow5mult+0x38>
 8006620:	2010      	movs	r0, #16
 8006622:	f7ff fe51 	bl	80062c8 <malloc>
 8006626:	6270      	str	r0, [r6, #36]	; 0x24
 8006628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800662c:	6004      	str	r4, [r0, #0]
 800662e:	60c4      	str	r4, [r0, #12]
 8006630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006638:	b94c      	cbnz	r4, 800664e <__pow5mult+0x56>
 800663a:	f240 2171 	movw	r1, #625	; 0x271
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff ff3b 	bl	80064ba <__i2b>
 8006644:	2300      	movs	r3, #0
 8006646:	4604      	mov	r4, r0
 8006648:	f8c8 0008 	str.w	r0, [r8, #8]
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	07eb      	lsls	r3, r5, #31
 8006654:	d50a      	bpl.n	800666c <__pow5mult+0x74>
 8006656:	4639      	mov	r1, r7
 8006658:	4622      	mov	r2, r4
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff ff36 	bl	80064cc <__multiply>
 8006660:	4681      	mov	r9, r0
 8006662:	4639      	mov	r1, r7
 8006664:	4630      	mov	r0, r6
 8006666:	f7ff fe88 	bl	800637a <_Bfree>
 800666a:	464f      	mov	r7, r9
 800666c:	106d      	asrs	r5, r5, #1
 800666e:	d00b      	beq.n	8006688 <__pow5mult+0x90>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	b938      	cbnz	r0, 8006684 <__pow5mult+0x8c>
 8006674:	4622      	mov	r2, r4
 8006676:	4621      	mov	r1, r4
 8006678:	4630      	mov	r0, r6
 800667a:	f7ff ff27 	bl	80064cc <__multiply>
 800667e:	6020      	str	r0, [r4, #0]
 8006680:	f8c0 8000 	str.w	r8, [r0]
 8006684:	4604      	mov	r4, r0
 8006686:	e7e4      	b.n	8006652 <__pow5mult+0x5a>
 8006688:	4638      	mov	r0, r7
 800668a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668e:	bf00      	nop
 8006690:	08006f28 	.word	0x08006f28

08006694 <__lshift>:
 8006694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	460c      	mov	r4, r1
 800669a:	4607      	mov	r7, r0
 800669c:	4616      	mov	r6, r2
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066a4:	eb0a 0903 	add.w	r9, sl, r3
 80066a8:	6849      	ldr	r1, [r1, #4]
 80066aa:	68a3      	ldr	r3, [r4, #8]
 80066ac:	f109 0501 	add.w	r5, r9, #1
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	db32      	blt.n	800671a <__lshift+0x86>
 80066b4:	4638      	mov	r0, r7
 80066b6:	f7ff fe2c 	bl	8006312 <_Balloc>
 80066ba:	2300      	movs	r3, #0
 80066bc:	4680      	mov	r8, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	f100 0114 	add.w	r1, r0, #20
 80066c4:	4553      	cmp	r3, sl
 80066c6:	db2b      	blt.n	8006720 <__lshift+0x8c>
 80066c8:	6920      	ldr	r0, [r4, #16]
 80066ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066ce:	f104 0314 	add.w	r3, r4, #20
 80066d2:	f016 021f 	ands.w	r2, r6, #31
 80066d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066de:	d025      	beq.n	800672c <__lshift+0x98>
 80066e0:	2000      	movs	r0, #0
 80066e2:	f1c2 0e20 	rsb	lr, r2, #32
 80066e6:	468a      	mov	sl, r1
 80066e8:	681e      	ldr	r6, [r3, #0]
 80066ea:	4096      	lsls	r6, r2
 80066ec:	4330      	orrs	r0, r6
 80066ee:	f84a 0b04 	str.w	r0, [sl], #4
 80066f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80066f6:	459c      	cmp	ip, r3
 80066f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80066fc:	d814      	bhi.n	8006728 <__lshift+0x94>
 80066fe:	6048      	str	r0, [r1, #4]
 8006700:	b108      	cbz	r0, 8006706 <__lshift+0x72>
 8006702:	f109 0502 	add.w	r5, r9, #2
 8006706:	3d01      	subs	r5, #1
 8006708:	4638      	mov	r0, r7
 800670a:	f8c8 5010 	str.w	r5, [r8, #16]
 800670e:	4621      	mov	r1, r4
 8006710:	f7ff fe33 	bl	800637a <_Bfree>
 8006714:	4640      	mov	r0, r8
 8006716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671a:	3101      	adds	r1, #1
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	e7c7      	b.n	80066b0 <__lshift+0x1c>
 8006720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006724:	3301      	adds	r3, #1
 8006726:	e7cd      	b.n	80066c4 <__lshift+0x30>
 8006728:	4651      	mov	r1, sl
 800672a:	e7dc      	b.n	80066e6 <__lshift+0x52>
 800672c:	3904      	subs	r1, #4
 800672e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006732:	459c      	cmp	ip, r3
 8006734:	f841 2f04 	str.w	r2, [r1, #4]!
 8006738:	d8f9      	bhi.n	800672e <__lshift+0x9a>
 800673a:	e7e4      	b.n	8006706 <__lshift+0x72>

0800673c <__mcmp>:
 800673c:	6903      	ldr	r3, [r0, #16]
 800673e:	690a      	ldr	r2, [r1, #16]
 8006740:	b530      	push	{r4, r5, lr}
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	d10c      	bne.n	8006760 <__mcmp+0x24>
 8006746:	0092      	lsls	r2, r2, #2
 8006748:	3014      	adds	r0, #20
 800674a:	3114      	adds	r1, #20
 800674c:	1884      	adds	r4, r0, r2
 800674e:	4411      	add	r1, r2
 8006750:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006754:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006758:	4295      	cmp	r5, r2
 800675a:	d003      	beq.n	8006764 <__mcmp+0x28>
 800675c:	d305      	bcc.n	800676a <__mcmp+0x2e>
 800675e:	2301      	movs	r3, #1
 8006760:	4618      	mov	r0, r3
 8006762:	bd30      	pop	{r4, r5, pc}
 8006764:	42a0      	cmp	r0, r4
 8006766:	d3f3      	bcc.n	8006750 <__mcmp+0x14>
 8006768:	e7fa      	b.n	8006760 <__mcmp+0x24>
 800676a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676e:	e7f7      	b.n	8006760 <__mcmp+0x24>

08006770 <__mdiff>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	460d      	mov	r5, r1
 8006776:	4607      	mov	r7, r0
 8006778:	4611      	mov	r1, r2
 800677a:	4628      	mov	r0, r5
 800677c:	4614      	mov	r4, r2
 800677e:	f7ff ffdd 	bl	800673c <__mcmp>
 8006782:	1e06      	subs	r6, r0, #0
 8006784:	d108      	bne.n	8006798 <__mdiff+0x28>
 8006786:	4631      	mov	r1, r6
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff fdc2 	bl	8006312 <_Balloc>
 800678e:	2301      	movs	r3, #1
 8006790:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	bfa4      	itt	ge
 800679a:	4623      	movge	r3, r4
 800679c:	462c      	movge	r4, r5
 800679e:	4638      	mov	r0, r7
 80067a0:	6861      	ldr	r1, [r4, #4]
 80067a2:	bfa6      	itte	ge
 80067a4:	461d      	movge	r5, r3
 80067a6:	2600      	movge	r6, #0
 80067a8:	2601      	movlt	r6, #1
 80067aa:	f7ff fdb2 	bl	8006312 <_Balloc>
 80067ae:	f04f 0e00 	mov.w	lr, #0
 80067b2:	60c6      	str	r6, [r0, #12]
 80067b4:	692b      	ldr	r3, [r5, #16]
 80067b6:	6926      	ldr	r6, [r4, #16]
 80067b8:	f104 0214 	add.w	r2, r4, #20
 80067bc:	f105 0914 	add.w	r9, r5, #20
 80067c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067c8:	f100 0114 	add.w	r1, r0, #20
 80067cc:	f852 ab04 	ldr.w	sl, [r2], #4
 80067d0:	f859 5b04 	ldr.w	r5, [r9], #4
 80067d4:	fa1f f38a 	uxth.w	r3, sl
 80067d8:	4473      	add	r3, lr
 80067da:	b2ac      	uxth	r4, r5
 80067dc:	1b1b      	subs	r3, r3, r4
 80067de:	0c2c      	lsrs	r4, r5, #16
 80067e0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80067e4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80067ee:	45c8      	cmp	r8, r9
 80067f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80067f4:	4694      	mov	ip, r2
 80067f6:	f841 4b04 	str.w	r4, [r1], #4
 80067fa:	d8e7      	bhi.n	80067cc <__mdiff+0x5c>
 80067fc:	45bc      	cmp	ip, r7
 80067fe:	d304      	bcc.n	800680a <__mdiff+0x9a>
 8006800:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006804:	b183      	cbz	r3, 8006828 <__mdiff+0xb8>
 8006806:	6106      	str	r6, [r0, #16]
 8006808:	e7c4      	b.n	8006794 <__mdiff+0x24>
 800680a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800680e:	b2a2      	uxth	r2, r4
 8006810:	4472      	add	r2, lr
 8006812:	1413      	asrs	r3, r2, #16
 8006814:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006818:	b292      	uxth	r2, r2
 800681a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800681e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006822:	f841 2b04 	str.w	r2, [r1], #4
 8006826:	e7e9      	b.n	80067fc <__mdiff+0x8c>
 8006828:	3e01      	subs	r6, #1
 800682a:	e7e9      	b.n	8006800 <__mdiff+0x90>

0800682c <__d2b>:
 800682c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006830:	461c      	mov	r4, r3
 8006832:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006836:	2101      	movs	r1, #1
 8006838:	4690      	mov	r8, r2
 800683a:	f7ff fd6a 	bl	8006312 <_Balloc>
 800683e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006842:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006846:	4607      	mov	r7, r0
 8006848:	bb34      	cbnz	r4, 8006898 <__d2b+0x6c>
 800684a:	9201      	str	r2, [sp, #4]
 800684c:	f1b8 0200 	subs.w	r2, r8, #0
 8006850:	d027      	beq.n	80068a2 <__d2b+0x76>
 8006852:	a802      	add	r0, sp, #8
 8006854:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006858:	f7ff fe00 	bl	800645c <__lo0bits>
 800685c:	9900      	ldr	r1, [sp, #0]
 800685e:	b1f0      	cbz	r0, 800689e <__d2b+0x72>
 8006860:	9a01      	ldr	r2, [sp, #4]
 8006862:	f1c0 0320 	rsb	r3, r0, #32
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	430b      	orrs	r3, r1
 800686c:	40c2      	lsrs	r2, r0
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	9201      	str	r2, [sp, #4]
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2102      	movne	r1, #2
 800687a:	2101      	moveq	r1, #1
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	6139      	str	r1, [r7, #16]
 8006880:	b1c4      	cbz	r4, 80068b4 <__d2b+0x88>
 8006882:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006886:	4404      	add	r4, r0
 8006888:	6034      	str	r4, [r6, #0]
 800688a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800688e:	6028      	str	r0, [r5, #0]
 8006890:	4638      	mov	r0, r7
 8006892:	b002      	add	sp, #8
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800689c:	e7d5      	b.n	800684a <__d2b+0x1e>
 800689e:	6179      	str	r1, [r7, #20]
 80068a0:	e7e7      	b.n	8006872 <__d2b+0x46>
 80068a2:	a801      	add	r0, sp, #4
 80068a4:	f7ff fdda 	bl	800645c <__lo0bits>
 80068a8:	2101      	movs	r1, #1
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	6139      	str	r1, [r7, #16]
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	3020      	adds	r0, #32
 80068b2:	e7e5      	b.n	8006880 <__d2b+0x54>
 80068b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068b8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80068bc:	6030      	str	r0, [r6, #0]
 80068be:	6918      	ldr	r0, [r3, #16]
 80068c0:	f7ff fdad 	bl	800641e <__hi0bits>
 80068c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068c8:	e7e1      	b.n	800688e <__d2b+0x62>

080068ca <_calloc_r>:
 80068ca:	b538      	push	{r3, r4, r5, lr}
 80068cc:	fb02 f401 	mul.w	r4, r2, r1
 80068d0:	4621      	mov	r1, r4
 80068d2:	f000 f855 	bl	8006980 <_malloc_r>
 80068d6:	4605      	mov	r5, r0
 80068d8:	b118      	cbz	r0, 80068e2 <_calloc_r+0x18>
 80068da:	4622      	mov	r2, r4
 80068dc:	2100      	movs	r1, #0
 80068de:	f7fe f859 	bl	8004994 <memset>
 80068e2:	4628      	mov	r0, r5
 80068e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080068e8 <_free_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4605      	mov	r5, r0
 80068ec:	2900      	cmp	r1, #0
 80068ee:	d043      	beq.n	8006978 <_free_r+0x90>
 80068f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f4:	1f0c      	subs	r4, r1, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfb8      	it	lt
 80068fa:	18e4      	addlt	r4, r4, r3
 80068fc:	f000 f950 	bl	8006ba0 <__malloc_lock>
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <_free_r+0x94>)
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	4610      	mov	r0, r2
 8006906:	b933      	cbnz	r3, 8006916 <_free_r+0x2e>
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	6014      	str	r4, [r2, #0]
 800690c:	4628      	mov	r0, r5
 800690e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006912:	f000 b946 	b.w	8006ba2 <__malloc_unlock>
 8006916:	42a3      	cmp	r3, r4
 8006918:	d90b      	bls.n	8006932 <_free_r+0x4a>
 800691a:	6821      	ldr	r1, [r4, #0]
 800691c:	1862      	adds	r2, r4, r1
 800691e:	4293      	cmp	r3, r2
 8006920:	bf01      	itttt	eq
 8006922:	681a      	ldreq	r2, [r3, #0]
 8006924:	685b      	ldreq	r3, [r3, #4]
 8006926:	1852      	addeq	r2, r2, r1
 8006928:	6022      	streq	r2, [r4, #0]
 800692a:	6063      	str	r3, [r4, #4]
 800692c:	6004      	str	r4, [r0, #0]
 800692e:	e7ed      	b.n	800690c <_free_r+0x24>
 8006930:	4613      	mov	r3, r2
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	b10a      	cbz	r2, 800693a <_free_r+0x52>
 8006936:	42a2      	cmp	r2, r4
 8006938:	d9fa      	bls.n	8006930 <_free_r+0x48>
 800693a:	6819      	ldr	r1, [r3, #0]
 800693c:	1858      	adds	r0, r3, r1
 800693e:	42a0      	cmp	r0, r4
 8006940:	d10b      	bne.n	800695a <_free_r+0x72>
 8006942:	6820      	ldr	r0, [r4, #0]
 8006944:	4401      	add	r1, r0
 8006946:	1858      	adds	r0, r3, r1
 8006948:	4282      	cmp	r2, r0
 800694a:	6019      	str	r1, [r3, #0]
 800694c:	d1de      	bne.n	800690c <_free_r+0x24>
 800694e:	6810      	ldr	r0, [r2, #0]
 8006950:	6852      	ldr	r2, [r2, #4]
 8006952:	4401      	add	r1, r0
 8006954:	6019      	str	r1, [r3, #0]
 8006956:	605a      	str	r2, [r3, #4]
 8006958:	e7d8      	b.n	800690c <_free_r+0x24>
 800695a:	d902      	bls.n	8006962 <_free_r+0x7a>
 800695c:	230c      	movs	r3, #12
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	e7d4      	b.n	800690c <_free_r+0x24>
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	1821      	adds	r1, r4, r0
 8006966:	428a      	cmp	r2, r1
 8006968:	bf01      	itttt	eq
 800696a:	6811      	ldreq	r1, [r2, #0]
 800696c:	6852      	ldreq	r2, [r2, #4]
 800696e:	1809      	addeq	r1, r1, r0
 8006970:	6021      	streq	r1, [r4, #0]
 8006972:	6062      	str	r2, [r4, #4]
 8006974:	605c      	str	r4, [r3, #4]
 8006976:	e7c9      	b.n	800690c <_free_r+0x24>
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	200002dc 	.word	0x200002dc

08006980 <_malloc_r>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	1ccd      	adds	r5, r1, #3
 8006984:	f025 0503 	bic.w	r5, r5, #3
 8006988:	3508      	adds	r5, #8
 800698a:	2d0c      	cmp	r5, #12
 800698c:	bf38      	it	cc
 800698e:	250c      	movcc	r5, #12
 8006990:	2d00      	cmp	r5, #0
 8006992:	4606      	mov	r6, r0
 8006994:	db01      	blt.n	800699a <_malloc_r+0x1a>
 8006996:	42a9      	cmp	r1, r5
 8006998:	d903      	bls.n	80069a2 <_malloc_r+0x22>
 800699a:	230c      	movs	r3, #12
 800699c:	6033      	str	r3, [r6, #0]
 800699e:	2000      	movs	r0, #0
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	f000 f8fd 	bl	8006ba0 <__malloc_lock>
 80069a6:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <_malloc_r+0xac>)
 80069a8:	6814      	ldr	r4, [r2, #0]
 80069aa:	4621      	mov	r1, r4
 80069ac:	b991      	cbnz	r1, 80069d4 <_malloc_r+0x54>
 80069ae:	4c20      	ldr	r4, [pc, #128]	; (8006a30 <_malloc_r+0xb0>)
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	b91b      	cbnz	r3, 80069bc <_malloc_r+0x3c>
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 f83d 	bl	8006a34 <_sbrk_r>
 80069ba:	6020      	str	r0, [r4, #0]
 80069bc:	4629      	mov	r1, r5
 80069be:	4630      	mov	r0, r6
 80069c0:	f000 f838 	bl	8006a34 <_sbrk_r>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d124      	bne.n	8006a12 <_malloc_r+0x92>
 80069c8:	230c      	movs	r3, #12
 80069ca:	4630      	mov	r0, r6
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	f000 f8e8 	bl	8006ba2 <__malloc_unlock>
 80069d2:	e7e4      	b.n	800699e <_malloc_r+0x1e>
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	1b5b      	subs	r3, r3, r5
 80069d8:	d418      	bmi.n	8006a0c <_malloc_r+0x8c>
 80069da:	2b0b      	cmp	r3, #11
 80069dc:	d90f      	bls.n	80069fe <_malloc_r+0x7e>
 80069de:	600b      	str	r3, [r1, #0]
 80069e0:	18cc      	adds	r4, r1, r3
 80069e2:	50cd      	str	r5, [r1, r3]
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f8dc 	bl	8006ba2 <__malloc_unlock>
 80069ea:	f104 000b 	add.w	r0, r4, #11
 80069ee:	1d23      	adds	r3, r4, #4
 80069f0:	f020 0007 	bic.w	r0, r0, #7
 80069f4:	1ac3      	subs	r3, r0, r3
 80069f6:	d0d3      	beq.n	80069a0 <_malloc_r+0x20>
 80069f8:	425a      	negs	r2, r3
 80069fa:	50e2      	str	r2, [r4, r3]
 80069fc:	e7d0      	b.n	80069a0 <_malloc_r+0x20>
 80069fe:	684b      	ldr	r3, [r1, #4]
 8006a00:	428c      	cmp	r4, r1
 8006a02:	bf16      	itet	ne
 8006a04:	6063      	strne	r3, [r4, #4]
 8006a06:	6013      	streq	r3, [r2, #0]
 8006a08:	460c      	movne	r4, r1
 8006a0a:	e7eb      	b.n	80069e4 <_malloc_r+0x64>
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	6849      	ldr	r1, [r1, #4]
 8006a10:	e7cc      	b.n	80069ac <_malloc_r+0x2c>
 8006a12:	1cc4      	adds	r4, r0, #3
 8006a14:	f024 0403 	bic.w	r4, r4, #3
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d005      	beq.n	8006a28 <_malloc_r+0xa8>
 8006a1c:	1a21      	subs	r1, r4, r0
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f000 f808 	bl	8006a34 <_sbrk_r>
 8006a24:	3001      	adds	r0, #1
 8006a26:	d0cf      	beq.n	80069c8 <_malloc_r+0x48>
 8006a28:	6025      	str	r5, [r4, #0]
 8006a2a:	e7db      	b.n	80069e4 <_malloc_r+0x64>
 8006a2c:	200002dc 	.word	0x200002dc
 8006a30:	200002e0 	.word	0x200002e0

08006a34 <_sbrk_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	2300      	movs	r3, #0
 8006a38:	4c05      	ldr	r4, [pc, #20]	; (8006a50 <_sbrk_r+0x1c>)
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	6023      	str	r3, [r4, #0]
 8006a40:	f7fb f90c 	bl	8001c5c <_sbrk>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_sbrk_r+0x1a>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_sbrk_r+0x1a>
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000490 	.word	0x20000490

08006a54 <__sread>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	460c      	mov	r4, r1
 8006a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5c:	f000 f8a2 	bl	8006ba4 <_read_r>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	bfab      	itete	ge
 8006a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a66:	89a3      	ldrhlt	r3, [r4, #12]
 8006a68:	181b      	addge	r3, r3, r0
 8006a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a6e:	bfac      	ite	ge
 8006a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a72:	81a3      	strhlt	r3, [r4, #12]
 8006a74:	bd10      	pop	{r4, pc}

08006a76 <__swrite>:
 8006a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	461f      	mov	r7, r3
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	4605      	mov	r5, r0
 8006a80:	05db      	lsls	r3, r3, #23
 8006a82:	460c      	mov	r4, r1
 8006a84:	4616      	mov	r6, r2
 8006a86:	d505      	bpl.n	8006a94 <__swrite+0x1e>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	f000 f874 	bl	8006b7c <_lseek_r>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	4632      	mov	r2, r6
 8006a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aaa:	f000 b823 	b.w	8006af4 <_write_r>

08006aae <__sseek>:
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab6:	f000 f861 	bl	8006b7c <_lseek_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	bf15      	itete	ne
 8006ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aca:	81a3      	strheq	r3, [r4, #12]
 8006acc:	bf18      	it	ne
 8006ace:	81a3      	strhne	r3, [r4, #12]
 8006ad0:	bd10      	pop	{r4, pc}

08006ad2 <__sclose>:
 8006ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad6:	f000 b81f 	b.w	8006b18 <_close_r>

08006ada <__ascii_wctomb>:
 8006ada:	b149      	cbz	r1, 8006af0 <__ascii_wctomb+0x16>
 8006adc:	2aff      	cmp	r2, #255	; 0xff
 8006ade:	bf8b      	itete	hi
 8006ae0:	238a      	movhi	r3, #138	; 0x8a
 8006ae2:	700a      	strbls	r2, [r1, #0]
 8006ae4:	6003      	strhi	r3, [r0, #0]
 8006ae6:	2001      	movls	r0, #1
 8006ae8:	bf88      	it	hi
 8006aea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006aee:	4770      	bx	lr
 8006af0:	4608      	mov	r0, r1
 8006af2:	4770      	bx	lr

08006af4 <_write_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	4611      	mov	r1, r2
 8006afc:	2200      	movs	r2, #0
 8006afe:	4c05      	ldr	r4, [pc, #20]	; (8006b14 <_write_r+0x20>)
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f000 f888 	bl	8006c18 <_write>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_write_r+0x1e>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_write_r+0x1e>
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	20000490 	.word	0x20000490

08006b18 <_close_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4c05      	ldr	r4, [pc, #20]	; (8006b34 <_close_r+0x1c>)
 8006b1e:	4605      	mov	r5, r0
 8006b20:	4608      	mov	r0, r1
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	f000 f850 	bl	8006bc8 <_close>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_close_r+0x1a>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_close_r+0x1a>
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000490 	.word	0x20000490

08006b38 <_fstat_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4c06      	ldr	r4, [pc, #24]	; (8006b58 <_fstat_r+0x20>)
 8006b3e:	4605      	mov	r5, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	f000 f847 	bl	8006bd8 <_fstat>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d102      	bne.n	8006b54 <_fstat_r+0x1c>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	b103      	cbz	r3, 8006b54 <_fstat_r+0x1c>
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	20000490 	.word	0x20000490

08006b5c <_isatty_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4c05      	ldr	r4, [pc, #20]	; (8006b78 <_isatty_r+0x1c>)
 8006b62:	4605      	mov	r5, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	f000 f83e 	bl	8006be8 <_isatty>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_isatty_r+0x1a>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_isatty_r+0x1a>
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	20000490 	.word	0x20000490

08006b7c <_lseek_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4605      	mov	r5, r0
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	2200      	movs	r2, #0
 8006b86:	4c05      	ldr	r4, [pc, #20]	; (8006b9c <_lseek_r+0x20>)
 8006b88:	6022      	str	r2, [r4, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 f834 	bl	8006bf8 <_lseek>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_lseek_r+0x1e>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_lseek_r+0x1e>
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20000490 	.word	0x20000490

08006ba0 <__malloc_lock>:
 8006ba0:	4770      	bx	lr

08006ba2 <__malloc_unlock>:
 8006ba2:	4770      	bx	lr

08006ba4 <_read_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	2200      	movs	r2, #0
 8006bae:	4c05      	ldr	r4, [pc, #20]	; (8006bc4 <_read_r+0x20>)
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f000 f828 	bl	8006c08 <_read>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_read_r+0x1e>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_read_r+0x1e>
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000490 	.word	0x20000490

08006bc8 <_close>:
 8006bc8:	2258      	movs	r2, #88	; 0x58
 8006bca:	4b02      	ldr	r3, [pc, #8]	; (8006bd4 <_close+0xc>)
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	4770      	bx	lr
 8006bd4:	20000490 	.word	0x20000490

08006bd8 <_fstat>:
 8006bd8:	2258      	movs	r2, #88	; 0x58
 8006bda:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <_fstat+0xc>)
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	4770      	bx	lr
 8006be4:	20000490 	.word	0x20000490

08006be8 <_isatty>:
 8006be8:	2258      	movs	r2, #88	; 0x58
 8006bea:	4b02      	ldr	r3, [pc, #8]	; (8006bf4 <_isatty+0xc>)
 8006bec:	2000      	movs	r0, #0
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000490 	.word	0x20000490

08006bf8 <_lseek>:
 8006bf8:	2258      	movs	r2, #88	; 0x58
 8006bfa:	4b02      	ldr	r3, [pc, #8]	; (8006c04 <_lseek+0xc>)
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	4770      	bx	lr
 8006c04:	20000490 	.word	0x20000490

08006c08 <_read>:
 8006c08:	2258      	movs	r2, #88	; 0x58
 8006c0a:	4b02      	ldr	r3, [pc, #8]	; (8006c14 <_read+0xc>)
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	4770      	bx	lr
 8006c14:	20000490 	.word	0x20000490

08006c18 <_write>:
 8006c18:	2258      	movs	r2, #88	; 0x58
 8006c1a:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <_write+0xc>)
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	4770      	bx	lr
 8006c24:	20000490 	.word	0x20000490

08006c28 <_init>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr

08006c34 <_fini>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr
