
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08009080  08009080  00019080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f0  080093f0  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  080093f0  080093f0  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093f0  080093f0  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080093f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000208  08009600  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08009600  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbbd  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4f  00000000  00000000  0002bdee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002d840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002e468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018614  00000000  00000000  0002efb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009503  00000000  00000000  000475cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b7fa  00000000  00000000  00050acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc2c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  000dc344  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000e0648  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000e06e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08009068 	.word	0x08009068

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08009068 	.word	0x08009068

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <interpreteComando>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interpreteComando(){
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

	//uint32_t duty_cycle;
	double consigna;
    num_spi=num_spi+20;
 8000d8a:	4bba      	ldr	r3, [pc, #744]	; (8001074 <interpreteComando+0x2f0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	49ba      	ldr	r1, [pc, #744]	; (8001078 <interpreteComando+0x2f4>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff feef 	bl	8000b74 <__addsf3>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4bb6      	ldr	r3, [pc, #728]	; (8001074 <interpreteComando+0x2f0>)
 8000d9c:	601a      	str	r2, [r3, #0]
	switch (in_buffer[0]) {
 8000d9e:	4bb7      	ldr	r3, [pc, #732]	; (800107c <interpreteComando+0x2f8>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3b44      	subs	r3, #68	; 0x44
 8000da4:	2b33      	cmp	r3, #51	; 0x33
 8000da6:	f200 8219 	bhi.w	80011dc <interpreteComando+0x458>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <interpreteComando+0x2c>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08001199 	.word	0x08001199
 8000db4:	080011dd 	.word	0x080011dd
 8000db8:	080011dd 	.word	0x080011dd
 8000dbc:	080011dd 	.word	0x080011dd
 8000dc0:	080011dd 	.word	0x080011dd
 8000dc4:	08001155 	.word	0x08001155
 8000dc8:	080011dd 	.word	0x080011dd
 8000dcc:	080011dd 	.word	0x080011dd
 8000dd0:	080011dd 	.word	0x080011dd
 8000dd4:	080011dd 	.word	0x080011dd
 8000dd8:	080011dd 	.word	0x080011dd
 8000ddc:	080011dd 	.word	0x080011dd
 8000de0:	08001111 	.word	0x08001111
 8000de4:	080011dd 	.word	0x080011dd
 8000de8:	080011dd 	.word	0x080011dd
 8000dec:	080011dd 	.word	0x080011dd
 8000df0:	080011dd 	.word	0x080011dd
 8000df4:	080011dd 	.word	0x080011dd
 8000df8:	080011dd 	.word	0x080011dd
 8000dfc:	08000e81 	.word	0x08000e81
 8000e00:	080011dd 	.word	0x080011dd
 8000e04:	080011dd 	.word	0x080011dd
 8000e08:	080011dd 	.word	0x080011dd
 8000e0c:	080011dd 	.word	0x080011dd
 8000e10:	080011dd 	.word	0x080011dd
 8000e14:	080011dd 	.word	0x080011dd
 8000e18:	080011dd 	.word	0x080011dd
 8000e1c:	080011dd 	.word	0x080011dd
 8000e20:	080011dd 	.word	0x080011dd
 8000e24:	080011dd 	.word	0x080011dd
 8000e28:	080011dd 	.word	0x080011dd
 8000e2c:	080011dd 	.word	0x080011dd
 8000e30:	08001199 	.word	0x08001199
 8000e34:	080011dd 	.word	0x080011dd
 8000e38:	080011dd 	.word	0x080011dd
 8000e3c:	080011dd 	.word	0x080011dd
 8000e40:	080011dd 	.word	0x080011dd
 8000e44:	08001155 	.word	0x08001155
 8000e48:	080011dd 	.word	0x080011dd
 8000e4c:	080011dd 	.word	0x080011dd
 8000e50:	080011dd 	.word	0x080011dd
 8000e54:	080011dd 	.word	0x080011dd
 8000e58:	080011dd 	.word	0x080011dd
 8000e5c:	080011dd 	.word	0x080011dd
 8000e60:	08001111 	.word	0x08001111
 8000e64:	080011dd 	.word	0x080011dd
 8000e68:	080011dd 	.word	0x080011dd
 8000e6c:	080011dd 	.word	0x080011dd
 8000e70:	080011dd 	.word	0x080011dd
 8000e74:	080011dd 	.word	0x080011dd
 8000e78:	080011dd 	.word	0x080011dd
 8000e7c:	08000e81 	.word	0x08000e81
	case 'W':
	case 'w':
		switch (in_buffer[1]) {
 8000e80:	4b7e      	ldr	r3, [pc, #504]	; (800107c <interpreteComando+0x2f8>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	2b31      	cmp	r3, #49	; 0x31
 8000e86:	d003      	beq.n	8000e90 <interpreteComando+0x10c>
 8000e88:	2b32      	cmp	r3, #50	; 0x32
 8000e8a:	f000 808a 	beq.w	8000fa2 <interpreteComando+0x21e>
					//printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
				}
			}
			break;
		}
			break;
 8000e8e:	e1a5      	b.n	80011dc <interpreteComando+0x458>
			if (in_buffer[2]) {
 8000e90:	4b7a      	ldr	r3, [pc, #488]	; (800107c <interpreteComando+0x2f8>)
 8000e92:	789b      	ldrb	r3, [r3, #2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8137 	beq.w	8001108 <interpreteComando+0x384>
				if (in_buffer[2] == 43) {
 8000e9a:	4b78      	ldr	r3, [pc, #480]	; (800107c <interpreteComando+0x2f8>)
 8000e9c:	789b      	ldrb	r3, [r3, #2]
 8000e9e:	2b2b      	cmp	r3, #43	; 0x2b
 8000ea0:	d12d      	bne.n	8000efe <interpreteComando+0x17a>
					stop1=0;
 8000ea2:	4b77      	ldr	r3, [pc, #476]	; (8001080 <interpreteComando+0x2fc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4875      	ldr	r0, [pc, #468]	; (8001084 <interpreteComando+0x300>)
 8000eae:	f001 ff09 	bl	8002cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4873      	ldr	r0, [pc, #460]	; (8001084 <interpreteComando+0x300>)
 8000eb8:	f001 ff04 	bl	8002cc4 <HAL_GPIO_WritePin>
					if (in_buffer[3]) {
 8000ebc:	4b6f      	ldr	r3, [pc, #444]	; (800107c <interpreteComando+0x2f8>)
 8000ebe:	78db      	ldrb	r3, [r3, #3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 8121 	beq.w	8001108 <interpreteComando+0x384>
						consigna = atof((char*)&in_buffer[3]);
 8000ec6:	4870      	ldr	r0, [pc, #448]	; (8001088 <interpreteComando+0x304>)
 8000ec8:	f004 fccd 	bl	8005866 <atof>
 8000ecc:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b6d      	ldr	r3, [pc, #436]	; (800108c <interpreteComando+0x308>)
 8000ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eda:	f7ff fd6f 	bl	80009bc <__aeabi_dcmplt>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <interpreteComando+0x16c>
							velocidad_consigna = consigna;
 8000ee4:	4a6a      	ldr	r2, [pc, #424]	; (8001090 <interpreteComando+0x30c>)
 8000ee6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000eea:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000eee:	e10b      	b.n	8001108 <interpreteComando+0x384>
							velocidad_consigna = 35;
 8000ef0:	4a67      	ldr	r2, [pc, #412]	; (8001090 <interpreteComando+0x30c>)
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	4c65      	ldr	r4, [pc, #404]	; (800108c <interpreteComando+0x308>)
 8000ef8:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000efc:	e104      	b.n	8001108 <interpreteComando+0x384>
				} else if (in_buffer[2] == 45) {
 8000efe:	4b5f      	ldr	r3, [pc, #380]	; (800107c <interpreteComando+0x2f8>)
 8000f00:	789b      	ldrb	r3, [r3, #2]
 8000f02:	2b2d      	cmp	r3, #45	; 0x2d
 8000f04:	d133      	bne.n	8000f6e <interpreteComando+0x1ea>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2110      	movs	r1, #16
 8000f0a:	485e      	ldr	r0, [pc, #376]	; (8001084 <interpreteComando+0x300>)
 8000f0c:	f001 feda 	bl	8002cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2120      	movs	r1, #32
 8000f14:	485b      	ldr	r0, [pc, #364]	; (8001084 <interpreteComando+0x300>)
 8000f16:	f001 fed5 	bl	8002cc4 <HAL_GPIO_WritePin>
					stop1=0;
 8000f1a:	4b59      	ldr	r3, [pc, #356]	; (8001080 <interpreteComando+0x2fc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
					if (in_buffer[3]) {
 8000f20:	4b56      	ldr	r3, [pc, #344]	; (800107c <interpreteComando+0x2f8>)
 8000f22:	78db      	ldrb	r3, [r3, #3]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80ef 	beq.w	8001108 <interpreteComando+0x384>
						consigna = atof((char*)&in_buffer[3]);
 8000f2a:	4857      	ldr	r0, [pc, #348]	; (8001088 <interpreteComando+0x304>)
 8000f2c:	f004 fc9b 	bl	8005866 <atof>
 8000f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	4b54      	ldr	r3, [pc, #336]	; (800108c <interpreteComando+0x308>)
 8000f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f3e:	f7ff fd3d 	bl	80009bc <__aeabi_dcmplt>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00b      	beq.n	8000f60 <interpreteComando+0x1dc>
							velocidad_consigna = -consigna;
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <interpreteComando+0x30c>)
 8000f56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f5a:	e9c3 1200 	strd	r1, r2, [r3]
			break;
 8000f5e:	e0d3      	b.n	8001108 <interpreteComando+0x384>
							velocidad_consigna = -35;
 8000f60:	4a4b      	ldr	r2, [pc, #300]	; (8001090 <interpreteComando+0x30c>)
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	4c4b      	ldr	r4, [pc, #300]	; (8001094 <interpreteComando+0x310>)
 8000f68:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8000f6c:	e0cc      	b.n	8001108 <interpreteComando+0x384>
				}else if(in_buffer[2] == 48){
 8000f6e:	4b43      	ldr	r3, [pc, #268]	; (800107c <interpreteComando+0x2f8>)
 8000f70:	789b      	ldrb	r3, [r3, #2]
 8000f72:	2b30      	cmp	r3, #48	; 0x30
 8000f74:	f040 80c8 	bne.w	8001108 <interpreteComando+0x384>
					velocidad_consigna=0;
 8000f78:	4a45      	ldr	r2, [pc, #276]	; (8001090 <interpreteComando+0x30c>)
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	f04f 0400 	mov.w	r4, #0
 8000f82:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2110      	movs	r1, #16
 8000f8a:	483e      	ldr	r0, [pc, #248]	; (8001084 <interpreteComando+0x300>)
 8000f8c:	f001 fe9a 	bl	8002cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2120      	movs	r1, #32
 8000f94:	483b      	ldr	r0, [pc, #236]	; (8001084 <interpreteComando+0x300>)
 8000f96:	f001 fe95 	bl	8002cc4 <HAL_GPIO_WritePin>
					stop1=1;
 8000f9a:	4b39      	ldr	r3, [pc, #228]	; (8001080 <interpreteComando+0x2fc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
			break;
 8000fa0:	e0b2      	b.n	8001108 <interpreteComando+0x384>
			if (in_buffer[2]) {
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <interpreteComando+0x2f8>)
 8000fa4:	789b      	ldrb	r3, [r3, #2]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80b0 	beq.w	800110c <interpreteComando+0x388>
				if (in_buffer[2] == 43) {
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <interpreteComando+0x2f8>)
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	2b2b      	cmp	r3, #43	; 0x2b
 8000fb2:	d12f      	bne.n	8001014 <interpreteComando+0x290>
					stop2=0;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <interpreteComando+0x314>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc0:	4830      	ldr	r0, [pc, #192]	; (8001084 <interpreteComando+0x300>)
 8000fc2:	f001 fe7f 	bl	8002cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fcc:	482d      	ldr	r0, [pc, #180]	; (8001084 <interpreteComando+0x300>)
 8000fce:	f001 fe79 	bl	8002cc4 <HAL_GPIO_WritePin>
					if (in_buffer[3]) {
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <interpreteComando+0x2f8>)
 8000fd4:	78db      	ldrb	r3, [r3, #3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8098 	beq.w	800110c <interpreteComando+0x388>
						consigna = atof((char*)&in_buffer[3]);
 8000fdc:	482a      	ldr	r0, [pc, #168]	; (8001088 <interpreteComando+0x304>)
 8000fde:	f004 fc42 	bl	8005866 <atof>
 8000fe2:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <interpreteComando+0x308>)
 8000fec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ff0:	f7ff fce4 	bl	80009bc <__aeabi_dcmplt>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <interpreteComando+0x282>
							velocidad_consigna2 = consigna;
 8000ffa:	4a28      	ldr	r2, [pc, #160]	; (800109c <interpreteComando+0x318>)
 8000ffc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001000:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001004:	e082      	b.n	800110c <interpreteComando+0x388>
							velocidad_consigna2 = 35;
 8001006:	4a25      	ldr	r2, [pc, #148]	; (800109c <interpreteComando+0x318>)
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	4c1f      	ldr	r4, [pc, #124]	; (800108c <interpreteComando+0x308>)
 800100e:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001012:	e07b      	b.n	800110c <interpreteComando+0x388>
				} else if (in_buffer[2] == 45) {
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <interpreteComando+0x2f8>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	2b2d      	cmp	r3, #45	; 0x2d
 800101a:	d15a      	bne.n	80010d2 <interpreteComando+0x34e>
					stop2=0;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <interpreteComando+0x314>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <interpreteComando+0x300>)
 800102a:	f001 fe4b 	bl	8002cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <interpreteComando+0x300>)
 8001036:	f001 fe45 	bl	8002cc4 <HAL_GPIO_WritePin>
					if (in_buffer[3]) {
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <interpreteComando+0x2f8>)
 800103c:	78db      	ldrb	r3, [r3, #3]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d064      	beq.n	800110c <interpreteComando+0x388>
						consigna = atof((char*)&in_buffer[3]);
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <interpreteComando+0x304>)
 8001044:	f004 fc0f 	bl	8005866 <atof>
 8001048:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if( consigna==0){
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001058:	f7ff fca6 	bl	80009a8 <__aeabi_dcmpeq>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d01e      	beq.n	80010a0 <interpreteComando+0x31c>
							velocidad_consigna2=0;
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <interpreteComando+0x318>)
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f04f 0400 	mov.w	r4, #0
 800106c:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001070:	e04c      	b.n	800110c <interpreteComando+0x388>
 8001072:	bf00      	nop
 8001074:	20000290 	.word	0x20000290
 8001078:	41a00000 	.word	0x41a00000
 800107c:	20000390 	.word	0x20000390
 8001080:	20000024 	.word	0x20000024
 8001084:	40010800 	.word	0x40010800
 8001088:	20000393 	.word	0x20000393
 800108c:	40418000 	.word	0x40418000
 8001090:	20000280 	.word	0x20000280
 8001094:	c0418000 	.word	0xc0418000
 8001098:	20000028 	.word	0x20000028
 800109c:	20000288 	.word	0x20000288
						}else if (consigna < 35) {
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <interpreteComando+0x460>)
 80010a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010aa:	f7ff fc87 	bl	80009bc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <interpreteComando+0x340>
							velocidad_consigna2 = -consigna;
 80010b4:	68bc      	ldr	r4, [r7, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010bc:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <interpreteComando+0x464>)
 80010be:	e9c3 4500 	strd	r4, r5, [r3]
			break;
 80010c2:	e023      	b.n	800110c <interpreteComando+0x388>
							velocidad_consigna2 = -35;
 80010c4:	4a48      	ldr	r2, [pc, #288]	; (80011e8 <interpreteComando+0x464>)
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	4c48      	ldr	r4, [pc, #288]	; (80011ec <interpreteComando+0x468>)
 80010cc:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80010d0:	e01c      	b.n	800110c <interpreteComando+0x388>
				}else if(in_buffer[2] == 48){
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <interpreteComando+0x46c>)
 80010d4:	789b      	ldrb	r3, [r3, #2]
 80010d6:	2b30      	cmp	r3, #48	; 0x30
 80010d8:	d118      	bne.n	800110c <interpreteComando+0x388>
					velocidad_consigna2=0;
 80010da:	4a43      	ldr	r2, [pc, #268]	; (80011e8 <interpreteComando+0x464>)
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	f04f 0400 	mov.w	r4, #0
 80010e4:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	4841      	ldr	r0, [pc, #260]	; (80011f4 <interpreteComando+0x470>)
 80010f0:	f001 fde8 	bl	8002cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fa:	483e      	ldr	r0, [pc, #248]	; (80011f4 <interpreteComando+0x470>)
 80010fc:	f001 fde2 	bl	8002cc4 <HAL_GPIO_WritePin>
					stop2=0;
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <interpreteComando+0x474>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
			break;
 8001106:	e001      	b.n	800110c <interpreteComando+0x388>
			break;
 8001108:	bf00      	nop
 800110a:	e067      	b.n	80011dc <interpreteComando+0x458>
			break;
 800110c:	bf00      	nop
			break;
 800110e:	e065      	b.n	80011dc <interpreteComando+0x458>
//		case 'C':
//			control=1;
//			break;
		case 'p':
		case 'P':
			switch (in_buffer[1]) {
 8001110:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <interpreteComando+0x46c>)
 8001112:	785b      	ldrb	r3, [r3, #1]
 8001114:	2b31      	cmp	r3, #49	; 0x31
 8001116:	d002      	beq.n	800111e <interpreteComando+0x39a>
 8001118:	2b32      	cmp	r3, #50	; 0x32
 800111a:	d00d      	beq.n	8001138 <interpreteComando+0x3b4>
						KP2=(float) consigna;
						//printf("\r\n");
						break;
					default:
					//printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
					break;
 800111c:	e019      	b.n	8001152 <interpreteComando+0x3ce>
						consigna = atof((char *) &in_buffer[2]);
 800111e:	4837      	ldr	r0, [pc, #220]	; (80011fc <interpreteComando+0x478>)
 8001120:	f004 fba1 	bl	8005866 <atof>
 8001124:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP1=(float) consigna;
 8001128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112c:	f7ff fccc 	bl	8000ac8 <__aeabi_d2f>
 8001130:	4602      	mov	r2, r0
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <interpreteComando+0x47c>)
 8001134:	601a      	str	r2, [r3, #0]
						break;
 8001136:	e00c      	b.n	8001152 <interpreteComando+0x3ce>
						consigna = atof((char *) &in_buffer[2]);
 8001138:	4830      	ldr	r0, [pc, #192]	; (80011fc <interpreteComando+0x478>)
 800113a:	f004 fb94 	bl	8005866 <atof>
 800113e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP2=(float) consigna;
 8001142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001146:	f7ff fcbf 	bl	8000ac8 <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <interpreteComando+0x480>)
 800114e:	601a      	str	r2, [r3, #0]
						break;
 8001150:	bf00      	nop

			}
			break;
 8001152:	e043      	b.n	80011dc <interpreteComando+0x458>
		case 'i':
		case 'I':
			switch (in_buffer[1]) {
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <interpreteComando+0x46c>)
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	2b31      	cmp	r3, #49	; 0x31
 800115a:	d002      	beq.n	8001162 <interpreteComando+0x3de>
 800115c:	2b32      	cmp	r3, #50	; 0x32
 800115e:	d00d      	beq.n	800117c <interpreteComando+0x3f8>
						KI2=(float) consigna;
						//printf("\r\n");
						break;
					default:
						//printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
						break;
 8001160:	e019      	b.n	8001196 <interpreteComando+0x412>
						consigna = atof((char *)&in_buffer[2]);
 8001162:	4826      	ldr	r0, [pc, #152]	; (80011fc <interpreteComando+0x478>)
 8001164:	f004 fb7f 	bl	8005866 <atof>
 8001168:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI1=(float) consigna;
 800116c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001170:	f7ff fcaa 	bl	8000ac8 <__aeabi_d2f>
 8001174:	4602      	mov	r2, r0
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <interpreteComando+0x484>)
 8001178:	601a      	str	r2, [r3, #0]
						break;
 800117a:	e00c      	b.n	8001196 <interpreteComando+0x412>
						consigna = atof((char *)&in_buffer[2]);
 800117c:	481f      	ldr	r0, [pc, #124]	; (80011fc <interpreteComando+0x478>)
 800117e:	f004 fb72 	bl	8005866 <atof>
 8001182:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI2=(float) consigna;
 8001186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800118a:	f7ff fc9d 	bl	8000ac8 <__aeabi_d2f>
 800118e:	4602      	mov	r2, r0
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <interpreteComando+0x488>)
 8001192:	601a      	str	r2, [r3, #0]
						break;
 8001194:	bf00      	nop
			}
			break;
 8001196:	e021      	b.n	80011dc <interpreteComando+0x458>
		case 'd':
		case 'D':
			switch (in_buffer[1]) {
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <interpreteComando+0x46c>)
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	2b31      	cmp	r3, #49	; 0x31
 800119e:	d002      	beq.n	80011a6 <interpreteComando+0x422>
 80011a0:	2b32      	cmp	r3, #50	; 0x32
 80011a2:	d00d      	beq.n	80011c0 <interpreteComando+0x43c>
						KD2=(float) consigna;
						//printf("\r\n");
						break;
					default:
						//printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
						break;
 80011a4:	e019      	b.n	80011da <interpreteComando+0x456>
						consigna = atof((char *)&in_buffer[2]);
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <interpreteComando+0x478>)
 80011a8:	f004 fb5d 	bl	8005866 <atof>
 80011ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD1=(float) consigna;
 80011b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011b4:	f7ff fc88 	bl	8000ac8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <interpreteComando+0x48c>)
 80011bc:	601a      	str	r2, [r3, #0]
						break;
 80011be:	e00c      	b.n	80011da <interpreteComando+0x456>
						consigna = atof((char *)&in_buffer[2]);
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <interpreteComando+0x478>)
 80011c2:	f004 fb50 	bl	8005866 <atof>
 80011c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD2=(float) consigna;
 80011ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ce:	f7ff fc7b 	bl	8000ac8 <__aeabi_d2f>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <interpreteComando+0x490>)
 80011d6:	601a      	str	r2, [r3, #0]
						break;
 80011d8:	bf00      	nop
			}
			break;
 80011da:	bf00      	nop
//			control=0;
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//			break;
	}

}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}
 80011e4:	40418000 	.word	0x40418000
 80011e8:	20000288 	.word	0x20000288
 80011ec:	c0418000 	.word	0xc0418000
 80011f0:	20000390 	.word	0x20000390
 80011f4:	40010800 	.word	0x40010800
 80011f8:	20000028 	.word	0x20000028
 80011fc:	20000392 	.word	0x20000392
 8001200:	20000008 	.word	0x20000008
 8001204:	20000014 	.word	0x20000014
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000018 	.word	0x20000018
 8001210:	20000010 	.word	0x20000010
 8001214:	2000001c 	.word	0x2000001c

08001218 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8001218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800121c:	b087      	sub	sp, #28
 800121e:	af00      	add	r7, sp, #0
 8001220:	6178      	str	r0, [r7, #20]
	if(htim->Instance == TIM1){
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001228:	4293      	cmp	r3, r2
 800122a:	f040 82f2 	bne.w	8001812 <HAL_TIM_PeriodElapsedCallback+0x5fa>
		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 800122e:	4b97      	ldr	r3, [pc, #604]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	461a      	mov	r2, r3
 800123c:	4b94      	ldr	r3, [pc, #592]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	4413      	add	r3, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4b93      	ldr	r3, [pc, #588]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001248:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 800124a:	4b92      	ldr	r3, [pc, #584]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b92      	ldr	r3, [pc, #584]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f8d5 	bl	8000404 <__aeabi_i2d>
 800125a:	4b90      	ldr	r3, [pc, #576]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800125c:	cb18      	ldmia	r3, {r3, r4}
 800125e:	461a      	mov	r2, r3
 8001260:	4623      	mov	r3, r4
 8001262:	f7ff fa63 	bl	800072c <__aeabi_ddiv>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	4a8d      	ldr	r2, [pc, #564]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800126c:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 8001270:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001276:	a382      	add	r3, pc, #520	; (adr r3, 8001480 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fa56 	bl	800072c <__aeabi_ddiv>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b85      	ldr	r3, [pc, #532]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800128e:	f7ff f923 	bl	80004d8 <__aeabi_dmul>
 8001292:	4603      	mov	r3, r0
 8001294:	460c      	mov	r4, r1
 8001296:	4a84      	ldr	r2, [pc, #528]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001298:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 800129c:	4b7d      	ldr	r3, [pc, #500]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a7d      	ldr	r2, [pc, #500]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80012a2:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 80012a4:	4b81      	ldr	r3, [pc, #516]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x294>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	4413      	add	r3, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b7d      	ldr	r3, [pc, #500]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012be:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b7c      	ldr	r3, [pc, #496]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f89a 	bl	8000404 <__aeabi_i2d>
 80012d0:	4b72      	ldr	r3, [pc, #456]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80012d2:	cb18      	ldmia	r3, {r3, r4}
 80012d4:	461a      	mov	r2, r3
 80012d6:	4623      	mov	r3, r4
 80012d8:	f7ff fa28 	bl	800072c <__aeabi_ddiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	4a76      	ldr	r2, [pc, #472]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012e2:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 80012e6:	4b75      	ldr	r3, [pc, #468]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ec:	a364      	add	r3, pc, #400	; (adr r3, 8001480 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fa1b 	bl	800072c <__aeabi_ddiv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	4618      	mov	r0, r3
 80012fc:	4621      	mov	r1, r4
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b68      	ldr	r3, [pc, #416]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001304:	f7ff f8e8 	bl	80004d8 <__aeabi_dmul>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	4a6c      	ldr	r2, [pc, #432]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800130e:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 8001312:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a68      	ldr	r2, [pc, #416]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001318:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 800131a:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f040 82b6 	bne.w	8001890 <HAL_TIM_PeriodElapsedCallback+0x678>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 8001324:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800132c:	cb18      	ldmia	r3, {r3, r4}
 800132e:	461a      	mov	r2, r3
 8001330:	4623      	mov	r3, r4
 8001332:	f7fe ff19 	bl	8000168 <__aeabi_dsub>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4a64      	ldr	r2, [pc, #400]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800133c:	e9c2 3400 	strd	r3, r4, [r2]
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//			}else if(error_vel_act>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
			if(stop1==1){
 8001340:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x13e>
			  Ui_anterior=0;
 8001348:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	f04f 0400 	mov.w	r4, #0
 8001352:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f864 	bl	8000428 <__aeabi_f2d>
 8001360:	4b5a      	ldr	r3, [pc, #360]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001362:	cb18      	ldmia	r3, {r3, r4}
 8001364:	461a      	mov	r2, r3
 8001366:	4623      	mov	r3, r4
 8001368:	f7ff f8b6 	bl	80004d8 <__aeabi_dmul>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001372:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_ant);
 8001376:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f854 	bl	8000428 <__aeabi_f2d>
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001382:	cb18      	ldmia	r3, {r3, r4}
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	f7ff f8a6 	bl	80004d8 <__aeabi_dmul>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	4618      	mov	r0, r3
 8001392:	4621      	mov	r1, r4
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001396:	cb18      	ldmia	r3, {r3, r4}
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	f7ff f89c 	bl	80004d8 <__aeabi_dmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	4618      	mov	r0, r3
 80013a6:	4621      	mov	r1, r4
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80013aa:	cb18      	ldmia	r3, {r3, r4}
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	f7fe fedc 	bl	800016c <__adddf3>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80013ba:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f830 	bl	8000428 <__aeabi_f2d>
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013ca:	cb18      	ldmia	r3, {r3, r4}
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	f7ff f9ac 	bl	800072c <__aeabi_ddiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	461d      	mov	r5, r3
 80013da:	4626      	mov	r6, r4
 80013dc:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80013e4:	cb18      	ldmia	r3, {r3, r4}
 80013e6:	461a      	mov	r2, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	f7fe febd 	bl	8000168 <__aeabi_dsub>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	4628      	mov	r0, r5
 80013f8:	4631      	mov	r1, r6
 80013fa:	f7ff f86d 	bl	80004d8 <__aeabi_dmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4a3b      	ldr	r2, [pc, #236]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001404:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna>0){
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	f7ff faef 	bl	80009f8 <__aeabi_dcmpgt>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d06b      	beq.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid +(Up + Ui_actual + Ud));
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe ffdd 	bl	80003e4 <__aeabi_ui2d>
 800142a:	4605      	mov	r5, r0
 800142c:	460e      	mov	r6, r1
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001436:	cb18      	ldmia	r3, {r3, r4}
 8001438:	461a      	mov	r2, r3
 800143a:	4623      	mov	r3, r4
 800143c:	f7fe fe96 	bl	800016c <__adddf3>
 8001440:	4603      	mov	r3, r0
 8001442:	460c      	mov	r4, r1
 8001444:	4618      	mov	r0, r3
 8001446:	4621      	mov	r1, r4
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800144a:	cb18      	ldmia	r3, {r3, r4}
 800144c:	461a      	mov	r2, r3
 800144e:	4623      	mov	r3, r4
 8001450:	f7fe fe8c 	bl	800016c <__adddf3>
 8001454:	4603      	mov	r3, r0
 8001456:	460c      	mov	r4, r1
 8001458:	461a      	mov	r2, r3
 800145a:	4623      	mov	r3, r4
 800145c:	4628      	mov	r0, r5
 800145e:	4631      	mov	r1, r6
 8001460:	f7fe fe84 	bl	800016c <__adddf3>
 8001464:	4603      	mov	r3, r0
 8001466:	460c      	mov	r4, r1
 8001468:	469a      	mov	sl, r3
 800146a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800146e:	4650      	mov	r0, sl
 8001470:	4659      	mov	r1, fp
 8001472:	f7ff fb09 	bl	8000a88 <__aeabi_d2uiz>
 8001476:	4602      	mov	r2, r0
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e07a      	b.n	8001574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 800147e:	bf00      	nop
 8001480:	00000000 	.word	0x00000000
 8001484:	40bce000 	.word	0x40bce000
 8001488:	40012c00 	.word	0x40012c00
 800148c:	20000228 	.word	0x20000228
 8001490:	200003a0 	.word	0x200003a0
 8001494:	20000230 	.word	0x20000230
 8001498:	2000022c 	.word	0x2000022c
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000240 	.word	0x20000240
 80014a4:	404e0000 	.word	0x404e0000
 80014a8:	20000248 	.word	0x20000248
 80014ac:	20000234 	.word	0x20000234
 80014b0:	20000344 	.word	0x20000344
 80014b4:	2000023c 	.word	0x2000023c
 80014b8:	20000238 	.word	0x20000238
 80014bc:	20000250 	.word	0x20000250
 80014c0:	20000258 	.word	0x20000258
 80014c4:	20000020 	.word	0x20000020
 80014c8:	20000280 	.word	0x20000280
 80014cc:	20000260 	.word	0x20000260
 80014d0:	20000024 	.word	0x20000024
 80014d4:	20000298 	.word	0x20000298
 80014d8:	20000008 	.word	0x20000008
 80014dc:	200002a8 	.word	0x200002a8
 80014e0:	2000000c 	.word	0x2000000c
 80014e4:	20000268 	.word	0x20000268
 80014e8:	200002a0 	.word	0x200002a0
 80014ec:	20000010 	.word	0x20000010
 80014f0:	200002b0 	.word	0x200002b0
 80014f4:	200002d8 	.word	0x200002d8
			}else if(velocidad_consigna<0){
 80014f8:	4ba0      	ldr	r3, [pc, #640]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x564>)
 80014fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f7ff fa59 	bl	80009bc <__aeabi_dcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d02e      	beq.n	800156e <HAL_TIM_PeriodElapsedCallback+0x356>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid -(Up + Ui_actual + Ud));
 8001510:	4b9b      	ldr	r3, [pc, #620]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff65 	bl	80003e4 <__aeabi_ui2d>
 800151a:	4605      	mov	r5, r0
 800151c:	460e      	mov	r6, r1
 800151e:	4b99      	ldr	r3, [pc, #612]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001524:	4b98      	ldr	r3, [pc, #608]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001526:	cb18      	ldmia	r3, {r3, r4}
 8001528:	461a      	mov	r2, r3
 800152a:	4623      	mov	r3, r4
 800152c:	f7fe fe1e 	bl	800016c <__adddf3>
 8001530:	4603      	mov	r3, r0
 8001532:	460c      	mov	r4, r1
 8001534:	4618      	mov	r0, r3
 8001536:	4621      	mov	r1, r4
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800153a:	cb18      	ldmia	r3, {r3, r4}
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	f7fe fe14 	bl	800016c <__adddf3>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	461a      	mov	r2, r3
 800154a:	4623      	mov	r3, r4
 800154c:	4628      	mov	r0, r5
 800154e:	4631      	mov	r1, r6
 8001550:	f7fe fe0a 	bl	8000168 <__aeabi_dsub>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4698      	mov	r8, r3
 800155a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800155e:	4640      	mov	r0, r8
 8001560:	4649      	mov	r1, r9
 8001562:	f7ff fa91 	bl	8000a88 <__aeabi_d2uiz>
 8001566:	4602      	mov	r2, r0
 8001568:	4b85      	ldr	r3, [pc, #532]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e002      	b.n	8001574 <HAL_TIM_PeriodElapsedCallback+0x35c>
			}else{
				duty_cycle_pid = 0;
 800156e:	4b84      	ldr	r3, [pc, #528]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
			}
      if(duty_cycle_pid > 14000){
 8001574:	4b82      	ldr	r3, [pc, #520]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800157c:	4293      	cmp	r3, r2
 800157e:	d903      	bls.n	8001588 <HAL_TIM_PeriodElapsedCallback+0x370>
				duty_cycle_pid=14000;
 8001580:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001582:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001586:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8001588:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a7c      	ldr	r2, [pc, #496]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8001592:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001594:	cb18      	ldmia	r3, {r3, r4}
 8001596:	4a7f      	ldr	r2, [pc, #508]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001598:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 800159c:	4b7e      	ldr	r3, [pc, #504]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800159e:	cb18      	ldmia	r3, {r3, r4}
 80015a0:	4a7e      	ldr	r2, [pc, #504]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x584>)
 80015a2:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 80015a6:	4b7e      	ldr	r3, [pc, #504]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80015a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ac:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80015ae:	cb18      	ldmia	r3, {r3, r4}
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	f7fe fdd8 	bl	8000168 <__aeabi_dsub>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4a7a      	ldr	r2, [pc, #488]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80015be:	e9c2 3400 	strd	r3, r4, [r2]
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
//			}else if(error_vel_act2>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
//     }
			if(stop2==1){
 80015c2:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d106      	bne.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				Ui_anterior2=0;
 80015ca:	4a79      	ldr	r2, [pc, #484]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f04f 0400 	mov.w	r4, #0
 80015d4:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2=KP2 * error_vel_act2;
 80015d8:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff23 	bl	8000428 <__aeabi_f2d>
 80015e2:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80015e4:	cb18      	ldmia	r3, {r3, r4}
 80015e6:	461a      	mov	r2, r3
 80015e8:	4623      	mov	r3, r4
 80015ea:	f7fe ff75 	bl	80004d8 <__aeabi_dmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	4a71      	ldr	r2, [pc, #452]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80015f4:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 80015f8:	4b70      	ldr	r3, [pc, #448]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff13 	bl	8000428 <__aeabi_f2d>
 8001602:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001604:	cb18      	ldmia	r3, {r3, r4}
 8001606:	461a      	mov	r2, r3
 8001608:	4623      	mov	r3, r4
 800160a:	f7fe ff65 	bl	80004d8 <__aeabi_dmul>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	4618      	mov	r0, r3
 8001614:	4621      	mov	r1, r4
 8001616:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001618:	cb18      	ldmia	r3, {r3, r4}
 800161a:	461a      	mov	r2, r3
 800161c:	4623      	mov	r3, r4
 800161e:	f7fe ff5b 	bl	80004d8 <__aeabi_dmul>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	4618      	mov	r0, r3
 8001628:	4621      	mov	r1, r4
 800162a:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800162c:	cb18      	ldmia	r3, {r3, r4}
 800162e:	461a      	mov	r2, r3
 8001630:	4623      	mov	r3, r4
 8001632:	f7fe fd9b 	bl	800016c <__adddf3>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800163c:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe feef 	bl	8000428 <__aeabi_f2d>
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800164c:	cb18      	ldmia	r3, {r3, r4}
 800164e:	461a      	mov	r2, r3
 8001650:	4623      	mov	r3, r4
 8001652:	f7ff f86b 	bl	800072c <__aeabi_ddiv>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	461d      	mov	r5, r3
 800165c:	4626      	mov	r6, r4
 800165e:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001664:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001666:	cb18      	ldmia	r3, {r3, r4}
 8001668:	461a      	mov	r2, r3
 800166a:	4623      	mov	r3, r4
 800166c:	f7fe fd7c 	bl	8000168 <__aeabi_dsub>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	461a      	mov	r2, r3
 8001676:	4623      	mov	r3, r4
 8001678:	4628      	mov	r0, r5
 800167a:	4631      	mov	r1, r6
 800167c:	f7fe ff2c 	bl	80004d8 <__aeabi_dmul>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001686:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna2 > 0){
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800168c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	f7ff f9ae 	bl	80009f8 <__aeabi_dcmpgt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d02f      	beq.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x4ea>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 +(Up2 + Ui_actual2 + Ud2));
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fe9c 	bl	80003e4 <__aeabi_ui2d>
 80016ac:	4605      	mov	r5, r0
 80016ae:	460e      	mov	r6, r1
 80016b0:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80016b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b6:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80016b8:	cb18      	ldmia	r3, {r3, r4}
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	f7fe fd55 	bl	800016c <__adddf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	4618      	mov	r0, r3
 80016c8:	4621      	mov	r1, r4
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80016cc:	cb18      	ldmia	r3, {r3, r4}
 80016ce:	461a      	mov	r2, r3
 80016d0:	4623      	mov	r3, r4
 80016d2:	f7fe fd4b 	bl	800016c <__adddf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	461a      	mov	r2, r3
 80016dc:	4623      	mov	r3, r4
 80016de:	4628      	mov	r0, r5
 80016e0:	4631      	mov	r1, r6
 80016e2:	f7fe fd43 	bl	800016c <__adddf3>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f6:	f7ff f9c7 	bl	8000a88 <__aeabi_d2uiz>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e06d      	b.n	80017de <HAL_TIM_PeriodElapsedCallback+0x5c6>
			}else if(velocidad_consigna2 < 0){
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	f7ff f954 	bl	80009bc <__aeabi_dcmplt>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d05e      	beq.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0x5c0>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 -(Up2 + Ui_actual2 + Ud2));
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe60 	bl	80003e4 <__aeabi_ui2d>
 8001724:	4605      	mov	r5, r0
 8001726:	460e      	mov	r6, r1
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800172a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001730:	cb18      	ldmia	r3, {r3, r4}
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	f7fe fd19 	bl	800016c <__adddf3>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	4618      	mov	r0, r3
 8001740:	4621      	mov	r1, r4
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001744:	cb18      	ldmia	r3, {r3, r4}
 8001746:	461a      	mov	r2, r3
 8001748:	4623      	mov	r3, r4
 800174a:	f7fe fd0f 	bl	800016c <__adddf3>
 800174e:	4603      	mov	r3, r0
 8001750:	460c      	mov	r4, r1
 8001752:	461a      	mov	r2, r3
 8001754:	4623      	mov	r3, r4
 8001756:	4628      	mov	r0, r5
 8001758:	4631      	mov	r1, r6
 800175a:	f7fe fd05 	bl	8000168 <__aeabi_dsub>
 800175e:	4603      	mov	r3, r0
 8001760:	460c      	mov	r4, r1
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800176e:	f7ff f98b 	bl	8000a88 <__aeabi_d2uiz>
 8001772:	4602      	mov	r2, r0
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e031      	b.n	80017de <HAL_TIM_PeriodElapsedCallback+0x5c6>
 800177a:	bf00      	nop
 800177c:	20000280 	.word	0x20000280
 8001780:	200002d8 	.word	0x200002d8
 8001784:	200002a8 	.word	0x200002a8
 8001788:	200002a0 	.word	0x200002a0
 800178c:	200002b0 	.word	0x200002b0
 8001790:	20000434 	.word	0x20000434
 8001794:	20000298 	.word	0x20000298
 8001798:	20000260 	.word	0x20000260
 800179c:	20000268 	.word	0x20000268
 80017a0:	20000288 	.word	0x20000288
 80017a4:	20000258 	.word	0x20000258
 80017a8:	20000270 	.word	0x20000270
 80017ac:	20000028 	.word	0x20000028
 80017b0:	200002b8 	.word	0x200002b8
 80017b4:	20000014 	.word	0x20000014
 80017b8:	200002c8 	.word	0x200002c8
 80017bc:	20000018 	.word	0x20000018
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000278 	.word	0x20000278
 80017c8:	200002c0 	.word	0x200002c0
 80017cc:	2000001c 	.word	0x2000001c
 80017d0:	200002d0 	.word	0x200002d0
 80017d4:	200002dc 	.word	0x200002dc
			}else{
				duty_cycle_pid2 = 0;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
			}
			if(duty_cycle_pid2 > 14000){
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d903      	bls.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0x5da>
				duty_cycle_pid2=14000;
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80017ec:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80017f0:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80017fe:	cb18      	ldmia	r3, {r3, r4}
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001802:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001808:	cb18      	ldmia	r3, {r3, r4}
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x698>)
 800180c:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 8001810:	e03e      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM3){
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d11a      	bne.n	8001852 <HAL_TIM_PeriodElapsedCallback+0x63a>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	429a      	cmp	r2, r3
 800182c:	d908      	bls.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x628>
			contOUFlow--;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001836:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 800183a:	f004 fbe3 	bl	8006004 <puts>
}
 800183e:	e027      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow++;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001848:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 800184a:	481e      	ldr	r0, [pc, #120]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800184c:	f004 fbda 	bl	8006004 <puts>
}
 8001850:	e01e      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM4){
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d119      	bne.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x678>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	429a      	cmp	r2, r3
 800186c:	d908      	bls.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x668>
			contOUFlow2--;
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001876:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800187a:	f004 fbc3 	bl	8006004 <puts>
}
 800187e:	e007      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow2++;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001888:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800188c:	f004 fbba 	bl	8006004 <puts>
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	200002dc 	.word	0x200002dc
 80018a0:	20000434 	.word	0x20000434
 80018a4:	200002c0 	.word	0x200002c0
 80018a8:	200002b8 	.word	0x200002b8
 80018ac:	20000270 	.word	0x20000270
 80018b0:	20000278 	.word	0x20000278
 80018b4:	40000400 	.word	0x40000400
 80018b8:	200003a0 	.word	0x200003a0
 80018bc:	20000228 	.word	0x20000228
 80018c0:	08009080 	.word	0x08009080
 80018c4:	08009094 	.word	0x08009094
 80018c8:	40000800 	.word	0x40000800
 80018cc:	20000344 	.word	0x20000344
 80018d0:	20000234 	.word	0x20000234
 80018d4:	080090a8 	.word	0x080090a8
 80018d8:	080090bc 	.word	0x080090bc

080018dc <HAL_SPI_RxCpltCallback>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	num_spi=num_spi+10;
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <HAL_SPI_RxCpltCallback+0xd8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4933      	ldr	r1, [pc, #204]	; (80019b8 <HAL_SPI_RxCpltCallback+0xdc>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f942 	bl	8000b74 <__addsf3>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_SPI_RxCpltCallback+0xd8>)
 80018f6:	601a      	str	r2, [r3, #0]
	  if (hspi->Instance == SPI2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <HAL_SPI_RxCpltCallback+0xe0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d153      	bne.n	80019aa <HAL_SPI_RxCpltCallback+0xce>
	  {
		  //num_spi=num_spi+10;
		  switch(byte){
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_SPI_RxCpltCallback+0xe4>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b0d      	cmp	r3, #13
 8001908:	d010      	beq.n	800192c <HAL_SPI_RxCpltCallback+0x50>
 800190a:	2b0d      	cmp	r3, #13
 800190c:	dc02      	bgt.n	8001914 <HAL_SPI_RxCpltCallback+0x38>
 800190e:	2b08      	cmp	r3, #8
 8001910:	d01c      	beq.n	800194c <HAL_SPI_RxCpltCallback+0x70>
 8001912:	e02a      	b.n	800196a <HAL_SPI_RxCpltCallback+0x8e>
 8001914:	2b3a      	cmp	r3, #58	; 0x3a
 8001916:	d002      	beq.n	800191e <HAL_SPI_RxCpltCallback+0x42>
 8001918:	2b3b      	cmp	r3, #59	; 0x3b
 800191a:	d007      	beq.n	800192c <HAL_SPI_RxCpltCallback+0x50>
 800191c:	e025      	b.n	800196a <HAL_SPI_RxCpltCallback+0x8e>
		  	  case ':': //Comienzo de la trama
				  flagRx = 1;
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_SPI_RxCpltCallback+0xe8>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
				  indRx = 0;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
				  //imprimir = 0;
				  //HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
				  break;
 800192a:	e039      	b.n	80019a0 <HAL_SPI_RxCpltCallback+0xc4>
		  	  case '\r': //Retorno, fin de trama.
		  	  case ';':  //Fin de trama.
		  		  //HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
		  		  if(flagRx){
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_SPI_RxCpltCallback+0xe8>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d030      	beq.n	8001996 <HAL_SPI_RxCpltCallback+0xba>
		  			flagRx = 0;
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_SPI_RxCpltCallback+0xe8>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
		  			in_buffer[indRx] = 0;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_SPI_RxCpltCallback+0xf0>)
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]
		  			interpreteComando();
 8001946:	f7ff fa1d 	bl	8000d84 <interpreteComando>
		  		  }
		  		  break;
 800194a:	e024      	b.n	8001996 <HAL_SPI_RxCpltCallback+0xba>
		  	  case 8: //Retroceso es permitido de esta manera.
		  		  if(flagRx){
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_SPI_RxCpltCallback+0xe8>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d022      	beq.n	800199a <HAL_SPI_RxCpltCallback+0xbe>
		  			  if(indRx > 0){
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01e      	beq.n	800199a <HAL_SPI_RxCpltCallback+0xbe>
		  				indRx--;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 8001966:	701a      	strb	r2, [r3, #0]
		  			  }
		  		  }
		  		  break;
 8001968:	e017      	b.n	800199a <HAL_SPI_RxCpltCallback+0xbe>
		  	  default: //Almacenamiento de la trama.
		  		  //HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
		  		  if(flagRx){
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_SPI_RxCpltCallback+0xe8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_SPI_RxCpltCallback+0xc2>
		  			  in_buffer[indRx] = byte;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_SPI_RxCpltCallback+0xe4>)
 800197a:	7819      	ldrb	r1, [r3, #0]
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_SPI_RxCpltCallback+0xf0>)
 800197e:	5499      	strb	r1, [r3, r2]
		  			  if(indRx < MAX_BUFFER - 1){
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d80a      	bhi.n	800199e <HAL_SPI_RxCpltCallback+0xc2>
		  				indRx++;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_SPI_RxCpltCallback+0xec>)
 8001992:	701a      	strb	r2, [r3, #0]
		  			  }

		  		  }
		  		break;
 8001994:	e003      	b.n	800199e <HAL_SPI_RxCpltCallback+0xc2>
		  		  break;
 8001996:	bf00      	nop
 8001998:	e002      	b.n	80019a0 <HAL_SPI_RxCpltCallback+0xc4>
		  		  break;
 800199a:	bf00      	nop
 800199c:	e000      	b.n	80019a0 <HAL_SPI_RxCpltCallback+0xc4>
		  		break;
 800199e:	bf00      	nop
		  }

	    /* Receive one byte in interrupt mode */
		HAL_SPI_Receive_IT(&hspi2, &byte, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	4907      	ldr	r1, [pc, #28]	; (80019c0 <HAL_SPI_RxCpltCallback+0xe4>)
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <HAL_SPI_RxCpltCallback+0xf4>)
 80019a6:	f001 ff4f 	bl	8003848 <HAL_SPI_Receive_IT>
	  }
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000290 	.word	0x20000290
 80019b8:	41200000 	.word	0x41200000
 80019bc:	40003800 	.word	0x40003800
 80019c0:	200003e8 	.word	0x200003e8
 80019c4:	2000039e 	.word	0x2000039e
 80019c8:	20000224 	.word	0x20000224
 80019cc:	20000390 	.word	0x20000390
 80019d0:	200002ec 	.word	0x200002ec

080019d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019da:	f000 fe11 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019de:	f000 f899 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e2:	f000 fad9 	bl	8001f98 <MX_GPIO_Init>
  MX_TIM2_Init();
 80019e6:	f000 f9af 	bl	8001d48 <MX_TIM2_Init>
  MX_TIM1_Init();
 80019ea:	f000 f90f 	bl	8001c0c <MX_TIM1_Init>
  MX_TIM3_Init();
 80019ee:	f000 fa2b 	bl	8001e48 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019f2:	f000 fa7d 	bl	8001ef0 <MX_TIM4_Init>
  MX_SPI2_Init();
 80019f6:	f000 f8d3 	bl	8001ba0 <MX_SPI2_Init>

	//RetargetInit(&huart2);
	//HAL_UART_Receive_IT(&huart2, &byte, 1);
    //HAL_SPI_Receive_IT(&hspi2, &byte, 1);

	HAL_TIM_Base_Start_IT(&htim1);
 80019fa:	483c      	ldr	r0, [pc, #240]	; (8001aec <main+0x118>)
 80019fc:	f002 fcb2 	bl	8004364 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001a00:	2100      	movs	r1, #0
 8001a02:	483a      	ldr	r0, [pc, #232]	; (8001aec <main+0x118>)
 8001a04:	f002 fd58 	bl	80044b8 <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 8001a08:	4839      	ldr	r0, [pc, #228]	; (8001af0 <main+0x11c>)
 8001a0a:	f002 fc61 	bl	80042d0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4837      	ldr	r0, [pc, #220]	; (8001af0 <main+0x11c>)
 8001a12:	f002 fe91 	bl	8004738 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001a16:	2108      	movs	r1, #8
 8001a18:	4835      	ldr	r0, [pc, #212]	; (8001af0 <main+0x11c>)
 8001a1a:	f002 fe8d 	bl	8004738 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8001a1e:	4835      	ldr	r0, [pc, #212]	; (8001af4 <main+0x120>)
 8001a20:	f002 fca0 	bl	8004364 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001a24:	213c      	movs	r1, #60	; 0x3c
 8001a26:	4833      	ldr	r0, [pc, #204]	; (8001af4 <main+0x120>)
 8001a28:	f003 f810 	bl	8004a4c <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 8001a2c:	4832      	ldr	r0, [pc, #200]	; (8001af8 <main+0x124>)
 8001a2e:	f002 fc99 	bl	8004364 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001a32:	213c      	movs	r1, #60	; 0x3c
 8001a34:	4830      	ldr	r0, [pc, #192]	; (8001af8 <main+0x124>)
 8001a36:	f003 f809 	bl	8004a4c <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	482f      	ldr	r0, [pc, #188]	; (8001afc <main+0x128>)
 8001a40:	f001 f940 	bl	8002cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2120      	movs	r1, #32
 8001a48:	482c      	ldr	r0, [pc, #176]	; (8001afc <main+0x128>)
 8001a4a:	f001 f93b 	bl	8002cc4 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a54:	4829      	ldr	r0, [pc, #164]	; (8001afc <main+0x128>)
 8001a56:	f001 f935 	bl	8002cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a60:	4826      	ldr	r0, [pc, #152]	; (8001afc <main+0x128>)
 8001a62:	f001 f92f 	bl	8002cc4 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <main+0x120>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <main+0x124>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t out_buffer[17] = {':','w','1','+','2','5',';',':','w','2','+','2','5',';',':','w','?'};
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <main+0x12c>)
 8001a78:	1d3c      	adds	r4, r7, #4
 8001a7a:	461d      	mov	r5, r3
 8001a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a8a:	481e      	ldr	r0, [pc, #120]	; (8001b04 <main+0x130>)
 8001a8c:	f001 f91a 	bl	8002cc4 <HAL_GPIO_WritePin>
	//HAL_SPI_Receive_IT(&hspi2, in_buffer, 14);
	HAL_SPI_Receive_IT(&hspi2, &byte, 1);
 8001a90:	2201      	movs	r2, #1
 8001a92:	491d      	ldr	r1, [pc, #116]	; (8001b08 <main+0x134>)
 8001a94:	481d      	ldr	r0, [pc, #116]	; (8001b0c <main+0x138>)
 8001a96:	f001 fed7 	bl	8003848 <HAL_SPI_Receive_IT>
	while (1) {
		//transmision spi

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <main+0x130>)
 8001aa2:	f001 f90f 	bl	8002cc4 <HAL_GPIO_WritePin>
		//HAL_SPI_TransmitReceive_IT(&hspi2, out_buffer, in_buffer, 14);
		HAL_SPI_Transmit(&hspi2, out_buffer, 17, 1);
 8001aa6:	1d39      	adds	r1, r7, #4
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	2211      	movs	r2, #17
 8001aac:	4817      	ldr	r0, [pc, #92]	; (8001b0c <main+0x138>)
 8001aae:	f001 fd8f 	bl	80035d0 <HAL_SPI_Transmit>
		//HAL_SPI_Receive_IT(&hspi2, in_buffer, 14);
		HAL_Delay(1000);
 8001ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab6:	f000 fe05 	bl	80026c4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001aba:	2201      	movs	r2, #1
 8001abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <main+0x130>)
 8001ac2:	f001 f8ff 	bl	8002cc4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001acc:	4810      	ldr	r0, [pc, #64]	; (8001b10 <main+0x13c>)
 8001ace:	f001 f8f9 	bl	8002cc4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001ad2:	2064      	movs	r0, #100	; 0x64
 8001ad4:	f000 fdf6 	bl	80026c4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ade:	480c      	ldr	r0, [pc, #48]	; (8001b10 <main+0x13c>)
 8001ae0:	f001 f8f0 	bl	8002cc4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001ae4:	2064      	movs	r0, #100	; 0x64
 8001ae6:	f000 fded 	bl	80026c4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001aea:	e7d6      	b.n	8001a9a <main+0xc6>
 8001aec:	200003ec 	.word	0x200003ec
 8001af0:	20000434 	.word	0x20000434
 8001af4:	200003a0 	.word	0x200003a0
 8001af8:	20000344 	.word	0x20000344
 8001afc:	40010800 	.word	0x40010800
 8001b00:	080090d0 	.word	0x080090d0
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	200003e8 	.word	0x200003e8
 8001b0c:	200002ec 	.word	0x200002ec
 8001b10:	40011000 	.word	0x40011000

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b090      	sub	sp, #64	; 0x40
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	2228      	movs	r2, #40	; 0x28
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fecc 	bl	80058c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b44:	2301      	movs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	f107 0318 	add.w	r3, r7, #24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 f8c9 	bl	8002cf4 <HAL_RCC_OscConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b68:	f000 fa9c 	bl	80020a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fb34 	bl	80031f4 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b92:	f000 fa87 	bl	80020a4 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3740      	adds	r7, #64	; 0x40
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <MX_SPI2_Init+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bd4:	2238      	movs	r2, #56	; 0x38
 8001bd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bec:	220a      	movs	r2, #10
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_SPI2_Init+0x64>)
 8001bf2:	f001 fc69 	bl	80034c8 <HAL_SPI_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bfc:	f000 fa52 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002ec 	.word	0x200002ec
 8001c08:	40003800 	.word	0x40003800

08001c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2220      	movs	r2, #32
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fe3b 	bl	80058c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c4c:	4a3d      	ldr	r2, [pc, #244]	; (8001d44 <MX_TIM1_Init+0x138>)
 8001c4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c52:	220b      	movs	r2, #11
 8001c54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c5e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001c62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c76:	4832      	ldr	r0, [pc, #200]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c78:	f002 fadb 	bl	8004232 <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c82:	f000 fa0f 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c90:	4619      	mov	r1, r3
 8001c92:	482b      	ldr	r0, [pc, #172]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c94:	f003 f9a6 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c9e:	f000 fa01 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001ca2:	4827      	ldr	r0, [pc, #156]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001ca4:	f002 fbb0 	bl	8004408 <HAL_TIM_OC_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001cae:	f000 f9f9 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481f      	ldr	r0, [pc, #124]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001cc2:	f003 fd0f 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ccc:	f000 f9ea 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4812      	ldr	r0, [pc, #72]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001cf6:	f003 f85f 	bl	8004db8 <HAL_TIM_OC_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d00:	f000 f9d0 	bl	80020a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001d28:	f003 fd3a 	bl	80057a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001d32:	f000 f9b7 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3758      	adds	r7, #88	; 0x58
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200003ec 	.word	0x200003ec
 8001d44:	40012c00 	.word	0x40012c00

08001d48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001d8e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001da0:	4828      	ldr	r0, [pc, #160]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001da2:	f002 fa46 	bl	8004232 <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001dac:	f000 f97a 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4821      	ldr	r0, [pc, #132]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001dbe:	f003 f911 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001dc8:	f000 f96c 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dcc:	481d      	ldr	r0, [pc, #116]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001dce:	f002 fc5b 	bl	8004688 <HAL_TIM_PWM_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001dd8:	f000 f964 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	4619      	mov	r1, r3
 8001dea:	4816      	ldr	r0, [pc, #88]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001dec:	f003 fc7a 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001df6:	f000 f955 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfa:	2360      	movs	r3, #96	; 0x60
 8001dfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001e12:	f003 f829 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e1c:	f000 f942 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2208      	movs	r2, #8
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001e28:	f003 f81e 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001e32:	f000 f937 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM2_Init+0xfc>)
 8001e38:	f000 fa8c 	bl	8002354 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3738      	adds	r7, #56	; 0x38
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000434 	.word	0x20000434

08001e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fd32 	bl	80058c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <MX_TIM3_Init+0xa4>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e78:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001e7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e92:	2301      	movs	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001eb6:	f002 fd27 	bl	8004908 <HAL_TIM_Encoder_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ec0:	f000 f8f0 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_TIM3_Init+0xa0>)
 8001ed2:	f003 fc07 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001edc:	f000 f8e2 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200003a0 	.word	0x200003a0
 8001eec:	40000400 	.word	0x40000400

08001ef0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fcde 	bl	80058c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <MX_TIM4_Init+0xa4>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f20:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001f24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f32:	2303      	movs	r3, #3
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f5e:	f002 fcd3 	bl	8004908 <HAL_TIM_Encoder_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f68:	f000 f89c 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_TIM4_Init+0xa0>)
 8001f7a:	f003 fbb3 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f84:	f000 f88e 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	; 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000344 	.word	0x20000344
 8001f94:	40000800 	.word	0x40000800

08001f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fac:	4b39      	ldr	r3, [pc, #228]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a38      	ldr	r2, [pc, #224]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a32      	ldr	r2, [pc, #200]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fca:	f043 0320 	orr.w	r3, r3, #32
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <MX_GPIO_Init+0xfc>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <MX_GPIO_Init+0xfc>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002012:	4821      	ldr	r0, [pc, #132]	; (8002098 <MX_GPIO_Init+0x100>)
 8002014:	f000 fe56 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 800201e:	481f      	ldr	r0, [pc, #124]	; (800209c <MX_GPIO_Init+0x104>)
 8002020:	f000 fe50 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800202a:	481d      	ldr	r0, [pc, #116]	; (80020a0 <MX_GPIO_Init+0x108>)
 800202c:	f000 fe4a 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2302      	movs	r3, #2
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	4619      	mov	r1, r3
 8002048:	4813      	ldr	r0, [pc, #76]	; (8002098 <MX_GPIO_Init+0x100>)
 800204a:	f000 fce1 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 800204e:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8002052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2302      	movs	r3, #2
 800205e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <MX_GPIO_Init+0x104>)
 8002068:	f000 fcd2 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2302      	movs	r3, #2
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4619      	mov	r1, r3
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <MX_GPIO_Init+0x108>)
 8002086:	f000 fcc3 	bl	8002a10 <HAL_GPIO_Init>

}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40011000 	.word	0x40011000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40010c00 	.word	0x40010c00

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_MspInit+0x5c>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	4a14      	ldr	r2, [pc, #80]	; (800210c <HAL_MspInit+0x5c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6193      	str	r3, [r2, #24]
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_MspInit+0x5c>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_MspInit+0x5c>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_MspInit+0x5c>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_MspInit+0x5c>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_MspInit+0x60>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_MspInit+0x60>)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000

08002114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_SPI_MspInit+0x9c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d139      	bne.n	80021a8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <HAL_SPI_MspInit+0xa0>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_SPI_MspInit+0xa0>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213e:	61d3      	str	r3, [r2, #28]
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_SPI_MspInit+0xa0>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_SPI_MspInit+0xa0>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <HAL_SPI_MspInit+0xa0>)
 8002152:	f043 0308 	orr.w	r3, r3, #8
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_SPI_MspInit+0xa0>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002164:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4619      	mov	r1, r3
 8002178:	480f      	ldr	r0, [pc, #60]	; (80021b8 <HAL_SPI_MspInit+0xa4>)
 800217a:	f000 fc49 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800217e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_SPI_MspInit+0xa4>)
 8002194:	f000 fc3c 	bl	8002a10 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2024      	movs	r0, #36	; 0x24
 800219e:	f000 fb8a 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80021a2:	2024      	movs	r0, #36	; 0x24
 80021a4:	f000 fba3 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40003800 	.word	0x40003800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010c00 	.word	0x40010c00

080021bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a22      	ldr	r2, [pc, #136]	; (8002254 <HAL_TIM_Base_MspInit+0x98>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d12c      	bne.n	8002228 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_TIM_Base_MspInit+0x9c>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_TIM_Base_MspInit+0x9c>)
 80021d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d8:	6193      	str	r3, [r2, #24]
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_TIM_Base_MspInit+0x9c>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2018      	movs	r0, #24
 80021ec:	f000 fb63 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021f0:	2018      	movs	r0, #24
 80021f2:	f000 fb7c 	bl	80028ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2019      	movs	r0, #25
 80021fc:	f000 fb5b 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002200:	2019      	movs	r0, #25
 8002202:	f000 fb74 	bl	80028ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	201a      	movs	r0, #26
 800220c:	f000 fb53 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002210:	201a      	movs	r0, #26
 8002212:	f000 fb6c 	bl	80028ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	201b      	movs	r0, #27
 800221c:	f000 fb4b 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002220:	201b      	movs	r0, #27
 8002222:	f000 fb64 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002226:	e010      	b.n	800224a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002230:	d10b      	bne.n	800224a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_TIM_Base_MspInit+0x9c>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_TIM_Base_MspInit+0x9c>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_TIM_Base_MspInit+0x9c>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a32      	ldr	r2, [pc, #200]	; (8002340 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d12c      	bne.n	80022d6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800227c:	4b31      	ldr	r3, [pc, #196]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a30      	ldr	r2, [pc, #192]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6193      	str	r3, [r2, #24]
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0318 	add.w	r3, r7, #24
 80022bc:	4619      	mov	r1, r3
 80022be:	4822      	ldr	r0, [pc, #136]	; (8002348 <HAL_TIM_Encoder_MspInit+0xec>)
 80022c0:	f000 fba6 	bl	8002a10 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	201d      	movs	r0, #29
 80022ca:	f000 faf4 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022ce:	201d      	movs	r0, #29
 80022d0:	f000 fb0d 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022d4:	e030      	b.n	8002338 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_TIM_Encoder_MspInit+0xf0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d12b      	bne.n	8002338 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	61d3      	str	r3, [r2, #28]
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f107 0318 	add.w	r3, r7, #24
 8002320:	4619      	mov	r1, r3
 8002322:	480b      	ldr	r0, [pc, #44]	; (8002350 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002324:	f000 fb74 	bl	8002a10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	201e      	movs	r0, #30
 800232e:	f000 fac2 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002332:	201e      	movs	r0, #30
 8002334:	f000 fadb 	bl	80028ee <HAL_NVIC_EnableIRQ>
}
 8002338:	bf00      	nop
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40000400 	.word	0x40000400
 8002344:	40021000 	.word	0x40021000
 8002348:	40010800 	.word	0x40010800
 800234c:	40000800 	.word	0x40000800
 8002350:	40010c00 	.word	0x40010c00

08002354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d142      	bne.n	80023fa <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <HAL_TIM_MspPostInit+0xb0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <HAL_TIM_MspPostInit+0xb0>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_TIM_MspPostInit+0xb0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_TIM_MspPostInit+0xb0>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_TIM_MspPostInit+0xb0>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_TIM_MspPostInit+0xb0>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023a4:	2301      	movs	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2302      	movs	r3, #2
 80023ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	4814      	ldr	r0, [pc, #80]	; (8002408 <HAL_TIM_MspPostInit+0xb4>)
 80023b8:	f000 fb2a 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	480e      	ldr	r0, [pc, #56]	; (800240c <HAL_TIM_MspPostInit+0xb8>)
 80023d2:	f000 fb1d 	bl	8002a10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_TIM_MspPostInit+0xbc>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <HAL_TIM_MspPostInit+0xbc>)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	40010800 	.word	0x40010800
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40010000 	.word	0x40010000

08002414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <HardFault_Handler+0x4>

08002426 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <BusFault_Handler+0x4>

08002432 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <UsageFault_Handler+0x4>

08002438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002460:	f000 f914 	bl	800268c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM1_BRK_IRQHandler+0x10>)
 800246e:	f002 fb9a 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003ec 	.word	0x200003ec

0800247c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <TIM1_UP_IRQHandler+0x10>)
 8002482:	f002 fb90 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200003ec 	.word	0x200003ec

08002490 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002496:	f002 fb86 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200003ec 	.word	0x200003ec

080024a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM1_CC_IRQHandler+0x10>)
 80024aa:	f002 fb7c 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003ec 	.word	0x200003ec

080024b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM3_IRQHandler+0x10>)
 80024be:	f002 fb72 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200003a0 	.word	0x200003a0

080024cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <TIM4_IRQHandler+0x10>)
 80024d2:	f002 fb68 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000344 	.word	0x20000344

080024e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <SPI2_IRQHandler+0x10>)
 80024e6:	f001 fae1 	bl	8003aac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200002ec 	.word	0x200002ec

080024f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_sbrk+0x50>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x16>
		heap_end = &end;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <_sbrk+0x50>)
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <_sbrk+0x54>)
 8002508:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <_sbrk+0x50>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <_sbrk+0x50>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	466a      	mov	r2, sp
 800251a:	4293      	cmp	r3, r2
 800251c:	d907      	bls.n	800252e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800251e:	f003 f9a5 	bl	800586c <__errno>
 8002522:	4602      	mov	r2, r0
 8002524:	230c      	movs	r3, #12
 8002526:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800252c:	e006      	b.n	800253c <_sbrk+0x48>
	}

	heap_end += incr;
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <_sbrk+0x50>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <_sbrk+0x50>)
 8002538:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200002e0 	.word	0x200002e0
 8002548:	20000488 	.word	0x20000488

0800254c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <SystemInit+0x5c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <SystemInit+0x5c>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <SystemInit+0x5c>)
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4911      	ldr	r1, [pc, #68]	; (80025a8 <SystemInit+0x5c>)
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <SystemInit+0x60>)
 8002564:	4013      	ands	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <SystemInit+0x5c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <SystemInit+0x5c>)
 800256e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <SystemInit+0x5c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SystemInit+0x5c>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <SystemInit+0x5c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <SystemInit+0x5c>)
 800258a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800258e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SystemInit+0x5c>)
 8002592:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002596:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <SystemInit+0x64>)
 800259a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800259e:	609a      	str	r2, [r3, #8]
#endif 
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000
 80025ac:	f8ff0000 	.word	0xf8ff0000
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025b6:	e003      	b.n	80025c0 <LoopCopyDataInit>

080025b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025be:	3104      	adds	r1, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025c0:	480a      	ldr	r0, [pc, #40]	; (80025ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025c8:	d3f6      	bcc.n	80025b8 <CopyDataInit>
  ldr r2, =_sbss
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025cc:	e002      	b.n	80025d4 <LoopFillZerobss>

080025ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025d0:	f842 3b04 	str.w	r3, [r2], #4

080025d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025d8:	d3f9      	bcc.n	80025ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025da:	f7ff ffb7 	bl	800254c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025de:	f003 f94b 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025e2:	f7ff f9f7 	bl	80019d4 <main>
  bx lr
 80025e6:	4770      	bx	lr
  ldr r3, =_sidata
 80025e8:	080093f8 	.word	0x080093f8
  ldr r0, =_sdata
 80025ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025f0:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 80025f4:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 80025f8:	20000484 	.word	0x20000484

080025fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC1_2_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_Init+0x28>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_Init+0x28>)
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f000 f945 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002616:	2000      	movs	r0, #0
 8002618:	f000 f808 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261c:	f7ff fd48 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x54>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x58>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	fbb3 f3f1 	udiv	r3, r3, r1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f95d 	bl	800290a <HAL_SYSTICK_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00e      	b.n	8002678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d80a      	bhi.n	8002676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002668:	f000 f925 	bl	80028b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_InitTick+0x5c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000002c 	.word	0x2000002c
 8002684:	20000034 	.word	0x20000034
 8002688:	20000030 	.word	0x20000030

0800268c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_IncTick+0x1c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x20>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_IncTick+0x20>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000034 	.word	0x20000034
 80026ac:	2000047c 	.word	0x2000047c

080026b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <HAL_GetTick+0x10>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	2000047c 	.word	0x2000047c

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_Delay+0x40>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffe0 	bl	80026b0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000034 	.word	0x20000034

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4906      	ldr	r1, [pc, #24]	; (80027a0 <__NVIC_EnableIRQ+0x34>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286c:	d301      	bcc.n	8002872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286e:	2301      	movs	r3, #1
 8002870:	e00f      	b.n	8002892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002872:	4a0a      	ldr	r2, [pc, #40]	; (800289c <SysTick_Config+0x40>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287a:	210f      	movs	r1, #15
 800287c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002880:	f7ff ff90 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <SysTick_Config+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <SysTick_Config+0x40>)
 800288c:	2207      	movs	r2, #7
 800288e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	e000e010 	.word	0xe000e010

080028a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff2d 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c8:	f7ff ff42 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff90 	bl	80027f8 <NVIC_EncodePriority>
 80028d8:	4602      	mov	r2, r0
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff5f 	bl	80027a4 <__NVIC_SetPriority>
}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff35 	bl	800276c <__NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffa2 	bl	800285c <SysTick_Config>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002936:	2b02      	cmp	r3, #2
 8002938:	d005      	beq.n	8002946 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2204      	movs	r2, #4
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e051      	b.n	80029ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 020e 	bic.w	r2, r2, #14
 8002954:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_DMA_Abort_IT+0xd0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d029      	beq.n	80029c4 <HAL_DMA_Abort_IT+0xa0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <HAL_DMA_Abort_IT+0xd4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d022      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x9c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_DMA_Abort_IT+0xd8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01a      	beq.n	80029ba <HAL_DMA_Abort_IT+0x96>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_DMA_Abort_IT+0xdc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d012      	beq.n	80029b4 <HAL_DMA_Abort_IT+0x90>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_DMA_Abort_IT+0xe0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00a      	beq.n	80029ae <HAL_DMA_Abort_IT+0x8a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_DMA_Abort_IT+0xe4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d102      	bne.n	80029a8 <HAL_DMA_Abort_IT+0x84>
 80029a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029a6:	e00e      	b.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 80029a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ac:	e00b      	b.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 80029ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b2:	e008      	b.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 80029b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b8:	e005      	b.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 80029ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029be:	e002      	b.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 80029c0:	2310      	movs	r3, #16
 80029c2:	e000      	b.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 80029c4:	2301      	movs	r3, #1
 80029c6:	4a11      	ldr	r2, [pc, #68]	; (8002a0c <HAL_DMA_Abort_IT+0xe8>)
 80029c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
    } 
  }
  return status;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40020008 	.word	0x40020008
 80029f8:	4002001c 	.word	0x4002001c
 80029fc:	40020030 	.word	0x40020030
 8002a00:	40020044 	.word	0x40020044
 8002a04:	40020058 	.word	0x40020058
 8002a08:	4002006c 	.word	0x4002006c
 8002a0c:	40020000 	.word	0x40020000

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a22:	e127      	b.n	8002c74 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a24:	2201      	movs	r2, #1
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f040 8116 	bne.w	8002c6e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d034      	beq.n	8002ab4 <HAL_GPIO_Init+0xa4>
 8002a4a:	2b12      	cmp	r3, #18
 8002a4c:	d80d      	bhi.n	8002a6a <HAL_GPIO_Init+0x5a>
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d02b      	beq.n	8002aaa <HAL_GPIO_Init+0x9a>
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d804      	bhi.n	8002a60 <HAL_GPIO_Init+0x50>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d031      	beq.n	8002abe <HAL_GPIO_Init+0xae>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d01c      	beq.n	8002a98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a5e:	e048      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d043      	beq.n	8002aec <HAL_GPIO_Init+0xdc>
 8002a64:	2b11      	cmp	r3, #17
 8002a66:	d01b      	beq.n	8002aa0 <HAL_GPIO_Init+0x90>
          break;
 8002a68:	e043      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a6a:	4a89      	ldr	r2, [pc, #548]	; (8002c90 <HAL_GPIO_Init+0x280>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d026      	beq.n	8002abe <HAL_GPIO_Init+0xae>
 8002a70:	4a87      	ldr	r2, [pc, #540]	; (8002c90 <HAL_GPIO_Init+0x280>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d806      	bhi.n	8002a84 <HAL_GPIO_Init+0x74>
 8002a76:	4a87      	ldr	r2, [pc, #540]	; (8002c94 <HAL_GPIO_Init+0x284>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d020      	beq.n	8002abe <HAL_GPIO_Init+0xae>
 8002a7c:	4a86      	ldr	r2, [pc, #536]	; (8002c98 <HAL_GPIO_Init+0x288>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01d      	beq.n	8002abe <HAL_GPIO_Init+0xae>
          break;
 8002a82:	e036      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a84:	4a85      	ldr	r2, [pc, #532]	; (8002c9c <HAL_GPIO_Init+0x28c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d019      	beq.n	8002abe <HAL_GPIO_Init+0xae>
 8002a8a:	4a85      	ldr	r2, [pc, #532]	; (8002ca0 <HAL_GPIO_Init+0x290>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d016      	beq.n	8002abe <HAL_GPIO_Init+0xae>
 8002a90:	4a84      	ldr	r2, [pc, #528]	; (8002ca4 <HAL_GPIO_Init+0x294>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_GPIO_Init+0xae>
          break;
 8002a96:	e02c      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	623b      	str	r3, [r7, #32]
          break;
 8002a9e:	e028      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	623b      	str	r3, [r7, #32]
          break;
 8002aa8:	e023      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	623b      	str	r3, [r7, #32]
          break;
 8002ab2:	e01e      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	623b      	str	r3, [r7, #32]
          break;
 8002abc:	e019      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d102      	bne.n	8002acc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	623b      	str	r3, [r7, #32]
          break;
 8002aca:	e012      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	611a      	str	r2, [r3, #16]
          break;
 8002ade:	e008      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	615a      	str	r2, [r3, #20]
          break;
 8002aea:	e002      	b.n	8002af2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
          break;
 8002af0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2bff      	cmp	r3, #255	; 0xff
 8002af6:	d801      	bhi.n	8002afc <HAL_GPIO_Init+0xec>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	e001      	b.n	8002b00 <HAL_GPIO_Init+0xf0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2bff      	cmp	r3, #255	; 0xff
 8002b06:	d802      	bhi.n	8002b0e <HAL_GPIO_Init+0xfe>
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x104>
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	3b08      	subs	r3, #8
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	401a      	ands	r2, r3
 8002b26:	6a39      	ldr	r1, [r7, #32]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8096 	beq.w	8002c6e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b42:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_GPIO_Init+0x298>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_GPIO_Init+0x298>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6193      	str	r3, [r2, #24]
 8002b4e:	4b56      	ldr	r3, [pc, #344]	; (8002ca8 <HAL_GPIO_Init+0x298>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b5a:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_GPIO_Init+0x29c>)
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4b      	ldr	r2, [pc, #300]	; (8002cb0 <HAL_GPIO_Init+0x2a0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x19e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4a      	ldr	r2, [pc, #296]	; (8002cb4 <HAL_GPIO_Init+0x2a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x19a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a49      	ldr	r2, [pc, #292]	; (8002cb8 <HAL_GPIO_Init+0x2a8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x196>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a48      	ldr	r2, [pc, #288]	; (8002cbc <HAL_GPIO_Init+0x2ac>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x192>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x1a0>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x1a0>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x1a0>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x1a0>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bc0:	493a      	ldr	r1, [pc, #232]	; (8002cac <HAL_GPIO_Init+0x29c>)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bda:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4938      	ldr	r1, [pc, #224]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
 8002be6:	e006      	b.n	8002bf6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be8:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4933      	ldr	r1, [pc, #204]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	492e      	ldr	r1, [pc, #184]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4929      	ldr	r1, [pc, #164]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4924      	ldr	r1, [pc, #144]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
 8002c36:	e006      	b.n	8002c46 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	491f      	ldr	r1, [pc, #124]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d006      	beq.n	8002c60 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	491a      	ldr	r1, [pc, #104]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60cb      	str	r3, [r1, #12]
 8002c5e:	e006      	b.n	8002c6e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	4915      	ldr	r1, [pc, #84]	; (8002cc0 <HAL_GPIO_Init+0x2b0>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f47f aed0 	bne.w	8002a24 <HAL_GPIO_Init+0x14>
  }
}
 8002c84:	bf00      	nop
 8002c86:	372c      	adds	r7, #44	; 0x2c
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	10210000 	.word	0x10210000
 8002c94:	10110000 	.word	0x10110000
 8002c98:	10120000 	.word	0x10120000
 8002c9c:	10310000 	.word	0x10310000
 8002ca0:	10320000 	.word	0x10320000
 8002ca4:	10220000 	.word	0x10220000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40010800 	.word	0x40010800
 8002cb4:	40010c00 	.word	0x40010c00
 8002cb8:	40011000 	.word	0x40011000
 8002cbc:	40011400 	.word	0x40011400
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	611a      	str	r2, [r3, #16]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e26c      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d14:	4b92      	ldr	r3, [pc, #584]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d00c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d20:	4b8f      	ldr	r3, [pc, #572]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d112      	bne.n	8002d52 <HAL_RCC_OscConfig+0x5e>
 8002d2c:	4b8c      	ldr	r3, [pc, #560]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d10b      	bne.n	8002d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3a:	4b89      	ldr	r3, [pc, #548]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d06c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x12c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d168      	bne.n	8002e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e246      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x76>
 8002d5c:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	e02e      	b.n	8002dc8 <HAL_RCC_OscConfig+0xd4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x98>
 8002d72:	4b7b      	ldr	r3, [pc, #492]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7a      	ldr	r2, [pc, #488]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b78      	ldr	r3, [pc, #480]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a77      	ldr	r2, [pc, #476]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0xd4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0xbc>
 8002d96:	4b72      	ldr	r3, [pc, #456]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a71      	ldr	r2, [pc, #452]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0xd4>
 8002db0:	4b6b      	ldr	r3, [pc, #428]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6a      	ldr	r2, [pc, #424]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a67      	ldr	r2, [pc, #412]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fc6e 	bl	80026b0 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff fc6a 	bl	80026b0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1fa      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xe4>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fc5a 	bl	80026b0 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7ff fc56 	bl	80026b0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1e6      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x10c>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d063      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e3a:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d11c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x18c>
 8002e46:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x176>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e1ba      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4939      	ldr	r1, [pc, #228]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	e03a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e88:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7ff fc0f 	bl	80026b0 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e96:	f7ff fc0b 	bl	80026b0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e19b      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4927      	ldr	r1, [pc, #156]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e015      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7ff fbee 	bl	80026b0 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7ff fbea 	bl	80026b0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e17a      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d03a      	beq.n	8002f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f10:	f7ff fbce 	bl	80026b0 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7ff fbca 	bl	80026b0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e15a      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f000 faa8 	bl	800348c <RCC_Delay>
 8002f3c:	e01c      	b.n	8002f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7ff fbb4 	bl	80026b0 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4a:	e00f      	b.n	8002f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4c:	f7ff fbb0 	bl	80026b0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d908      	bls.n	8002f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e140      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	42420000 	.word	0x42420000
 8002f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	4b9e      	ldr	r3, [pc, #632]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e9      	bne.n	8002f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a6 	beq.w	80030d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8a:	4b97      	ldr	r3, [pc, #604]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10d      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b94      	ldr	r3, [pc, #592]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a93      	ldr	r2, [pc, #588]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]
 8002fa2:	4b91      	ldr	r3, [pc, #580]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b8e      	ldr	r3, [pc, #568]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a8a      	ldr	r2, [pc, #552]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7ff fb71 	bl	80026b0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7ff fb6d 	bl	80026b0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0fd      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4b81      	ldr	r3, [pc, #516]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x312>
 8002ff8:	4b7b      	ldr	r3, [pc, #492]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a7a      	ldr	r2, [pc, #488]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e02d      	b.n	8003062 <HAL_RCC_OscConfig+0x36e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x334>
 800300e:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a75      	ldr	r2, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6213      	str	r3, [r2, #32]
 800301a:	4b73      	ldr	r3, [pc, #460]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a72      	ldr	r2, [pc, #456]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	f023 0304 	bic.w	r3, r3, #4
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	e01c      	b.n	8003062 <HAL_RCC_OscConfig+0x36e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b05      	cmp	r3, #5
 800302e:	d10c      	bne.n	800304a <HAL_RCC_OscConfig+0x356>
 8003030:	4b6d      	ldr	r3, [pc, #436]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4a6c      	ldr	r2, [pc, #432]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6213      	str	r3, [r2, #32]
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4a69      	ldr	r2, [pc, #420]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	e00b      	b.n	8003062 <HAL_RCC_OscConfig+0x36e>
 800304a:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4a66      	ldr	r2, [pc, #408]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6213      	str	r3, [r2, #32]
 8003056:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4a63      	ldr	r2, [pc, #396]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d015      	beq.n	8003096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7ff fb21 	bl	80026b0 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7ff fb1d 	bl	80026b0 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0ab      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ee      	beq.n	8003072 <HAL_RCC_OscConfig+0x37e>
 8003094:	e014      	b.n	80030c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7ff fb0b 	bl	80026b0 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7ff fb07 	bl	80026b0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e095      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ee      	bne.n	800309e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c6:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4a47      	ldr	r2, [pc, #284]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8081 	beq.w	80031de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030dc:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d061      	beq.n	80031ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d146      	bne.n	800317e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCC_OscConfig+0x4fc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7ff fadb 	bl	80026b0 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fe:	f7ff fad7 	bl	80026b0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e067      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003110:	4b35      	ldr	r3, [pc, #212]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d108      	bne.n	8003138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	492d      	ldr	r1, [pc, #180]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a19      	ldr	r1, [r3, #32]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	430b      	orrs	r3, r1
 800314a:	4927      	ldr	r1, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x4fc>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7ff faab 	bl	80026b0 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315e:	f7ff faa7 	bl	80026b0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e037      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x46a>
 800317c:	e02f      	b.n	80031de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <HAL_RCC_OscConfig+0x4fc>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff fa94 	bl	80026b0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7ff fa90 	bl	80026b0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e020      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x498>
 80031aa:	e018      	b.n	80031de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e013      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	42420060 	.word	0x42420060

080031f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0d0      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d910      	bls.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4965      	ldr	r1, [pc, #404]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0b8      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800325a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003268:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a52      	ldr	r2, [pc, #328]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	494d      	ldr	r1, [pc, #308]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d040      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d115      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e07f      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e073      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06b      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4936      	ldr	r1, [pc, #216]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7ff f9e4 	bl	80026b0 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7ff f9e0 	bl	80026b0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e053      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d210      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	4922      	ldr	r1, [pc, #136]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e032      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4916      	ldr	r1, [pc, #88]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003382:	f000 f821 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8003386:	4601      	mov	r1, r0
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	5cd3      	ldrb	r3, [r2, r3]
 8003396:	fa21 f303 	lsr.w	r3, r1, r3
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1cc>)
 800339c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1d0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f942 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	080090f8 	.word	0x080090f8
 80033c0:	2000002c 	.word	0x2000002c
 80033c4:	20000030 	.word	0x20000030

080033c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b490      	push	{r4, r7}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033d0:	1d3c      	adds	r4, r7, #4
 80033d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCC_GetSysClockFreq+0xb4>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d002      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x40>
 8003402:	2b08      	cmp	r3, #8
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x46>
 8003406:	e02d      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_GetSysClockFreq+0xbc>)
 800340a:	623b      	str	r3, [r7, #32]
      break;
 800340c:	e02d      	b.n	800346a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	0c9b      	lsrs	r3, r3, #18
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800341a:	4413      	add	r3, r2
 800341c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003420:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800342c:	4b14      	ldr	r3, [pc, #80]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0c5b      	lsrs	r3, r3, #17
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800343a:	4413      	add	r3, r2
 800343c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003440:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003446:	fb02 f203 	mul.w	r2, r2, r3
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e004      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	623b      	str	r3, [r7, #32]
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003466:	623b      	str	r3, [r7, #32]
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	6a3b      	ldr	r3, [r7, #32]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc90      	pop	{r4, r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	080090e4 	.word	0x080090e4
 800347c:	080090f4 	.word	0x080090f4
 8003480:	40021000 	.word	0x40021000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	003d0900 	.word	0x003d0900

0800348c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <RCC_Delay+0x34>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <RCC_Delay+0x38>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0a5b      	lsrs	r3, r3, #9
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034a8:	bf00      	nop
  }
  while (Delay --);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e5a      	subs	r2, r3, #1
 80034ae:	60fa      	str	r2, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f9      	bne.n	80034a8 <RCC_Delay+0x1c>
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2000002c 	.word	0x2000002c
 80034c4:	10624dd3 	.word	0x10624dd3

080034c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e076      	b.n	80035c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ea:	d009      	beq.n	8003500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
 80034f2:	e005      	b.n	8003500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fe fdfa 	bl	8002114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	0c1a      	lsrs	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f002 0204 	and.w	r2, r2, #4
 80035a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_SPI_Transmit+0x22>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e126      	b.n	8003840 <HAL_SPI_Transmit+0x270>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035fa:	f7ff f859 	bl	80026b0 <HAL_GetTick>
 80035fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003614:	e10b      	b.n	800382e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_SPI_Transmit+0x52>
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003626:	e102      	b.n	800382e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2203      	movs	r2, #3
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366e:	d10f      	bne.n	8003690 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800368e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d007      	beq.n	80036ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b6:	d14b      	bne.n	8003750 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_Transmit+0xf6>
 80036c0:	8afb      	ldrh	r3, [r7, #22]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d13e      	bne.n	8003744 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	1c9a      	adds	r2, r3, #2
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036ea:	e02b      	b.n	8003744 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d112      	bne.n	8003720 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	881a      	ldrh	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	86da      	strh	r2, [r3, #54]	; 0x36
 800371e:	e011      	b.n	8003744 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003720:	f7fe ffc6 	bl	80026b0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d803      	bhi.n	8003738 <HAL_SPI_Transmit+0x168>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003736:	d102      	bne.n	800373e <HAL_SPI_Transmit+0x16e>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003742:	e074      	b.n	800382e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ce      	bne.n	80036ec <HAL_SPI_Transmit+0x11c>
 800374e:	e04c      	b.n	80037ea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_SPI_Transmit+0x18e>
 8003758:	8afb      	ldrh	r3, [r7, #22]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d140      	bne.n	80037e0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003784:	e02c      	b.n	80037e0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d113      	bne.n	80037bc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ba:	e011      	b.n	80037e0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037bc:	f7fe ff78 	bl	80026b0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d803      	bhi.n	80037d4 <HAL_SPI_Transmit+0x204>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d2:	d102      	bne.n	80037da <HAL_SPI_Transmit+0x20a>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037de:	e026      	b.n	800382e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1cd      	bne.n	8003786 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fc4e 	bl	8004090 <SPI_EndRxTxTransaction>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e000      	b.n	800382e <HAL_SPI_Transmit+0x25e>
  }

error:
 800382c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800383e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d110      	bne.n	8003884 <HAL_SPI_Receive_IT+0x3c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386a:	d10b      	bne.n	8003884 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2204      	movs	r2, #4
 8003870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f882 	bl	8003984 <HAL_SPI_TransmitReceive_IT>
 8003880:	4603      	mov	r3, r0
 8003882:	e076      	b.n	8003972 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_SPI_Receive_IT+0x4a>
 800388e:	2302      	movs	r3, #2
 8003890:	e06f      	b.n	8003972 <HAL_SPI_Receive_IT+0x12a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038aa:	e05d      	b.n	8003968 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_SPI_Receive_IT+0x70>
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038bc:	e054      	b.n	8003968 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2204      	movs	r2, #4
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a1e      	ldr	r2, [pc, #120]	; (800397c <HAL_SPI_Receive_IT+0x134>)
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
 8003904:	e002      	b.n	800390c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <HAL_SPI_Receive_IT+0x138>)
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003914:	d10f      	bne.n	8003936 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003934:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003944:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d008      	beq.n	8003966 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e000      	b.n	8003968 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8003966:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	08003e95 	.word	0x08003e95
 8003980:	08003e4b 	.word	0x08003e4b

08003984 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_SPI_TransmitReceive_IT+0x20>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e075      	b.n	8003a90 <HAL_SPI_TransmitReceive_IT+0x10c>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ba:	7dbb      	ldrb	r3, [r7, #22]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d00d      	beq.n	80039dc <HAL_SPI_TransmitReceive_IT+0x58>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c6:	d106      	bne.n	80039d6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_TransmitReceive_IT+0x52>
 80039d0:	7dbb      	ldrb	r3, [r7, #22]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d002      	beq.n	80039dc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
 80039d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039da:	e054      	b.n	8003a86 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_SPI_TransmitReceive_IT+0x6a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_TransmitReceive_IT+0x6a>
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039f2:	e048      	b.n	8003a86 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d003      	beq.n	8003a08 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2205      	movs	r2, #5
 8003a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	887a      	ldrh	r2, [r7, #2]
 8003a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_SPI_TransmitReceive_IT+0x118>)
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
 8003a46:	e005      	b.n	8003a54 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003a62:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d008      	beq.n	8003a84 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e000      	b.n	8003a86 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003a84:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	08003d8d 	.word	0x08003d8d
 8003aa0:	08003ded 	.word	0x08003ded
 8003aa4:	08003cc9 	.word	0x08003cc9
 8003aa8:	08003d2d 	.word	0x08003d2d

08003aac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
    return;
 8003aee:	e0bf      	b.n	8003c70 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_SPI_IRQHandler+0x66>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	09db      	lsrs	r3, r3, #7
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
    return;
 8003b10:	e0ae      	b.n	8003c70 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_SPI_IRQHandler+0x80>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a2 	beq.w	8003c70 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 809b 	beq.w	8003c70 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d023      	beq.n	8003b8e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d011      	beq.n	8003b76 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	e00b      	b.n	8003b8e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	693b      	ldr	r3, [r7, #16]
        return;
 8003b8c:	e070      	b.n	8003c70 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d014      	beq.n	8003bc4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 0201 	orr.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d050      	beq.n	8003c6e <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bda:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <HAL_SPI_IRQHandler+0x14c>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d034      	beq.n	8003c62 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0203 	bic.w	r2, r2, #3
 8003c06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d011      	beq.n	8003c34 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_SPI_IRQHandler+0x1cc>)
 8003c16:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fe81 	bl	8002924 <HAL_DMA_Abort_IT>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_SPI_IRQHandler+0x1cc>)
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe fe6b 	bl	8002924 <HAL_DMA_Abort_IT>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003c60:	e003      	b.n	8003c6a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f813 	bl	8003c8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c68:	e000      	b.n	8003c6c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003c6a:	bf00      	nop
    return;
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
  }
}
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	08003ca1 	.word	0x08003ca1

08003c7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr

08003c8e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ffe7 	bl	8003c8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f103 020c 	add.w	r2, r3, #12
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9d4 	bl	80040cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d72:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9a4 	bl	80040cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	1c9a      	adds	r2, r3, #2
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10f      	bne.n	8003de4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f974 	bl	80040cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e30:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f945 	bl	80040cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f103 020c 	add.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f994 	bl	80041b4 <SPI_CloseRx_ISR>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	1c9a      	adds	r2, r3, #2
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f971 	bl	80041b4 <SPI_CloseRx_ISR>
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eec:	f7fe fbe0 	bl	80026b0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003efc:	f7fe fbd8 	bl	80026b0 <HAL_GetTick>
 8003f00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f02:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	015b      	lsls	r3, r3, #5
 8003f08:	0d1b      	lsrs	r3, r3, #20
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	fb02 f303 	mul.w	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f12:	e054      	b.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f1a:	d050      	beq.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f1c:	f7fe fbc8 	bl	80026b0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d902      	bls.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d13d      	bne.n	8003fae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4a:	d111      	bne.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f54:	d004      	beq.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	d107      	bne.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f78:	d10f      	bne.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e017      	b.n	8003fde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d19b      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000002c 	.word	0x2000002c

08003fec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004000:	d111      	bne.n	8004026 <SPI_EndRxTransaction+0x3a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400a:	d004      	beq.n	8004016 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004014:	d107      	bne.n	8004026 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402e:	d117      	bne.n	8004060 <SPI_EndRxTransaction+0x74>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d112      	bne.n	8004060 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	2101      	movs	r1, #1
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ff49 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e013      	b.n	8004088 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff ff36 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f043 0220 	orr.w	r2, r3, #32
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e000      	b.n	8004088 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff18 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e000      	b.n	80040c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80040d4:	4b35      	ldr	r3, [pc, #212]	; (80041ac <SPI_CloseRxTx_ISR+0xe0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a35      	ldr	r2, [pc, #212]	; (80041b0 <SPI_CloseRxTx_ISR+0xe4>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	2264      	movs	r2, #100	; 0x64
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040e8:	f7fe fae2 	bl	80026b0 <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0220 	bic.w	r2, r2, #32
 80040fc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004110:	e009      	b.n	8004126 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3b01      	subs	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0eb      	beq.n	80040fe <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	2164      	movs	r1, #100	; 0x64
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ffb0 	bl	8004090 <SPI_EndRxTxTransaction>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	2b00      	cmp	r3, #0
 8004166:	d115      	bne.n	8004194 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fd fbad 	bl	80018dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004182:	e00e      	b.n	80041a2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fd75 	bl	8003c7c <HAL_SPI_TxRxCpltCallback>
}
 8004192:	e006      	b.n	80041a2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fd76 	bl	8003c8e <HAL_SPI_ErrorCallback>
}
 80041a2:	bf00      	nop
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	2000002c 	.word	0x2000002c
 80041b0:	057619f1 	.word	0x057619f1

080041b4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ca:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80041cc:	f7fe fa70 	bl	80026b0 <HAL_GetTick>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	2164      	movs	r1, #100	; 0x64
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff08 	bl	8003fec <SPI_EndRxTransaction>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fd fb5d 	bl	80018dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004222:	e002      	b.n	800422a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fd32 	bl	8003c8e <HAL_SPI_ErrorCallback>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e041      	b.n	80042c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fd ffaf 	bl	80021bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f000 ff93 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e032      	b.n	800434e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_TIM_Base_Start+0x88>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_TIM_Base_Start+0x48>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004302:	d009      	beq.n	8004318 <HAL_TIM_Base_Start+0x48>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_TIM_Base_Start+0x8c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIM_Base_Start+0x48>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <HAL_TIM_Base_Start+0x90>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d111      	bne.n	800433c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b06      	cmp	r3, #6
 8004328:	d010      	beq.n	800434c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	e007      	b.n	800434c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800

08004364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e03a      	b.n	80043f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_TIM_Base_Start_IT+0x98>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x58>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d009      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x58>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a14      	ldr	r2, [pc, #80]	; (8004400 <HAL_TIM_Base_Start_IT+0x9c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0x58>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a13      	ldr	r2, [pc, #76]	; (8004404 <HAL_TIM_Base_Start_IT+0xa0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d111      	bne.n	80043e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d010      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043de:	e007      	b.n	80043f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800

08004408 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e041      	b.n	800449e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f839 	bl	80044a6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fea8 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_TIM_OC_Start_IT+0x24>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e022      	b.n	8004522 <HAL_TIM_OC_Start_IT+0x6a>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d109      	bne.n	80044f6 <HAL_TIM_OC_Start_IT+0x3e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	bf14      	ite	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	2300      	moveq	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	e015      	b.n	8004522 <HAL_TIM_OC_Start_IT+0x6a>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d109      	bne.n	8004510 <HAL_TIM_OC_Start_IT+0x58>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e008      	b.n	8004522 <HAL_TIM_OC_Start_IT+0x6a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e0a4      	b.n	8004674 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <HAL_TIM_OC_Start_IT+0x82>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004538:	e013      	b.n	8004562 <HAL_TIM_OC_Start_IT+0xaa>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d104      	bne.n	800454a <HAL_TIM_OC_Start_IT+0x92>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	e00b      	b.n	8004562 <HAL_TIM_OC_Start_IT+0xaa>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d104      	bne.n	800455a <HAL_TIM_OC_Start_IT+0xa2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004558:	e003      	b.n	8004562 <HAL_TIM_OC_Start_IT+0xaa>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	d841      	bhi.n	80045ec <HAL_TIM_OC_Start_IT+0x134>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <HAL_TIM_OC_Start_IT+0xb8>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045ed 	.word	0x080045ed
 8004578:	080045ed 	.word	0x080045ed
 800457c:	080045ed 	.word	0x080045ed
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045ed 	.word	0x080045ed
 8004588:	080045ed 	.word	0x080045ed
 800458c:	080045ed 	.word	0x080045ed
 8004590:	080045c9 	.word	0x080045c9
 8004594:	080045ed 	.word	0x080045ed
 8004598:	080045ed 	.word	0x080045ed
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080045db 	.word	0x080045db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0202 	orr.w	r2, r2, #2
 80045b2:	60da      	str	r2, [r3, #12]
      break;
 80045b4:	e01b      	b.n	80045ee <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0204 	orr.w	r2, r2, #4
 80045c4:	60da      	str	r2, [r3, #12]
      break;
 80045c6:	e012      	b.n	80045ee <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0208 	orr.w	r2, r2, #8
 80045d6:	60da      	str	r2, [r3, #12]
      break;
 80045d8:	e009      	b.n	80045ee <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0210 	orr.w	r2, r2, #16
 80045e8:	60da      	str	r2, [r3, #12]
      break;
 80045ea:	e000      	b.n	80045ee <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80045ec:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2201      	movs	r2, #1
 80045f4:	6839      	ldr	r1, [r7, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 f850 	bl	800569c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_TIM_OC_Start_IT+0x1c4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d107      	bne.n	8004616 <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a18      	ldr	r2, [pc, #96]	; (800467c <HAL_TIM_OC_Start_IT+0x1c4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_TIM_OC_Start_IT+0x186>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d009      	beq.n	800463e <HAL_TIM_OC_Start_IT+0x186>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <HAL_TIM_OC_Start_IT+0x1c8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_TIM_OC_Start_IT+0x186>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a12      	ldr	r2, [pc, #72]	; (8004684 <HAL_TIM_OC_Start_IT+0x1cc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d111      	bne.n	8004662 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b06      	cmp	r3, #6
 800464e:	d010      	beq.n	8004672 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	e007      	b.n	8004672 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800

08004688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e041      	b.n	800471e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f839 	bl	8004726 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 fd68 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_TIM_PWM_Start_IT+0x24>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	e022      	b.n	80047a2 <HAL_TIM_PWM_Start_IT+0x6a>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b04      	cmp	r3, #4
 8004760:	d109      	bne.n	8004776 <HAL_TIM_PWM_Start_IT+0x3e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e015      	b.n	80047a2 <HAL_TIM_PWM_Start_IT+0x6a>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d109      	bne.n	8004790 <HAL_TIM_PWM_Start_IT+0x58>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e008      	b.n	80047a2 <HAL_TIM_PWM_Start_IT+0x6a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0a4      	b.n	80048f4 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_PWM_Start_IT+0x82>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b8:	e013      	b.n	80047e2 <HAL_TIM_PWM_Start_IT+0xaa>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d104      	bne.n	80047ca <HAL_TIM_PWM_Start_IT+0x92>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c8:	e00b      	b.n	80047e2 <HAL_TIM_PWM_Start_IT+0xaa>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PWM_Start_IT+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d8:	e003      	b.n	80047e2 <HAL_TIM_PWM_Start_IT+0xaa>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	d841      	bhi.n	800486c <HAL_TIM_PWM_Start_IT+0x134>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <HAL_TIM_PWM_Start_IT+0xb8>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004825 	.word	0x08004825
 80047f4:	0800486d 	.word	0x0800486d
 80047f8:	0800486d 	.word	0x0800486d
 80047fc:	0800486d 	.word	0x0800486d
 8004800:	08004837 	.word	0x08004837
 8004804:	0800486d 	.word	0x0800486d
 8004808:	0800486d 	.word	0x0800486d
 800480c:	0800486d 	.word	0x0800486d
 8004810:	08004849 	.word	0x08004849
 8004814:	0800486d 	.word	0x0800486d
 8004818:	0800486d 	.word	0x0800486d
 800481c:	0800486d 	.word	0x0800486d
 8004820:	0800485b 	.word	0x0800485b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0202 	orr.w	r2, r2, #2
 8004832:	60da      	str	r2, [r3, #12]
      break;
 8004834:	e01b      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0204 	orr.w	r2, r2, #4
 8004844:	60da      	str	r2, [r3, #12]
      break;
 8004846:	e012      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0208 	orr.w	r2, r2, #8
 8004856:	60da      	str	r2, [r3, #12]
      break;
 8004858:	e009      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0210 	orr.w	r2, r2, #16
 8004868:	60da      	str	r2, [r3, #12]
      break;
 800486a:	e000      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 800486c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 ff10 	bl	800569c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d107      	bne.n	8004896 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_TIM_PWM_Start_IT+0x1c4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_TIM_PWM_Start_IT+0x186>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d009      	beq.n	80048be <HAL_TIM_PWM_Start_IT+0x186>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a14      	ldr	r2, [pc, #80]	; (8004900 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIM_PWM_Start_IT+0x186>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a12      	ldr	r2, [pc, #72]	; (8004904 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d111      	bne.n	80048e2 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d010      	beq.n	80048f2 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	e007      	b.n	80048f2 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800

08004908 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e093      	b.n	8004a44 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fd fc93 	bl	800225c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 fc1d 	bl	800519c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	4313      	orrs	r3, r2
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049a8:	f023 030c 	bic.w	r3, r3, #12
 80049ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	4313      	orrs	r3, r2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	011a      	lsls	r2, r3, #4
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	031b      	lsls	r3, r3, #12
 80049d8:	4313      	orrs	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	4313      	orrs	r3, r2
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d110      	bne.n	8004a9e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a82:	7b7b      	ldrb	r3, [r7, #13]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e088      	b.n	8004b9e <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a9c:	e031      	b.n	8004b02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d110      	bne.n	8004ac6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aa4:	7bbb      	ldrb	r3, [r7, #14]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d102      	bne.n	8004ab0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aaa:	7b3b      	ldrb	r3, [r7, #12]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d001      	beq.n	8004ab4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e074      	b.n	8004b9e <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac4:	e01d      	b.n	8004b02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004acc:	7bbb      	ldrb	r3, [r7, #14]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d105      	bne.n	8004ade <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad2:	7b7b      	ldrb	r3, [r7, #13]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d102      	bne.n	8004ade <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ad8:	7b3b      	ldrb	r3, [r7, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e05d      	b.n	8004b9e <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_TIM_Encoder_Start_IT+0xc2>
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d010      	beq.n	8004b2e <HAL_TIM_Encoder_Start_IT+0xe2>
 8004b0c:	e01f      	b.n	8004b4e <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fdc0 	bl	800569c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0202 	orr.w	r2, r2, #2
 8004b2a:	60da      	str	r2, [r3, #12]
      break;
 8004b2c:	e02e      	b.n	8004b8c <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2201      	movs	r2, #1
 8004b34:	2104      	movs	r1, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fdb0 	bl	800569c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0204 	orr.w	r2, r2, #4
 8004b4a:	60da      	str	r2, [r3, #12]
      break;
 8004b4c:	e01e      	b.n	8004b8c <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2201      	movs	r2, #1
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fda0 	bl	800569c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2201      	movs	r2, #1
 8004b62:	2104      	movs	r1, #4
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fd99 	bl	800569c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0202 	orr.w	r2, r2, #2
 8004b78:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0204 	orr.w	r2, r2, #4
 8004b88:	60da      	str	r2, [r3, #12]
      break;
 8004b8a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d122      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d11b      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0202 	mvn.w	r2, #2
 8004bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fabb 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004bee:	e005      	b.n	8004bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 faae 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fabd 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d122      	bne.n	8004c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d11b      	bne.n	8004c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0204 	mvn.w	r2, #4
 8004c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa91 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004c42:	e005      	b.n	8004c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fa84 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa93 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d122      	bne.n	8004caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d11b      	bne.n	8004caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0208 	mvn.w	r2, #8
 8004c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fa67 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004c96:	e005      	b.n	8004ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fa5a 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa69 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d122      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d11b      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f06f 0210 	mvn.w	r2, #16
 8004cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fa3d 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004cea:	e005      	b.n	8004cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa30 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa3f 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10e      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0201 	mvn.w	r2, #1
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fc fa77 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b80      	cmp	r3, #128	; 0x80
 8004d36:	d10e      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d107      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fd7f 	bl	8005854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	d10e      	bne.n	8004d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d107      	bne.n	8004d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa03 	bl	8005188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d10e      	bne.n	8004dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d107      	bne.n	8004dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0220 	mvn.w	r2, #32
 8004da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fd4a 	bl	8005842 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e046      	b.n	8004e60 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	d839      	bhi.n	8004e54 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e55 	.word	0x08004e55
 8004df0:	08004e55 	.word	0x08004e55
 8004df4:	08004e55 	.word	0x08004e55
 8004df8:	08004e2b 	.word	0x08004e2b
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e39 	.word	0x08004e39
 8004e0c:	08004e55 	.word	0x08004e55
 8004e10:	08004e55 	.word	0x08004e55
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e47 	.word	0x08004e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fa1c 	bl	8005260 <TIM_OC1_SetConfig>
      break;
 8004e28:	e015      	b.n	8004e56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fa7b 	bl	800532c <TIM_OC2_SetConfig>
      break;
 8004e36:	e00e      	b.n	8004e56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fade 	bl	8005400 <TIM_OC3_SetConfig>
      break;
 8004e44:	e007      	b.n	8004e56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fb41 	bl	80054d4 <TIM_OC4_SetConfig>
      break;
 8004e52:	e000      	b.n	8004e56 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0ac      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b0c      	cmp	r3, #12
 8004e8e:	f200 809f 	bhi.w	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ecd 	.word	0x08004ecd
 8004e9c:	08004fd1 	.word	0x08004fd1
 8004ea0:	08004fd1 	.word	0x08004fd1
 8004ea4:	08004fd1 	.word	0x08004fd1
 8004ea8:	08004f0d 	.word	0x08004f0d
 8004eac:	08004fd1 	.word	0x08004fd1
 8004eb0:	08004fd1 	.word	0x08004fd1
 8004eb4:	08004fd1 	.word	0x08004fd1
 8004eb8:	08004f4f 	.word	0x08004f4f
 8004ebc:	08004fd1 	.word	0x08004fd1
 8004ec0:	08004fd1 	.word	0x08004fd1
 8004ec4:	08004fd1 	.word	0x08004fd1
 8004ec8:	08004f8f 	.word	0x08004f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f9c4 	bl	8005260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0204 	bic.w	r2, r2, #4
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6999      	ldr	r1, [r3, #24]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	619a      	str	r2, [r3, #24]
      break;
 8004f0a:	e062      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fa0a 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6999      	ldr	r1, [r3, #24]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	619a      	str	r2, [r3, #24]
      break;
 8004f4c:	e041      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fa53 	bl	8005400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0208 	orr.w	r2, r2, #8
 8004f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0204 	bic.w	r2, r2, #4
 8004f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69d9      	ldr	r1, [r3, #28]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	61da      	str	r2, [r3, #28]
      break;
 8004f8c:	e021      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fa9d 	bl	80054d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69d9      	ldr	r1, [r3, #28]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	021a      	lsls	r2, r3, #8
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	61da      	str	r2, [r3, #28]
      break;
 8004fce:	e000      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_ConfigClockSource+0x18>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e0a6      	b.n	800514a <HAL_TIM_ConfigClockSource+0x166>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800501a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005022:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d067      	beq.n	8005104 <HAL_TIM_ConfigClockSource+0x120>
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d80b      	bhi.n	8005050 <HAL_TIM_ConfigClockSource+0x6c>
 8005038:	2b10      	cmp	r3, #16
 800503a:	d073      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0x140>
 800503c:	2b10      	cmp	r3, #16
 800503e:	d802      	bhi.n	8005046 <HAL_TIM_ConfigClockSource+0x62>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d06f      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005044:	e078      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005046:	2b20      	cmp	r3, #32
 8005048:	d06c      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0x140>
 800504a:	2b30      	cmp	r3, #48	; 0x30
 800504c:	d06a      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800504e:	e073      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005050:	2b70      	cmp	r3, #112	; 0x70
 8005052:	d00d      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0x8c>
 8005054:	2b70      	cmp	r3, #112	; 0x70
 8005056:	d804      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x7e>
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d033      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0xe0>
 800505c:	2b60      	cmp	r3, #96	; 0x60
 800505e:	d041      	beq.n	80050e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005060:	e06a      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005066:	d066      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x152>
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506c:	d017      	beq.n	800509e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800506e:	e063      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f000 faed 	bl	800565e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005092:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
      break;
 800509c:	e04c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6899      	ldr	r1, [r3, #8]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f000 fad6 	bl	800565e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c0:	609a      	str	r2, [r3, #8]
      break;
 80050c2:	e039      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f000 fa4d 	bl	8005570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2150      	movs	r1, #80	; 0x50
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 faa4 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 80050e2:	e029      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	461a      	mov	r2, r3
 80050f2:	f000 fa6b 	bl	80055cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2160      	movs	r1, #96	; 0x60
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fa94 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005102:	e019      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	461a      	mov	r2, r3
 8005112:	f000 fa2d 	bl	8005570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2140      	movs	r1, #64	; 0x40
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fa84 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005122:	e009      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f000 fa7b 	bl	800562a <TIM_ITRx_SetConfig>
        break;
 8005134:	e000      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr
	...

0800519c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a29      	ldr	r2, [pc, #164]	; (8005254 <TIM_Base_SetConfig+0xb8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00b      	beq.n	80051cc <TIM_Base_SetConfig+0x30>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d007      	beq.n	80051cc <TIM_Base_SetConfig+0x30>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a26      	ldr	r2, [pc, #152]	; (8005258 <TIM_Base_SetConfig+0xbc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0x30>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a25      	ldr	r2, [pc, #148]	; (800525c <TIM_Base_SetConfig+0xc0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <TIM_Base_SetConfig+0xb8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_Base_SetConfig+0x62>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d007      	beq.n	80051fe <TIM_Base_SetConfig+0x62>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <TIM_Base_SetConfig+0xbc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0x62>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a18      	ldr	r2, [pc, #96]	; (800525c <TIM_Base_SetConfig+0xc0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a07      	ldr	r2, [pc, #28]	; (8005254 <TIM_Base_SetConfig+0xb8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d103      	bne.n	8005244 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	615a      	str	r2, [r3, #20]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800

08005260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a13      	ldr	r2, [pc, #76]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0210 	bic.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <TIM_OC2_SetConfig+0xd0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10d      	bne.n	80053a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC2_SetConfig+0xd0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d113      	bne.n	80053d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr
 80053fc:	40012c00 	.word	0x40012c00

08005400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <TIM_OC3_SetConfig+0xd0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d10d      	bne.n	800547a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <TIM_OC3_SetConfig+0xd0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d113      	bne.n	80054aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40012c00 	.word	0x40012c00

080054d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800551e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	031b      	lsls	r3, r3, #12
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0f      	ldr	r2, [pc, #60]	; (800556c <TIM_OC4_SetConfig+0x98>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d109      	bne.n	8005548 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00

08005570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 030a 	bic.w	r3, r3, #10
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0210 	bic.w	r2, r3, #16
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005608:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	f043 0307 	orr.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005678:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	021a      	lsls	r2, r3, #8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	431a      	orrs	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4313      	orrs	r3, r2
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	609a      	str	r2, [r3, #8]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2201      	movs	r2, #1
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	43db      	mvns	r3, r3
 80056be:	401a      	ands	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	431a      	orrs	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e046      	b.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a16      	ldr	r2, [pc, #88]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d009      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a12      	ldr	r2, [pc, #72]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a10      	ldr	r2, [pc, #64]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10c      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4313      	orrs	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800

080057a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e03d      	b.n	8005838 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr

08005866 <atof>:
 8005866:	2100      	movs	r1, #0
 8005868:	f001 b9f6 	b.w	8006c58 <strtod>

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000038 	.word	0x20000038

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	2500      	movs	r5, #0
 800587c:	4e0c      	ldr	r6, [pc, #48]	; (80058b0 <__libc_init_array+0x38>)
 800587e:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 8005880:	1ba4      	subs	r4, r4, r6
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	42a5      	cmp	r5, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	f003 fbee 	bl	8009068 <_init>
 800588c:	2500      	movs	r5, #0
 800588e:	4e0a      	ldr	r6, [pc, #40]	; (80058b8 <__libc_init_array+0x40>)
 8005890:	4c0a      	ldr	r4, [pc, #40]	; (80058bc <__libc_init_array+0x44>)
 8005892:	1ba4      	subs	r4, r4, r6
 8005894:	10a4      	asrs	r4, r4, #2
 8005896:	42a5      	cmp	r5, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058a0:	4798      	blx	r3
 80058a2:	3501      	adds	r5, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058aa:	4798      	blx	r3
 80058ac:	3501      	adds	r5, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	080093f0 	.word	0x080093f0
 80058b4:	080093f0 	.word	0x080093f0
 80058b8:	080093f0 	.word	0x080093f0
 80058bc:	080093f4 	.word	0x080093f4

080058c0 <memset>:
 80058c0:	4603      	mov	r3, r0
 80058c2:	4402      	add	r2, r0
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d100      	bne.n	80058ca <memset+0xa>
 80058c8:	4770      	bx	lr
 80058ca:	f803 1b01 	strb.w	r1, [r3], #1
 80058ce:	e7f9      	b.n	80058c4 <memset+0x4>

080058d0 <__cvt>:
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d6:	461e      	mov	r6, r3
 80058d8:	bfbb      	ittet	lt
 80058da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80058de:	461e      	movlt	r6, r3
 80058e0:	2300      	movge	r3, #0
 80058e2:	232d      	movlt	r3, #45	; 0x2d
 80058e4:	b088      	sub	sp, #32
 80058e6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058e8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80058ec:	f027 0720 	bic.w	r7, r7, #32
 80058f0:	2f46      	cmp	r7, #70	; 0x46
 80058f2:	4614      	mov	r4, r2
 80058f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80058f6:	700b      	strb	r3, [r1, #0]
 80058f8:	d004      	beq.n	8005904 <__cvt+0x34>
 80058fa:	2f45      	cmp	r7, #69	; 0x45
 80058fc:	d100      	bne.n	8005900 <__cvt+0x30>
 80058fe:	3501      	adds	r5, #1
 8005900:	2302      	movs	r3, #2
 8005902:	e000      	b.n	8005906 <__cvt+0x36>
 8005904:	2303      	movs	r3, #3
 8005906:	aa07      	add	r2, sp, #28
 8005908:	9204      	str	r2, [sp, #16]
 800590a:	aa06      	add	r2, sp, #24
 800590c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005910:	e9cd 3500 	strd	r3, r5, [sp]
 8005914:	4622      	mov	r2, r4
 8005916:	4633      	mov	r3, r6
 8005918:	f001 fafe 	bl	8006f18 <_dtoa_r>
 800591c:	2f47      	cmp	r7, #71	; 0x47
 800591e:	4680      	mov	r8, r0
 8005920:	d102      	bne.n	8005928 <__cvt+0x58>
 8005922:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005924:	07db      	lsls	r3, r3, #31
 8005926:	d526      	bpl.n	8005976 <__cvt+0xa6>
 8005928:	2f46      	cmp	r7, #70	; 0x46
 800592a:	eb08 0905 	add.w	r9, r8, r5
 800592e:	d111      	bne.n	8005954 <__cvt+0x84>
 8005930:	f898 3000 	ldrb.w	r3, [r8]
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d10a      	bne.n	800594e <__cvt+0x7e>
 8005938:	2200      	movs	r2, #0
 800593a:	2300      	movs	r3, #0
 800593c:	4620      	mov	r0, r4
 800593e:	4631      	mov	r1, r6
 8005940:	f7fb f832 	bl	80009a8 <__aeabi_dcmpeq>
 8005944:	b918      	cbnz	r0, 800594e <__cvt+0x7e>
 8005946:	f1c5 0501 	rsb	r5, r5, #1
 800594a:	f8ca 5000 	str.w	r5, [sl]
 800594e:	f8da 3000 	ldr.w	r3, [sl]
 8005952:	4499      	add	r9, r3
 8005954:	2200      	movs	r2, #0
 8005956:	2300      	movs	r3, #0
 8005958:	4620      	mov	r0, r4
 800595a:	4631      	mov	r1, r6
 800595c:	f7fb f824 	bl	80009a8 <__aeabi_dcmpeq>
 8005960:	b938      	cbnz	r0, 8005972 <__cvt+0xa2>
 8005962:	2230      	movs	r2, #48	; 0x30
 8005964:	9b07      	ldr	r3, [sp, #28]
 8005966:	454b      	cmp	r3, r9
 8005968:	d205      	bcs.n	8005976 <__cvt+0xa6>
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	9107      	str	r1, [sp, #28]
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	e7f8      	b.n	8005964 <__cvt+0x94>
 8005972:	f8cd 901c 	str.w	r9, [sp, #28]
 8005976:	4640      	mov	r0, r8
 8005978:	9b07      	ldr	r3, [sp, #28]
 800597a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800597c:	eba3 0308 	sub.w	r3, r3, r8
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	b008      	add	sp, #32
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005988 <__exponent>:
 8005988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800598a:	2900      	cmp	r1, #0
 800598c:	bfb4      	ite	lt
 800598e:	232d      	movlt	r3, #45	; 0x2d
 8005990:	232b      	movge	r3, #43	; 0x2b
 8005992:	4604      	mov	r4, r0
 8005994:	bfb8      	it	lt
 8005996:	4249      	neglt	r1, r1
 8005998:	2909      	cmp	r1, #9
 800599a:	f804 2b02 	strb.w	r2, [r4], #2
 800599e:	7043      	strb	r3, [r0, #1]
 80059a0:	dd21      	ble.n	80059e6 <__exponent+0x5e>
 80059a2:	f10d 0307 	add.w	r3, sp, #7
 80059a6:	461f      	mov	r7, r3
 80059a8:	260a      	movs	r6, #10
 80059aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80059ae:	fb06 1115 	mls	r1, r6, r5, r1
 80059b2:	2d09      	cmp	r5, #9
 80059b4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80059b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80059bc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80059c0:	4629      	mov	r1, r5
 80059c2:	dc09      	bgt.n	80059d8 <__exponent+0x50>
 80059c4:	3130      	adds	r1, #48	; 0x30
 80059c6:	3b02      	subs	r3, #2
 80059c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059cc:	42bb      	cmp	r3, r7
 80059ce:	4622      	mov	r2, r4
 80059d0:	d304      	bcc.n	80059dc <__exponent+0x54>
 80059d2:	1a10      	subs	r0, r2, r0
 80059d4:	b003      	add	sp, #12
 80059d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d8:	4613      	mov	r3, r2
 80059da:	e7e6      	b.n	80059aa <__exponent+0x22>
 80059dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e0:	f804 2b01 	strb.w	r2, [r4], #1
 80059e4:	e7f2      	b.n	80059cc <__exponent+0x44>
 80059e6:	2330      	movs	r3, #48	; 0x30
 80059e8:	4419      	add	r1, r3
 80059ea:	7083      	strb	r3, [r0, #2]
 80059ec:	1d02      	adds	r2, r0, #4
 80059ee:	70c1      	strb	r1, [r0, #3]
 80059f0:	e7ef      	b.n	80059d2 <__exponent+0x4a>
	...

080059f4 <_printf_float>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	b091      	sub	sp, #68	; 0x44
 80059fa:	460c      	mov	r4, r1
 80059fc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80059fe:	4693      	mov	fp, r2
 8005a00:	461e      	mov	r6, r3
 8005a02:	4605      	mov	r5, r0
 8005a04:	f002 fce0 	bl	80083c8 <_localeconv_r>
 8005a08:	6803      	ldr	r3, [r0, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0e:	f7fa fb9f 	bl	8000150 <strlen>
 8005a12:	2300      	movs	r3, #0
 8005a14:	930e      	str	r3, [sp, #56]	; 0x38
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	900a      	str	r0, [sp, #40]	; 0x28
 8005a1a:	3307      	adds	r3, #7
 8005a1c:	f023 0307 	bic.w	r3, r3, #7
 8005a20:	f103 0208 	add.w	r2, r3, #8
 8005a24:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005a28:	f8d4 a000 	ldr.w	sl, [r4]
 8005a2c:	603a      	str	r2, [r7, #0]
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a36:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a44:	4ba6      	ldr	r3, [pc, #664]	; (8005ce0 <_printf_float+0x2ec>)
 8005a46:	4638      	mov	r0, r7
 8005a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a4a:	f7fa ffdf 	bl	8000a0c <__aeabi_dcmpun>
 8005a4e:	bb68      	cbnz	r0, 8005aac <_printf_float+0xb8>
 8005a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a54:	4ba2      	ldr	r3, [pc, #648]	; (8005ce0 <_printf_float+0x2ec>)
 8005a56:	4638      	mov	r0, r7
 8005a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a5a:	f7fa ffb9 	bl	80009d0 <__aeabi_dcmple>
 8005a5e:	bb28      	cbnz	r0, 8005aac <_printf_float+0xb8>
 8005a60:	2200      	movs	r2, #0
 8005a62:	2300      	movs	r3, #0
 8005a64:	4638      	mov	r0, r7
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fa ffa8 	bl	80009bc <__aeabi_dcmplt>
 8005a6c:	b110      	cbz	r0, 8005a74 <_printf_float+0x80>
 8005a6e:	232d      	movs	r3, #45	; 0x2d
 8005a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a74:	4f9b      	ldr	r7, [pc, #620]	; (8005ce4 <_printf_float+0x2f0>)
 8005a76:	4b9c      	ldr	r3, [pc, #624]	; (8005ce8 <_printf_float+0x2f4>)
 8005a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a7c:	bf98      	it	ls
 8005a7e:	461f      	movls	r7, r3
 8005a80:	2303      	movs	r3, #3
 8005a82:	f04f 0900 	mov.w	r9, #0
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	f02a 0304 	bic.w	r3, sl, #4
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	9600      	str	r6, [sp, #0]
 8005a90:	465b      	mov	r3, fp
 8005a92:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a94:	4621      	mov	r1, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 f9e2 	bl	8005e60 <_printf_common>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f040 8090 	bne.w	8005bc2 <_printf_float+0x1ce>
 8005aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa6:	b011      	add	sp, #68	; 0x44
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	463a      	mov	r2, r7
 8005aae:	464b      	mov	r3, r9
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fa ffaa 	bl	8000a0c <__aeabi_dcmpun>
 8005ab8:	b110      	cbz	r0, 8005ac0 <_printf_float+0xcc>
 8005aba:	4f8c      	ldr	r7, [pc, #560]	; (8005cec <_printf_float+0x2f8>)
 8005abc:	4b8c      	ldr	r3, [pc, #560]	; (8005cf0 <_printf_float+0x2fc>)
 8005abe:	e7db      	b.n	8005a78 <_printf_float+0x84>
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	a80d      	add	r0, sp, #52	; 0x34
 8005aca:	a90e      	add	r1, sp, #56	; 0x38
 8005acc:	d140      	bne.n	8005b50 <_printf_float+0x15c>
 8005ace:	2306      	movs	r3, #6
 8005ad0:	6063      	str	r3, [r4, #4]
 8005ad2:	f04f 0c00 	mov.w	ip, #0
 8005ad6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005ada:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	6022      	str	r2, [r4, #0]
 8005ae2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	463a      	mov	r2, r7
 8005aea:	464b      	mov	r3, r9
 8005aec:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005af0:	4628      	mov	r0, r5
 8005af2:	f7ff feed 	bl	80058d0 <__cvt>
 8005af6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005afa:	2b47      	cmp	r3, #71	; 0x47
 8005afc:	4607      	mov	r7, r0
 8005afe:	d109      	bne.n	8005b14 <_printf_float+0x120>
 8005b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b02:	1cd8      	adds	r0, r3, #3
 8005b04:	db02      	blt.n	8005b0c <_printf_float+0x118>
 8005b06:	6862      	ldr	r2, [r4, #4]
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	dd47      	ble.n	8005b9c <_printf_float+0x1a8>
 8005b0c:	f1a8 0802 	sub.w	r8, r8, #2
 8005b10:	fa5f f888 	uxtb.w	r8, r8
 8005b14:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005b18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b1a:	d824      	bhi.n	8005b66 <_printf_float+0x172>
 8005b1c:	3901      	subs	r1, #1
 8005b1e:	4642      	mov	r2, r8
 8005b20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b24:	910d      	str	r1, [sp, #52]	; 0x34
 8005b26:	f7ff ff2f 	bl	8005988 <__exponent>
 8005b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b2c:	4681      	mov	r9, r0
 8005b2e:	1813      	adds	r3, r2, r0
 8005b30:	2a01      	cmp	r2, #1
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	dc02      	bgt.n	8005b3c <_printf_float+0x148>
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	07d1      	lsls	r1, r2, #31
 8005b3a:	d501      	bpl.n	8005b40 <_printf_float+0x14c>
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	6123      	str	r3, [r4, #16]
 8005b40:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0a2      	beq.n	8005a8e <_printf_float+0x9a>
 8005b48:	232d      	movs	r3, #45	; 0x2d
 8005b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4e:	e79e      	b.n	8005a8e <_printf_float+0x9a>
 8005b50:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005b54:	f000 816e 	beq.w	8005e34 <_printf_float+0x440>
 8005b58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b5c:	d1b9      	bne.n	8005ad2 <_printf_float+0xde>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1b7      	bne.n	8005ad2 <_printf_float+0xde>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e7b4      	b.n	8005ad0 <_printf_float+0xdc>
 8005b66:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005b6a:	d119      	bne.n	8005ba0 <_printf_float+0x1ac>
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	6863      	ldr	r3, [r4, #4]
 8005b70:	dd0c      	ble.n	8005b8c <_printf_float+0x198>
 8005b72:	6121      	str	r1, [r4, #16]
 8005b74:	b913      	cbnz	r3, 8005b7c <_printf_float+0x188>
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	07d2      	lsls	r2, r2, #31
 8005b7a:	d502      	bpl.n	8005b82 <_printf_float+0x18e>
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	440b      	add	r3, r1
 8005b80:	6123      	str	r3, [r4, #16]
 8005b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b84:	f04f 0900 	mov.w	r9, #0
 8005b88:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b8a:	e7d9      	b.n	8005b40 <_printf_float+0x14c>
 8005b8c:	b913      	cbnz	r3, 8005b94 <_printf_float+0x1a0>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	07d0      	lsls	r0, r2, #31
 8005b92:	d501      	bpl.n	8005b98 <_printf_float+0x1a4>
 8005b94:	3302      	adds	r3, #2
 8005b96:	e7f3      	b.n	8005b80 <_printf_float+0x18c>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f1      	b.n	8005b80 <_printf_float+0x18c>
 8005b9c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005ba0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	db05      	blt.n	8005bb4 <_printf_float+0x1c0>
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	6123      	str	r3, [r4, #16]
 8005bac:	07d1      	lsls	r1, r2, #31
 8005bae:	d5e8      	bpl.n	8005b82 <_printf_float+0x18e>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	e7e5      	b.n	8005b80 <_printf_float+0x18c>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bfcc      	ite	gt
 8005bb8:	2301      	movgt	r3, #1
 8005bba:	f1c3 0302 	rsble	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	e7de      	b.n	8005b80 <_printf_float+0x18c>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	055a      	lsls	r2, r3, #21
 8005bc6:	d407      	bmi.n	8005bd8 <_printf_float+0x1e4>
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4659      	mov	r1, fp
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b0      	blx	r6
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d129      	bne.n	8005c2a <_printf_float+0x236>
 8005bd6:	e764      	b.n	8005aa2 <_printf_float+0xae>
 8005bd8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005bdc:	f240 80d7 	bls.w	8005d8e <_printf_float+0x39a>
 8005be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005be4:	2200      	movs	r2, #0
 8005be6:	2300      	movs	r3, #0
 8005be8:	f7fa fede 	bl	80009a8 <__aeabi_dcmpeq>
 8005bec:	b388      	cbz	r0, 8005c52 <_printf_float+0x25e>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <_printf_float+0x300>)
 8005bf2:	4659      	mov	r1, fp
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b0      	blx	r6
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f af52 	beq.w	8005aa2 <_printf_float+0xae>
 8005bfe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c02:	429a      	cmp	r2, r3
 8005c04:	db02      	blt.n	8005c0c <_printf_float+0x218>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	07d8      	lsls	r0, r3, #31
 8005c0a:	d50e      	bpl.n	8005c2a <_printf_float+0x236>
 8005c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c10:	4659      	mov	r1, fp
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b0      	blx	r6
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f af43 	beq.w	8005aa2 <_printf_float+0xae>
 8005c1c:	2700      	movs	r7, #0
 8005c1e:	f104 081a 	add.w	r8, r4, #26
 8005c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c24:	3b01      	subs	r3, #1
 8005c26:	42bb      	cmp	r3, r7
 8005c28:	dc09      	bgt.n	8005c3e <_printf_float+0x24a>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	079f      	lsls	r7, r3, #30
 8005c2e:	f100 80fd 	bmi.w	8005e2c <_printf_float+0x438>
 8005c32:	68e0      	ldr	r0, [r4, #12]
 8005c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c36:	4298      	cmp	r0, r3
 8005c38:	bfb8      	it	lt
 8005c3a:	4618      	movlt	r0, r3
 8005c3c:	e733      	b.n	8005aa6 <_printf_float+0xb2>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4642      	mov	r2, r8
 8005c42:	4659      	mov	r1, fp
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b0      	blx	r6
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f af2a 	beq.w	8005aa2 <_printf_float+0xae>
 8005c4e:	3701      	adds	r7, #1
 8005c50:	e7e7      	b.n	8005c22 <_printf_float+0x22e>
 8005c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dc2b      	bgt.n	8005cb0 <_printf_float+0x2bc>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <_printf_float+0x300>)
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b0      	blx	r6
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af1d 	beq.w	8005aa2 <_printf_float+0xae>
 8005c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c6a:	b923      	cbnz	r3, 8005c76 <_printf_float+0x282>
 8005c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c6e:	b913      	cbnz	r3, 8005c76 <_printf_float+0x282>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	d5d9      	bpl.n	8005c2a <_printf_float+0x236>
 8005c76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f af0e 	beq.w	8005aa2 <_printf_float+0xae>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 091a 	add.w	r9, r4, #26
 8005c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c90:	425b      	negs	r3, r3
 8005c92:	4543      	cmp	r3, r8
 8005c94:	dc01      	bgt.n	8005c9a <_printf_float+0x2a6>
 8005c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c98:	e797      	b.n	8005bca <_printf_float+0x1d6>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	464a      	mov	r2, r9
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b0      	blx	r6
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	f43f aefc 	beq.w	8005aa2 <_printf_float+0xae>
 8005caa:	f108 0801 	add.w	r8, r8, #1
 8005cae:	e7ee      	b.n	8005c8e <_printf_float+0x29a>
 8005cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	bfa8      	it	ge
 8005cb8:	461a      	movge	r2, r3
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	4690      	mov	r8, r2
 8005cbe:	dd07      	ble.n	8005cd0 <_printf_float+0x2dc>
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	463a      	mov	r2, r7
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b0      	blx	r6
 8005cca:	3001      	adds	r0, #1
 8005ccc:	f43f aee9 	beq.w	8005aa2 <_printf_float+0xae>
 8005cd0:	f104 031a 	add.w	r3, r4, #26
 8005cd4:	f04f 0a00 	mov.w	sl, #0
 8005cd8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005cdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cde:	e015      	b.n	8005d0c <_printf_float+0x318>
 8005ce0:	7fefffff 	.word	0x7fefffff
 8005ce4:	08009110 	.word	0x08009110
 8005ce8:	0800910c 	.word	0x0800910c
 8005cec:	08009118 	.word	0x08009118
 8005cf0:	08009114 	.word	0x08009114
 8005cf4:	0800911c 	.word	0x0800911c
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b0      	blx	r6
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f aecd 	beq.w	8005aa2 <_printf_float+0xae>
 8005d08:	f10a 0a01 	add.w	sl, sl, #1
 8005d0c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005d10:	eba9 0308 	sub.w	r3, r9, r8
 8005d14:	4553      	cmp	r3, sl
 8005d16:	dcef      	bgt.n	8005cf8 <_printf_float+0x304>
 8005d18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	444f      	add	r7, r9
 8005d20:	db14      	blt.n	8005d4c <_printf_float+0x358>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	07da      	lsls	r2, r3, #31
 8005d26:	d411      	bmi.n	8005d4c <_printf_float+0x358>
 8005d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d2c:	eba3 0209 	sub.w	r2, r3, r9
 8005d30:	eba3 0901 	sub.w	r9, r3, r1
 8005d34:	4591      	cmp	r9, r2
 8005d36:	bfa8      	it	ge
 8005d38:	4691      	movge	r9, r2
 8005d3a:	f1b9 0f00 	cmp.w	r9, #0
 8005d3e:	dc0d      	bgt.n	8005d5c <_printf_float+0x368>
 8005d40:	2700      	movs	r7, #0
 8005d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d46:	f104 081a 	add.w	r8, r4, #26
 8005d4a:	e018      	b.n	8005d7e <_printf_float+0x38a>
 8005d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d50:	4659      	mov	r1, fp
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b0      	blx	r6
 8005d56:	3001      	adds	r0, #1
 8005d58:	d1e6      	bne.n	8005d28 <_printf_float+0x334>
 8005d5a:	e6a2      	b.n	8005aa2 <_printf_float+0xae>
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	463a      	mov	r2, r7
 8005d60:	4659      	mov	r1, fp
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b0      	blx	r6
 8005d66:	3001      	adds	r0, #1
 8005d68:	d1ea      	bne.n	8005d40 <_printf_float+0x34c>
 8005d6a:	e69a      	b.n	8005aa2 <_printf_float+0xae>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4642      	mov	r2, r8
 8005d70:	4659      	mov	r1, fp
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b0      	blx	r6
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f ae93 	beq.w	8005aa2 <_printf_float+0xae>
 8005d7c:	3701      	adds	r7, #1
 8005d7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	eba3 0309 	sub.w	r3, r3, r9
 8005d88:	42bb      	cmp	r3, r7
 8005d8a:	dcef      	bgt.n	8005d6c <_printf_float+0x378>
 8005d8c:	e74d      	b.n	8005c2a <_printf_float+0x236>
 8005d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d90:	2a01      	cmp	r2, #1
 8005d92:	dc01      	bgt.n	8005d98 <_printf_float+0x3a4>
 8005d94:	07db      	lsls	r3, r3, #31
 8005d96:	d538      	bpl.n	8005e0a <_printf_float+0x416>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	463a      	mov	r2, r7
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b0      	blx	r6
 8005da2:	3001      	adds	r0, #1
 8005da4:	f43f ae7d 	beq.w	8005aa2 <_printf_float+0xae>
 8005da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dac:	4659      	mov	r1, fp
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b0      	blx	r6
 8005db2:	3001      	adds	r0, #1
 8005db4:	f107 0701 	add.w	r7, r7, #1
 8005db8:	f43f ae73 	beq.w	8005aa2 <_printf_float+0xae>
 8005dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f7fa fded 	bl	80009a8 <__aeabi_dcmpeq>
 8005dce:	b9c0      	cbnz	r0, 8005e02 <_printf_float+0x40e>
 8005dd0:	4643      	mov	r3, r8
 8005dd2:	463a      	mov	r2, r7
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b0      	blx	r6
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d10d      	bne.n	8005dfa <_printf_float+0x406>
 8005dde:	e660      	b.n	8005aa2 <_printf_float+0xae>
 8005de0:	2301      	movs	r3, #1
 8005de2:	4642      	mov	r2, r8
 8005de4:	4659      	mov	r1, fp
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b0      	blx	r6
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f ae59 	beq.w	8005aa2 <_printf_float+0xae>
 8005df0:	3701      	adds	r7, #1
 8005df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df4:	3b01      	subs	r3, #1
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	dcf2      	bgt.n	8005de0 <_printf_float+0x3ec>
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e00:	e6e4      	b.n	8005bcc <_printf_float+0x1d8>
 8005e02:	2700      	movs	r7, #0
 8005e04:	f104 081a 	add.w	r8, r4, #26
 8005e08:	e7f3      	b.n	8005df2 <_printf_float+0x3fe>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e7e1      	b.n	8005dd2 <_printf_float+0x3de>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4642      	mov	r2, r8
 8005e12:	4659      	mov	r1, fp
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b0      	blx	r6
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f ae42 	beq.w	8005aa2 <_printf_float+0xae>
 8005e1e:	3701      	adds	r7, #1
 8005e20:	68e3      	ldr	r3, [r4, #12]
 8005e22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	42bb      	cmp	r3, r7
 8005e28:	dcf1      	bgt.n	8005e0e <_printf_float+0x41a>
 8005e2a:	e702      	b.n	8005c32 <_printf_float+0x23e>
 8005e2c:	2700      	movs	r7, #0
 8005e2e:	f104 0819 	add.w	r8, r4, #25
 8005e32:	e7f5      	b.n	8005e20 <_printf_float+0x42c>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f43f ae94 	beq.w	8005b62 <_printf_float+0x16e>
 8005e3a:	f04f 0c00 	mov.w	ip, #0
 8005e3e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005e42:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005e4c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	463a      	mov	r2, r7
 8005e54:	464b      	mov	r3, r9
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7ff fd3a 	bl	80058d0 <__cvt>
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	e64f      	b.n	8005b00 <_printf_float+0x10c>

08005e60 <_printf_common>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	4691      	mov	r9, r2
 8005e66:	461f      	mov	r7, r3
 8005e68:	688a      	ldr	r2, [r1, #8]
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	bfb8      	it	lt
 8005e72:	4613      	movlt	r3, r2
 8005e74:	f8c9 3000 	str.w	r3, [r9]
 8005e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e82:	b112      	cbz	r2, 8005e8a <_printf_common+0x2a>
 8005e84:	3301      	adds	r3, #1
 8005e86:	f8c9 3000 	str.w	r3, [r9]
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	0699      	lsls	r1, r3, #26
 8005e8e:	bf42      	ittt	mi
 8005e90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005e94:	3302      	addmi	r3, #2
 8005e96:	f8c9 3000 	strmi.w	r3, [r9]
 8005e9a:	6825      	ldr	r5, [r4, #0]
 8005e9c:	f015 0506 	ands.w	r5, r5, #6
 8005ea0:	d107      	bne.n	8005eb2 <_printf_common+0x52>
 8005ea2:	f104 0a19 	add.w	sl, r4, #25
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	42ab      	cmp	r3, r5
 8005eb0:	dc29      	bgt.n	8005f06 <_printf_common+0xa6>
 8005eb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	3300      	adds	r3, #0
 8005eba:	bf18      	it	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	0692      	lsls	r2, r2, #26
 8005ec0:	d42e      	bmi.n	8005f20 <_printf_common+0xc0>
 8005ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	4630      	mov	r0, r6
 8005eca:	47c0      	blx	r8
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d021      	beq.n	8005f14 <_printf_common+0xb4>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	68e5      	ldr	r5, [r4, #12]
 8005ed4:	f003 0306 	and.w	r3, r3, #6
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	bf18      	it	ne
 8005edc:	2500      	movne	r5, #0
 8005ede:	f8d9 2000 	ldr.w	r2, [r9]
 8005ee2:	f04f 0900 	mov.w	r9, #0
 8005ee6:	bf08      	it	eq
 8005ee8:	1aad      	subeq	r5, r5, r2
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	6922      	ldr	r2, [r4, #16]
 8005eee:	bf08      	it	eq
 8005ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bfc4      	itt	gt
 8005ef8:	1a9b      	subgt	r3, r3, r2
 8005efa:	18ed      	addgt	r5, r5, r3
 8005efc:	341a      	adds	r4, #26
 8005efe:	454d      	cmp	r5, r9
 8005f00:	d11a      	bne.n	8005f38 <_printf_common+0xd8>
 8005f02:	2000      	movs	r0, #0
 8005f04:	e008      	b.n	8005f18 <_printf_common+0xb8>
 8005f06:	2301      	movs	r3, #1
 8005f08:	4652      	mov	r2, sl
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	47c0      	blx	r8
 8005f10:	3001      	adds	r0, #1
 8005f12:	d103      	bne.n	8005f1c <_printf_common+0xbc>
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1c:	3501      	adds	r5, #1
 8005f1e:	e7c2      	b.n	8005ea6 <_printf_common+0x46>
 8005f20:	2030      	movs	r0, #48	; 0x30
 8005f22:	18e1      	adds	r1, r4, r3
 8005f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f2e:	4422      	add	r2, r4
 8005f30:	3302      	adds	r3, #2
 8005f32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f36:	e7c4      	b.n	8005ec2 <_printf_common+0x62>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	4630      	mov	r0, r6
 8005f40:	47c0      	blx	r8
 8005f42:	3001      	adds	r0, #1
 8005f44:	d0e6      	beq.n	8005f14 <_printf_common+0xb4>
 8005f46:	f109 0901 	add.w	r9, r9, #1
 8005f4a:	e7d8      	b.n	8005efe <_printf_common+0x9e>

08005f4c <_puts_r>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	460e      	mov	r6, r1
 8005f50:	4605      	mov	r5, r0
 8005f52:	b118      	cbz	r0, 8005f5c <_puts_r+0x10>
 8005f54:	6983      	ldr	r3, [r0, #24]
 8005f56:	b90b      	cbnz	r3, 8005f5c <_puts_r+0x10>
 8005f58:	f001 fe82 	bl	8007c60 <__sinit>
 8005f5c:	69ab      	ldr	r3, [r5, #24]
 8005f5e:	68ac      	ldr	r4, [r5, #8]
 8005f60:	b913      	cbnz	r3, 8005f68 <_puts_r+0x1c>
 8005f62:	4628      	mov	r0, r5
 8005f64:	f001 fe7c 	bl	8007c60 <__sinit>
 8005f68:	4b23      	ldr	r3, [pc, #140]	; (8005ff8 <_puts_r+0xac>)
 8005f6a:	429c      	cmp	r4, r3
 8005f6c:	d117      	bne.n	8005f9e <_puts_r+0x52>
 8005f6e:	686c      	ldr	r4, [r5, #4]
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	071b      	lsls	r3, r3, #28
 8005f74:	d51d      	bpl.n	8005fb2 <_puts_r+0x66>
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	b1db      	cbz	r3, 8005fb2 <_puts_r+0x66>
 8005f7a:	3e01      	subs	r6, #1
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f82:	3b01      	subs	r3, #1
 8005f84:	60a3      	str	r3, [r4, #8]
 8005f86:	b9e9      	cbnz	r1, 8005fc4 <_puts_r+0x78>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da2e      	bge.n	8005fea <_puts_r+0x9e>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	210a      	movs	r1, #10
 8005f90:	4628      	mov	r0, r5
 8005f92:	f000 fe73 	bl	8006c7c <__swbuf_r>
 8005f96:	3001      	adds	r0, #1
 8005f98:	d011      	beq.n	8005fbe <_puts_r+0x72>
 8005f9a:	200a      	movs	r0, #10
 8005f9c:	e011      	b.n	8005fc2 <_puts_r+0x76>
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <_puts_r+0xb0>)
 8005fa0:	429c      	cmp	r4, r3
 8005fa2:	d101      	bne.n	8005fa8 <_puts_r+0x5c>
 8005fa4:	68ac      	ldr	r4, [r5, #8]
 8005fa6:	e7e3      	b.n	8005f70 <_puts_r+0x24>
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <_puts_r+0xb4>)
 8005faa:	429c      	cmp	r4, r3
 8005fac:	bf08      	it	eq
 8005fae:	68ec      	ldreq	r4, [r5, #12]
 8005fb0:	e7de      	b.n	8005f70 <_puts_r+0x24>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 feb3 	bl	8006d20 <__swsetup_r>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0dd      	beq.n	8005f7a <_puts_r+0x2e>
 8005fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da04      	bge.n	8005fd2 <_puts_r+0x86>
 8005fc8:	69a2      	ldr	r2, [r4, #24]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	dc06      	bgt.n	8005fdc <_puts_r+0x90>
 8005fce:	290a      	cmp	r1, #10
 8005fd0:	d004      	beq.n	8005fdc <_puts_r+0x90>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	6022      	str	r2, [r4, #0]
 8005fd8:	7019      	strb	r1, [r3, #0]
 8005fda:	e7cf      	b.n	8005f7c <_puts_r+0x30>
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 fe4c 	bl	8006c7c <__swbuf_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1c9      	bne.n	8005f7c <_puts_r+0x30>
 8005fe8:	e7e9      	b.n	8005fbe <_puts_r+0x72>
 8005fea:	200a      	movs	r0, #10
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	7018      	strb	r0, [r3, #0]
 8005ff4:	e7e5      	b.n	8005fc2 <_puts_r+0x76>
 8005ff6:	bf00      	nop
 8005ff8:	080091a0 	.word	0x080091a0
 8005ffc:	080091c0 	.word	0x080091c0
 8006000:	08009180 	.word	0x08009180

08006004 <puts>:
 8006004:	4b02      	ldr	r3, [pc, #8]	; (8006010 <puts+0xc>)
 8006006:	4601      	mov	r1, r0
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	f7ff bf9f 	b.w	8005f4c <_puts_r>
 800600e:	bf00      	nop
 8006010:	20000038 	.word	0x20000038

08006014 <sulp>:
 8006014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006018:	460f      	mov	r7, r1
 800601a:	4690      	mov	r8, r2
 800601c:	f002 fd36 	bl	8008a8c <__ulp>
 8006020:	4604      	mov	r4, r0
 8006022:	460d      	mov	r5, r1
 8006024:	f1b8 0f00 	cmp.w	r8, #0
 8006028:	d011      	beq.n	800604e <sulp+0x3a>
 800602a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800602e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006032:	2b00      	cmp	r3, #0
 8006034:	dd0b      	ble.n	800604e <sulp+0x3a>
 8006036:	2400      	movs	r4, #0
 8006038:	051b      	lsls	r3, r3, #20
 800603a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800603e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006042:	4622      	mov	r2, r4
 8006044:	462b      	mov	r3, r5
 8006046:	f7fa fa47 	bl	80004d8 <__aeabi_dmul>
 800604a:	4604      	mov	r4, r0
 800604c:	460d      	mov	r5, r1
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006058 <_strtod_l>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	461f      	mov	r7, r3
 800605e:	2300      	movs	r3, #0
 8006060:	b0a1      	sub	sp, #132	; 0x84
 8006062:	4683      	mov	fp, r0
 8006064:	4638      	mov	r0, r7
 8006066:	460e      	mov	r6, r1
 8006068:	9217      	str	r2, [sp, #92]	; 0x5c
 800606a:	931c      	str	r3, [sp, #112]	; 0x70
 800606c:	f002 f9aa 	bl	80083c4 <__localeconv_l>
 8006070:	4680      	mov	r8, r0
 8006072:	6800      	ldr	r0, [r0, #0]
 8006074:	f7fa f86c 	bl	8000150 <strlen>
 8006078:	f04f 0900 	mov.w	r9, #0
 800607c:	4604      	mov	r4, r0
 800607e:	f04f 0a00 	mov.w	sl, #0
 8006082:	961b      	str	r6, [sp, #108]	; 0x6c
 8006084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	2a0d      	cmp	r2, #13
 800608a:	d832      	bhi.n	80060f2 <_strtod_l+0x9a>
 800608c:	2a09      	cmp	r2, #9
 800608e:	d236      	bcs.n	80060fe <_strtod_l+0xa6>
 8006090:	2a00      	cmp	r2, #0
 8006092:	d03e      	beq.n	8006112 <_strtod_l+0xba>
 8006094:	2300      	movs	r3, #0
 8006096:	930d      	str	r3, [sp, #52]	; 0x34
 8006098:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800609a:	782b      	ldrb	r3, [r5, #0]
 800609c:	2b30      	cmp	r3, #48	; 0x30
 800609e:	f040 80ac 	bne.w	80061fa <_strtod_l+0x1a2>
 80060a2:	786b      	ldrb	r3, [r5, #1]
 80060a4:	2b58      	cmp	r3, #88	; 0x58
 80060a6:	d001      	beq.n	80060ac <_strtod_l+0x54>
 80060a8:	2b78      	cmp	r3, #120	; 0x78
 80060aa:	d167      	bne.n	800617c <_strtod_l+0x124>
 80060ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ae:	9702      	str	r7, [sp, #8]
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	ab1c      	add	r3, sp, #112	; 0x70
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	4a89      	ldr	r2, [pc, #548]	; (80062dc <_strtod_l+0x284>)
 80060b8:	ab1d      	add	r3, sp, #116	; 0x74
 80060ba:	a91b      	add	r1, sp, #108	; 0x6c
 80060bc:	4658      	mov	r0, fp
 80060be:	f001 fea9 	bl	8007e14 <__gethex>
 80060c2:	f010 0407 	ands.w	r4, r0, #7
 80060c6:	4606      	mov	r6, r0
 80060c8:	d005      	beq.n	80060d6 <_strtod_l+0x7e>
 80060ca:	2c06      	cmp	r4, #6
 80060cc:	d12b      	bne.n	8006126 <_strtod_l+0xce>
 80060ce:	2300      	movs	r3, #0
 80060d0:	3501      	adds	r5, #1
 80060d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80060d4:	930d      	str	r3, [sp, #52]	; 0x34
 80060d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 85a6 	bne.w	8006c2a <_strtod_l+0xbd2>
 80060de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e0:	b1e3      	cbz	r3, 800611c <_strtod_l+0xc4>
 80060e2:	464a      	mov	r2, r9
 80060e4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80060e8:	4610      	mov	r0, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	b021      	add	sp, #132	; 0x84
 80060ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f2:	2a2b      	cmp	r2, #43	; 0x2b
 80060f4:	d015      	beq.n	8006122 <_strtod_l+0xca>
 80060f6:	2a2d      	cmp	r2, #45	; 0x2d
 80060f8:	d004      	beq.n	8006104 <_strtod_l+0xac>
 80060fa:	2a20      	cmp	r2, #32
 80060fc:	d1ca      	bne.n	8006094 <_strtod_l+0x3c>
 80060fe:	3301      	adds	r3, #1
 8006100:	931b      	str	r3, [sp, #108]	; 0x6c
 8006102:	e7bf      	b.n	8006084 <_strtod_l+0x2c>
 8006104:	2201      	movs	r2, #1
 8006106:	920d      	str	r2, [sp, #52]	; 0x34
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	921b      	str	r2, [sp, #108]	; 0x6c
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1c2      	bne.n	8006098 <_strtod_l+0x40>
 8006112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006114:	961b      	str	r6, [sp, #108]	; 0x6c
 8006116:	2b00      	cmp	r3, #0
 8006118:	f040 8585 	bne.w	8006c26 <_strtod_l+0xbce>
 800611c:	464a      	mov	r2, r9
 800611e:	4653      	mov	r3, sl
 8006120:	e7e2      	b.n	80060e8 <_strtod_l+0x90>
 8006122:	2200      	movs	r2, #0
 8006124:	e7ef      	b.n	8006106 <_strtod_l+0xae>
 8006126:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006128:	b13a      	cbz	r2, 800613a <_strtod_l+0xe2>
 800612a:	2135      	movs	r1, #53	; 0x35
 800612c:	a81e      	add	r0, sp, #120	; 0x78
 800612e:	f002 fda0 	bl	8008c72 <__copybits>
 8006132:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006134:	4658      	mov	r0, fp
 8006136:	f002 fa12 	bl	800855e <_Bfree>
 800613a:	3c01      	subs	r4, #1
 800613c:	2c04      	cmp	r4, #4
 800613e:	d806      	bhi.n	800614e <_strtod_l+0xf6>
 8006140:	e8df f004 	tbb	[pc, r4]
 8006144:	1714030a 	.word	0x1714030a
 8006148:	0a          	.byte	0x0a
 8006149:	00          	.byte	0x00
 800614a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800614e:	0731      	lsls	r1, r6, #28
 8006150:	d5c1      	bpl.n	80060d6 <_strtod_l+0x7e>
 8006152:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006156:	e7be      	b.n	80060d6 <_strtod_l+0x7e>
 8006158:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800615a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800615e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006166:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800616a:	e7f0      	b.n	800614e <_strtod_l+0xf6>
 800616c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80062e0 <_strtod_l+0x288>
 8006170:	e7ed      	b.n	800614e <_strtod_l+0xf6>
 8006172:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006176:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800617a:	e7e8      	b.n	800614e <_strtod_l+0xf6>
 800617c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	921b      	str	r2, [sp, #108]	; 0x6c
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	2b30      	cmp	r3, #48	; 0x30
 8006186:	d0f9      	beq.n	800617c <_strtod_l+0x124>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0a4      	beq.n	80060d6 <_strtod_l+0x7e>
 800618c:	2301      	movs	r3, #1
 800618e:	2500      	movs	r5, #0
 8006190:	220a      	movs	r2, #10
 8006192:	9307      	str	r3, [sp, #28]
 8006194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006196:	9506      	str	r5, [sp, #24]
 8006198:	9308      	str	r3, [sp, #32]
 800619a:	9504      	str	r5, [sp, #16]
 800619c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800619e:	7807      	ldrb	r7, [r0, #0]
 80061a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80061a4:	b2d9      	uxtb	r1, r3
 80061a6:	2909      	cmp	r1, #9
 80061a8:	d929      	bls.n	80061fe <_strtod_l+0x1a6>
 80061aa:	4622      	mov	r2, r4
 80061ac:	f8d8 1000 	ldr.w	r1, [r8]
 80061b0:	f002 fea1 	bl	8008ef6 <strncmp>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d031      	beq.n	800621c <_strtod_l+0x1c4>
 80061b8:	2000      	movs	r0, #0
 80061ba:	463b      	mov	r3, r7
 80061bc:	4602      	mov	r2, r0
 80061be:	9c04      	ldr	r4, [sp, #16]
 80061c0:	9005      	str	r0, [sp, #20]
 80061c2:	2b65      	cmp	r3, #101	; 0x65
 80061c4:	d001      	beq.n	80061ca <_strtod_l+0x172>
 80061c6:	2b45      	cmp	r3, #69	; 0x45
 80061c8:	d114      	bne.n	80061f4 <_strtod_l+0x19c>
 80061ca:	b924      	cbnz	r4, 80061d6 <_strtod_l+0x17e>
 80061cc:	b910      	cbnz	r0, 80061d4 <_strtod_l+0x17c>
 80061ce:	9b07      	ldr	r3, [sp, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d09e      	beq.n	8006112 <_strtod_l+0xba>
 80061d4:	2400      	movs	r4, #0
 80061d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80061d8:	1c73      	adds	r3, r6, #1
 80061da:	931b      	str	r3, [sp, #108]	; 0x6c
 80061dc:	7873      	ldrb	r3, [r6, #1]
 80061de:	2b2b      	cmp	r3, #43	; 0x2b
 80061e0:	d078      	beq.n	80062d4 <_strtod_l+0x27c>
 80061e2:	2b2d      	cmp	r3, #45	; 0x2d
 80061e4:	d070      	beq.n	80062c8 <_strtod_l+0x270>
 80061e6:	f04f 0c00 	mov.w	ip, #0
 80061ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80061ee:	2f09      	cmp	r7, #9
 80061f0:	d97c      	bls.n	80062ec <_strtod_l+0x294>
 80061f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80061f4:	f04f 0e00 	mov.w	lr, #0
 80061f8:	e09a      	b.n	8006330 <_strtod_l+0x2d8>
 80061fa:	2300      	movs	r3, #0
 80061fc:	e7c7      	b.n	800618e <_strtod_l+0x136>
 80061fe:	9904      	ldr	r1, [sp, #16]
 8006200:	3001      	adds	r0, #1
 8006202:	2908      	cmp	r1, #8
 8006204:	bfd7      	itett	le
 8006206:	9906      	ldrle	r1, [sp, #24]
 8006208:	fb02 3505 	mlagt	r5, r2, r5, r3
 800620c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006210:	9306      	strle	r3, [sp, #24]
 8006212:	9b04      	ldr	r3, [sp, #16]
 8006214:	901b      	str	r0, [sp, #108]	; 0x6c
 8006216:	3301      	adds	r3, #1
 8006218:	9304      	str	r3, [sp, #16]
 800621a:	e7bf      	b.n	800619c <_strtod_l+0x144>
 800621c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800621e:	191a      	adds	r2, r3, r4
 8006220:	921b      	str	r2, [sp, #108]	; 0x6c
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	5d1b      	ldrb	r3, [r3, r4]
 8006226:	2a00      	cmp	r2, #0
 8006228:	d037      	beq.n	800629a <_strtod_l+0x242>
 800622a:	4602      	mov	r2, r0
 800622c:	9c04      	ldr	r4, [sp, #16]
 800622e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006232:	2909      	cmp	r1, #9
 8006234:	d913      	bls.n	800625e <_strtod_l+0x206>
 8006236:	2101      	movs	r1, #1
 8006238:	9105      	str	r1, [sp, #20]
 800623a:	e7c2      	b.n	80061c2 <_strtod_l+0x16a>
 800623c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800623e:	3001      	adds	r0, #1
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	921b      	str	r2, [sp, #108]	; 0x6c
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b30      	cmp	r3, #48	; 0x30
 8006248:	d0f8      	beq.n	800623c <_strtod_l+0x1e4>
 800624a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800624e:	2a08      	cmp	r2, #8
 8006250:	f200 84f0 	bhi.w	8006c34 <_strtod_l+0xbdc>
 8006254:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006256:	9208      	str	r2, [sp, #32]
 8006258:	4602      	mov	r2, r0
 800625a:	2000      	movs	r0, #0
 800625c:	4604      	mov	r4, r0
 800625e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006262:	f100 0101 	add.w	r1, r0, #1
 8006266:	d012      	beq.n	800628e <_strtod_l+0x236>
 8006268:	440a      	add	r2, r1
 800626a:	270a      	movs	r7, #10
 800626c:	4621      	mov	r1, r4
 800626e:	eb00 0c04 	add.w	ip, r0, r4
 8006272:	458c      	cmp	ip, r1
 8006274:	d113      	bne.n	800629e <_strtod_l+0x246>
 8006276:	1821      	adds	r1, r4, r0
 8006278:	2908      	cmp	r1, #8
 800627a:	f104 0401 	add.w	r4, r4, #1
 800627e:	4404      	add	r4, r0
 8006280:	dc19      	bgt.n	80062b6 <_strtod_l+0x25e>
 8006282:	210a      	movs	r1, #10
 8006284:	9b06      	ldr	r3, [sp, #24]
 8006286:	fb01 e303 	mla	r3, r1, r3, lr
 800628a:	9306      	str	r3, [sp, #24]
 800628c:	2100      	movs	r1, #0
 800628e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006290:	1c58      	adds	r0, r3, #1
 8006292:	901b      	str	r0, [sp, #108]	; 0x6c
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	4608      	mov	r0, r1
 8006298:	e7c9      	b.n	800622e <_strtod_l+0x1d6>
 800629a:	9804      	ldr	r0, [sp, #16]
 800629c:	e7d3      	b.n	8006246 <_strtod_l+0x1ee>
 800629e:	2908      	cmp	r1, #8
 80062a0:	f101 0101 	add.w	r1, r1, #1
 80062a4:	dc03      	bgt.n	80062ae <_strtod_l+0x256>
 80062a6:	9b06      	ldr	r3, [sp, #24]
 80062a8:	437b      	muls	r3, r7
 80062aa:	9306      	str	r3, [sp, #24]
 80062ac:	e7e1      	b.n	8006272 <_strtod_l+0x21a>
 80062ae:	2910      	cmp	r1, #16
 80062b0:	bfd8      	it	le
 80062b2:	437d      	mulle	r5, r7
 80062b4:	e7dd      	b.n	8006272 <_strtod_l+0x21a>
 80062b6:	2c10      	cmp	r4, #16
 80062b8:	bfdc      	itt	le
 80062ba:	210a      	movle	r1, #10
 80062bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80062c0:	e7e4      	b.n	800628c <_strtod_l+0x234>
 80062c2:	2301      	movs	r3, #1
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	e781      	b.n	80061cc <_strtod_l+0x174>
 80062c8:	f04f 0c01 	mov.w	ip, #1
 80062cc:	1cb3      	adds	r3, r6, #2
 80062ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80062d0:	78b3      	ldrb	r3, [r6, #2]
 80062d2:	e78a      	b.n	80061ea <_strtod_l+0x192>
 80062d4:	f04f 0c00 	mov.w	ip, #0
 80062d8:	e7f8      	b.n	80062cc <_strtod_l+0x274>
 80062da:	bf00      	nop
 80062dc:	08009120 	.word	0x08009120
 80062e0:	7ff00000 	.word	0x7ff00000
 80062e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062e6:	1c5f      	adds	r7, r3, #1
 80062e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b30      	cmp	r3, #48	; 0x30
 80062ee:	d0f9      	beq.n	80062e4 <_strtod_l+0x28c>
 80062f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80062f4:	2f08      	cmp	r7, #8
 80062f6:	f63f af7d 	bhi.w	80061f4 <_strtod_l+0x19c>
 80062fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80062fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006300:	9309      	str	r3, [sp, #36]	; 0x24
 8006302:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006304:	1c5f      	adds	r7, r3, #1
 8006306:	971b      	str	r7, [sp, #108]	; 0x6c
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800630e:	f1b8 0f09 	cmp.w	r8, #9
 8006312:	d937      	bls.n	8006384 <_strtod_l+0x32c>
 8006314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006316:	1a7f      	subs	r7, r7, r1
 8006318:	2f08      	cmp	r7, #8
 800631a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800631e:	dc37      	bgt.n	8006390 <_strtod_l+0x338>
 8006320:	45be      	cmp	lr, r7
 8006322:	bfa8      	it	ge
 8006324:	46be      	movge	lr, r7
 8006326:	f1bc 0f00 	cmp.w	ip, #0
 800632a:	d001      	beq.n	8006330 <_strtod_l+0x2d8>
 800632c:	f1ce 0e00 	rsb	lr, lr, #0
 8006330:	2c00      	cmp	r4, #0
 8006332:	d151      	bne.n	80063d8 <_strtod_l+0x380>
 8006334:	2800      	cmp	r0, #0
 8006336:	f47f aece 	bne.w	80060d6 <_strtod_l+0x7e>
 800633a:	9a07      	ldr	r2, [sp, #28]
 800633c:	2a00      	cmp	r2, #0
 800633e:	f47f aeca 	bne.w	80060d6 <_strtod_l+0x7e>
 8006342:	9a05      	ldr	r2, [sp, #20]
 8006344:	2a00      	cmp	r2, #0
 8006346:	f47f aee4 	bne.w	8006112 <_strtod_l+0xba>
 800634a:	2b4e      	cmp	r3, #78	; 0x4e
 800634c:	d027      	beq.n	800639e <_strtod_l+0x346>
 800634e:	dc21      	bgt.n	8006394 <_strtod_l+0x33c>
 8006350:	2b49      	cmp	r3, #73	; 0x49
 8006352:	f47f aede 	bne.w	8006112 <_strtod_l+0xba>
 8006356:	49a4      	ldr	r1, [pc, #656]	; (80065e8 <_strtod_l+0x590>)
 8006358:	a81b      	add	r0, sp, #108	; 0x6c
 800635a:	f001 ff8f 	bl	800827c <__match>
 800635e:	2800      	cmp	r0, #0
 8006360:	f43f aed7 	beq.w	8006112 <_strtod_l+0xba>
 8006364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006366:	49a1      	ldr	r1, [pc, #644]	; (80065ec <_strtod_l+0x594>)
 8006368:	3b01      	subs	r3, #1
 800636a:	a81b      	add	r0, sp, #108	; 0x6c
 800636c:	931b      	str	r3, [sp, #108]	; 0x6c
 800636e:	f001 ff85 	bl	800827c <__match>
 8006372:	b910      	cbnz	r0, 800637a <_strtod_l+0x322>
 8006374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006376:	3301      	adds	r3, #1
 8006378:	931b      	str	r3, [sp, #108]	; 0x6c
 800637a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006600 <_strtod_l+0x5a8>
 800637e:	f04f 0900 	mov.w	r9, #0
 8006382:	e6a8      	b.n	80060d6 <_strtod_l+0x7e>
 8006384:	210a      	movs	r1, #10
 8006386:	fb01 3e0e 	mla	lr, r1, lr, r3
 800638a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800638e:	e7b8      	b.n	8006302 <_strtod_l+0x2aa>
 8006390:	46be      	mov	lr, r7
 8006392:	e7c8      	b.n	8006326 <_strtod_l+0x2ce>
 8006394:	2b69      	cmp	r3, #105	; 0x69
 8006396:	d0de      	beq.n	8006356 <_strtod_l+0x2fe>
 8006398:	2b6e      	cmp	r3, #110	; 0x6e
 800639a:	f47f aeba 	bne.w	8006112 <_strtod_l+0xba>
 800639e:	4994      	ldr	r1, [pc, #592]	; (80065f0 <_strtod_l+0x598>)
 80063a0:	a81b      	add	r0, sp, #108	; 0x6c
 80063a2:	f001 ff6b 	bl	800827c <__match>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f aeb3 	beq.w	8006112 <_strtod_l+0xba>
 80063ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b28      	cmp	r3, #40	; 0x28
 80063b2:	d10e      	bne.n	80063d2 <_strtod_l+0x37a>
 80063b4:	aa1e      	add	r2, sp, #120	; 0x78
 80063b6:	498f      	ldr	r1, [pc, #572]	; (80065f4 <_strtod_l+0x59c>)
 80063b8:	a81b      	add	r0, sp, #108	; 0x6c
 80063ba:	f001 ff73 	bl	80082a4 <__hexnan>
 80063be:	2805      	cmp	r0, #5
 80063c0:	d107      	bne.n	80063d2 <_strtod_l+0x37a>
 80063c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063c4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80063c8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80063cc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80063d0:	e681      	b.n	80060d6 <_strtod_l+0x7e>
 80063d2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006608 <_strtod_l+0x5b0>
 80063d6:	e7d2      	b.n	800637e <_strtod_l+0x326>
 80063d8:	ebae 0302 	sub.w	r3, lr, r2
 80063dc:	9307      	str	r3, [sp, #28]
 80063de:	9b04      	ldr	r3, [sp, #16]
 80063e0:	9806      	ldr	r0, [sp, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bf08      	it	eq
 80063e6:	4623      	moveq	r3, r4
 80063e8:	2c10      	cmp	r4, #16
 80063ea:	9304      	str	r3, [sp, #16]
 80063ec:	46a0      	mov	r8, r4
 80063ee:	bfa8      	it	ge
 80063f0:	f04f 0810 	movge.w	r8, #16
 80063f4:	f7f9 fff6 	bl	80003e4 <__aeabi_ui2d>
 80063f8:	2c09      	cmp	r4, #9
 80063fa:	4681      	mov	r9, r0
 80063fc:	468a      	mov	sl, r1
 80063fe:	dc13      	bgt.n	8006428 <_strtod_l+0x3d0>
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f43f ae67 	beq.w	80060d6 <_strtod_l+0x7e>
 8006408:	9b07      	ldr	r3, [sp, #28]
 800640a:	dd7e      	ble.n	800650a <_strtod_l+0x4b2>
 800640c:	2b16      	cmp	r3, #22
 800640e:	dc65      	bgt.n	80064dc <_strtod_l+0x484>
 8006410:	4a79      	ldr	r2, [pc, #484]	; (80065f8 <_strtod_l+0x5a0>)
 8006412:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006416:	464a      	mov	r2, r9
 8006418:	e9de 0100 	ldrd	r0, r1, [lr]
 800641c:	4653      	mov	r3, sl
 800641e:	f7fa f85b 	bl	80004d8 <__aeabi_dmul>
 8006422:	4681      	mov	r9, r0
 8006424:	468a      	mov	sl, r1
 8006426:	e656      	b.n	80060d6 <_strtod_l+0x7e>
 8006428:	4b73      	ldr	r3, [pc, #460]	; (80065f8 <_strtod_l+0x5a0>)
 800642a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800642e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006432:	f7fa f851 	bl	80004d8 <__aeabi_dmul>
 8006436:	4606      	mov	r6, r0
 8006438:	4628      	mov	r0, r5
 800643a:	460f      	mov	r7, r1
 800643c:	f7f9 ffd2 	bl	80003e4 <__aeabi_ui2d>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4630      	mov	r0, r6
 8006446:	4639      	mov	r1, r7
 8006448:	f7f9 fe90 	bl	800016c <__adddf3>
 800644c:	2c0f      	cmp	r4, #15
 800644e:	4681      	mov	r9, r0
 8006450:	468a      	mov	sl, r1
 8006452:	ddd5      	ble.n	8006400 <_strtod_l+0x3a8>
 8006454:	9b07      	ldr	r3, [sp, #28]
 8006456:	eba4 0808 	sub.w	r8, r4, r8
 800645a:	4498      	add	r8, r3
 800645c:	f1b8 0f00 	cmp.w	r8, #0
 8006460:	f340 809a 	ble.w	8006598 <_strtod_l+0x540>
 8006464:	f018 030f 	ands.w	r3, r8, #15
 8006468:	d00a      	beq.n	8006480 <_strtod_l+0x428>
 800646a:	4963      	ldr	r1, [pc, #396]	; (80065f8 <_strtod_l+0x5a0>)
 800646c:	464a      	mov	r2, r9
 800646e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006476:	4653      	mov	r3, sl
 8006478:	f7fa f82e 	bl	80004d8 <__aeabi_dmul>
 800647c:	4681      	mov	r9, r0
 800647e:	468a      	mov	sl, r1
 8006480:	f038 080f 	bics.w	r8, r8, #15
 8006484:	d077      	beq.n	8006576 <_strtod_l+0x51e>
 8006486:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800648a:	dd4b      	ble.n	8006524 <_strtod_l+0x4cc>
 800648c:	f04f 0800 	mov.w	r8, #0
 8006490:	f8cd 8010 	str.w	r8, [sp, #16]
 8006494:	f8cd 8020 	str.w	r8, [sp, #32]
 8006498:	f8cd 8018 	str.w	r8, [sp, #24]
 800649c:	2322      	movs	r3, #34	; 0x22
 800649e:	f04f 0900 	mov.w	r9, #0
 80064a2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006600 <_strtod_l+0x5a8>
 80064a6:	f8cb 3000 	str.w	r3, [fp]
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f43f ae12 	beq.w	80060d6 <_strtod_l+0x7e>
 80064b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064b4:	4658      	mov	r0, fp
 80064b6:	f002 f852 	bl	800855e <_Bfree>
 80064ba:	9906      	ldr	r1, [sp, #24]
 80064bc:	4658      	mov	r0, fp
 80064be:	f002 f84e 	bl	800855e <_Bfree>
 80064c2:	9904      	ldr	r1, [sp, #16]
 80064c4:	4658      	mov	r0, fp
 80064c6:	f002 f84a 	bl	800855e <_Bfree>
 80064ca:	9908      	ldr	r1, [sp, #32]
 80064cc:	4658      	mov	r0, fp
 80064ce:	f002 f846 	bl	800855e <_Bfree>
 80064d2:	4641      	mov	r1, r8
 80064d4:	4658      	mov	r0, fp
 80064d6:	f002 f842 	bl	800855e <_Bfree>
 80064da:	e5fc      	b.n	80060d6 <_strtod_l+0x7e>
 80064dc:	9a07      	ldr	r2, [sp, #28]
 80064de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80064e2:	4293      	cmp	r3, r2
 80064e4:	dbb6      	blt.n	8006454 <_strtod_l+0x3fc>
 80064e6:	4d44      	ldr	r5, [pc, #272]	; (80065f8 <_strtod_l+0x5a0>)
 80064e8:	f1c4 040f 	rsb	r4, r4, #15
 80064ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80064f0:	464a      	mov	r2, r9
 80064f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064f6:	4653      	mov	r3, sl
 80064f8:	f7f9 ffee 	bl	80004d8 <__aeabi_dmul>
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	1b1c      	subs	r4, r3, r4
 8006500:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006504:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006508:	e789      	b.n	800641e <_strtod_l+0x3c6>
 800650a:	f113 0f16 	cmn.w	r3, #22
 800650e:	dba1      	blt.n	8006454 <_strtod_l+0x3fc>
 8006510:	4a39      	ldr	r2, [pc, #228]	; (80065f8 <_strtod_l+0x5a0>)
 8006512:	4648      	mov	r0, r9
 8006514:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006518:	e9d2 2300 	ldrd	r2, r3, [r2]
 800651c:	4651      	mov	r1, sl
 800651e:	f7fa f905 	bl	800072c <__aeabi_ddiv>
 8006522:	e77e      	b.n	8006422 <_strtod_l+0x3ca>
 8006524:	2300      	movs	r3, #0
 8006526:	4648      	mov	r0, r9
 8006528:	4651      	mov	r1, sl
 800652a:	461d      	mov	r5, r3
 800652c:	4e33      	ldr	r6, [pc, #204]	; (80065fc <_strtod_l+0x5a4>)
 800652e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006532:	f1b8 0f01 	cmp.w	r8, #1
 8006536:	dc21      	bgt.n	800657c <_strtod_l+0x524>
 8006538:	b10b      	cbz	r3, 800653e <_strtod_l+0x4e6>
 800653a:	4681      	mov	r9, r0
 800653c:	468a      	mov	sl, r1
 800653e:	4b2f      	ldr	r3, [pc, #188]	; (80065fc <_strtod_l+0x5a4>)
 8006540:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006544:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006548:	464a      	mov	r2, r9
 800654a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800654e:	4653      	mov	r3, sl
 8006550:	f7f9 ffc2 	bl	80004d8 <__aeabi_dmul>
 8006554:	4b2a      	ldr	r3, [pc, #168]	; (8006600 <_strtod_l+0x5a8>)
 8006556:	460a      	mov	r2, r1
 8006558:	400b      	ands	r3, r1
 800655a:	492a      	ldr	r1, [pc, #168]	; (8006604 <_strtod_l+0x5ac>)
 800655c:	4681      	mov	r9, r0
 800655e:	428b      	cmp	r3, r1
 8006560:	d894      	bhi.n	800648c <_strtod_l+0x434>
 8006562:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006566:	428b      	cmp	r3, r1
 8006568:	bf86      	itte	hi
 800656a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800656e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800660c <_strtod_l+0x5b4>
 8006572:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006576:	2300      	movs	r3, #0
 8006578:	9305      	str	r3, [sp, #20]
 800657a:	e07b      	b.n	8006674 <_strtod_l+0x61c>
 800657c:	f018 0f01 	tst.w	r8, #1
 8006580:	d006      	beq.n	8006590 <_strtod_l+0x538>
 8006582:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 ffa5 	bl	80004d8 <__aeabi_dmul>
 800658e:	2301      	movs	r3, #1
 8006590:	3501      	adds	r5, #1
 8006592:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006596:	e7cc      	b.n	8006532 <_strtod_l+0x4da>
 8006598:	d0ed      	beq.n	8006576 <_strtod_l+0x51e>
 800659a:	f1c8 0800 	rsb	r8, r8, #0
 800659e:	f018 020f 	ands.w	r2, r8, #15
 80065a2:	d00a      	beq.n	80065ba <_strtod_l+0x562>
 80065a4:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <_strtod_l+0x5a0>)
 80065a6:	4648      	mov	r0, r9
 80065a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ac:	4651      	mov	r1, sl
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f7fa f8bb 	bl	800072c <__aeabi_ddiv>
 80065b6:	4681      	mov	r9, r0
 80065b8:	468a      	mov	sl, r1
 80065ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 80065be:	d0da      	beq.n	8006576 <_strtod_l+0x51e>
 80065c0:	f1b8 0f1f 	cmp.w	r8, #31
 80065c4:	dd24      	ble.n	8006610 <_strtod_l+0x5b8>
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80065ce:	f8cd 8020 	str.w	r8, [sp, #32]
 80065d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80065d6:	2322      	movs	r3, #34	; 0x22
 80065d8:	f04f 0900 	mov.w	r9, #0
 80065dc:	f04f 0a00 	mov.w	sl, #0
 80065e0:	f8cb 3000 	str.w	r3, [fp]
 80065e4:	e761      	b.n	80064aa <_strtod_l+0x452>
 80065e6:	bf00      	nop
 80065e8:	08009111 	.word	0x08009111
 80065ec:	08009173 	.word	0x08009173
 80065f0:	08009119 	.word	0x08009119
 80065f4:	08009134 	.word	0x08009134
 80065f8:	08009218 	.word	0x08009218
 80065fc:	080091f0 	.word	0x080091f0
 8006600:	7ff00000 	.word	0x7ff00000
 8006604:	7ca00000 	.word	0x7ca00000
 8006608:	fff80000 	.word	0xfff80000
 800660c:	7fefffff 	.word	0x7fefffff
 8006610:	f018 0310 	ands.w	r3, r8, #16
 8006614:	bf18      	it	ne
 8006616:	236a      	movne	r3, #106	; 0x6a
 8006618:	4648      	mov	r0, r9
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	4651      	mov	r1, sl
 800661e:	2300      	movs	r3, #0
 8006620:	4da1      	ldr	r5, [pc, #644]	; (80068a8 <_strtod_l+0x850>)
 8006622:	f1b8 0f00 	cmp.w	r8, #0
 8006626:	f300 8113 	bgt.w	8006850 <_strtod_l+0x7f8>
 800662a:	b10b      	cbz	r3, 8006630 <_strtod_l+0x5d8>
 800662c:	4681      	mov	r9, r0
 800662e:	468a      	mov	sl, r1
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	b1bb      	cbz	r3, 8006664 <_strtod_l+0x60c>
 8006634:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006638:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800663c:	2b00      	cmp	r3, #0
 800663e:	4651      	mov	r1, sl
 8006640:	dd10      	ble.n	8006664 <_strtod_l+0x60c>
 8006642:	2b1f      	cmp	r3, #31
 8006644:	f340 8110 	ble.w	8006868 <_strtod_l+0x810>
 8006648:	2b34      	cmp	r3, #52	; 0x34
 800664a:	bfd8      	it	le
 800664c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006650:	f04f 0900 	mov.w	r9, #0
 8006654:	bfcf      	iteee	gt
 8006656:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800665a:	3b20      	suble	r3, #32
 800665c:	fa02 f303 	lslle.w	r3, r2, r3
 8006660:	ea03 0a01 	andle.w	sl, r3, r1
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4648      	mov	r0, r9
 800666a:	4651      	mov	r1, sl
 800666c:	f7fa f99c 	bl	80009a8 <__aeabi_dcmpeq>
 8006670:	2800      	cmp	r0, #0
 8006672:	d1a8      	bne.n	80065c6 <_strtod_l+0x56e>
 8006674:	9b06      	ldr	r3, [sp, #24]
 8006676:	9a04      	ldr	r2, [sp, #16]
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	9908      	ldr	r1, [sp, #32]
 800667c:	4623      	mov	r3, r4
 800667e:	4658      	mov	r0, fp
 8006680:	f001 ffbf 	bl	8008602 <__s2b>
 8006684:	9008      	str	r0, [sp, #32]
 8006686:	2800      	cmp	r0, #0
 8006688:	f43f af00 	beq.w	800648c <_strtod_l+0x434>
 800668c:	9a07      	ldr	r2, [sp, #28]
 800668e:	9b07      	ldr	r3, [sp, #28]
 8006690:	2a00      	cmp	r2, #0
 8006692:	f1c3 0300 	rsb	r3, r3, #0
 8006696:	bfa8      	it	ge
 8006698:	2300      	movge	r3, #0
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	930e      	str	r3, [sp, #56]	; 0x38
 80066a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80066a4:	9316      	str	r3, [sp, #88]	; 0x58
 80066a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80066aa:	9b08      	ldr	r3, [sp, #32]
 80066ac:	4658      	mov	r0, fp
 80066ae:	6859      	ldr	r1, [r3, #4]
 80066b0:	f001 ff21 	bl	80084f6 <_Balloc>
 80066b4:	9006      	str	r0, [sp, #24]
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f aef0 	beq.w	800649c <_strtod_l+0x444>
 80066bc:	9b08      	ldr	r3, [sp, #32]
 80066be:	300c      	adds	r0, #12
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	f103 010c 	add.w	r1, r3, #12
 80066c6:	3202      	adds	r2, #2
 80066c8:	0092      	lsls	r2, r2, #2
 80066ca:	f001 ff09 	bl	80084e0 <memcpy>
 80066ce:	ab1e      	add	r3, sp, #120	; 0x78
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	ab1d      	add	r3, sp, #116	; 0x74
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	464a      	mov	r2, r9
 80066d8:	4653      	mov	r3, sl
 80066da:	4658      	mov	r0, fp
 80066dc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80066e0:	f002 fa4a 	bl	8008b78 <__d2b>
 80066e4:	901c      	str	r0, [sp, #112]	; 0x70
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f43f aed8 	beq.w	800649c <_strtod_l+0x444>
 80066ec:	2101      	movs	r1, #1
 80066ee:	4658      	mov	r0, fp
 80066f0:	f002 f813 	bl	800871a <__i2b>
 80066f4:	9004      	str	r0, [sp, #16]
 80066f6:	4603      	mov	r3, r0
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f43f aecf 	beq.w	800649c <_strtod_l+0x444>
 80066fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006700:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006702:	2d00      	cmp	r5, #0
 8006704:	bfab      	itete	ge
 8006706:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006708:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800670a:	18ee      	addge	r6, r5, r3
 800670c:	1b5c      	sublt	r4, r3, r5
 800670e:	9b05      	ldr	r3, [sp, #20]
 8006710:	bfa8      	it	ge
 8006712:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006714:	eba5 0503 	sub.w	r5, r5, r3
 8006718:	4415      	add	r5, r2
 800671a:	4b64      	ldr	r3, [pc, #400]	; (80068ac <_strtod_l+0x854>)
 800671c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006720:	bfb8      	it	lt
 8006722:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006724:	429d      	cmp	r5, r3
 8006726:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800672a:	f280 80af 	bge.w	800688c <_strtod_l+0x834>
 800672e:	1b5b      	subs	r3, r3, r5
 8006730:	2b1f      	cmp	r3, #31
 8006732:	eba2 0203 	sub.w	r2, r2, r3
 8006736:	f04f 0701 	mov.w	r7, #1
 800673a:	f300 809c 	bgt.w	8006876 <_strtod_l+0x81e>
 800673e:	2500      	movs	r5, #0
 8006740:	fa07 f303 	lsl.w	r3, r7, r3
 8006744:	930f      	str	r3, [sp, #60]	; 0x3c
 8006746:	18b7      	adds	r7, r6, r2
 8006748:	9b05      	ldr	r3, [sp, #20]
 800674a:	42be      	cmp	r6, r7
 800674c:	4414      	add	r4, r2
 800674e:	441c      	add	r4, r3
 8006750:	4633      	mov	r3, r6
 8006752:	bfa8      	it	ge
 8006754:	463b      	movge	r3, r7
 8006756:	42a3      	cmp	r3, r4
 8006758:	bfa8      	it	ge
 800675a:	4623      	movge	r3, r4
 800675c:	2b00      	cmp	r3, #0
 800675e:	bfc2      	ittt	gt
 8006760:	1aff      	subgt	r7, r7, r3
 8006762:	1ae4      	subgt	r4, r4, r3
 8006764:	1af6      	subgt	r6, r6, r3
 8006766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006768:	b1bb      	cbz	r3, 800679a <_strtod_l+0x742>
 800676a:	461a      	mov	r2, r3
 800676c:	9904      	ldr	r1, [sp, #16]
 800676e:	4658      	mov	r0, fp
 8006770:	f002 f872 	bl	8008858 <__pow5mult>
 8006774:	9004      	str	r0, [sp, #16]
 8006776:	2800      	cmp	r0, #0
 8006778:	f43f ae90 	beq.w	800649c <_strtod_l+0x444>
 800677c:	4601      	mov	r1, r0
 800677e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006780:	4658      	mov	r0, fp
 8006782:	f001 ffd3 	bl	800872c <__multiply>
 8006786:	9009      	str	r0, [sp, #36]	; 0x24
 8006788:	2800      	cmp	r0, #0
 800678a:	f43f ae87 	beq.w	800649c <_strtod_l+0x444>
 800678e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006790:	4658      	mov	r0, fp
 8006792:	f001 fee4 	bl	800855e <_Bfree>
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	931c      	str	r3, [sp, #112]	; 0x70
 800679a:	2f00      	cmp	r7, #0
 800679c:	dc7a      	bgt.n	8006894 <_strtod_l+0x83c>
 800679e:	9b07      	ldr	r3, [sp, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dd08      	ble.n	80067b6 <_strtod_l+0x75e>
 80067a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80067a6:	9906      	ldr	r1, [sp, #24]
 80067a8:	4658      	mov	r0, fp
 80067aa:	f002 f855 	bl	8008858 <__pow5mult>
 80067ae:	9006      	str	r0, [sp, #24]
 80067b0:	2800      	cmp	r0, #0
 80067b2:	f43f ae73 	beq.w	800649c <_strtod_l+0x444>
 80067b6:	2c00      	cmp	r4, #0
 80067b8:	dd08      	ble.n	80067cc <_strtod_l+0x774>
 80067ba:	4622      	mov	r2, r4
 80067bc:	9906      	ldr	r1, [sp, #24]
 80067be:	4658      	mov	r0, fp
 80067c0:	f002 f898 	bl	80088f4 <__lshift>
 80067c4:	9006      	str	r0, [sp, #24]
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f ae68 	beq.w	800649c <_strtod_l+0x444>
 80067cc:	2e00      	cmp	r6, #0
 80067ce:	dd08      	ble.n	80067e2 <_strtod_l+0x78a>
 80067d0:	4632      	mov	r2, r6
 80067d2:	9904      	ldr	r1, [sp, #16]
 80067d4:	4658      	mov	r0, fp
 80067d6:	f002 f88d 	bl	80088f4 <__lshift>
 80067da:	9004      	str	r0, [sp, #16]
 80067dc:	2800      	cmp	r0, #0
 80067de:	f43f ae5d 	beq.w	800649c <_strtod_l+0x444>
 80067e2:	9a06      	ldr	r2, [sp, #24]
 80067e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067e6:	4658      	mov	r0, fp
 80067e8:	f002 f8f2 	bl	80089d0 <__mdiff>
 80067ec:	4680      	mov	r8, r0
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f43f ae54 	beq.w	800649c <_strtod_l+0x444>
 80067f4:	2400      	movs	r4, #0
 80067f6:	68c3      	ldr	r3, [r0, #12]
 80067f8:	9904      	ldr	r1, [sp, #16]
 80067fa:	60c4      	str	r4, [r0, #12]
 80067fc:	930c      	str	r3, [sp, #48]	; 0x30
 80067fe:	f002 f8cd 	bl	800899c <__mcmp>
 8006802:	42a0      	cmp	r0, r4
 8006804:	da54      	bge.n	80068b0 <_strtod_l+0x858>
 8006806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006808:	b9f3      	cbnz	r3, 8006848 <_strtod_l+0x7f0>
 800680a:	f1b9 0f00 	cmp.w	r9, #0
 800680e:	d11b      	bne.n	8006848 <_strtod_l+0x7f0>
 8006810:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006814:	b9c3      	cbnz	r3, 8006848 <_strtod_l+0x7f0>
 8006816:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800681a:	0d1b      	lsrs	r3, r3, #20
 800681c:	051b      	lsls	r3, r3, #20
 800681e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006822:	d911      	bls.n	8006848 <_strtod_l+0x7f0>
 8006824:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006828:	b91b      	cbnz	r3, 8006832 <_strtod_l+0x7da>
 800682a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800682e:	2b01      	cmp	r3, #1
 8006830:	dd0a      	ble.n	8006848 <_strtod_l+0x7f0>
 8006832:	4641      	mov	r1, r8
 8006834:	2201      	movs	r2, #1
 8006836:	4658      	mov	r0, fp
 8006838:	f002 f85c 	bl	80088f4 <__lshift>
 800683c:	9904      	ldr	r1, [sp, #16]
 800683e:	4680      	mov	r8, r0
 8006840:	f002 f8ac 	bl	800899c <__mcmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	dc68      	bgt.n	800691a <_strtod_l+0x8c2>
 8006848:	9b05      	ldr	r3, [sp, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d172      	bne.n	8006934 <_strtod_l+0x8dc>
 800684e:	e630      	b.n	80064b2 <_strtod_l+0x45a>
 8006850:	f018 0f01 	tst.w	r8, #1
 8006854:	d004      	beq.n	8006860 <_strtod_l+0x808>
 8006856:	e9d5 2300 	ldrd	r2, r3, [r5]
 800685a:	f7f9 fe3d 	bl	80004d8 <__aeabi_dmul>
 800685e:	2301      	movs	r3, #1
 8006860:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006864:	3508      	adds	r5, #8
 8006866:	e6dc      	b.n	8006622 <_strtod_l+0x5ca>
 8006868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	ea03 0909 	and.w	r9, r3, r9
 8006874:	e6f6      	b.n	8006664 <_strtod_l+0x60c>
 8006876:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800687a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800687e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006882:	35e2      	adds	r5, #226	; 0xe2
 8006884:	fa07 f505 	lsl.w	r5, r7, r5
 8006888:	970f      	str	r7, [sp, #60]	; 0x3c
 800688a:	e75c      	b.n	8006746 <_strtod_l+0x6ee>
 800688c:	2301      	movs	r3, #1
 800688e:	2500      	movs	r5, #0
 8006890:	930f      	str	r3, [sp, #60]	; 0x3c
 8006892:	e758      	b.n	8006746 <_strtod_l+0x6ee>
 8006894:	463a      	mov	r2, r7
 8006896:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006898:	4658      	mov	r0, fp
 800689a:	f002 f82b 	bl	80088f4 <__lshift>
 800689e:	901c      	str	r0, [sp, #112]	; 0x70
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f47f af7c 	bne.w	800679e <_strtod_l+0x746>
 80068a6:	e5f9      	b.n	800649c <_strtod_l+0x444>
 80068a8:	08009148 	.word	0x08009148
 80068ac:	fffffc02 	.word	0xfffffc02
 80068b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80068b4:	f040 8089 	bne.w	80069ca <_strtod_l+0x972>
 80068b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068ba:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80068be:	b342      	cbz	r2, 8006912 <_strtod_l+0x8ba>
 80068c0:	4aaf      	ldr	r2, [pc, #700]	; (8006b80 <_strtod_l+0xb28>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d156      	bne.n	8006974 <_strtod_l+0x91c>
 80068c6:	9b05      	ldr	r3, [sp, #20]
 80068c8:	4648      	mov	r0, r9
 80068ca:	b1eb      	cbz	r3, 8006908 <_strtod_l+0x8b0>
 80068cc:	4653      	mov	r3, sl
 80068ce:	4aad      	ldr	r2, [pc, #692]	; (8006b84 <_strtod_l+0xb2c>)
 80068d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068d4:	401a      	ands	r2, r3
 80068d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80068da:	d818      	bhi.n	800690e <_strtod_l+0x8b6>
 80068dc:	0d12      	lsrs	r2, r2, #20
 80068de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	4298      	cmp	r0, r3
 80068e8:	d144      	bne.n	8006974 <_strtod_l+0x91c>
 80068ea:	4ba7      	ldr	r3, [pc, #668]	; (8006b88 <_strtod_l+0xb30>)
 80068ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d102      	bne.n	80068f8 <_strtod_l+0x8a0>
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f add2 	beq.w	800649c <_strtod_l+0x444>
 80068f8:	4ba2      	ldr	r3, [pc, #648]	; (8006b84 <_strtod_l+0xb2c>)
 80068fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068fc:	f04f 0900 	mov.w	r9, #0
 8006900:	401a      	ands	r2, r3
 8006902:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006906:	e79f      	b.n	8006848 <_strtod_l+0x7f0>
 8006908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800690c:	e7eb      	b.n	80068e6 <_strtod_l+0x88e>
 800690e:	460b      	mov	r3, r1
 8006910:	e7e9      	b.n	80068e6 <_strtod_l+0x88e>
 8006912:	bb7b      	cbnz	r3, 8006974 <_strtod_l+0x91c>
 8006914:	f1b9 0f00 	cmp.w	r9, #0
 8006918:	d12c      	bne.n	8006974 <_strtod_l+0x91c>
 800691a:	9905      	ldr	r1, [sp, #20]
 800691c:	4653      	mov	r3, sl
 800691e:	4a99      	ldr	r2, [pc, #612]	; (8006b84 <_strtod_l+0xb2c>)
 8006920:	b1f1      	cbz	r1, 8006960 <_strtod_l+0x908>
 8006922:	ea02 010a 	and.w	r1, r2, sl
 8006926:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800692a:	dc19      	bgt.n	8006960 <_strtod_l+0x908>
 800692c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006930:	f77f ae51 	ble.w	80065d6 <_strtod_l+0x57e>
 8006934:	2300      	movs	r3, #0
 8006936:	4a95      	ldr	r2, [pc, #596]	; (8006b8c <_strtod_l+0xb34>)
 8006938:	4648      	mov	r0, r9
 800693a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800693e:	4651      	mov	r1, sl
 8006940:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006944:	f7f9 fdc8 	bl	80004d8 <__aeabi_dmul>
 8006948:	4681      	mov	r9, r0
 800694a:	468a      	mov	sl, r1
 800694c:	2900      	cmp	r1, #0
 800694e:	f47f adb0 	bne.w	80064b2 <_strtod_l+0x45a>
 8006952:	2800      	cmp	r0, #0
 8006954:	f47f adad 	bne.w	80064b2 <_strtod_l+0x45a>
 8006958:	2322      	movs	r3, #34	; 0x22
 800695a:	f8cb 3000 	str.w	r3, [fp]
 800695e:	e5a8      	b.n	80064b2 <_strtod_l+0x45a>
 8006960:	4013      	ands	r3, r2
 8006962:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006966:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800696a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800696e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006972:	e769      	b.n	8006848 <_strtod_l+0x7f0>
 8006974:	b19d      	cbz	r5, 800699e <_strtod_l+0x946>
 8006976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006978:	421d      	tst	r5, r3
 800697a:	f43f af65 	beq.w	8006848 <_strtod_l+0x7f0>
 800697e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006980:	9a05      	ldr	r2, [sp, #20]
 8006982:	4648      	mov	r0, r9
 8006984:	4651      	mov	r1, sl
 8006986:	b173      	cbz	r3, 80069a6 <_strtod_l+0x94e>
 8006988:	f7ff fb44 	bl	8006014 <sulp>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006994:	f7f9 fbea 	bl	800016c <__adddf3>
 8006998:	4681      	mov	r9, r0
 800699a:	468a      	mov	sl, r1
 800699c:	e754      	b.n	8006848 <_strtod_l+0x7f0>
 800699e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069a0:	ea13 0f09 	tst.w	r3, r9
 80069a4:	e7e9      	b.n	800697a <_strtod_l+0x922>
 80069a6:	f7ff fb35 	bl	8006014 <sulp>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069b2:	f7f9 fbd9 	bl	8000168 <__aeabi_dsub>
 80069b6:	2200      	movs	r2, #0
 80069b8:	2300      	movs	r3, #0
 80069ba:	4681      	mov	r9, r0
 80069bc:	468a      	mov	sl, r1
 80069be:	f7f9 fff3 	bl	80009a8 <__aeabi_dcmpeq>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	f47f ae07 	bne.w	80065d6 <_strtod_l+0x57e>
 80069c8:	e73e      	b.n	8006848 <_strtod_l+0x7f0>
 80069ca:	9904      	ldr	r1, [sp, #16]
 80069cc:	4640      	mov	r0, r8
 80069ce:	f002 f922 	bl	8008c16 <__ratio>
 80069d2:	2200      	movs	r2, #0
 80069d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069d8:	4606      	mov	r6, r0
 80069da:	460f      	mov	r7, r1
 80069dc:	f7f9 fff8 	bl	80009d0 <__aeabi_dcmple>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d075      	beq.n	8006ad0 <_strtod_l+0xa78>
 80069e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d047      	beq.n	8006a7a <_strtod_l+0xa22>
 80069ea:	2600      	movs	r6, #0
 80069ec:	4f68      	ldr	r7, [pc, #416]	; (8006b90 <_strtod_l+0xb38>)
 80069ee:	4d68      	ldr	r5, [pc, #416]	; (8006b90 <_strtod_l+0xb38>)
 80069f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	0d1b      	lsrs	r3, r3, #20
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80069fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069fe:	4b65      	ldr	r3, [pc, #404]	; (8006b94 <_strtod_l+0xb3c>)
 8006a00:	429a      	cmp	r2, r3
 8006a02:	f040 80cf 	bne.w	8006ba4 <_strtod_l+0xb4c>
 8006a06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a0a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a10:	4648      	mov	r0, r9
 8006a12:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006a16:	4651      	mov	r1, sl
 8006a18:	f002 f838 	bl	8008a8c <__ulp>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7f9 fd58 	bl	80004d8 <__aeabi_dmul>
 8006a28:	464a      	mov	r2, r9
 8006a2a:	4653      	mov	r3, sl
 8006a2c:	f7f9 fb9e 	bl	800016c <__adddf3>
 8006a30:	460b      	mov	r3, r1
 8006a32:	4954      	ldr	r1, [pc, #336]	; (8006b84 <_strtod_l+0xb2c>)
 8006a34:	4a58      	ldr	r2, [pc, #352]	; (8006b98 <_strtod_l+0xb40>)
 8006a36:	4019      	ands	r1, r3
 8006a38:	4291      	cmp	r1, r2
 8006a3a:	4681      	mov	r9, r0
 8006a3c:	d95e      	bls.n	8006afc <_strtod_l+0xaa4>
 8006a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d103      	bne.n	8006a50 <_strtod_l+0x9f8>
 8006a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f43f ad26 	beq.w	800649c <_strtod_l+0x444>
 8006a50:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006a54:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006b88 <_strtod_l+0xb30>
 8006a58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a5a:	4658      	mov	r0, fp
 8006a5c:	f001 fd7f 	bl	800855e <_Bfree>
 8006a60:	9906      	ldr	r1, [sp, #24]
 8006a62:	4658      	mov	r0, fp
 8006a64:	f001 fd7b 	bl	800855e <_Bfree>
 8006a68:	9904      	ldr	r1, [sp, #16]
 8006a6a:	4658      	mov	r0, fp
 8006a6c:	f001 fd77 	bl	800855e <_Bfree>
 8006a70:	4641      	mov	r1, r8
 8006a72:	4658      	mov	r0, fp
 8006a74:	f001 fd73 	bl	800855e <_Bfree>
 8006a78:	e617      	b.n	80066aa <_strtod_l+0x652>
 8006a7a:	f1b9 0f00 	cmp.w	r9, #0
 8006a7e:	d119      	bne.n	8006ab4 <_strtod_l+0xa5c>
 8006a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a86:	b9e3      	cbnz	r3, 8006ac2 <_strtod_l+0xa6a>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4b41      	ldr	r3, [pc, #260]	; (8006b90 <_strtod_l+0xb38>)
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7f9 ff94 	bl	80009bc <__aeabi_dcmplt>
 8006a94:	b9c8      	cbnz	r0, 8006aca <_strtod_l+0xa72>
 8006a96:	2200      	movs	r2, #0
 8006a98:	4b40      	ldr	r3, [pc, #256]	; (8006b9c <_strtod_l+0xb44>)
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	f7f9 fd1b 	bl	80004d8 <__aeabi_dmul>
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006aaa:	9418      	str	r4, [sp, #96]	; 0x60
 8006aac:	9319      	str	r3, [sp, #100]	; 0x64
 8006aae:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006ab2:	e79d      	b.n	80069f0 <_strtod_l+0x998>
 8006ab4:	f1b9 0f01 	cmp.w	r9, #1
 8006ab8:	d103      	bne.n	8006ac2 <_strtod_l+0xa6a>
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f43f ad8a 	beq.w	80065d6 <_strtod_l+0x57e>
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	4f36      	ldr	r7, [pc, #216]	; (8006ba0 <_strtod_l+0xb48>)
 8006ac6:	2400      	movs	r4, #0
 8006ac8:	e791      	b.n	80069ee <_strtod_l+0x996>
 8006aca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006acc:	4d33      	ldr	r5, [pc, #204]	; (8006b9c <_strtod_l+0xb44>)
 8006ace:	e7ea      	b.n	8006aa6 <_strtod_l+0xa4e>
 8006ad0:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <_strtod_l+0xb44>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	f7f9 fcfe 	bl	80004d8 <__aeabi_dmul>
 8006adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	b933      	cbnz	r3, 8006af2 <_strtod_l+0xa9a>
 8006ae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ae8:	9010      	str	r0, [sp, #64]	; 0x40
 8006aea:	9311      	str	r3, [sp, #68]	; 0x44
 8006aec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006af0:	e77e      	b.n	80069f0 <_strtod_l+0x998>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006afa:	e7f7      	b.n	8006aec <_strtod_l+0xa94>
 8006afc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006b00:	9b05      	ldr	r3, [sp, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1a8      	bne.n	8006a58 <_strtod_l+0xa00>
 8006b06:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b0a:	0d1b      	lsrs	r3, r3, #20
 8006b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b0e:	051b      	lsls	r3, r3, #20
 8006b10:	429a      	cmp	r2, r3
 8006b12:	4656      	mov	r6, sl
 8006b14:	d1a0      	bne.n	8006a58 <_strtod_l+0xa00>
 8006b16:	4629      	mov	r1, r5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7f9 ff8d 	bl	8000a38 <__aeabi_d2iz>
 8006b1e:	f7f9 fc71 	bl	8000404 <__aeabi_i2d>
 8006b22:	460b      	mov	r3, r1
 8006b24:	4602      	mov	r2, r0
 8006b26:	4629      	mov	r1, r5
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7f9 fb1d 	bl	8000168 <__aeabi_dsub>
 8006b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	b933      	cbnz	r3, 8006b44 <_strtod_l+0xaec>
 8006b36:	f1b9 0f00 	cmp.w	r9, #0
 8006b3a:	d103      	bne.n	8006b44 <_strtod_l+0xaec>
 8006b3c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006b40:	2e00      	cmp	r6, #0
 8006b42:	d06a      	beq.n	8006c1a <_strtod_l+0xbc2>
 8006b44:	a30a      	add	r3, pc, #40	; (adr r3, 8006b70 <_strtod_l+0xb18>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7f9 ff35 	bl	80009bc <__aeabi_dcmplt>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f47f acad 	bne.w	80064b2 <_strtod_l+0x45a>
 8006b58:	a307      	add	r3, pc, #28	; (adr r3, 8006b78 <_strtod_l+0xb20>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7f9 ff49 	bl	80009f8 <__aeabi_dcmpgt>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f43f af76 	beq.w	8006a58 <_strtod_l+0xa00>
 8006b6c:	e4a1      	b.n	80064b2 <_strtod_l+0x45a>
 8006b6e:	bf00      	nop
 8006b70:	94a03595 	.word	0x94a03595
 8006b74:	3fdfffff 	.word	0x3fdfffff
 8006b78:	35afe535 	.word	0x35afe535
 8006b7c:	3fe00000 	.word	0x3fe00000
 8006b80:	000fffff 	.word	0x000fffff
 8006b84:	7ff00000 	.word	0x7ff00000
 8006b88:	7fefffff 	.word	0x7fefffff
 8006b8c:	39500000 	.word	0x39500000
 8006b90:	3ff00000 	.word	0x3ff00000
 8006b94:	7fe00000 	.word	0x7fe00000
 8006b98:	7c9fffff 	.word	0x7c9fffff
 8006b9c:	3fe00000 	.word	0x3fe00000
 8006ba0:	bff00000 	.word	0xbff00000
 8006ba4:	9b05      	ldr	r3, [sp, #20]
 8006ba6:	b313      	cbz	r3, 8006bee <_strtod_l+0xb96>
 8006ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006baa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006bae:	d81e      	bhi.n	8006bee <_strtod_l+0xb96>
 8006bb0:	a325      	add	r3, pc, #148	; (adr r3, 8006c48 <_strtod_l+0xbf0>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 ff09 	bl	80009d0 <__aeabi_dcmple>
 8006bbe:	b190      	cbz	r0, 8006be6 <_strtod_l+0xb8e>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7f9 ff60 	bl	8000a88 <__aeabi_d2uiz>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	bf08      	it	eq
 8006bcc:	2001      	moveq	r0, #1
 8006bce:	f7f9 fc09 	bl	80003e4 <__aeabi_ui2d>
 8006bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	b9d3      	cbnz	r3, 8006c10 <_strtod_l+0xbb8>
 8006bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bde:	9012      	str	r0, [sp, #72]	; 0x48
 8006be0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006be2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006be8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006bec:	1a9f      	subs	r7, r3, r2
 8006bee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bf2:	f001 ff4b 	bl	8008a8c <__ulp>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	f7f9 fc6b 	bl	80004d8 <__aeabi_dmul>
 8006c02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c06:	f7f9 fab1 	bl	800016c <__adddf3>
 8006c0a:	4681      	mov	r9, r0
 8006c0c:	468a      	mov	sl, r1
 8006c0e:	e777      	b.n	8006b00 <_strtod_l+0xaa8>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006c18:	e7e3      	b.n	8006be2 <_strtod_l+0xb8a>
 8006c1a:	a30d      	add	r3, pc, #52	; (adr r3, 8006c50 <_strtod_l+0xbf8>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fecc 	bl	80009bc <__aeabi_dcmplt>
 8006c24:	e79f      	b.n	8006b66 <_strtod_l+0xb0e>
 8006c26:	2300      	movs	r3, #0
 8006c28:	930d      	str	r3, [sp, #52]	; 0x34
 8006c2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	f7ff ba55 	b.w	80060de <_strtod_l+0x86>
 8006c34:	2b65      	cmp	r3, #101	; 0x65
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f43f ab42 	beq.w	80062c2 <_strtod_l+0x26a>
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4614      	mov	r4, r2
 8006c42:	9105      	str	r1, [sp, #20]
 8006c44:	f7ff babf 	b.w	80061c6 <_strtod_l+0x16e>
 8006c48:	ffc00000 	.word	0xffc00000
 8006c4c:	41dfffff 	.word	0x41dfffff
 8006c50:	94a03595 	.word	0x94a03595
 8006c54:	3fcfffff 	.word	0x3fcfffff

08006c58 <strtod>:
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <strtod+0x1c>)
 8006c5a:	b410      	push	{r4}
 8006c5c:	681c      	ldr	r4, [r3, #0]
 8006c5e:	4a06      	ldr	r2, [pc, #24]	; (8006c78 <strtod+0x20>)
 8006c60:	6a23      	ldr	r3, [r4, #32]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bf08      	it	eq
 8006c66:	4613      	moveq	r3, r2
 8006c68:	460a      	mov	r2, r1
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	bc10      	pop	{r4}
 8006c70:	f7ff b9f2 	b.w	8006058 <_strtod_l>
 8006c74:	20000038 	.word	0x20000038
 8006c78:	2000009c 	.word	0x2000009c

08006c7c <__swbuf_r>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	460e      	mov	r6, r1
 8006c80:	4614      	mov	r4, r2
 8006c82:	4605      	mov	r5, r0
 8006c84:	b118      	cbz	r0, 8006c8e <__swbuf_r+0x12>
 8006c86:	6983      	ldr	r3, [r0, #24]
 8006c88:	b90b      	cbnz	r3, 8006c8e <__swbuf_r+0x12>
 8006c8a:	f000 ffe9 	bl	8007c60 <__sinit>
 8006c8e:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <__swbuf_r+0x98>)
 8006c90:	429c      	cmp	r4, r3
 8006c92:	d12a      	bne.n	8006cea <__swbuf_r+0x6e>
 8006c94:	686c      	ldr	r4, [r5, #4]
 8006c96:	69a3      	ldr	r3, [r4, #24]
 8006c98:	60a3      	str	r3, [r4, #8]
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	071a      	lsls	r2, r3, #28
 8006c9e:	d52e      	bpl.n	8006cfe <__swbuf_r+0x82>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	b363      	cbz	r3, 8006cfe <__swbuf_r+0x82>
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	b2f6      	uxtb	r6, r6
 8006caa:	1ac0      	subs	r0, r0, r3
 8006cac:	6963      	ldr	r3, [r4, #20]
 8006cae:	4637      	mov	r7, r6
 8006cb0:	4283      	cmp	r3, r0
 8006cb2:	dc04      	bgt.n	8006cbe <__swbuf_r+0x42>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f000 ff68 	bl	8007b8c <_fflush_r>
 8006cbc:	bb28      	cbnz	r0, 8006d0a <__swbuf_r+0x8e>
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	60a3      	str	r3, [r4, #8]
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	6022      	str	r2, [r4, #0]
 8006ccc:	701e      	strb	r6, [r3, #0]
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	4283      	cmp	r3, r0
 8006cd2:	d004      	beq.n	8006cde <__swbuf_r+0x62>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	07db      	lsls	r3, r3, #31
 8006cd8:	d519      	bpl.n	8006d0e <__swbuf_r+0x92>
 8006cda:	2e0a      	cmp	r6, #10
 8006cdc:	d117      	bne.n	8006d0e <__swbuf_r+0x92>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 ff53 	bl	8007b8c <_fflush_r>
 8006ce6:	b190      	cbz	r0, 8006d0e <__swbuf_r+0x92>
 8006ce8:	e00f      	b.n	8006d0a <__swbuf_r+0x8e>
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <__swbuf_r+0x9c>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	d101      	bne.n	8006cf4 <__swbuf_r+0x78>
 8006cf0:	68ac      	ldr	r4, [r5, #8]
 8006cf2:	e7d0      	b.n	8006c96 <__swbuf_r+0x1a>
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <__swbuf_r+0xa0>)
 8006cf6:	429c      	cmp	r4, r3
 8006cf8:	bf08      	it	eq
 8006cfa:	68ec      	ldreq	r4, [r5, #12]
 8006cfc:	e7cb      	b.n	8006c96 <__swbuf_r+0x1a>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 f80d 	bl	8006d20 <__swsetup_r>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d0cc      	beq.n	8006ca4 <__swbuf_r+0x28>
 8006d0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d0e:	4638      	mov	r0, r7
 8006d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d12:	bf00      	nop
 8006d14:	080091a0 	.word	0x080091a0
 8006d18:	080091c0 	.word	0x080091c0
 8006d1c:	08009180 	.word	0x08009180

08006d20 <__swsetup_r>:
 8006d20:	4b32      	ldr	r3, [pc, #200]	; (8006dec <__swsetup_r+0xcc>)
 8006d22:	b570      	push	{r4, r5, r6, lr}
 8006d24:	681d      	ldr	r5, [r3, #0]
 8006d26:	4606      	mov	r6, r0
 8006d28:	460c      	mov	r4, r1
 8006d2a:	b125      	cbz	r5, 8006d36 <__swsetup_r+0x16>
 8006d2c:	69ab      	ldr	r3, [r5, #24]
 8006d2e:	b913      	cbnz	r3, 8006d36 <__swsetup_r+0x16>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 ff95 	bl	8007c60 <__sinit>
 8006d36:	4b2e      	ldr	r3, [pc, #184]	; (8006df0 <__swsetup_r+0xd0>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	d10f      	bne.n	8006d5c <__swsetup_r+0x3c>
 8006d3c:	686c      	ldr	r4, [r5, #4]
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	0715      	lsls	r5, r2, #28
 8006d46:	d42c      	bmi.n	8006da2 <__swsetup_r+0x82>
 8006d48:	06d0      	lsls	r0, r2, #27
 8006d4a:	d411      	bmi.n	8006d70 <__swsetup_r+0x50>
 8006d4c:	2209      	movs	r2, #9
 8006d4e:	6032      	str	r2, [r6, #0]
 8006d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d5a:	e03e      	b.n	8006dda <__swsetup_r+0xba>
 8006d5c:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <__swsetup_r+0xd4>)
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	d101      	bne.n	8006d66 <__swsetup_r+0x46>
 8006d62:	68ac      	ldr	r4, [r5, #8]
 8006d64:	e7eb      	b.n	8006d3e <__swsetup_r+0x1e>
 8006d66:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <__swsetup_r+0xd8>)
 8006d68:	429c      	cmp	r4, r3
 8006d6a:	bf08      	it	eq
 8006d6c:	68ec      	ldreq	r4, [r5, #12]
 8006d6e:	e7e6      	b.n	8006d3e <__swsetup_r+0x1e>
 8006d70:	0751      	lsls	r1, r2, #29
 8006d72:	d512      	bpl.n	8006d9a <__swsetup_r+0x7a>
 8006d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d76:	b141      	cbz	r1, 8006d8a <__swsetup_r+0x6a>
 8006d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	d002      	beq.n	8006d86 <__swsetup_r+0x66>
 8006d80:	4630      	mov	r0, r6
 8006d82:	f001 ffbf 	bl	8008d04 <_free_r>
 8006d86:	2300      	movs	r3, #0
 8006d88:	6363      	str	r3, [r4, #52]	; 0x34
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	2300      	movs	r3, #0
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f043 0308 	orr.w	r3, r3, #8
 8006da0:	81a3      	strh	r3, [r4, #12]
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	b94b      	cbnz	r3, 8006dba <__swsetup_r+0x9a>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db0:	d003      	beq.n	8006dba <__swsetup_r+0x9a>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4630      	mov	r0, r6
 8006db6:	f001 fb39 	bl	800842c <__smakebuf_r>
 8006dba:	89a2      	ldrh	r2, [r4, #12]
 8006dbc:	f012 0301 	ands.w	r3, r2, #1
 8006dc0:	d00c      	beq.n	8006ddc <__swsetup_r+0xbc>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60a3      	str	r3, [r4, #8]
 8006dc6:	6963      	ldr	r3, [r4, #20]
 8006dc8:	425b      	negs	r3, r3
 8006dca:	61a3      	str	r3, [r4, #24]
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	b953      	cbnz	r3, 8006de6 <__swsetup_r+0xc6>
 8006dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006dd8:	d1ba      	bne.n	8006d50 <__swsetup_r+0x30>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	0792      	lsls	r2, r2, #30
 8006dde:	bf58      	it	pl
 8006de0:	6963      	ldrpl	r3, [r4, #20]
 8006de2:	60a3      	str	r3, [r4, #8]
 8006de4:	e7f2      	b.n	8006dcc <__swsetup_r+0xac>
 8006de6:	2000      	movs	r0, #0
 8006de8:	e7f7      	b.n	8006dda <__swsetup_r+0xba>
 8006dea:	bf00      	nop
 8006dec:	20000038 	.word	0x20000038
 8006df0:	080091a0 	.word	0x080091a0
 8006df4:	080091c0 	.word	0x080091c0
 8006df8:	08009180 	.word	0x08009180

08006dfc <quorem>:
 8006dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	6903      	ldr	r3, [r0, #16]
 8006e02:	690c      	ldr	r4, [r1, #16]
 8006e04:	4680      	mov	r8, r0
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	f2c0 8084 	blt.w	8006f14 <quorem+0x118>
 8006e0c:	3c01      	subs	r4, #1
 8006e0e:	f101 0714 	add.w	r7, r1, #20
 8006e12:	f100 0614 	add.w	r6, r0, #20
 8006e16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e1e:	3501      	adds	r5, #1
 8006e20:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e24:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e28:	eb06 030c 	add.w	r3, r6, ip
 8006e2c:	eb07 090c 	add.w	r9, r7, ip
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	b39d      	cbz	r5, 8006e9c <quorem+0xa0>
 8006e34:	f04f 0a00 	mov.w	sl, #0
 8006e38:	4638      	mov	r0, r7
 8006e3a:	46b6      	mov	lr, r6
 8006e3c:	46d3      	mov	fp, sl
 8006e3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e42:	b293      	uxth	r3, r2
 8006e44:	fb05 a303 	mla	r3, r5, r3, sl
 8006e48:	0c12      	lsrs	r2, r2, #16
 8006e4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e4e:	fb05 a202 	mla	r2, r5, r2, sl
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ebab 0303 	sub.w	r3, fp, r3
 8006e58:	f8de b000 	ldr.w	fp, [lr]
 8006e5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006e60:	fa1f fb8b 	uxth.w	fp, fp
 8006e64:	445b      	add	r3, fp
 8006e66:	fa1f fb82 	uxth.w	fp, r2
 8006e6a:	f8de 2000 	ldr.w	r2, [lr]
 8006e6e:	4581      	cmp	r9, r0
 8006e70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e7e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006e82:	f84e 3b04 	str.w	r3, [lr], #4
 8006e86:	d2da      	bcs.n	8006e3e <quorem+0x42>
 8006e88:	f856 300c 	ldr.w	r3, [r6, ip]
 8006e8c:	b933      	cbnz	r3, 8006e9c <quorem+0xa0>
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	3b04      	subs	r3, #4
 8006e92:	429e      	cmp	r6, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	d331      	bcc.n	8006efc <quorem+0x100>
 8006e98:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	f001 fd7d 	bl	800899c <__mcmp>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	db26      	blt.n	8006ef4 <quorem+0xf8>
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f04f 0c00 	mov.w	ip, #0
 8006eac:	3501      	adds	r5, #1
 8006eae:	f857 1b04 	ldr.w	r1, [r7], #4
 8006eb2:	f8d0 e000 	ldr.w	lr, [r0]
 8006eb6:	b28b      	uxth	r3, r1
 8006eb8:	ebac 0303 	sub.w	r3, ip, r3
 8006ebc:	fa1f f28e 	uxth.w	r2, lr
 8006ec0:	4413      	add	r3, r2
 8006ec2:	0c0a      	lsrs	r2, r1, #16
 8006ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ed2:	45b9      	cmp	r9, r7
 8006ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ed8:	f840 3b04 	str.w	r3, [r0], #4
 8006edc:	d2e7      	bcs.n	8006eae <quorem+0xb2>
 8006ede:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006ee2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ee6:	b92a      	cbnz	r2, 8006ef4 <quorem+0xf8>
 8006ee8:	3b04      	subs	r3, #4
 8006eea:	429e      	cmp	r6, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	d30b      	bcc.n	8006f08 <quorem+0x10c>
 8006ef0:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	b003      	add	sp, #12
 8006ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	3b04      	subs	r3, #4
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	d1c9      	bne.n	8006e98 <quorem+0x9c>
 8006f04:	3c01      	subs	r4, #1
 8006f06:	e7c4      	b.n	8006e92 <quorem+0x96>
 8006f08:	6812      	ldr	r2, [r2, #0]
 8006f0a:	3b04      	subs	r3, #4
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	d1ef      	bne.n	8006ef0 <quorem+0xf4>
 8006f10:	3c01      	subs	r4, #1
 8006f12:	e7ea      	b.n	8006eea <quorem+0xee>
 8006f14:	2000      	movs	r0, #0
 8006f16:	e7ee      	b.n	8006ef6 <quorem+0xfa>

08006f18 <_dtoa_r>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	461f      	mov	r7, r3
 8006f20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f22:	b095      	sub	sp, #84	; 0x54
 8006f24:	4604      	mov	r4, r0
 8006f26:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006f2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006f2e:	b93d      	cbnz	r5, 8006f40 <_dtoa_r+0x28>
 8006f30:	2010      	movs	r0, #16
 8006f32:	f001 fabb 	bl	80084ac <malloc>
 8006f36:	6260      	str	r0, [r4, #36]	; 0x24
 8006f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f3c:	6005      	str	r5, [r0, #0]
 8006f3e:	60c5      	str	r5, [r0, #12]
 8006f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	b151      	cbz	r1, 8006f5c <_dtoa_r+0x44>
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4093      	lsls	r3, r2
 8006f4c:	604a      	str	r2, [r1, #4]
 8006f4e:	608b      	str	r3, [r1, #8]
 8006f50:	4620      	mov	r0, r4
 8006f52:	f001 fb04 	bl	800855e <_Bfree>
 8006f56:	2200      	movs	r2, #0
 8006f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	1e3b      	subs	r3, r7, #0
 8006f5e:	bfaf      	iteee	ge
 8006f60:	2300      	movge	r3, #0
 8006f62:	2201      	movlt	r2, #1
 8006f64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	9303      	strlt	r3, [sp, #12]
 8006f6a:	bfac      	ite	ge
 8006f6c:	f8c8 3000 	strge.w	r3, [r8]
 8006f70:	f8c8 2000 	strlt.w	r2, [r8]
 8006f74:	4bae      	ldr	r3, [pc, #696]	; (8007230 <_dtoa_r+0x318>)
 8006f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006f7a:	ea33 0308 	bics.w	r3, r3, r8
 8006f7e:	d11b      	bne.n	8006fb8 <_dtoa_r+0xa0>
 8006f80:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	9b02      	ldr	r3, [sp, #8]
 8006f8a:	b923      	cbnz	r3, 8006f96 <_dtoa_r+0x7e>
 8006f8c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006f90:	2800      	cmp	r0, #0
 8006f92:	f000 8545 	beq.w	8007a20 <_dtoa_r+0xb08>
 8006f96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f98:	b953      	cbnz	r3, 8006fb0 <_dtoa_r+0x98>
 8006f9a:	4ba6      	ldr	r3, [pc, #664]	; (8007234 <_dtoa_r+0x31c>)
 8006f9c:	e021      	b.n	8006fe2 <_dtoa_r+0xca>
 8006f9e:	4ba6      	ldr	r3, [pc, #664]	; (8007238 <_dtoa_r+0x320>)
 8006fa0:	9306      	str	r3, [sp, #24]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	9806      	ldr	r0, [sp, #24]
 8006faa:	b015      	add	sp, #84	; 0x54
 8006fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb0:	4ba0      	ldr	r3, [pc, #640]	; (8007234 <_dtoa_r+0x31c>)
 8006fb2:	9306      	str	r3, [sp, #24]
 8006fb4:	3303      	adds	r3, #3
 8006fb6:	e7f5      	b.n	8006fa4 <_dtoa_r+0x8c>
 8006fb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	f7f9 fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8006fc8:	4682      	mov	sl, r0
 8006fca:	b160      	cbz	r0, 8006fe6 <_dtoa_r+0xce>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8520 	beq.w	8007a1a <_dtoa_r+0xb02>
 8006fda:	4b98      	ldr	r3, [pc, #608]	; (800723c <_dtoa_r+0x324>)
 8006fdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	9306      	str	r3, [sp, #24]
 8006fe4:	e7e0      	b.n	8006fa8 <_dtoa_r+0x90>
 8006fe6:	ab12      	add	r3, sp, #72	; 0x48
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	ab13      	add	r3, sp, #76	; 0x4c
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	4632      	mov	r2, r6
 8006ff0:	463b      	mov	r3, r7
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f001 fdc0 	bl	8008b78 <__d2b>
 8006ff8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006ffc:	4683      	mov	fp, r0
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	d07d      	beq.n	80070fe <_dtoa_r+0x1e6>
 8007002:	46b0      	mov	r8, r6
 8007004:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007008:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800700c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007010:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007014:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007018:	2200      	movs	r2, #0
 800701a:	4b89      	ldr	r3, [pc, #548]	; (8007240 <_dtoa_r+0x328>)
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	f7f9 f8a2 	bl	8000168 <__aeabi_dsub>
 8007024:	a37c      	add	r3, pc, #496	; (adr r3, 8007218 <_dtoa_r+0x300>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f7f9 fa55 	bl	80004d8 <__aeabi_dmul>
 800702e:	a37c      	add	r3, pc, #496	; (adr r3, 8007220 <_dtoa_r+0x308>)
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	f7f9 f89a 	bl	800016c <__adddf3>
 8007038:	4606      	mov	r6, r0
 800703a:	4628      	mov	r0, r5
 800703c:	460f      	mov	r7, r1
 800703e:	f7f9 f9e1 	bl	8000404 <__aeabi_i2d>
 8007042:	a379      	add	r3, pc, #484	; (adr r3, 8007228 <_dtoa_r+0x310>)
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	f7f9 fa46 	bl	80004d8 <__aeabi_dmul>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 f88a 	bl	800016c <__adddf3>
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	f7f9 fcec 	bl	8000a38 <__aeabi_d2iz>
 8007060:	2200      	movs	r2, #0
 8007062:	4682      	mov	sl, r0
 8007064:	2300      	movs	r3, #0
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	f7f9 fca7 	bl	80009bc <__aeabi_dcmplt>
 800706e:	b148      	cbz	r0, 8007084 <_dtoa_r+0x16c>
 8007070:	4650      	mov	r0, sl
 8007072:	f7f9 f9c7 	bl	8000404 <__aeabi_i2d>
 8007076:	4632      	mov	r2, r6
 8007078:	463b      	mov	r3, r7
 800707a:	f7f9 fc95 	bl	80009a8 <__aeabi_dcmpeq>
 800707e:	b908      	cbnz	r0, 8007084 <_dtoa_r+0x16c>
 8007080:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007084:	f1ba 0f16 	cmp.w	sl, #22
 8007088:	d85a      	bhi.n	8007140 <_dtoa_r+0x228>
 800708a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708e:	496d      	ldr	r1, [pc, #436]	; (8007244 <_dtoa_r+0x32c>)
 8007090:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007098:	f7f9 fcae 	bl	80009f8 <__aeabi_dcmpgt>
 800709c:	2800      	cmp	r0, #0
 800709e:	d051      	beq.n	8007144 <_dtoa_r+0x22c>
 80070a0:	2300      	movs	r3, #0
 80070a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070a6:	930d      	str	r3, [sp, #52]	; 0x34
 80070a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070aa:	1b5d      	subs	r5, r3, r5
 80070ac:	1e6b      	subs	r3, r5, #1
 80070ae:	9307      	str	r3, [sp, #28]
 80070b0:	bf43      	ittte	mi
 80070b2:	2300      	movmi	r3, #0
 80070b4:	f1c5 0901 	rsbmi	r9, r5, #1
 80070b8:	9307      	strmi	r3, [sp, #28]
 80070ba:	f04f 0900 	movpl.w	r9, #0
 80070be:	f1ba 0f00 	cmp.w	sl, #0
 80070c2:	db41      	blt.n	8007148 <_dtoa_r+0x230>
 80070c4:	9b07      	ldr	r3, [sp, #28]
 80070c6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80070ca:	4453      	add	r3, sl
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	2300      	movs	r3, #0
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	f200 808f 	bhi.w	80071f8 <_dtoa_r+0x2e0>
 80070da:	2b05      	cmp	r3, #5
 80070dc:	bfc4      	itt	gt
 80070de:	3b04      	subgt	r3, #4
 80070e0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80070e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070e4:	bfc8      	it	gt
 80070e6:	2500      	movgt	r5, #0
 80070e8:	f1a3 0302 	sub.w	r3, r3, #2
 80070ec:	bfd8      	it	le
 80070ee:	2501      	movle	r5, #1
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	f200 808d 	bhi.w	8007210 <_dtoa_r+0x2f8>
 80070f6:	e8df f003 	tbb	[pc, r3]
 80070fa:	7d7b      	.short	0x7d7b
 80070fc:	6f2f      	.short	0x6f2f
 80070fe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007102:	441d      	add	r5, r3
 8007104:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007108:	2820      	cmp	r0, #32
 800710a:	dd13      	ble.n	8007134 <_dtoa_r+0x21c>
 800710c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007110:	9b02      	ldr	r3, [sp, #8]
 8007112:	fa08 f800 	lsl.w	r8, r8, r0
 8007116:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800711a:	fa23 f000 	lsr.w	r0, r3, r0
 800711e:	ea48 0000 	orr.w	r0, r8, r0
 8007122:	f7f9 f95f 	bl	80003e4 <__aeabi_ui2d>
 8007126:	2301      	movs	r3, #1
 8007128:	4680      	mov	r8, r0
 800712a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800712e:	3d01      	subs	r5, #1
 8007130:	9310      	str	r3, [sp, #64]	; 0x40
 8007132:	e771      	b.n	8007018 <_dtoa_r+0x100>
 8007134:	9b02      	ldr	r3, [sp, #8]
 8007136:	f1c0 0020 	rsb	r0, r0, #32
 800713a:	fa03 f000 	lsl.w	r0, r3, r0
 800713e:	e7f0      	b.n	8007122 <_dtoa_r+0x20a>
 8007140:	2301      	movs	r3, #1
 8007142:	e7b0      	b.n	80070a6 <_dtoa_r+0x18e>
 8007144:	900d      	str	r0, [sp, #52]	; 0x34
 8007146:	e7af      	b.n	80070a8 <_dtoa_r+0x190>
 8007148:	f1ca 0300 	rsb	r3, sl, #0
 800714c:	9308      	str	r3, [sp, #32]
 800714e:	2300      	movs	r3, #0
 8007150:	eba9 090a 	sub.w	r9, r9, sl
 8007154:	930c      	str	r3, [sp, #48]	; 0x30
 8007156:	e7bc      	b.n	80070d2 <_dtoa_r+0x1ba>
 8007158:	2301      	movs	r3, #1
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
 800715c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800715e:	2b00      	cmp	r3, #0
 8007160:	dd74      	ble.n	800724c <_dtoa_r+0x334>
 8007162:	4698      	mov	r8, r3
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	2200      	movs	r2, #0
 8007168:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800716a:	6072      	str	r2, [r6, #4]
 800716c:	2204      	movs	r2, #4
 800716e:	f102 0014 	add.w	r0, r2, #20
 8007172:	4298      	cmp	r0, r3
 8007174:	6871      	ldr	r1, [r6, #4]
 8007176:	d96e      	bls.n	8007256 <_dtoa_r+0x33e>
 8007178:	4620      	mov	r0, r4
 800717a:	f001 f9bc 	bl	80084f6 <_Balloc>
 800717e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007180:	6030      	str	r0, [r6, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f1b8 0f0e 	cmp.w	r8, #14
 8007188:	9306      	str	r3, [sp, #24]
 800718a:	f200 80ed 	bhi.w	8007368 <_dtoa_r+0x450>
 800718e:	2d00      	cmp	r5, #0
 8007190:	f000 80ea 	beq.w	8007368 <_dtoa_r+0x450>
 8007194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007198:	f1ba 0f00 	cmp.w	sl, #0
 800719c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80071a0:	dd77      	ble.n	8007292 <_dtoa_r+0x37a>
 80071a2:	4a28      	ldr	r2, [pc, #160]	; (8007244 <_dtoa_r+0x32c>)
 80071a4:	f00a 030f 	and.w	r3, sl, #15
 80071a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80071ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071b0:	06f0      	lsls	r0, r6, #27
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80071ba:	d568      	bpl.n	800728e <_dtoa_r+0x376>
 80071bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80071c0:	4b21      	ldr	r3, [pc, #132]	; (8007248 <_dtoa_r+0x330>)
 80071c2:	2503      	movs	r5, #3
 80071c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071c8:	f7f9 fab0 	bl	800072c <__aeabi_ddiv>
 80071cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d0:	f006 060f 	and.w	r6, r6, #15
 80071d4:	4f1c      	ldr	r7, [pc, #112]	; (8007248 <_dtoa_r+0x330>)
 80071d6:	e04f      	b.n	8007278 <_dtoa_r+0x360>
 80071d8:	2301      	movs	r3, #1
 80071da:	9309      	str	r3, [sp, #36]	; 0x24
 80071dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071de:	4453      	add	r3, sl
 80071e0:	f103 0801 	add.w	r8, r3, #1
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	4643      	mov	r3, r8
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	bfb8      	it	lt
 80071ec:	2301      	movlt	r3, #1
 80071ee:	e7ba      	b.n	8007166 <_dtoa_r+0x24e>
 80071f0:	2300      	movs	r3, #0
 80071f2:	e7b2      	b.n	800715a <_dtoa_r+0x242>
 80071f4:	2300      	movs	r3, #0
 80071f6:	e7f0      	b.n	80071da <_dtoa_r+0x2c2>
 80071f8:	2501      	movs	r5, #1
 80071fa:	2300      	movs	r3, #0
 80071fc:	9509      	str	r5, [sp, #36]	; 0x24
 80071fe:	931e      	str	r3, [sp, #120]	; 0x78
 8007200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007204:	2200      	movs	r2, #0
 8007206:	9304      	str	r3, [sp, #16]
 8007208:	4698      	mov	r8, r3
 800720a:	2312      	movs	r3, #18
 800720c:	921f      	str	r2, [sp, #124]	; 0x7c
 800720e:	e7aa      	b.n	8007166 <_dtoa_r+0x24e>
 8007210:	2301      	movs	r3, #1
 8007212:	9309      	str	r3, [sp, #36]	; 0x24
 8007214:	e7f4      	b.n	8007200 <_dtoa_r+0x2e8>
 8007216:	bf00      	nop
 8007218:	636f4361 	.word	0x636f4361
 800721c:	3fd287a7 	.word	0x3fd287a7
 8007220:	8b60c8b3 	.word	0x8b60c8b3
 8007224:	3fc68a28 	.word	0x3fc68a28
 8007228:	509f79fb 	.word	0x509f79fb
 800722c:	3fd34413 	.word	0x3fd34413
 8007230:	7ff00000 	.word	0x7ff00000
 8007234:	08009179 	.word	0x08009179
 8007238:	08009170 	.word	0x08009170
 800723c:	0800911d 	.word	0x0800911d
 8007240:	3ff80000 	.word	0x3ff80000
 8007244:	08009218 	.word	0x08009218
 8007248:	080091f0 	.word	0x080091f0
 800724c:	2301      	movs	r3, #1
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	4698      	mov	r8, r3
 8007252:	461a      	mov	r2, r3
 8007254:	e7da      	b.n	800720c <_dtoa_r+0x2f4>
 8007256:	3101      	adds	r1, #1
 8007258:	6071      	str	r1, [r6, #4]
 800725a:	0052      	lsls	r2, r2, #1
 800725c:	e787      	b.n	800716e <_dtoa_r+0x256>
 800725e:	07f1      	lsls	r1, r6, #31
 8007260:	d508      	bpl.n	8007274 <_dtoa_r+0x35c>
 8007262:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726a:	f7f9 f935 	bl	80004d8 <__aeabi_dmul>
 800726e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007272:	3501      	adds	r5, #1
 8007274:	1076      	asrs	r6, r6, #1
 8007276:	3708      	adds	r7, #8
 8007278:	2e00      	cmp	r6, #0
 800727a:	d1f0      	bne.n	800725e <_dtoa_r+0x346>
 800727c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007284:	f7f9 fa52 	bl	800072c <__aeabi_ddiv>
 8007288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800728c:	e01b      	b.n	80072c6 <_dtoa_r+0x3ae>
 800728e:	2502      	movs	r5, #2
 8007290:	e7a0      	b.n	80071d4 <_dtoa_r+0x2bc>
 8007292:	f000 80a4 	beq.w	80073de <_dtoa_r+0x4c6>
 8007296:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800729a:	f1ca 0600 	rsb	r6, sl, #0
 800729e:	4ba0      	ldr	r3, [pc, #640]	; (8007520 <_dtoa_r+0x608>)
 80072a0:	f006 020f 	and.w	r2, r6, #15
 80072a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f9 f914 	bl	80004d8 <__aeabi_dmul>
 80072b0:	2502      	movs	r5, #2
 80072b2:	2300      	movs	r3, #0
 80072b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b8:	4f9a      	ldr	r7, [pc, #616]	; (8007524 <_dtoa_r+0x60c>)
 80072ba:	1136      	asrs	r6, r6, #4
 80072bc:	2e00      	cmp	r6, #0
 80072be:	f040 8083 	bne.w	80073c8 <_dtoa_r+0x4b0>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e0      	bne.n	8007288 <_dtoa_r+0x370>
 80072c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 808a 	beq.w	80073e2 <_dtoa_r+0x4ca>
 80072ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80072d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072da:	2200      	movs	r2, #0
 80072dc:	4b92      	ldr	r3, [pc, #584]	; (8007528 <_dtoa_r+0x610>)
 80072de:	f7f9 fb6d 	bl	80009bc <__aeabi_dcmplt>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d07d      	beq.n	80073e2 <_dtoa_r+0x4ca>
 80072e6:	f1b8 0f00 	cmp.w	r8, #0
 80072ea:	d07a      	beq.n	80073e2 <_dtoa_r+0x4ca>
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dd36      	ble.n	8007360 <_dtoa_r+0x448>
 80072f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072f6:	2200      	movs	r2, #0
 80072f8:	4b8c      	ldr	r3, [pc, #560]	; (800752c <_dtoa_r+0x614>)
 80072fa:	f7f9 f8ed 	bl	80004d8 <__aeabi_dmul>
 80072fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007302:	9e04      	ldr	r6, [sp, #16]
 8007304:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8007308:	3501      	adds	r5, #1
 800730a:	4628      	mov	r0, r5
 800730c:	f7f9 f87a 	bl	8000404 <__aeabi_i2d>
 8007310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007314:	f7f9 f8e0 	bl	80004d8 <__aeabi_dmul>
 8007318:	2200      	movs	r2, #0
 800731a:	4b85      	ldr	r3, [pc, #532]	; (8007530 <_dtoa_r+0x618>)
 800731c:	f7f8 ff26 	bl	800016c <__adddf3>
 8007320:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007324:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007328:	950b      	str	r5, [sp, #44]	; 0x2c
 800732a:	2e00      	cmp	r6, #0
 800732c:	d15c      	bne.n	80073e8 <_dtoa_r+0x4d0>
 800732e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	4b7f      	ldr	r3, [pc, #508]	; (8007534 <_dtoa_r+0x61c>)
 8007336:	f7f8 ff17 	bl	8000168 <__aeabi_dsub>
 800733a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733c:	462b      	mov	r3, r5
 800733e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007342:	f7f9 fb59 	bl	80009f8 <__aeabi_dcmpgt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f040 8281 	bne.w	800784e <_dtoa_r+0x936>
 800734c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007352:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007356:	f7f9 fb31 	bl	80009bc <__aeabi_dcmplt>
 800735a:	2800      	cmp	r0, #0
 800735c:	f040 8275 	bne.w	800784a <_dtoa_r+0x932>
 8007360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800736a:	2b00      	cmp	r3, #0
 800736c:	f2c0 814b 	blt.w	8007606 <_dtoa_r+0x6ee>
 8007370:	f1ba 0f0e 	cmp.w	sl, #14
 8007374:	f300 8147 	bgt.w	8007606 <_dtoa_r+0x6ee>
 8007378:	4b69      	ldr	r3, [pc, #420]	; (8007520 <_dtoa_r+0x608>)
 800737a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007386:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007388:	2b00      	cmp	r3, #0
 800738a:	f280 80d7 	bge.w	800753c <_dtoa_r+0x624>
 800738e:	f1b8 0f00 	cmp.w	r8, #0
 8007392:	f300 80d3 	bgt.w	800753c <_dtoa_r+0x624>
 8007396:	f040 8257 	bne.w	8007848 <_dtoa_r+0x930>
 800739a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800739e:	2200      	movs	r2, #0
 80073a0:	4b64      	ldr	r3, [pc, #400]	; (8007534 <_dtoa_r+0x61c>)
 80073a2:	f7f9 f899 	bl	80004d8 <__aeabi_dmul>
 80073a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073aa:	f7f9 fb1b 	bl	80009e4 <__aeabi_dcmpge>
 80073ae:	4646      	mov	r6, r8
 80073b0:	4647      	mov	r7, r8
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f040 822d 	bne.w	8007812 <_dtoa_r+0x8fa>
 80073b8:	9b06      	ldr	r3, [sp, #24]
 80073ba:	9a06      	ldr	r2, [sp, #24]
 80073bc:	1c5d      	adds	r5, r3, #1
 80073be:	2331      	movs	r3, #49	; 0x31
 80073c0:	f10a 0a01 	add.w	sl, sl, #1
 80073c4:	7013      	strb	r3, [r2, #0]
 80073c6:	e228      	b.n	800781a <_dtoa_r+0x902>
 80073c8:	07f2      	lsls	r2, r6, #31
 80073ca:	d505      	bpl.n	80073d8 <_dtoa_r+0x4c0>
 80073cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d0:	f7f9 f882 	bl	80004d8 <__aeabi_dmul>
 80073d4:	2301      	movs	r3, #1
 80073d6:	3501      	adds	r5, #1
 80073d8:	1076      	asrs	r6, r6, #1
 80073da:	3708      	adds	r7, #8
 80073dc:	e76e      	b.n	80072bc <_dtoa_r+0x3a4>
 80073de:	2502      	movs	r5, #2
 80073e0:	e771      	b.n	80072c6 <_dtoa_r+0x3ae>
 80073e2:	4657      	mov	r7, sl
 80073e4:	4646      	mov	r6, r8
 80073e6:	e790      	b.n	800730a <_dtoa_r+0x3f2>
 80073e8:	4b4d      	ldr	r3, [pc, #308]	; (8007520 <_dtoa_r+0x608>)
 80073ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80073f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d048      	beq.n	800748a <_dtoa_r+0x572>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	2000      	movs	r0, #0
 80073fe:	494e      	ldr	r1, [pc, #312]	; (8007538 <_dtoa_r+0x620>)
 8007400:	f7f9 f994 	bl	800072c <__aeabi_ddiv>
 8007404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007408:	f7f8 feae 	bl	8000168 <__aeabi_dsub>
 800740c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007410:	9d06      	ldr	r5, [sp, #24]
 8007412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007416:	f7f9 fb0f 	bl	8000a38 <__aeabi_d2iz>
 800741a:	9011      	str	r0, [sp, #68]	; 0x44
 800741c:	f7f8 fff2 	bl	8000404 <__aeabi_i2d>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007428:	f7f8 fe9e 	bl	8000168 <__aeabi_dsub>
 800742c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800742e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007432:	3330      	adds	r3, #48	; 0x30
 8007434:	f805 3b01 	strb.w	r3, [r5], #1
 8007438:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800743c:	f7f9 fabe 	bl	80009bc <__aeabi_dcmplt>
 8007440:	2800      	cmp	r0, #0
 8007442:	d163      	bne.n	800750c <_dtoa_r+0x5f4>
 8007444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007448:	2000      	movs	r0, #0
 800744a:	4937      	ldr	r1, [pc, #220]	; (8007528 <_dtoa_r+0x610>)
 800744c:	f7f8 fe8c 	bl	8000168 <__aeabi_dsub>
 8007450:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007454:	f7f9 fab2 	bl	80009bc <__aeabi_dcmplt>
 8007458:	2800      	cmp	r0, #0
 800745a:	f040 80b5 	bne.w	80075c8 <_dtoa_r+0x6b0>
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	1aeb      	subs	r3, r5, r3
 8007462:	429e      	cmp	r6, r3
 8007464:	f77f af7c 	ble.w	8007360 <_dtoa_r+0x448>
 8007468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800746c:	2200      	movs	r2, #0
 800746e:	4b2f      	ldr	r3, [pc, #188]	; (800752c <_dtoa_r+0x614>)
 8007470:	f7f9 f832 	bl	80004d8 <__aeabi_dmul>
 8007474:	2200      	movs	r2, #0
 8007476:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800747a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800747e:	4b2b      	ldr	r3, [pc, #172]	; (800752c <_dtoa_r+0x614>)
 8007480:	f7f9 f82a 	bl	80004d8 <__aeabi_dmul>
 8007484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007488:	e7c3      	b.n	8007412 <_dtoa_r+0x4fa>
 800748a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800748e:	f7f9 f823 	bl	80004d8 <__aeabi_dmul>
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007498:	199d      	adds	r5, r3, r6
 800749a:	461e      	mov	r6, r3
 800749c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074a0:	f7f9 faca 	bl	8000a38 <__aeabi_d2iz>
 80074a4:	9011      	str	r0, [sp, #68]	; 0x44
 80074a6:	f7f8 ffad 	bl	8000404 <__aeabi_i2d>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b2:	f7f8 fe59 	bl	8000168 <__aeabi_dsub>
 80074b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074bc:	3330      	adds	r3, #48	; 0x30
 80074be:	f806 3b01 	strb.w	r3, [r6], #1
 80074c2:	42ae      	cmp	r6, r5
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	d124      	bne.n	8007514 <_dtoa_r+0x5fc>
 80074ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <_dtoa_r+0x620>)
 80074d0:	f7f8 fe4c 	bl	800016c <__adddf3>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074dc:	f7f9 fa8c 	bl	80009f8 <__aeabi_dcmpgt>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d171      	bne.n	80075c8 <_dtoa_r+0x6b0>
 80074e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074e8:	2000      	movs	r0, #0
 80074ea:	4913      	ldr	r1, [pc, #76]	; (8007538 <_dtoa_r+0x620>)
 80074ec:	f7f8 fe3c 	bl	8000168 <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f8:	f7f9 fa60 	bl	80009bc <__aeabi_dcmplt>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f43f af2f 	beq.w	8007360 <_dtoa_r+0x448>
 8007502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007506:	1e6a      	subs	r2, r5, #1
 8007508:	2b30      	cmp	r3, #48	; 0x30
 800750a:	d001      	beq.n	8007510 <_dtoa_r+0x5f8>
 800750c:	46ba      	mov	sl, r7
 800750e:	e04a      	b.n	80075a6 <_dtoa_r+0x68e>
 8007510:	4615      	mov	r5, r2
 8007512:	e7f6      	b.n	8007502 <_dtoa_r+0x5ea>
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <_dtoa_r+0x614>)
 8007516:	f7f8 ffdf 	bl	80004d8 <__aeabi_dmul>
 800751a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800751e:	e7bd      	b.n	800749c <_dtoa_r+0x584>
 8007520:	08009218 	.word	0x08009218
 8007524:	080091f0 	.word	0x080091f0
 8007528:	3ff00000 	.word	0x3ff00000
 800752c:	40240000 	.word	0x40240000
 8007530:	401c0000 	.word	0x401c0000
 8007534:	40140000 	.word	0x40140000
 8007538:	3fe00000 	.word	0x3fe00000
 800753c:	9d06      	ldr	r5, [sp, #24]
 800753e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f9 f8ef 	bl	800072c <__aeabi_ddiv>
 800754e:	f7f9 fa73 	bl	8000a38 <__aeabi_d2iz>
 8007552:	4681      	mov	r9, r0
 8007554:	f7f8 ff56 	bl	8000404 <__aeabi_i2d>
 8007558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755c:	f7f8 ffbc 	bl	80004d8 <__aeabi_dmul>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4630      	mov	r0, r6
 8007566:	4639      	mov	r1, r7
 8007568:	f7f8 fdfe 	bl	8000168 <__aeabi_dsub>
 800756c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007570:	f805 6b01 	strb.w	r6, [r5], #1
 8007574:	9e06      	ldr	r6, [sp, #24]
 8007576:	4602      	mov	r2, r0
 8007578:	1bae      	subs	r6, r5, r6
 800757a:	45b0      	cmp	r8, r6
 800757c:	460b      	mov	r3, r1
 800757e:	d135      	bne.n	80075ec <_dtoa_r+0x6d4>
 8007580:	f7f8 fdf4 	bl	800016c <__adddf3>
 8007584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	f7f9 fa34 	bl	80009f8 <__aeabi_dcmpgt>
 8007590:	b9c8      	cbnz	r0, 80075c6 <_dtoa_r+0x6ae>
 8007592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007596:	4630      	mov	r0, r6
 8007598:	4639      	mov	r1, r7
 800759a:	f7f9 fa05 	bl	80009a8 <__aeabi_dcmpeq>
 800759e:	b110      	cbz	r0, 80075a6 <_dtoa_r+0x68e>
 80075a0:	f019 0f01 	tst.w	r9, #1
 80075a4:	d10f      	bne.n	80075c6 <_dtoa_r+0x6ae>
 80075a6:	4659      	mov	r1, fp
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 ffd8 	bl	800855e <_Bfree>
 80075ae:	2300      	movs	r3, #0
 80075b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075b2:	702b      	strb	r3, [r5, #0]
 80075b4:	f10a 0301 	add.w	r3, sl, #1
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f43f acf3 	beq.w	8006fa8 <_dtoa_r+0x90>
 80075c2:	601d      	str	r5, [r3, #0]
 80075c4:	e4f0      	b.n	8006fa8 <_dtoa_r+0x90>
 80075c6:	4657      	mov	r7, sl
 80075c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075cc:	1e6b      	subs	r3, r5, #1
 80075ce:	2a39      	cmp	r2, #57	; 0x39
 80075d0:	d106      	bne.n	80075e0 <_dtoa_r+0x6c8>
 80075d2:	9a06      	ldr	r2, [sp, #24]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d107      	bne.n	80075e8 <_dtoa_r+0x6d0>
 80075d8:	2330      	movs	r3, #48	; 0x30
 80075da:	7013      	strb	r3, [r2, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	3701      	adds	r7, #1
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	3201      	adds	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e791      	b.n	800750c <_dtoa_r+0x5f4>
 80075e8:	461d      	mov	r5, r3
 80075ea:	e7ed      	b.n	80075c8 <_dtoa_r+0x6b0>
 80075ec:	2200      	movs	r2, #0
 80075ee:	4b99      	ldr	r3, [pc, #612]	; (8007854 <_dtoa_r+0x93c>)
 80075f0:	f7f8 ff72 	bl	80004d8 <__aeabi_dmul>
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	4606      	mov	r6, r0
 80075fa:	460f      	mov	r7, r1
 80075fc:	f7f9 f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8007600:	2800      	cmp	r0, #0
 8007602:	d09e      	beq.n	8007542 <_dtoa_r+0x62a>
 8007604:	e7cf      	b.n	80075a6 <_dtoa_r+0x68e>
 8007606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007608:	2a00      	cmp	r2, #0
 800760a:	f000 8088 	beq.w	800771e <_dtoa_r+0x806>
 800760e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007610:	2a01      	cmp	r2, #1
 8007612:	dc6d      	bgt.n	80076f0 <_dtoa_r+0x7d8>
 8007614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007616:	2a00      	cmp	r2, #0
 8007618:	d066      	beq.n	80076e8 <_dtoa_r+0x7d0>
 800761a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800761e:	464d      	mov	r5, r9
 8007620:	9e08      	ldr	r6, [sp, #32]
 8007622:	9a07      	ldr	r2, [sp, #28]
 8007624:	2101      	movs	r1, #1
 8007626:	441a      	add	r2, r3
 8007628:	4620      	mov	r0, r4
 800762a:	4499      	add	r9, r3
 800762c:	9207      	str	r2, [sp, #28]
 800762e:	f001 f874 	bl	800871a <__i2b>
 8007632:	4607      	mov	r7, r0
 8007634:	2d00      	cmp	r5, #0
 8007636:	dd0b      	ble.n	8007650 <_dtoa_r+0x738>
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd08      	ble.n	8007650 <_dtoa_r+0x738>
 800763e:	42ab      	cmp	r3, r5
 8007640:	bfa8      	it	ge
 8007642:	462b      	movge	r3, r5
 8007644:	9a07      	ldr	r2, [sp, #28]
 8007646:	eba9 0903 	sub.w	r9, r9, r3
 800764a:	1aed      	subs	r5, r5, r3
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	b1eb      	cbz	r3, 8007690 <_dtoa_r+0x778>
 8007654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d065      	beq.n	8007726 <_dtoa_r+0x80e>
 800765a:	b18e      	cbz	r6, 8007680 <_dtoa_r+0x768>
 800765c:	4639      	mov	r1, r7
 800765e:	4632      	mov	r2, r6
 8007660:	4620      	mov	r0, r4
 8007662:	f001 f8f9 	bl	8008858 <__pow5mult>
 8007666:	465a      	mov	r2, fp
 8007668:	4601      	mov	r1, r0
 800766a:	4607      	mov	r7, r0
 800766c:	4620      	mov	r0, r4
 800766e:	f001 f85d 	bl	800872c <__multiply>
 8007672:	4659      	mov	r1, fp
 8007674:	900a      	str	r0, [sp, #40]	; 0x28
 8007676:	4620      	mov	r0, r4
 8007678:	f000 ff71 	bl	800855e <_Bfree>
 800767c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767e:	469b      	mov	fp, r3
 8007680:	9b08      	ldr	r3, [sp, #32]
 8007682:	1b9a      	subs	r2, r3, r6
 8007684:	d004      	beq.n	8007690 <_dtoa_r+0x778>
 8007686:	4659      	mov	r1, fp
 8007688:	4620      	mov	r0, r4
 800768a:	f001 f8e5 	bl	8008858 <__pow5mult>
 800768e:	4683      	mov	fp, r0
 8007690:	2101      	movs	r1, #1
 8007692:	4620      	mov	r0, r4
 8007694:	f001 f841 	bl	800871a <__i2b>
 8007698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769a:	4606      	mov	r6, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 81c6 	beq.w	8007a2e <_dtoa_r+0xb16>
 80076a2:	461a      	mov	r2, r3
 80076a4:	4601      	mov	r1, r0
 80076a6:	4620      	mov	r0, r4
 80076a8:	f001 f8d6 	bl	8008858 <__pow5mult>
 80076ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076ae:	4606      	mov	r6, r0
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	dc3e      	bgt.n	8007732 <_dtoa_r+0x81a>
 80076b4:	9b02      	ldr	r3, [sp, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d137      	bne.n	800772a <_dtoa_r+0x812>
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d134      	bne.n	800772e <_dtoa_r+0x816>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076ca:	0d1b      	lsrs	r3, r3, #20
 80076cc:	051b      	lsls	r3, r3, #20
 80076ce:	b12b      	cbz	r3, 80076dc <_dtoa_r+0x7c4>
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	f109 0901 	add.w	r9, r9, #1
 80076d6:	3301      	adds	r3, #1
 80076d8:	9307      	str	r3, [sp, #28]
 80076da:	2301      	movs	r3, #1
 80076dc:	9308      	str	r3, [sp, #32]
 80076de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d128      	bne.n	8007736 <_dtoa_r+0x81e>
 80076e4:	2001      	movs	r0, #1
 80076e6:	e02e      	b.n	8007746 <_dtoa_r+0x82e>
 80076e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076ee:	e796      	b.n	800761e <_dtoa_r+0x706>
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80076f6:	42b3      	cmp	r3, r6
 80076f8:	bfb7      	itett	lt
 80076fa:	9b08      	ldrlt	r3, [sp, #32]
 80076fc:	1b9e      	subge	r6, r3, r6
 80076fe:	1af2      	sublt	r2, r6, r3
 8007700:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007702:	bfbf      	itttt	lt
 8007704:	9608      	strlt	r6, [sp, #32]
 8007706:	189b      	addlt	r3, r3, r2
 8007708:	930c      	strlt	r3, [sp, #48]	; 0x30
 800770a:	2600      	movlt	r6, #0
 800770c:	f1b8 0f00 	cmp.w	r8, #0
 8007710:	bfb9      	ittee	lt
 8007712:	eba9 0508 	sublt.w	r5, r9, r8
 8007716:	2300      	movlt	r3, #0
 8007718:	464d      	movge	r5, r9
 800771a:	4643      	movge	r3, r8
 800771c:	e781      	b.n	8007622 <_dtoa_r+0x70a>
 800771e:	9e08      	ldr	r6, [sp, #32]
 8007720:	464d      	mov	r5, r9
 8007722:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007724:	e786      	b.n	8007634 <_dtoa_r+0x71c>
 8007726:	9a08      	ldr	r2, [sp, #32]
 8007728:	e7ad      	b.n	8007686 <_dtoa_r+0x76e>
 800772a:	2300      	movs	r3, #0
 800772c:	e7d6      	b.n	80076dc <_dtoa_r+0x7c4>
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	e7d4      	b.n	80076dc <_dtoa_r+0x7c4>
 8007732:	2300      	movs	r3, #0
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	6933      	ldr	r3, [r6, #16]
 8007738:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800773c:	6918      	ldr	r0, [r3, #16]
 800773e:	f000 ff9e 	bl	800867e <__hi0bits>
 8007742:	f1c0 0020 	rsb	r0, r0, #32
 8007746:	9b07      	ldr	r3, [sp, #28]
 8007748:	4418      	add	r0, r3
 800774a:	f010 001f 	ands.w	r0, r0, #31
 800774e:	d047      	beq.n	80077e0 <_dtoa_r+0x8c8>
 8007750:	f1c0 0320 	rsb	r3, r0, #32
 8007754:	2b04      	cmp	r3, #4
 8007756:	dd3b      	ble.n	80077d0 <_dtoa_r+0x8b8>
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	f1c0 001c 	rsb	r0, r0, #28
 800775e:	4481      	add	r9, r0
 8007760:	4405      	add	r5, r0
 8007762:	4403      	add	r3, r0
 8007764:	9307      	str	r3, [sp, #28]
 8007766:	f1b9 0f00 	cmp.w	r9, #0
 800776a:	dd05      	ble.n	8007778 <_dtoa_r+0x860>
 800776c:	4659      	mov	r1, fp
 800776e:	464a      	mov	r2, r9
 8007770:	4620      	mov	r0, r4
 8007772:	f001 f8bf 	bl	80088f4 <__lshift>
 8007776:	4683      	mov	fp, r0
 8007778:	9b07      	ldr	r3, [sp, #28]
 800777a:	2b00      	cmp	r3, #0
 800777c:	dd05      	ble.n	800778a <_dtoa_r+0x872>
 800777e:	4631      	mov	r1, r6
 8007780:	461a      	mov	r2, r3
 8007782:	4620      	mov	r0, r4
 8007784:	f001 f8b6 	bl	80088f4 <__lshift>
 8007788:	4606      	mov	r6, r0
 800778a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778c:	b353      	cbz	r3, 80077e4 <_dtoa_r+0x8cc>
 800778e:	4631      	mov	r1, r6
 8007790:	4658      	mov	r0, fp
 8007792:	f001 f903 	bl	800899c <__mcmp>
 8007796:	2800      	cmp	r0, #0
 8007798:	da24      	bge.n	80077e4 <_dtoa_r+0x8cc>
 800779a:	2300      	movs	r3, #0
 800779c:	4659      	mov	r1, fp
 800779e:	220a      	movs	r2, #10
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fef3 	bl	800858c <__multadd>
 80077a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077ac:	4683      	mov	fp, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 8144 	beq.w	8007a3c <_dtoa_r+0xb24>
 80077b4:	2300      	movs	r3, #0
 80077b6:	4639      	mov	r1, r7
 80077b8:	220a      	movs	r2, #10
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fee6 	bl	800858c <__multadd>
 80077c0:	9b04      	ldr	r3, [sp, #16]
 80077c2:	4607      	mov	r7, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dc4d      	bgt.n	8007864 <_dtoa_r+0x94c>
 80077c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	dd4a      	ble.n	8007864 <_dtoa_r+0x94c>
 80077ce:	e011      	b.n	80077f4 <_dtoa_r+0x8dc>
 80077d0:	d0c9      	beq.n	8007766 <_dtoa_r+0x84e>
 80077d2:	9a07      	ldr	r2, [sp, #28]
 80077d4:	331c      	adds	r3, #28
 80077d6:	441a      	add	r2, r3
 80077d8:	4499      	add	r9, r3
 80077da:	441d      	add	r5, r3
 80077dc:	4613      	mov	r3, r2
 80077de:	e7c1      	b.n	8007764 <_dtoa_r+0x84c>
 80077e0:	4603      	mov	r3, r0
 80077e2:	e7f6      	b.n	80077d2 <_dtoa_r+0x8ba>
 80077e4:	f1b8 0f00 	cmp.w	r8, #0
 80077e8:	dc36      	bgt.n	8007858 <_dtoa_r+0x940>
 80077ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	dd33      	ble.n	8007858 <_dtoa_r+0x940>
 80077f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	b963      	cbnz	r3, 8007812 <_dtoa_r+0x8fa>
 80077f8:	4631      	mov	r1, r6
 80077fa:	2205      	movs	r2, #5
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fec5 	bl	800858c <__multadd>
 8007802:	4601      	mov	r1, r0
 8007804:	4606      	mov	r6, r0
 8007806:	4658      	mov	r0, fp
 8007808:	f001 f8c8 	bl	800899c <__mcmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	f73f add3 	bgt.w	80073b8 <_dtoa_r+0x4a0>
 8007812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007814:	9d06      	ldr	r5, [sp, #24]
 8007816:	ea6f 0a03 	mvn.w	sl, r3
 800781a:	f04f 0900 	mov.w	r9, #0
 800781e:	4631      	mov	r1, r6
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fe9c 	bl	800855e <_Bfree>
 8007826:	2f00      	cmp	r7, #0
 8007828:	f43f aebd 	beq.w	80075a6 <_dtoa_r+0x68e>
 800782c:	f1b9 0f00 	cmp.w	r9, #0
 8007830:	d005      	beq.n	800783e <_dtoa_r+0x926>
 8007832:	45b9      	cmp	r9, r7
 8007834:	d003      	beq.n	800783e <_dtoa_r+0x926>
 8007836:	4649      	mov	r1, r9
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fe90 	bl	800855e <_Bfree>
 800783e:	4639      	mov	r1, r7
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fe8c 	bl	800855e <_Bfree>
 8007846:	e6ae      	b.n	80075a6 <_dtoa_r+0x68e>
 8007848:	2600      	movs	r6, #0
 800784a:	4637      	mov	r7, r6
 800784c:	e7e1      	b.n	8007812 <_dtoa_r+0x8fa>
 800784e:	46ba      	mov	sl, r7
 8007850:	4637      	mov	r7, r6
 8007852:	e5b1      	b.n	80073b8 <_dtoa_r+0x4a0>
 8007854:	40240000 	.word	0x40240000
 8007858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785a:	f8cd 8010 	str.w	r8, [sp, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 80f3 	beq.w	8007a4a <_dtoa_r+0xb32>
 8007864:	2d00      	cmp	r5, #0
 8007866:	dd05      	ble.n	8007874 <_dtoa_r+0x95c>
 8007868:	4639      	mov	r1, r7
 800786a:	462a      	mov	r2, r5
 800786c:	4620      	mov	r0, r4
 800786e:	f001 f841 	bl	80088f4 <__lshift>
 8007872:	4607      	mov	r7, r0
 8007874:	9b08      	ldr	r3, [sp, #32]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d04c      	beq.n	8007914 <_dtoa_r+0x9fc>
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	4620      	mov	r0, r4
 800787e:	f000 fe3a 	bl	80084f6 <_Balloc>
 8007882:	4605      	mov	r5, r0
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	f107 010c 	add.w	r1, r7, #12
 800788a:	3202      	adds	r2, #2
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	300c      	adds	r0, #12
 8007890:	f000 fe26 	bl	80084e0 <memcpy>
 8007894:	2201      	movs	r2, #1
 8007896:	4629      	mov	r1, r5
 8007898:	4620      	mov	r0, r4
 800789a:	f001 f82b 	bl	80088f4 <__lshift>
 800789e:	46b9      	mov	r9, r7
 80078a0:	4607      	mov	r7, r0
 80078a2:	9b06      	ldr	r3, [sp, #24]
 80078a4:	9307      	str	r3, [sp, #28]
 80078a6:	9b02      	ldr	r3, [sp, #8]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	9308      	str	r3, [sp, #32]
 80078ae:	4631      	mov	r1, r6
 80078b0:	4658      	mov	r0, fp
 80078b2:	f7ff faa3 	bl	8006dfc <quorem>
 80078b6:	4649      	mov	r1, r9
 80078b8:	4605      	mov	r5, r0
 80078ba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80078be:	4658      	mov	r0, fp
 80078c0:	f001 f86c 	bl	800899c <__mcmp>
 80078c4:	463a      	mov	r2, r7
 80078c6:	9002      	str	r0, [sp, #8]
 80078c8:	4631      	mov	r1, r6
 80078ca:	4620      	mov	r0, r4
 80078cc:	f001 f880 	bl	80089d0 <__mdiff>
 80078d0:	68c3      	ldr	r3, [r0, #12]
 80078d2:	4602      	mov	r2, r0
 80078d4:	bb03      	cbnz	r3, 8007918 <_dtoa_r+0xa00>
 80078d6:	4601      	mov	r1, r0
 80078d8:	9009      	str	r0, [sp, #36]	; 0x24
 80078da:	4658      	mov	r0, fp
 80078dc:	f001 f85e 	bl	800899c <__mcmp>
 80078e0:	4603      	mov	r3, r0
 80078e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e4:	4611      	mov	r1, r2
 80078e6:	4620      	mov	r0, r4
 80078e8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ea:	f000 fe38 	bl	800855e <_Bfree>
 80078ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f0:	b9a3      	cbnz	r3, 800791c <_dtoa_r+0xa04>
 80078f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80078f4:	b992      	cbnz	r2, 800791c <_dtoa_r+0xa04>
 80078f6:	9a08      	ldr	r2, [sp, #32]
 80078f8:	b982      	cbnz	r2, 800791c <_dtoa_r+0xa04>
 80078fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80078fe:	d029      	beq.n	8007954 <_dtoa_r+0xa3c>
 8007900:	9b02      	ldr	r3, [sp, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	dd01      	ble.n	800790a <_dtoa_r+0x9f2>
 8007906:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	1c5d      	adds	r5, r3, #1
 800790e:	f883 8000 	strb.w	r8, [r3]
 8007912:	e784      	b.n	800781e <_dtoa_r+0x906>
 8007914:	4638      	mov	r0, r7
 8007916:	e7c2      	b.n	800789e <_dtoa_r+0x986>
 8007918:	2301      	movs	r3, #1
 800791a:	e7e3      	b.n	80078e4 <_dtoa_r+0x9cc>
 800791c:	9a02      	ldr	r2, [sp, #8]
 800791e:	2a00      	cmp	r2, #0
 8007920:	db04      	blt.n	800792c <_dtoa_r+0xa14>
 8007922:	d123      	bne.n	800796c <_dtoa_r+0xa54>
 8007924:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007926:	bb0a      	cbnz	r2, 800796c <_dtoa_r+0xa54>
 8007928:	9a08      	ldr	r2, [sp, #32]
 800792a:	b9fa      	cbnz	r2, 800796c <_dtoa_r+0xa54>
 800792c:	2b00      	cmp	r3, #0
 800792e:	ddec      	ble.n	800790a <_dtoa_r+0x9f2>
 8007930:	4659      	mov	r1, fp
 8007932:	2201      	movs	r2, #1
 8007934:	4620      	mov	r0, r4
 8007936:	f000 ffdd 	bl	80088f4 <__lshift>
 800793a:	4631      	mov	r1, r6
 800793c:	4683      	mov	fp, r0
 800793e:	f001 f82d 	bl	800899c <__mcmp>
 8007942:	2800      	cmp	r0, #0
 8007944:	dc03      	bgt.n	800794e <_dtoa_r+0xa36>
 8007946:	d1e0      	bne.n	800790a <_dtoa_r+0x9f2>
 8007948:	f018 0f01 	tst.w	r8, #1
 800794c:	d0dd      	beq.n	800790a <_dtoa_r+0x9f2>
 800794e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007952:	d1d8      	bne.n	8007906 <_dtoa_r+0x9ee>
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	9a07      	ldr	r2, [sp, #28]
 8007958:	1c5d      	adds	r5, r3, #1
 800795a:	2339      	movs	r3, #57	; 0x39
 800795c:	7013      	strb	r3, [r2, #0]
 800795e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007962:	1e6a      	subs	r2, r5, #1
 8007964:	2b39      	cmp	r3, #57	; 0x39
 8007966:	d04d      	beq.n	8007a04 <_dtoa_r+0xaec>
 8007968:	3301      	adds	r3, #1
 800796a:	e052      	b.n	8007a12 <_dtoa_r+0xafa>
 800796c:	9a07      	ldr	r2, [sp, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f102 0501 	add.w	r5, r2, #1
 8007974:	dd06      	ble.n	8007984 <_dtoa_r+0xa6c>
 8007976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800797a:	d0eb      	beq.n	8007954 <_dtoa_r+0xa3c>
 800797c:	f108 0801 	add.w	r8, r8, #1
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	e7c4      	b.n	800790e <_dtoa_r+0x9f6>
 8007984:	9b06      	ldr	r3, [sp, #24]
 8007986:	9a04      	ldr	r2, [sp, #16]
 8007988:	1aeb      	subs	r3, r5, r3
 800798a:	4293      	cmp	r3, r2
 800798c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007990:	d021      	beq.n	80079d6 <_dtoa_r+0xabe>
 8007992:	4659      	mov	r1, fp
 8007994:	2300      	movs	r3, #0
 8007996:	220a      	movs	r2, #10
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fdf7 	bl	800858c <__multadd>
 800799e:	45b9      	cmp	r9, r7
 80079a0:	4683      	mov	fp, r0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	f04f 020a 	mov.w	r2, #10
 80079aa:	4649      	mov	r1, r9
 80079ac:	4620      	mov	r0, r4
 80079ae:	d105      	bne.n	80079bc <_dtoa_r+0xaa4>
 80079b0:	f000 fdec 	bl	800858c <__multadd>
 80079b4:	4681      	mov	r9, r0
 80079b6:	4607      	mov	r7, r0
 80079b8:	9507      	str	r5, [sp, #28]
 80079ba:	e778      	b.n	80078ae <_dtoa_r+0x996>
 80079bc:	f000 fde6 	bl	800858c <__multadd>
 80079c0:	4639      	mov	r1, r7
 80079c2:	4681      	mov	r9, r0
 80079c4:	2300      	movs	r3, #0
 80079c6:	220a      	movs	r2, #10
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fddf 	bl	800858c <__multadd>
 80079ce:	4607      	mov	r7, r0
 80079d0:	e7f2      	b.n	80079b8 <_dtoa_r+0xaa0>
 80079d2:	f04f 0900 	mov.w	r9, #0
 80079d6:	4659      	mov	r1, fp
 80079d8:	2201      	movs	r2, #1
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 ff8a 	bl	80088f4 <__lshift>
 80079e0:	4631      	mov	r1, r6
 80079e2:	4683      	mov	fp, r0
 80079e4:	f000 ffda 	bl	800899c <__mcmp>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	dcb8      	bgt.n	800795e <_dtoa_r+0xa46>
 80079ec:	d102      	bne.n	80079f4 <_dtoa_r+0xadc>
 80079ee:	f018 0f01 	tst.w	r8, #1
 80079f2:	d1b4      	bne.n	800795e <_dtoa_r+0xa46>
 80079f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079f8:	1e6a      	subs	r2, r5, #1
 80079fa:	2b30      	cmp	r3, #48	; 0x30
 80079fc:	f47f af0f 	bne.w	800781e <_dtoa_r+0x906>
 8007a00:	4615      	mov	r5, r2
 8007a02:	e7f7      	b.n	80079f4 <_dtoa_r+0xadc>
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d105      	bne.n	8007a16 <_dtoa_r+0xafe>
 8007a0a:	2331      	movs	r3, #49	; 0x31
 8007a0c:	9a06      	ldr	r2, [sp, #24]
 8007a0e:	f10a 0a01 	add.w	sl, sl, #1
 8007a12:	7013      	strb	r3, [r2, #0]
 8007a14:	e703      	b.n	800781e <_dtoa_r+0x906>
 8007a16:	4615      	mov	r5, r2
 8007a18:	e7a1      	b.n	800795e <_dtoa_r+0xa46>
 8007a1a:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <_dtoa_r+0xb60>)
 8007a1c:	f7ff bae1 	b.w	8006fe2 <_dtoa_r+0xca>
 8007a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f47f aabb 	bne.w	8006f9e <_dtoa_r+0x86>
 8007a28:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <_dtoa_r+0xb64>)
 8007a2a:	f7ff bada 	b.w	8006fe2 <_dtoa_r+0xca>
 8007a2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	f77f ae3f 	ble.w	80076b4 <_dtoa_r+0x79c>
 8007a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a38:	9308      	str	r3, [sp, #32]
 8007a3a:	e653      	b.n	80076e4 <_dtoa_r+0x7cc>
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dc03      	bgt.n	8007a4a <_dtoa_r+0xb32>
 8007a42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	f73f aed5 	bgt.w	80077f4 <_dtoa_r+0x8dc>
 8007a4a:	9d06      	ldr	r5, [sp, #24]
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4658      	mov	r0, fp
 8007a50:	f7ff f9d4 	bl	8006dfc <quorem>
 8007a54:	9b06      	ldr	r3, [sp, #24]
 8007a56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a5a:	f805 8b01 	strb.w	r8, [r5], #1
 8007a5e:	9a04      	ldr	r2, [sp, #16]
 8007a60:	1aeb      	subs	r3, r5, r3
 8007a62:	429a      	cmp	r2, r3
 8007a64:	ddb5      	ble.n	80079d2 <_dtoa_r+0xaba>
 8007a66:	4659      	mov	r1, fp
 8007a68:	2300      	movs	r3, #0
 8007a6a:	220a      	movs	r2, #10
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 fd8d 	bl	800858c <__multadd>
 8007a72:	4683      	mov	fp, r0
 8007a74:	e7ea      	b.n	8007a4c <_dtoa_r+0xb34>
 8007a76:	bf00      	nop
 8007a78:	0800911c 	.word	0x0800911c
 8007a7c:	08009170 	.word	0x08009170

08007a80 <__sflush_r>:
 8007a80:	898a      	ldrh	r2, [r1, #12]
 8007a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a86:	4605      	mov	r5, r0
 8007a88:	0710      	lsls	r0, r2, #28
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	d458      	bmi.n	8007b40 <__sflush_r+0xc0>
 8007a8e:	684b      	ldr	r3, [r1, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dc05      	bgt.n	8007aa0 <__sflush_r+0x20>
 8007a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dc02      	bgt.n	8007aa0 <__sflush_r+0x20>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	d0f9      	beq.n	8007a9a <__sflush_r+0x1a>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007aac:	682f      	ldr	r7, [r5, #0]
 8007aae:	6a21      	ldr	r1, [r4, #32]
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	d032      	beq.n	8007b1a <__sflush_r+0x9a>
 8007ab4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	075a      	lsls	r2, r3, #29
 8007aba:	d505      	bpl.n	8007ac8 <__sflush_r+0x48>
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	1ac0      	subs	r0, r0, r3
 8007ac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ac2:	b10b      	cbz	r3, 8007ac8 <__sflush_r+0x48>
 8007ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ac6:	1ac0      	subs	r0, r0, r3
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4602      	mov	r2, r0
 8007acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ace:	6a21      	ldr	r1, [r4, #32]
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b0      	blx	r6
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	d106      	bne.n	8007ae8 <__sflush_r+0x68>
 8007ada:	6829      	ldr	r1, [r5, #0]
 8007adc:	291d      	cmp	r1, #29
 8007ade:	d848      	bhi.n	8007b72 <__sflush_r+0xf2>
 8007ae0:	4a29      	ldr	r2, [pc, #164]	; (8007b88 <__sflush_r+0x108>)
 8007ae2:	40ca      	lsrs	r2, r1
 8007ae4:	07d6      	lsls	r6, r2, #31
 8007ae6:	d544      	bpl.n	8007b72 <__sflush_r+0xf2>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	6062      	str	r2, [r4, #4]
 8007aec:	6922      	ldr	r2, [r4, #16]
 8007aee:	04d9      	lsls	r1, r3, #19
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	d504      	bpl.n	8007afe <__sflush_r+0x7e>
 8007af4:	1c42      	adds	r2, r0, #1
 8007af6:	d101      	bne.n	8007afc <__sflush_r+0x7c>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b903      	cbnz	r3, 8007afe <__sflush_r+0x7e>
 8007afc:	6560      	str	r0, [r4, #84]	; 0x54
 8007afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b00:	602f      	str	r7, [r5, #0]
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d0c9      	beq.n	8007a9a <__sflush_r+0x1a>
 8007b06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b0a:	4299      	cmp	r1, r3
 8007b0c:	d002      	beq.n	8007b14 <__sflush_r+0x94>
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f001 f8f8 	bl	8008d04 <_free_r>
 8007b14:	2000      	movs	r0, #0
 8007b16:	6360      	str	r0, [r4, #52]	; 0x34
 8007b18:	e7c0      	b.n	8007a9c <__sflush_r+0x1c>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	47b0      	blx	r6
 8007b20:	1c41      	adds	r1, r0, #1
 8007b22:	d1c8      	bne.n	8007ab6 <__sflush_r+0x36>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0c5      	beq.n	8007ab6 <__sflush_r+0x36>
 8007b2a:	2b1d      	cmp	r3, #29
 8007b2c:	d001      	beq.n	8007b32 <__sflush_r+0xb2>
 8007b2e:	2b16      	cmp	r3, #22
 8007b30:	d101      	bne.n	8007b36 <__sflush_r+0xb6>
 8007b32:	602f      	str	r7, [r5, #0]
 8007b34:	e7b1      	b.n	8007a9a <__sflush_r+0x1a>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	e7ad      	b.n	8007a9c <__sflush_r+0x1c>
 8007b40:	690f      	ldr	r7, [r1, #16]
 8007b42:	2f00      	cmp	r7, #0
 8007b44:	d0a9      	beq.n	8007a9a <__sflush_r+0x1a>
 8007b46:	0793      	lsls	r3, r2, #30
 8007b48:	bf18      	it	ne
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	680e      	ldr	r6, [r1, #0]
 8007b4e:	bf08      	it	eq
 8007b50:	694b      	ldreq	r3, [r1, #20]
 8007b52:	eba6 0807 	sub.w	r8, r6, r7
 8007b56:	600f      	str	r7, [r1, #0]
 8007b58:	608b      	str	r3, [r1, #8]
 8007b5a:	f1b8 0f00 	cmp.w	r8, #0
 8007b5e:	dd9c      	ble.n	8007a9a <__sflush_r+0x1a>
 8007b60:	4643      	mov	r3, r8
 8007b62:	463a      	mov	r2, r7
 8007b64:	6a21      	ldr	r1, [r4, #32]
 8007b66:	4628      	mov	r0, r5
 8007b68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b6a:	47b0      	blx	r6
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	dc06      	bgt.n	8007b7e <__sflush_r+0xfe>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b7c:	e78e      	b.n	8007a9c <__sflush_r+0x1c>
 8007b7e:	4407      	add	r7, r0
 8007b80:	eba8 0800 	sub.w	r8, r8, r0
 8007b84:	e7e9      	b.n	8007b5a <__sflush_r+0xda>
 8007b86:	bf00      	nop
 8007b88:	20400001 	.word	0x20400001

08007b8c <_fflush_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	690b      	ldr	r3, [r1, #16]
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	b1db      	cbz	r3, 8007bce <_fflush_r+0x42>
 8007b96:	b118      	cbz	r0, 8007ba0 <_fflush_r+0x14>
 8007b98:	6983      	ldr	r3, [r0, #24]
 8007b9a:	b90b      	cbnz	r3, 8007ba0 <_fflush_r+0x14>
 8007b9c:	f000 f860 	bl	8007c60 <__sinit>
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <_fflush_r+0x48>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d109      	bne.n	8007bba <_fflush_r+0x2e>
 8007ba6:	686c      	ldr	r4, [r5, #4]
 8007ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bac:	b17b      	cbz	r3, 8007bce <_fflush_r+0x42>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb6:	f7ff bf63 	b.w	8007a80 <__sflush_r>
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <_fflush_r+0x4c>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d101      	bne.n	8007bc4 <_fflush_r+0x38>
 8007bc0:	68ac      	ldr	r4, [r5, #8]
 8007bc2:	e7f1      	b.n	8007ba8 <_fflush_r+0x1c>
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_fflush_r+0x50>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	bf08      	it	eq
 8007bca:	68ec      	ldreq	r4, [r5, #12]
 8007bcc:	e7ec      	b.n	8007ba8 <_fflush_r+0x1c>
 8007bce:	2000      	movs	r0, #0
 8007bd0:	bd38      	pop	{r3, r4, r5, pc}
 8007bd2:	bf00      	nop
 8007bd4:	080091a0 	.word	0x080091a0
 8007bd8:	080091c0 	.word	0x080091c0
 8007bdc:	08009180 	.word	0x08009180

08007be0 <std>:
 8007be0:	2300      	movs	r3, #0
 8007be2:	b510      	push	{r4, lr}
 8007be4:	4604      	mov	r4, r0
 8007be6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bea:	6083      	str	r3, [r0, #8]
 8007bec:	8181      	strh	r1, [r0, #12]
 8007bee:	6643      	str	r3, [r0, #100]	; 0x64
 8007bf0:	81c2      	strh	r2, [r0, #14]
 8007bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bf6:	6183      	str	r3, [r0, #24]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	305c      	adds	r0, #92	; 0x5c
 8007bfe:	f7fd fe5f 	bl	80058c0 <memset>
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <std+0x38>)
 8007c04:	6224      	str	r4, [r4, #32]
 8007c06:	6263      	str	r3, [r4, #36]	; 0x24
 8007c08:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <std+0x3c>)
 8007c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c0c:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <std+0x40>)
 8007c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c10:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <std+0x44>)
 8007c12:	6323      	str	r3, [r4, #48]	; 0x30
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	08008e71 	.word	0x08008e71
 8007c1c:	08008e93 	.word	0x08008e93
 8007c20:	08008ecb 	.word	0x08008ecb
 8007c24:	08008eef 	.word	0x08008eef

08007c28 <_cleanup_r>:
 8007c28:	4901      	ldr	r1, [pc, #4]	; (8007c30 <_cleanup_r+0x8>)
 8007c2a:	f000 b885 	b.w	8007d38 <_fwalk_reent>
 8007c2e:	bf00      	nop
 8007c30:	08007b8d 	.word	0x08007b8d

08007c34 <__sfmoreglue>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	2568      	movs	r5, #104	; 0x68
 8007c38:	1e4a      	subs	r2, r1, #1
 8007c3a:	4355      	muls	r5, r2
 8007c3c:	460e      	mov	r6, r1
 8007c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c42:	f001 f8ab 	bl	8008d9c <_malloc_r>
 8007c46:	4604      	mov	r4, r0
 8007c48:	b140      	cbz	r0, 8007c5c <__sfmoreglue+0x28>
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c50:	300c      	adds	r0, #12
 8007c52:	60a0      	str	r0, [r4, #8]
 8007c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c58:	f7fd fe32 	bl	80058c0 <memset>
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}

08007c60 <__sinit>:
 8007c60:	6983      	ldr	r3, [r0, #24]
 8007c62:	b510      	push	{r4, lr}
 8007c64:	4604      	mov	r4, r0
 8007c66:	bb33      	cbnz	r3, 8007cb6 <__sinit+0x56>
 8007c68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007c6c:	6503      	str	r3, [r0, #80]	; 0x50
 8007c6e:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <__sinit+0x58>)
 8007c70:	4a12      	ldr	r2, [pc, #72]	; (8007cbc <__sinit+0x5c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6282      	str	r2, [r0, #40]	; 0x28
 8007c76:	4298      	cmp	r0, r3
 8007c78:	bf04      	itt	eq
 8007c7a:	2301      	moveq	r3, #1
 8007c7c:	6183      	streq	r3, [r0, #24]
 8007c7e:	f000 f81f 	bl	8007cc0 <__sfp>
 8007c82:	6060      	str	r0, [r4, #4]
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 f81b 	bl	8007cc0 <__sfp>
 8007c8a:	60a0      	str	r0, [r4, #8]
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 f817 	bl	8007cc0 <__sfp>
 8007c92:	2200      	movs	r2, #0
 8007c94:	60e0      	str	r0, [r4, #12]
 8007c96:	2104      	movs	r1, #4
 8007c98:	6860      	ldr	r0, [r4, #4]
 8007c9a:	f7ff ffa1 	bl	8007be0 <std>
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	2109      	movs	r1, #9
 8007ca2:	68a0      	ldr	r0, [r4, #8]
 8007ca4:	f7ff ff9c 	bl	8007be0 <std>
 8007ca8:	2202      	movs	r2, #2
 8007caa:	2112      	movs	r1, #18
 8007cac:	68e0      	ldr	r0, [r4, #12]
 8007cae:	f7ff ff97 	bl	8007be0 <std>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61a3      	str	r3, [r4, #24]
 8007cb6:	bd10      	pop	{r4, pc}
 8007cb8:	08009108 	.word	0x08009108
 8007cbc:	08007c29 	.word	0x08007c29

08007cc0 <__sfp>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <__sfp+0x70>)
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	681e      	ldr	r6, [r3, #0]
 8007cc8:	69b3      	ldr	r3, [r6, #24]
 8007cca:	b913      	cbnz	r3, 8007cd2 <__sfp+0x12>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff ffc7 	bl	8007c60 <__sinit>
 8007cd2:	3648      	adds	r6, #72	; 0x48
 8007cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	d503      	bpl.n	8007ce4 <__sfp+0x24>
 8007cdc:	6833      	ldr	r3, [r6, #0]
 8007cde:	b133      	cbz	r3, 8007cee <__sfp+0x2e>
 8007ce0:	6836      	ldr	r6, [r6, #0]
 8007ce2:	e7f7      	b.n	8007cd4 <__sfp+0x14>
 8007ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ce8:	b16d      	cbz	r5, 8007d06 <__sfp+0x46>
 8007cea:	3468      	adds	r4, #104	; 0x68
 8007cec:	e7f4      	b.n	8007cd8 <__sfp+0x18>
 8007cee:	2104      	movs	r1, #4
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff ff9f 	bl	8007c34 <__sfmoreglue>
 8007cf6:	6030      	str	r0, [r6, #0]
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d1f1      	bne.n	8007ce0 <__sfp+0x20>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	4604      	mov	r4, r0
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4620      	mov	r0, r4
 8007d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d06:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <__sfp+0x74>)
 8007d08:	6665      	str	r5, [r4, #100]	; 0x64
 8007d0a:	e9c4 5500 	strd	r5, r5, [r4]
 8007d0e:	60a5      	str	r5, [r4, #8]
 8007d10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007d14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d20:	f7fd fdce 	bl	80058c0 <memset>
 8007d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d2c:	e7e9      	b.n	8007d02 <__sfp+0x42>
 8007d2e:	bf00      	nop
 8007d30:	08009108 	.word	0x08009108
 8007d34:	ffff0001 	.word	0xffff0001

08007d38 <_fwalk_reent>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	4689      	mov	r9, r1
 8007d40:	2600      	movs	r6, #0
 8007d42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d46:	b914      	cbnz	r4, 8007d4e <_fwalk_reent+0x16>
 8007d48:	4630      	mov	r0, r6
 8007d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007d52:	3f01      	subs	r7, #1
 8007d54:	d501      	bpl.n	8007d5a <_fwalk_reent+0x22>
 8007d56:	6824      	ldr	r4, [r4, #0]
 8007d58:	e7f5      	b.n	8007d46 <_fwalk_reent+0xe>
 8007d5a:	89ab      	ldrh	r3, [r5, #12]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d907      	bls.n	8007d70 <_fwalk_reent+0x38>
 8007d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d64:	3301      	adds	r3, #1
 8007d66:	d003      	beq.n	8007d70 <_fwalk_reent+0x38>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	47c8      	blx	r9
 8007d6e:	4306      	orrs	r6, r0
 8007d70:	3568      	adds	r5, #104	; 0x68
 8007d72:	e7ee      	b.n	8007d52 <_fwalk_reent+0x1a>

08007d74 <rshift>:
 8007d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d76:	6906      	ldr	r6, [r0, #16]
 8007d78:	114b      	asrs	r3, r1, #5
 8007d7a:	429e      	cmp	r6, r3
 8007d7c:	f100 0414 	add.w	r4, r0, #20
 8007d80:	dd31      	ble.n	8007de6 <rshift+0x72>
 8007d82:	f011 011f 	ands.w	r1, r1, #31
 8007d86:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007d8a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007d8e:	d108      	bne.n	8007da2 <rshift+0x2e>
 8007d90:	4621      	mov	r1, r4
 8007d92:	42b2      	cmp	r2, r6
 8007d94:	460b      	mov	r3, r1
 8007d96:	d211      	bcs.n	8007dbc <rshift+0x48>
 8007d98:	f852 3b04 	ldr.w	r3, [r2], #4
 8007d9c:	f841 3b04 	str.w	r3, [r1], #4
 8007da0:	e7f7      	b.n	8007d92 <rshift+0x1e>
 8007da2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007da6:	4623      	mov	r3, r4
 8007da8:	f1c1 0c20 	rsb	ip, r1, #32
 8007dac:	40cd      	lsrs	r5, r1
 8007dae:	3204      	adds	r2, #4
 8007db0:	42b2      	cmp	r2, r6
 8007db2:	4617      	mov	r7, r2
 8007db4:	d30d      	bcc.n	8007dd2 <rshift+0x5e>
 8007db6:	601d      	str	r5, [r3, #0]
 8007db8:	b105      	cbz	r5, 8007dbc <rshift+0x48>
 8007dba:	3304      	adds	r3, #4
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	eba3 0204 	sub.w	r2, r3, r4
 8007dc2:	bf08      	it	eq
 8007dc4:	2300      	moveq	r3, #0
 8007dc6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007dca:	6102      	str	r2, [r0, #16]
 8007dcc:	bf08      	it	eq
 8007dce:	6143      	streq	r3, [r0, #20]
 8007dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd2:	683f      	ldr	r7, [r7, #0]
 8007dd4:	fa07 f70c 	lsl.w	r7, r7, ip
 8007dd8:	433d      	orrs	r5, r7
 8007dda:	f843 5b04 	str.w	r5, [r3], #4
 8007dde:	f852 5b04 	ldr.w	r5, [r2], #4
 8007de2:	40cd      	lsrs	r5, r1
 8007de4:	e7e4      	b.n	8007db0 <rshift+0x3c>
 8007de6:	4623      	mov	r3, r4
 8007de8:	e7e8      	b.n	8007dbc <rshift+0x48>

08007dea <__hexdig_fun>:
 8007dea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d802      	bhi.n	8007df8 <__hexdig_fun+0xe>
 8007df2:	3820      	subs	r0, #32
 8007df4:	b2c0      	uxtb	r0, r0
 8007df6:	4770      	bx	lr
 8007df8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007dfc:	2b05      	cmp	r3, #5
 8007dfe:	d801      	bhi.n	8007e04 <__hexdig_fun+0x1a>
 8007e00:	3847      	subs	r0, #71	; 0x47
 8007e02:	e7f7      	b.n	8007df4 <__hexdig_fun+0xa>
 8007e04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e08:	2b05      	cmp	r3, #5
 8007e0a:	d801      	bhi.n	8007e10 <__hexdig_fun+0x26>
 8007e0c:	3827      	subs	r0, #39	; 0x27
 8007e0e:	e7f1      	b.n	8007df4 <__hexdig_fun+0xa>
 8007e10:	2000      	movs	r0, #0
 8007e12:	4770      	bx	lr

08007e14 <__gethex>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	b08b      	sub	sp, #44	; 0x2c
 8007e1a:	9002      	str	r0, [sp, #8]
 8007e1c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007e1e:	468a      	mov	sl, r1
 8007e20:	4690      	mov	r8, r2
 8007e22:	9306      	str	r3, [sp, #24]
 8007e24:	f000 face 	bl	80083c4 <__localeconv_l>
 8007e28:	6803      	ldr	r3, [r0, #0]
 8007e2a:	f04f 0b00 	mov.w	fp, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	f7f8 f98d 	bl	8000150 <strlen>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	9001      	str	r0, [sp, #4]
 8007e3a:	4403      	add	r3, r0
 8007e3c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e40:	9307      	str	r3, [sp, #28]
 8007e42:	f8da 3000 	ldr.w	r3, [sl]
 8007e46:	3302      	adds	r3, #2
 8007e48:	461f      	mov	r7, r3
 8007e4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e4e:	2830      	cmp	r0, #48	; 0x30
 8007e50:	d06c      	beq.n	8007f2c <__gethex+0x118>
 8007e52:	f7ff ffca 	bl	8007dea <__hexdig_fun>
 8007e56:	4604      	mov	r4, r0
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d16a      	bne.n	8007f32 <__gethex+0x11e>
 8007e5c:	9a01      	ldr	r2, [sp, #4]
 8007e5e:	9903      	ldr	r1, [sp, #12]
 8007e60:	4638      	mov	r0, r7
 8007e62:	f001 f848 	bl	8008ef6 <strncmp>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d166      	bne.n	8007f38 <__gethex+0x124>
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	5cf8      	ldrb	r0, [r7, r3]
 8007e6e:	18fe      	adds	r6, r7, r3
 8007e70:	f7ff ffbb 	bl	8007dea <__hexdig_fun>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d062      	beq.n	8007f3e <__gethex+0x12a>
 8007e78:	4633      	mov	r3, r6
 8007e7a:	7818      	ldrb	r0, [r3, #0]
 8007e7c:	461f      	mov	r7, r3
 8007e7e:	2830      	cmp	r0, #48	; 0x30
 8007e80:	f103 0301 	add.w	r3, r3, #1
 8007e84:	d0f9      	beq.n	8007e7a <__gethex+0x66>
 8007e86:	f7ff ffb0 	bl	8007dea <__hexdig_fun>
 8007e8a:	fab0 f580 	clz	r5, r0
 8007e8e:	4634      	mov	r4, r6
 8007e90:	f04f 0b01 	mov.w	fp, #1
 8007e94:	096d      	lsrs	r5, r5, #5
 8007e96:	463a      	mov	r2, r7
 8007e98:	4616      	mov	r6, r2
 8007e9a:	7830      	ldrb	r0, [r6, #0]
 8007e9c:	3201      	adds	r2, #1
 8007e9e:	f7ff ffa4 	bl	8007dea <__hexdig_fun>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d1f8      	bne.n	8007e98 <__gethex+0x84>
 8007ea6:	9a01      	ldr	r2, [sp, #4]
 8007ea8:	9903      	ldr	r1, [sp, #12]
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f001 f823 	bl	8008ef6 <strncmp>
 8007eb0:	b950      	cbnz	r0, 8007ec8 <__gethex+0xb4>
 8007eb2:	b954      	cbnz	r4, 8007eca <__gethex+0xb6>
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	18f4      	adds	r4, r6, r3
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4616      	mov	r6, r2
 8007ebc:	7830      	ldrb	r0, [r6, #0]
 8007ebe:	3201      	adds	r2, #1
 8007ec0:	f7ff ff93 	bl	8007dea <__hexdig_fun>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1f8      	bne.n	8007eba <__gethex+0xa6>
 8007ec8:	b10c      	cbz	r4, 8007ece <__gethex+0xba>
 8007eca:	1ba4      	subs	r4, r4, r6
 8007ecc:	00a4      	lsls	r4, r4, #2
 8007ece:	7833      	ldrb	r3, [r6, #0]
 8007ed0:	2b50      	cmp	r3, #80	; 0x50
 8007ed2:	d001      	beq.n	8007ed8 <__gethex+0xc4>
 8007ed4:	2b70      	cmp	r3, #112	; 0x70
 8007ed6:	d140      	bne.n	8007f5a <__gethex+0x146>
 8007ed8:	7873      	ldrb	r3, [r6, #1]
 8007eda:	2b2b      	cmp	r3, #43	; 0x2b
 8007edc:	d031      	beq.n	8007f42 <__gethex+0x12e>
 8007ede:	2b2d      	cmp	r3, #45	; 0x2d
 8007ee0:	d033      	beq.n	8007f4a <__gethex+0x136>
 8007ee2:	f04f 0900 	mov.w	r9, #0
 8007ee6:	1c71      	adds	r1, r6, #1
 8007ee8:	7808      	ldrb	r0, [r1, #0]
 8007eea:	f7ff ff7e 	bl	8007dea <__hexdig_fun>
 8007eee:	1e43      	subs	r3, r0, #1
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b18      	cmp	r3, #24
 8007ef4:	d831      	bhi.n	8007f5a <__gethex+0x146>
 8007ef6:	f1a0 0210 	sub.w	r2, r0, #16
 8007efa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007efe:	f7ff ff74 	bl	8007dea <__hexdig_fun>
 8007f02:	1e43      	subs	r3, r0, #1
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b18      	cmp	r3, #24
 8007f08:	d922      	bls.n	8007f50 <__gethex+0x13c>
 8007f0a:	f1b9 0f00 	cmp.w	r9, #0
 8007f0e:	d000      	beq.n	8007f12 <__gethex+0xfe>
 8007f10:	4252      	negs	r2, r2
 8007f12:	4414      	add	r4, r2
 8007f14:	f8ca 1000 	str.w	r1, [sl]
 8007f18:	b30d      	cbz	r5, 8007f5e <__gethex+0x14a>
 8007f1a:	f1bb 0f00 	cmp.w	fp, #0
 8007f1e:	bf0c      	ite	eq
 8007f20:	2706      	moveq	r7, #6
 8007f22:	2700      	movne	r7, #0
 8007f24:	4638      	mov	r0, r7
 8007f26:	b00b      	add	sp, #44	; 0x2c
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	f10b 0b01 	add.w	fp, fp, #1
 8007f30:	e78a      	b.n	8007e48 <__gethex+0x34>
 8007f32:	2500      	movs	r5, #0
 8007f34:	462c      	mov	r4, r5
 8007f36:	e7ae      	b.n	8007e96 <__gethex+0x82>
 8007f38:	463e      	mov	r6, r7
 8007f3a:	2501      	movs	r5, #1
 8007f3c:	e7c7      	b.n	8007ece <__gethex+0xba>
 8007f3e:	4604      	mov	r4, r0
 8007f40:	e7fb      	b.n	8007f3a <__gethex+0x126>
 8007f42:	f04f 0900 	mov.w	r9, #0
 8007f46:	1cb1      	adds	r1, r6, #2
 8007f48:	e7ce      	b.n	8007ee8 <__gethex+0xd4>
 8007f4a:	f04f 0901 	mov.w	r9, #1
 8007f4e:	e7fa      	b.n	8007f46 <__gethex+0x132>
 8007f50:	230a      	movs	r3, #10
 8007f52:	fb03 0202 	mla	r2, r3, r2, r0
 8007f56:	3a10      	subs	r2, #16
 8007f58:	e7cf      	b.n	8007efa <__gethex+0xe6>
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	e7da      	b.n	8007f14 <__gethex+0x100>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	1bf3      	subs	r3, r6, r7
 8007f62:	3b01      	subs	r3, #1
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	dc49      	bgt.n	8007ffc <__gethex+0x1e8>
 8007f68:	9802      	ldr	r0, [sp, #8]
 8007f6a:	f000 fac4 	bl	80084f6 <_Balloc>
 8007f6e:	f04f 0b00 	mov.w	fp, #0
 8007f72:	4605      	mov	r5, r0
 8007f74:	46da      	mov	sl, fp
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	f100 0914 	add.w	r9, r0, #20
 8007f7c:	f1c3 0301 	rsb	r3, r3, #1
 8007f80:	f8cd 9010 	str.w	r9, [sp, #16]
 8007f84:	9308      	str	r3, [sp, #32]
 8007f86:	42b7      	cmp	r7, r6
 8007f88:	d33b      	bcc.n	8008002 <__gethex+0x1ee>
 8007f8a:	9804      	ldr	r0, [sp, #16]
 8007f8c:	f840 ab04 	str.w	sl, [r0], #4
 8007f90:	eba0 0009 	sub.w	r0, r0, r9
 8007f94:	1080      	asrs	r0, r0, #2
 8007f96:	6128      	str	r0, [r5, #16]
 8007f98:	0147      	lsls	r7, r0, #5
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	f000 fb6f 	bl	800867e <__hi0bits>
 8007fa0:	f8d8 6000 	ldr.w	r6, [r8]
 8007fa4:	1a3f      	subs	r7, r7, r0
 8007fa6:	42b7      	cmp	r7, r6
 8007fa8:	dd64      	ble.n	8008074 <__gethex+0x260>
 8007faa:	1bbf      	subs	r7, r7, r6
 8007fac:	4639      	mov	r1, r7
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 fe79 	bl	8008ca6 <__any_on>
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	b178      	cbz	r0, 8007fd8 <__gethex+0x1c4>
 8007fb8:	f04f 0a01 	mov.w	sl, #1
 8007fbc:	1e7b      	subs	r3, r7, #1
 8007fbe:	1159      	asrs	r1, r3, #5
 8007fc0:	f003 021f 	and.w	r2, r3, #31
 8007fc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007fc8:	fa0a f202 	lsl.w	r2, sl, r2
 8007fcc:	420a      	tst	r2, r1
 8007fce:	d003      	beq.n	8007fd8 <__gethex+0x1c4>
 8007fd0:	4553      	cmp	r3, sl
 8007fd2:	dc46      	bgt.n	8008062 <__gethex+0x24e>
 8007fd4:	f04f 0a02 	mov.w	sl, #2
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7ff feca 	bl	8007d74 <rshift>
 8007fe0:	443c      	add	r4, r7
 8007fe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	da52      	bge.n	8008090 <__gethex+0x27c>
 8007fea:	4629      	mov	r1, r5
 8007fec:	9802      	ldr	r0, [sp, #8]
 8007fee:	f000 fab6 	bl	800855e <_Bfree>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ff6:	27a3      	movs	r7, #163	; 0xa3
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e793      	b.n	8007f24 <__gethex+0x110>
 8007ffc:	3101      	adds	r1, #1
 8007ffe:	105b      	asrs	r3, r3, #1
 8008000:	e7b0      	b.n	8007f64 <__gethex+0x150>
 8008002:	1e73      	subs	r3, r6, #1
 8008004:	9305      	str	r3, [sp, #20]
 8008006:	9a07      	ldr	r2, [sp, #28]
 8008008:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800800c:	4293      	cmp	r3, r2
 800800e:	d018      	beq.n	8008042 <__gethex+0x22e>
 8008010:	f1bb 0f20 	cmp.w	fp, #32
 8008014:	d107      	bne.n	8008026 <__gethex+0x212>
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	f8c3 a000 	str.w	sl, [r3]
 800801c:	f04f 0a00 	mov.w	sl, #0
 8008020:	46d3      	mov	fp, sl
 8008022:	3304      	adds	r3, #4
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800802a:	f7ff fede 	bl	8007dea <__hexdig_fun>
 800802e:	f000 000f 	and.w	r0, r0, #15
 8008032:	fa00 f00b 	lsl.w	r0, r0, fp
 8008036:	ea4a 0a00 	orr.w	sl, sl, r0
 800803a:	f10b 0b04 	add.w	fp, fp, #4
 800803e:	9b05      	ldr	r3, [sp, #20]
 8008040:	e00d      	b.n	800805e <__gethex+0x24a>
 8008042:	9b05      	ldr	r3, [sp, #20]
 8008044:	9a08      	ldr	r2, [sp, #32]
 8008046:	4413      	add	r3, r2
 8008048:	42bb      	cmp	r3, r7
 800804a:	d3e1      	bcc.n	8008010 <__gethex+0x1fc>
 800804c:	4618      	mov	r0, r3
 800804e:	9a01      	ldr	r2, [sp, #4]
 8008050:	9903      	ldr	r1, [sp, #12]
 8008052:	9309      	str	r3, [sp, #36]	; 0x24
 8008054:	f000 ff4f 	bl	8008ef6 <strncmp>
 8008058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805a:	2800      	cmp	r0, #0
 800805c:	d1d8      	bne.n	8008010 <__gethex+0x1fc>
 800805e:	461e      	mov	r6, r3
 8008060:	e791      	b.n	8007f86 <__gethex+0x172>
 8008062:	1eb9      	subs	r1, r7, #2
 8008064:	4628      	mov	r0, r5
 8008066:	f000 fe1e 	bl	8008ca6 <__any_on>
 800806a:	2800      	cmp	r0, #0
 800806c:	d0b2      	beq.n	8007fd4 <__gethex+0x1c0>
 800806e:	f04f 0a03 	mov.w	sl, #3
 8008072:	e7b1      	b.n	8007fd8 <__gethex+0x1c4>
 8008074:	da09      	bge.n	800808a <__gethex+0x276>
 8008076:	1bf7      	subs	r7, r6, r7
 8008078:	4629      	mov	r1, r5
 800807a:	463a      	mov	r2, r7
 800807c:	9802      	ldr	r0, [sp, #8]
 800807e:	f000 fc39 	bl	80088f4 <__lshift>
 8008082:	4605      	mov	r5, r0
 8008084:	1be4      	subs	r4, r4, r7
 8008086:	f100 0914 	add.w	r9, r0, #20
 800808a:	f04f 0a00 	mov.w	sl, #0
 800808e:	e7a8      	b.n	8007fe2 <__gethex+0x1ce>
 8008090:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008094:	42a0      	cmp	r0, r4
 8008096:	dd6b      	ble.n	8008170 <__gethex+0x35c>
 8008098:	1b04      	subs	r4, r0, r4
 800809a:	42a6      	cmp	r6, r4
 800809c:	dc2e      	bgt.n	80080fc <__gethex+0x2e8>
 800809e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d022      	beq.n	80080ec <__gethex+0x2d8>
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d024      	beq.n	80080f4 <__gethex+0x2e0>
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d115      	bne.n	80080da <__gethex+0x2c6>
 80080ae:	42a6      	cmp	r6, r4
 80080b0:	d113      	bne.n	80080da <__gethex+0x2c6>
 80080b2:	2e01      	cmp	r6, #1
 80080b4:	dc0b      	bgt.n	80080ce <__gethex+0x2ba>
 80080b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080ba:	9a06      	ldr	r2, [sp, #24]
 80080bc:	2762      	movs	r7, #98	; 0x62
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	2301      	movs	r3, #1
 80080c2:	612b      	str	r3, [r5, #16]
 80080c4:	f8c9 3000 	str.w	r3, [r9]
 80080c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080ca:	601d      	str	r5, [r3, #0]
 80080cc:	e72a      	b.n	8007f24 <__gethex+0x110>
 80080ce:	1e71      	subs	r1, r6, #1
 80080d0:	4628      	mov	r0, r5
 80080d2:	f000 fde8 	bl	8008ca6 <__any_on>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d1ed      	bne.n	80080b6 <__gethex+0x2a2>
 80080da:	4629      	mov	r1, r5
 80080dc:	9802      	ldr	r0, [sp, #8]
 80080de:	f000 fa3e 	bl	800855e <_Bfree>
 80080e2:	2300      	movs	r3, #0
 80080e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080e6:	2750      	movs	r7, #80	; 0x50
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	e71b      	b.n	8007f24 <__gethex+0x110>
 80080ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0e1      	beq.n	80080b6 <__gethex+0x2a2>
 80080f2:	e7f2      	b.n	80080da <__gethex+0x2c6>
 80080f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1dd      	bne.n	80080b6 <__gethex+0x2a2>
 80080fa:	e7ee      	b.n	80080da <__gethex+0x2c6>
 80080fc:	1e67      	subs	r7, r4, #1
 80080fe:	f1ba 0f00 	cmp.w	sl, #0
 8008102:	d132      	bne.n	800816a <__gethex+0x356>
 8008104:	b127      	cbz	r7, 8008110 <__gethex+0x2fc>
 8008106:	4639      	mov	r1, r7
 8008108:	4628      	mov	r0, r5
 800810a:	f000 fdcc 	bl	8008ca6 <__any_on>
 800810e:	4682      	mov	sl, r0
 8008110:	2301      	movs	r3, #1
 8008112:	117a      	asrs	r2, r7, #5
 8008114:	f007 071f 	and.w	r7, r7, #31
 8008118:	fa03 f707 	lsl.w	r7, r3, r7
 800811c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008120:	4621      	mov	r1, r4
 8008122:	421f      	tst	r7, r3
 8008124:	f04f 0702 	mov.w	r7, #2
 8008128:	4628      	mov	r0, r5
 800812a:	bf18      	it	ne
 800812c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008130:	1b36      	subs	r6, r6, r4
 8008132:	f7ff fe1f 	bl	8007d74 <rshift>
 8008136:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800813a:	f1ba 0f00 	cmp.w	sl, #0
 800813e:	d048      	beq.n	80081d2 <__gethex+0x3be>
 8008140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d015      	beq.n	8008174 <__gethex+0x360>
 8008148:	2b03      	cmp	r3, #3
 800814a:	d017      	beq.n	800817c <__gethex+0x368>
 800814c:	2b01      	cmp	r3, #1
 800814e:	d109      	bne.n	8008164 <__gethex+0x350>
 8008150:	f01a 0f02 	tst.w	sl, #2
 8008154:	d006      	beq.n	8008164 <__gethex+0x350>
 8008156:	f8d9 3000 	ldr.w	r3, [r9]
 800815a:	ea4a 0a03 	orr.w	sl, sl, r3
 800815e:	f01a 0f01 	tst.w	sl, #1
 8008162:	d10e      	bne.n	8008182 <__gethex+0x36e>
 8008164:	f047 0710 	orr.w	r7, r7, #16
 8008168:	e033      	b.n	80081d2 <__gethex+0x3be>
 800816a:	f04f 0a01 	mov.w	sl, #1
 800816e:	e7cf      	b.n	8008110 <__gethex+0x2fc>
 8008170:	2701      	movs	r7, #1
 8008172:	e7e2      	b.n	800813a <__gethex+0x326>
 8008174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008176:	f1c3 0301 	rsb	r3, r3, #1
 800817a:	9315      	str	r3, [sp, #84]	; 0x54
 800817c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0f0      	beq.n	8008164 <__gethex+0x350>
 8008182:	f04f 0c00 	mov.w	ip, #0
 8008186:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800818a:	f105 0314 	add.w	r3, r5, #20
 800818e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008192:	eb03 010a 	add.w	r1, r3, sl
 8008196:	4618      	mov	r0, r3
 8008198:	f853 2b04 	ldr.w	r2, [r3], #4
 800819c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80081a0:	d01c      	beq.n	80081dc <__gethex+0x3c8>
 80081a2:	3201      	adds	r2, #1
 80081a4:	6002      	str	r2, [r0, #0]
 80081a6:	2f02      	cmp	r7, #2
 80081a8:	f105 0314 	add.w	r3, r5, #20
 80081ac:	d138      	bne.n	8008220 <__gethex+0x40c>
 80081ae:	f8d8 2000 	ldr.w	r2, [r8]
 80081b2:	3a01      	subs	r2, #1
 80081b4:	42b2      	cmp	r2, r6
 80081b6:	d10a      	bne.n	80081ce <__gethex+0x3ba>
 80081b8:	2201      	movs	r2, #1
 80081ba:	1171      	asrs	r1, r6, #5
 80081bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081c0:	f006 061f 	and.w	r6, r6, #31
 80081c4:	fa02 f606 	lsl.w	r6, r2, r6
 80081c8:	421e      	tst	r6, r3
 80081ca:	bf18      	it	ne
 80081cc:	4617      	movne	r7, r2
 80081ce:	f047 0720 	orr.w	r7, r7, #32
 80081d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081d4:	601d      	str	r5, [r3, #0]
 80081d6:	9b06      	ldr	r3, [sp, #24]
 80081d8:	601c      	str	r4, [r3, #0]
 80081da:	e6a3      	b.n	8007f24 <__gethex+0x110>
 80081dc:	4299      	cmp	r1, r3
 80081de:	f843 cc04 	str.w	ip, [r3, #-4]
 80081e2:	d8d8      	bhi.n	8008196 <__gethex+0x382>
 80081e4:	68ab      	ldr	r3, [r5, #8]
 80081e6:	4599      	cmp	r9, r3
 80081e8:	db12      	blt.n	8008210 <__gethex+0x3fc>
 80081ea:	6869      	ldr	r1, [r5, #4]
 80081ec:	9802      	ldr	r0, [sp, #8]
 80081ee:	3101      	adds	r1, #1
 80081f0:	f000 f981 	bl	80084f6 <_Balloc>
 80081f4:	4683      	mov	fp, r0
 80081f6:	692a      	ldr	r2, [r5, #16]
 80081f8:	f105 010c 	add.w	r1, r5, #12
 80081fc:	3202      	adds	r2, #2
 80081fe:	0092      	lsls	r2, r2, #2
 8008200:	300c      	adds	r0, #12
 8008202:	f000 f96d 	bl	80084e0 <memcpy>
 8008206:	4629      	mov	r1, r5
 8008208:	9802      	ldr	r0, [sp, #8]
 800820a:	f000 f9a8 	bl	800855e <_Bfree>
 800820e:	465d      	mov	r5, fp
 8008210:	692b      	ldr	r3, [r5, #16]
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	612a      	str	r2, [r5, #16]
 8008216:	2201      	movs	r2, #1
 8008218:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800821c:	615a      	str	r2, [r3, #20]
 800821e:	e7c2      	b.n	80081a6 <__gethex+0x392>
 8008220:	692a      	ldr	r2, [r5, #16]
 8008222:	454a      	cmp	r2, r9
 8008224:	dd0b      	ble.n	800823e <__gethex+0x42a>
 8008226:	2101      	movs	r1, #1
 8008228:	4628      	mov	r0, r5
 800822a:	f7ff fda3 	bl	8007d74 <rshift>
 800822e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008232:	3401      	adds	r4, #1
 8008234:	42a3      	cmp	r3, r4
 8008236:	f6ff aed8 	blt.w	8007fea <__gethex+0x1d6>
 800823a:	2701      	movs	r7, #1
 800823c:	e7c7      	b.n	80081ce <__gethex+0x3ba>
 800823e:	f016 061f 	ands.w	r6, r6, #31
 8008242:	d0fa      	beq.n	800823a <__gethex+0x426>
 8008244:	449a      	add	sl, r3
 8008246:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800824a:	f000 fa18 	bl	800867e <__hi0bits>
 800824e:	f1c6 0620 	rsb	r6, r6, #32
 8008252:	42b0      	cmp	r0, r6
 8008254:	dbe7      	blt.n	8008226 <__gethex+0x412>
 8008256:	e7f0      	b.n	800823a <__gethex+0x426>

08008258 <L_shift>:
 8008258:	f1c2 0208 	rsb	r2, r2, #8
 800825c:	0092      	lsls	r2, r2, #2
 800825e:	b570      	push	{r4, r5, r6, lr}
 8008260:	f1c2 0620 	rsb	r6, r2, #32
 8008264:	6843      	ldr	r3, [r0, #4]
 8008266:	6804      	ldr	r4, [r0, #0]
 8008268:	fa03 f506 	lsl.w	r5, r3, r6
 800826c:	432c      	orrs	r4, r5
 800826e:	40d3      	lsrs	r3, r2
 8008270:	6004      	str	r4, [r0, #0]
 8008272:	f840 3f04 	str.w	r3, [r0, #4]!
 8008276:	4288      	cmp	r0, r1
 8008278:	d3f4      	bcc.n	8008264 <L_shift+0xc>
 800827a:	bd70      	pop	{r4, r5, r6, pc}

0800827c <__match>:
 800827c:	b530      	push	{r4, r5, lr}
 800827e:	6803      	ldr	r3, [r0, #0]
 8008280:	3301      	adds	r3, #1
 8008282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008286:	b914      	cbnz	r4, 800828e <__match+0x12>
 8008288:	6003      	str	r3, [r0, #0]
 800828a:	2001      	movs	r0, #1
 800828c:	bd30      	pop	{r4, r5, pc}
 800828e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008292:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008296:	2d19      	cmp	r5, #25
 8008298:	bf98      	it	ls
 800829a:	3220      	addls	r2, #32
 800829c:	42a2      	cmp	r2, r4
 800829e:	d0f0      	beq.n	8008282 <__match+0x6>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e7f3      	b.n	800828c <__match+0x10>

080082a4 <__hexnan>:
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	2500      	movs	r5, #0
 80082aa:	680b      	ldr	r3, [r1, #0]
 80082ac:	4682      	mov	sl, r0
 80082ae:	115f      	asrs	r7, r3, #5
 80082b0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80082b4:	f013 031f 	ands.w	r3, r3, #31
 80082b8:	bf18      	it	ne
 80082ba:	3704      	addne	r7, #4
 80082bc:	1f3e      	subs	r6, r7, #4
 80082be:	4690      	mov	r8, r2
 80082c0:	46b1      	mov	r9, r6
 80082c2:	4634      	mov	r4, r6
 80082c4:	46ab      	mov	fp, r5
 80082c6:	b087      	sub	sp, #28
 80082c8:	6801      	ldr	r1, [r0, #0]
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	f847 5c04 	str.w	r5, [r7, #-4]
 80082d0:	9502      	str	r5, [sp, #8]
 80082d2:	784a      	ldrb	r2, [r1, #1]
 80082d4:	1c4b      	adds	r3, r1, #1
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	b342      	cbz	r2, 800832c <__hexnan+0x88>
 80082da:	4610      	mov	r0, r2
 80082dc:	9105      	str	r1, [sp, #20]
 80082de:	9204      	str	r2, [sp, #16]
 80082e0:	f7ff fd83 	bl	8007dea <__hexdig_fun>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d143      	bne.n	8008370 <__hexnan+0xcc>
 80082e8:	9a04      	ldr	r2, [sp, #16]
 80082ea:	9905      	ldr	r1, [sp, #20]
 80082ec:	2a20      	cmp	r2, #32
 80082ee:	d818      	bhi.n	8008322 <__hexnan+0x7e>
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	459b      	cmp	fp, r3
 80082f4:	dd13      	ble.n	800831e <__hexnan+0x7a>
 80082f6:	454c      	cmp	r4, r9
 80082f8:	d206      	bcs.n	8008308 <__hexnan+0x64>
 80082fa:	2d07      	cmp	r5, #7
 80082fc:	dc04      	bgt.n	8008308 <__hexnan+0x64>
 80082fe:	462a      	mov	r2, r5
 8008300:	4649      	mov	r1, r9
 8008302:	4620      	mov	r0, r4
 8008304:	f7ff ffa8 	bl	8008258 <L_shift>
 8008308:	4544      	cmp	r4, r8
 800830a:	d944      	bls.n	8008396 <__hexnan+0xf2>
 800830c:	2300      	movs	r3, #0
 800830e:	f1a4 0904 	sub.w	r9, r4, #4
 8008312:	f844 3c04 	str.w	r3, [r4, #-4]
 8008316:	461d      	mov	r5, r3
 8008318:	464c      	mov	r4, r9
 800831a:	f8cd b008 	str.w	fp, [sp, #8]
 800831e:	9903      	ldr	r1, [sp, #12]
 8008320:	e7d7      	b.n	80082d2 <__hexnan+0x2e>
 8008322:	2a29      	cmp	r2, #41	; 0x29
 8008324:	d14a      	bne.n	80083bc <__hexnan+0x118>
 8008326:	3102      	adds	r1, #2
 8008328:	f8ca 1000 	str.w	r1, [sl]
 800832c:	f1bb 0f00 	cmp.w	fp, #0
 8008330:	d044      	beq.n	80083bc <__hexnan+0x118>
 8008332:	454c      	cmp	r4, r9
 8008334:	d206      	bcs.n	8008344 <__hexnan+0xa0>
 8008336:	2d07      	cmp	r5, #7
 8008338:	dc04      	bgt.n	8008344 <__hexnan+0xa0>
 800833a:	462a      	mov	r2, r5
 800833c:	4649      	mov	r1, r9
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff ff8a 	bl	8008258 <L_shift>
 8008344:	4544      	cmp	r4, r8
 8008346:	d928      	bls.n	800839a <__hexnan+0xf6>
 8008348:	4643      	mov	r3, r8
 800834a:	f854 2b04 	ldr.w	r2, [r4], #4
 800834e:	42a6      	cmp	r6, r4
 8008350:	f843 2b04 	str.w	r2, [r3], #4
 8008354:	d2f9      	bcs.n	800834a <__hexnan+0xa6>
 8008356:	2200      	movs	r2, #0
 8008358:	f843 2b04 	str.w	r2, [r3], #4
 800835c:	429e      	cmp	r6, r3
 800835e:	d2fb      	bcs.n	8008358 <__hexnan+0xb4>
 8008360:	6833      	ldr	r3, [r6, #0]
 8008362:	b91b      	cbnz	r3, 800836c <__hexnan+0xc8>
 8008364:	4546      	cmp	r6, r8
 8008366:	d127      	bne.n	80083b8 <__hexnan+0x114>
 8008368:	2301      	movs	r3, #1
 800836a:	6033      	str	r3, [r6, #0]
 800836c:	2005      	movs	r0, #5
 800836e:	e026      	b.n	80083be <__hexnan+0x11a>
 8008370:	3501      	adds	r5, #1
 8008372:	2d08      	cmp	r5, #8
 8008374:	f10b 0b01 	add.w	fp, fp, #1
 8008378:	dd06      	ble.n	8008388 <__hexnan+0xe4>
 800837a:	4544      	cmp	r4, r8
 800837c:	d9cf      	bls.n	800831e <__hexnan+0x7a>
 800837e:	2300      	movs	r3, #0
 8008380:	2501      	movs	r5, #1
 8008382:	f844 3c04 	str.w	r3, [r4, #-4]
 8008386:	3c04      	subs	r4, #4
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	f000 000f 	and.w	r0, r0, #15
 800838e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008392:	6020      	str	r0, [r4, #0]
 8008394:	e7c3      	b.n	800831e <__hexnan+0x7a>
 8008396:	2508      	movs	r5, #8
 8008398:	e7c1      	b.n	800831e <__hexnan+0x7a>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0df      	beq.n	8008360 <__hexnan+0xbc>
 80083a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083a4:	f1c3 0320 	rsb	r3, r3, #32
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80083b0:	401a      	ands	r2, r3
 80083b2:	f847 2c04 	str.w	r2, [r7, #-4]
 80083b6:	e7d3      	b.n	8008360 <__hexnan+0xbc>
 80083b8:	3e04      	subs	r6, #4
 80083ba:	e7d1      	b.n	8008360 <__hexnan+0xbc>
 80083bc:	2004      	movs	r0, #4
 80083be:	b007      	add	sp, #28
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083c4 <__localeconv_l>:
 80083c4:	30f0      	adds	r0, #240	; 0xf0
 80083c6:	4770      	bx	lr

080083c8 <_localeconv_r>:
 80083c8:	4b04      	ldr	r3, [pc, #16]	; (80083dc <_localeconv_r+0x14>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6a18      	ldr	r0, [r3, #32]
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <_localeconv_r+0x18>)
 80083d0:	2800      	cmp	r0, #0
 80083d2:	bf08      	it	eq
 80083d4:	4618      	moveq	r0, r3
 80083d6:	30f0      	adds	r0, #240	; 0xf0
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20000038 	.word	0x20000038
 80083e0:	2000009c 	.word	0x2000009c

080083e4 <__swhatbuf_r>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	460e      	mov	r6, r1
 80083e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ec:	b096      	sub	sp, #88	; 0x58
 80083ee:	2900      	cmp	r1, #0
 80083f0:	4614      	mov	r4, r2
 80083f2:	461d      	mov	r5, r3
 80083f4:	da07      	bge.n	8008406 <__swhatbuf_r+0x22>
 80083f6:	2300      	movs	r3, #0
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	89b3      	ldrh	r3, [r6, #12]
 80083fc:	061a      	lsls	r2, r3, #24
 80083fe:	d410      	bmi.n	8008422 <__swhatbuf_r+0x3e>
 8008400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008404:	e00e      	b.n	8008424 <__swhatbuf_r+0x40>
 8008406:	466a      	mov	r2, sp
 8008408:	f000 fdb6 	bl	8008f78 <_fstat_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	dbf2      	blt.n	80083f6 <__swhatbuf_r+0x12>
 8008410:	9a01      	ldr	r2, [sp, #4]
 8008412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008416:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800841a:	425a      	negs	r2, r3
 800841c:	415a      	adcs	r2, r3
 800841e:	602a      	str	r2, [r5, #0]
 8008420:	e7ee      	b.n	8008400 <__swhatbuf_r+0x1c>
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	2000      	movs	r0, #0
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	b016      	add	sp, #88	; 0x58
 800842a:	bd70      	pop	{r4, r5, r6, pc}

0800842c <__smakebuf_r>:
 800842c:	898b      	ldrh	r3, [r1, #12]
 800842e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008430:	079d      	lsls	r5, r3, #30
 8008432:	4606      	mov	r6, r0
 8008434:	460c      	mov	r4, r1
 8008436:	d507      	bpl.n	8008448 <__smakebuf_r+0x1c>
 8008438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	2301      	movs	r3, #1
 8008442:	6163      	str	r3, [r4, #20]
 8008444:	b002      	add	sp, #8
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	ab01      	add	r3, sp, #4
 800844a:	466a      	mov	r2, sp
 800844c:	f7ff ffca 	bl	80083e4 <__swhatbuf_r>
 8008450:	9900      	ldr	r1, [sp, #0]
 8008452:	4605      	mov	r5, r0
 8008454:	4630      	mov	r0, r6
 8008456:	f000 fca1 	bl	8008d9c <_malloc_r>
 800845a:	b948      	cbnz	r0, 8008470 <__smakebuf_r+0x44>
 800845c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008460:	059a      	lsls	r2, r3, #22
 8008462:	d4ef      	bmi.n	8008444 <__smakebuf_r+0x18>
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	f043 0302 	orr.w	r3, r3, #2
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	e7e3      	b.n	8008438 <__smakebuf_r+0xc>
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <__smakebuf_r+0x7c>)
 8008472:	62b3      	str	r3, [r6, #40]	; 0x28
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	6020      	str	r0, [r4, #0]
 8008478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	6120      	str	r0, [r4, #16]
 8008482:	6163      	str	r3, [r4, #20]
 8008484:	9b01      	ldr	r3, [sp, #4]
 8008486:	b15b      	cbz	r3, 80084a0 <__smakebuf_r+0x74>
 8008488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800848c:	4630      	mov	r0, r6
 800848e:	f000 fd85 	bl	8008f9c <_isatty_r>
 8008492:	b128      	cbz	r0, 80084a0 <__smakebuf_r+0x74>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f023 0303 	bic.w	r3, r3, #3
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	431d      	orrs	r5, r3
 80084a4:	81a5      	strh	r5, [r4, #12]
 80084a6:	e7cd      	b.n	8008444 <__smakebuf_r+0x18>
 80084a8:	08007c29 	.word	0x08007c29

080084ac <malloc>:
 80084ac:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <malloc+0xc>)
 80084ae:	4601      	mov	r1, r0
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	f000 bc73 	b.w	8008d9c <_malloc_r>
 80084b6:	bf00      	nop
 80084b8:	20000038 	.word	0x20000038

080084bc <__ascii_mbtowc>:
 80084bc:	b082      	sub	sp, #8
 80084be:	b901      	cbnz	r1, 80084c2 <__ascii_mbtowc+0x6>
 80084c0:	a901      	add	r1, sp, #4
 80084c2:	b142      	cbz	r2, 80084d6 <__ascii_mbtowc+0x1a>
 80084c4:	b14b      	cbz	r3, 80084da <__ascii_mbtowc+0x1e>
 80084c6:	7813      	ldrb	r3, [r2, #0]
 80084c8:	600b      	str	r3, [r1, #0]
 80084ca:	7812      	ldrb	r2, [r2, #0]
 80084cc:	1c10      	adds	r0, r2, #0
 80084ce:	bf18      	it	ne
 80084d0:	2001      	movne	r0, #1
 80084d2:	b002      	add	sp, #8
 80084d4:	4770      	bx	lr
 80084d6:	4610      	mov	r0, r2
 80084d8:	e7fb      	b.n	80084d2 <__ascii_mbtowc+0x16>
 80084da:	f06f 0001 	mvn.w	r0, #1
 80084de:	e7f8      	b.n	80084d2 <__ascii_mbtowc+0x16>

080084e0 <memcpy>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	1e43      	subs	r3, r0, #1
 80084e4:	440a      	add	r2, r1
 80084e6:	4291      	cmp	r1, r2
 80084e8:	d100      	bne.n	80084ec <memcpy+0xc>
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f4:	e7f7      	b.n	80084e6 <memcpy+0x6>

080084f6 <_Balloc>:
 80084f6:	b570      	push	{r4, r5, r6, lr}
 80084f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084fa:	4604      	mov	r4, r0
 80084fc:	460e      	mov	r6, r1
 80084fe:	b93d      	cbnz	r5, 8008510 <_Balloc+0x1a>
 8008500:	2010      	movs	r0, #16
 8008502:	f7ff ffd3 	bl	80084ac <malloc>
 8008506:	6260      	str	r0, [r4, #36]	; 0x24
 8008508:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800850c:	6005      	str	r5, [r0, #0]
 800850e:	60c5      	str	r5, [r0, #12]
 8008510:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008512:	68eb      	ldr	r3, [r5, #12]
 8008514:	b183      	cbz	r3, 8008538 <_Balloc+0x42>
 8008516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800851e:	b9b8      	cbnz	r0, 8008550 <_Balloc+0x5a>
 8008520:	2101      	movs	r1, #1
 8008522:	fa01 f506 	lsl.w	r5, r1, r6
 8008526:	1d6a      	adds	r2, r5, #5
 8008528:	0092      	lsls	r2, r2, #2
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fbdc 	bl	8008ce8 <_calloc_r>
 8008530:	b160      	cbz	r0, 800854c <_Balloc+0x56>
 8008532:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008536:	e00e      	b.n	8008556 <_Balloc+0x60>
 8008538:	2221      	movs	r2, #33	; 0x21
 800853a:	2104      	movs	r1, #4
 800853c:	4620      	mov	r0, r4
 800853e:	f000 fbd3 	bl	8008ce8 <_calloc_r>
 8008542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008544:	60e8      	str	r0, [r5, #12]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e4      	bne.n	8008516 <_Balloc+0x20>
 800854c:	2000      	movs	r0, #0
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	6802      	ldr	r2, [r0, #0]
 8008552:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008556:	2300      	movs	r3, #0
 8008558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800855c:	e7f7      	b.n	800854e <_Balloc+0x58>

0800855e <_Bfree>:
 800855e:	b570      	push	{r4, r5, r6, lr}
 8008560:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008562:	4606      	mov	r6, r0
 8008564:	460d      	mov	r5, r1
 8008566:	b93c      	cbnz	r4, 8008578 <_Bfree+0x1a>
 8008568:	2010      	movs	r0, #16
 800856a:	f7ff ff9f 	bl	80084ac <malloc>
 800856e:	6270      	str	r0, [r6, #36]	; 0x24
 8008570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008574:	6004      	str	r4, [r0, #0]
 8008576:	60c4      	str	r4, [r0, #12]
 8008578:	b13d      	cbz	r5, 800858a <_Bfree+0x2c>
 800857a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800857c:	686a      	ldr	r2, [r5, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008584:	6029      	str	r1, [r5, #0]
 8008586:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800858a:	bd70      	pop	{r4, r5, r6, pc}

0800858c <__multadd>:
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008590:	461f      	mov	r7, r3
 8008592:	4606      	mov	r6, r0
 8008594:	460c      	mov	r4, r1
 8008596:	2300      	movs	r3, #0
 8008598:	690d      	ldr	r5, [r1, #16]
 800859a:	f101 0c14 	add.w	ip, r1, #20
 800859e:	f8dc 0000 	ldr.w	r0, [ip]
 80085a2:	3301      	adds	r3, #1
 80085a4:	b281      	uxth	r1, r0
 80085a6:	fb02 7101 	mla	r1, r2, r1, r7
 80085aa:	0c00      	lsrs	r0, r0, #16
 80085ac:	0c0f      	lsrs	r7, r1, #16
 80085ae:	fb02 7000 	mla	r0, r2, r0, r7
 80085b2:	b289      	uxth	r1, r1
 80085b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80085b8:	429d      	cmp	r5, r3
 80085ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80085be:	f84c 1b04 	str.w	r1, [ip], #4
 80085c2:	dcec      	bgt.n	800859e <__multadd+0x12>
 80085c4:	b1d7      	cbz	r7, 80085fc <__multadd+0x70>
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	42ab      	cmp	r3, r5
 80085ca:	dc12      	bgt.n	80085f2 <__multadd+0x66>
 80085cc:	6861      	ldr	r1, [r4, #4]
 80085ce:	4630      	mov	r0, r6
 80085d0:	3101      	adds	r1, #1
 80085d2:	f7ff ff90 	bl	80084f6 <_Balloc>
 80085d6:	4680      	mov	r8, r0
 80085d8:	6922      	ldr	r2, [r4, #16]
 80085da:	f104 010c 	add.w	r1, r4, #12
 80085de:	3202      	adds	r2, #2
 80085e0:	0092      	lsls	r2, r2, #2
 80085e2:	300c      	adds	r0, #12
 80085e4:	f7ff ff7c 	bl	80084e0 <memcpy>
 80085e8:	4621      	mov	r1, r4
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff ffb7 	bl	800855e <_Bfree>
 80085f0:	4644      	mov	r4, r8
 80085f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085f6:	3501      	adds	r5, #1
 80085f8:	615f      	str	r7, [r3, #20]
 80085fa:	6125      	str	r5, [r4, #16]
 80085fc:	4620      	mov	r0, r4
 80085fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008602 <__s2b>:
 8008602:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008606:	4615      	mov	r5, r2
 8008608:	2209      	movs	r2, #9
 800860a:	461f      	mov	r7, r3
 800860c:	3308      	adds	r3, #8
 800860e:	460c      	mov	r4, r1
 8008610:	fb93 f3f2 	sdiv	r3, r3, r2
 8008614:	4606      	mov	r6, r0
 8008616:	2201      	movs	r2, #1
 8008618:	2100      	movs	r1, #0
 800861a:	429a      	cmp	r2, r3
 800861c:	db20      	blt.n	8008660 <__s2b+0x5e>
 800861e:	4630      	mov	r0, r6
 8008620:	f7ff ff69 	bl	80084f6 <_Balloc>
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	2d09      	cmp	r5, #9
 8008628:	6143      	str	r3, [r0, #20]
 800862a:	f04f 0301 	mov.w	r3, #1
 800862e:	6103      	str	r3, [r0, #16]
 8008630:	dd19      	ble.n	8008666 <__s2b+0x64>
 8008632:	f104 0809 	add.w	r8, r4, #9
 8008636:	46c1      	mov	r9, r8
 8008638:	442c      	add	r4, r5
 800863a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800863e:	4601      	mov	r1, r0
 8008640:	3b30      	subs	r3, #48	; 0x30
 8008642:	220a      	movs	r2, #10
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff ffa1 	bl	800858c <__multadd>
 800864a:	45a1      	cmp	r9, r4
 800864c:	d1f5      	bne.n	800863a <__s2b+0x38>
 800864e:	eb08 0405 	add.w	r4, r8, r5
 8008652:	3c08      	subs	r4, #8
 8008654:	1b2d      	subs	r5, r5, r4
 8008656:	1963      	adds	r3, r4, r5
 8008658:	42bb      	cmp	r3, r7
 800865a:	db07      	blt.n	800866c <__s2b+0x6a>
 800865c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008660:	0052      	lsls	r2, r2, #1
 8008662:	3101      	adds	r1, #1
 8008664:	e7d9      	b.n	800861a <__s2b+0x18>
 8008666:	340a      	adds	r4, #10
 8008668:	2509      	movs	r5, #9
 800866a:	e7f3      	b.n	8008654 <__s2b+0x52>
 800866c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008670:	4601      	mov	r1, r0
 8008672:	3b30      	subs	r3, #48	; 0x30
 8008674:	220a      	movs	r2, #10
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff88 	bl	800858c <__multadd>
 800867c:	e7eb      	b.n	8008656 <__s2b+0x54>

0800867e <__hi0bits>:
 800867e:	0c02      	lsrs	r2, r0, #16
 8008680:	0412      	lsls	r2, r2, #16
 8008682:	4603      	mov	r3, r0
 8008684:	b9b2      	cbnz	r2, 80086b4 <__hi0bits+0x36>
 8008686:	0403      	lsls	r3, r0, #16
 8008688:	2010      	movs	r0, #16
 800868a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800868e:	bf04      	itt	eq
 8008690:	021b      	lsleq	r3, r3, #8
 8008692:	3008      	addeq	r0, #8
 8008694:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008698:	bf04      	itt	eq
 800869a:	011b      	lsleq	r3, r3, #4
 800869c:	3004      	addeq	r0, #4
 800869e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086a2:	bf04      	itt	eq
 80086a4:	009b      	lsleq	r3, r3, #2
 80086a6:	3002      	addeq	r0, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	db06      	blt.n	80086ba <__hi0bits+0x3c>
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	d503      	bpl.n	80086b8 <__hi0bits+0x3a>
 80086b0:	3001      	adds	r0, #1
 80086b2:	4770      	bx	lr
 80086b4:	2000      	movs	r0, #0
 80086b6:	e7e8      	b.n	800868a <__hi0bits+0xc>
 80086b8:	2020      	movs	r0, #32
 80086ba:	4770      	bx	lr

080086bc <__lo0bits>:
 80086bc:	6803      	ldr	r3, [r0, #0]
 80086be:	4601      	mov	r1, r0
 80086c0:	f013 0207 	ands.w	r2, r3, #7
 80086c4:	d00b      	beq.n	80086de <__lo0bits+0x22>
 80086c6:	07da      	lsls	r2, r3, #31
 80086c8:	d423      	bmi.n	8008712 <__lo0bits+0x56>
 80086ca:	0798      	lsls	r0, r3, #30
 80086cc:	bf49      	itett	mi
 80086ce:	085b      	lsrmi	r3, r3, #1
 80086d0:	089b      	lsrpl	r3, r3, #2
 80086d2:	2001      	movmi	r0, #1
 80086d4:	600b      	strmi	r3, [r1, #0]
 80086d6:	bf5c      	itt	pl
 80086d8:	600b      	strpl	r3, [r1, #0]
 80086da:	2002      	movpl	r0, #2
 80086dc:	4770      	bx	lr
 80086de:	b298      	uxth	r0, r3
 80086e0:	b9a8      	cbnz	r0, 800870e <__lo0bits+0x52>
 80086e2:	2010      	movs	r0, #16
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086ea:	bf04      	itt	eq
 80086ec:	0a1b      	lsreq	r3, r3, #8
 80086ee:	3008      	addeq	r0, #8
 80086f0:	071a      	lsls	r2, r3, #28
 80086f2:	bf04      	itt	eq
 80086f4:	091b      	lsreq	r3, r3, #4
 80086f6:	3004      	addeq	r0, #4
 80086f8:	079a      	lsls	r2, r3, #30
 80086fa:	bf04      	itt	eq
 80086fc:	089b      	lsreq	r3, r3, #2
 80086fe:	3002      	addeq	r0, #2
 8008700:	07da      	lsls	r2, r3, #31
 8008702:	d402      	bmi.n	800870a <__lo0bits+0x4e>
 8008704:	085b      	lsrs	r3, r3, #1
 8008706:	d006      	beq.n	8008716 <__lo0bits+0x5a>
 8008708:	3001      	adds	r0, #1
 800870a:	600b      	str	r3, [r1, #0]
 800870c:	4770      	bx	lr
 800870e:	4610      	mov	r0, r2
 8008710:	e7e9      	b.n	80086e6 <__lo0bits+0x2a>
 8008712:	2000      	movs	r0, #0
 8008714:	4770      	bx	lr
 8008716:	2020      	movs	r0, #32
 8008718:	4770      	bx	lr

0800871a <__i2b>:
 800871a:	b510      	push	{r4, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	2101      	movs	r1, #1
 8008720:	f7ff fee9 	bl	80084f6 <_Balloc>
 8008724:	2201      	movs	r2, #1
 8008726:	6144      	str	r4, [r0, #20]
 8008728:	6102      	str	r2, [r0, #16]
 800872a:	bd10      	pop	{r4, pc}

0800872c <__multiply>:
 800872c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	4614      	mov	r4, r2
 8008732:	690a      	ldr	r2, [r1, #16]
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	4688      	mov	r8, r1
 8008738:	429a      	cmp	r2, r3
 800873a:	bfbe      	ittt	lt
 800873c:	460b      	movlt	r3, r1
 800873e:	46a0      	movlt	r8, r4
 8008740:	461c      	movlt	r4, r3
 8008742:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008746:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800874a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800874e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008752:	eb07 0609 	add.w	r6, r7, r9
 8008756:	42b3      	cmp	r3, r6
 8008758:	bfb8      	it	lt
 800875a:	3101      	addlt	r1, #1
 800875c:	f7ff fecb 	bl	80084f6 <_Balloc>
 8008760:	f100 0514 	add.w	r5, r0, #20
 8008764:	462b      	mov	r3, r5
 8008766:	2200      	movs	r2, #0
 8008768:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800876c:	4573      	cmp	r3, lr
 800876e:	d316      	bcc.n	800879e <__multiply+0x72>
 8008770:	f104 0214 	add.w	r2, r4, #20
 8008774:	f108 0114 	add.w	r1, r8, #20
 8008778:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800877c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	9b00      	ldr	r3, [sp, #0]
 8008784:	9201      	str	r2, [sp, #4]
 8008786:	4293      	cmp	r3, r2
 8008788:	d80c      	bhi.n	80087a4 <__multiply+0x78>
 800878a:	2e00      	cmp	r6, #0
 800878c:	dd03      	ble.n	8008796 <__multiply+0x6a>
 800878e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008792:	2b00      	cmp	r3, #0
 8008794:	d05d      	beq.n	8008852 <__multiply+0x126>
 8008796:	6106      	str	r6, [r0, #16]
 8008798:	b003      	add	sp, #12
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	f843 2b04 	str.w	r2, [r3], #4
 80087a2:	e7e3      	b.n	800876c <__multiply+0x40>
 80087a4:	f8b2 b000 	ldrh.w	fp, [r2]
 80087a8:	f1bb 0f00 	cmp.w	fp, #0
 80087ac:	d023      	beq.n	80087f6 <__multiply+0xca>
 80087ae:	4689      	mov	r9, r1
 80087b0:	46ac      	mov	ip, r5
 80087b2:	f04f 0800 	mov.w	r8, #0
 80087b6:	f859 4b04 	ldr.w	r4, [r9], #4
 80087ba:	f8dc a000 	ldr.w	sl, [ip]
 80087be:	b2a3      	uxth	r3, r4
 80087c0:	fa1f fa8a 	uxth.w	sl, sl
 80087c4:	fb0b a303 	mla	r3, fp, r3, sl
 80087c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087cc:	f8dc 4000 	ldr.w	r4, [ip]
 80087d0:	4443      	add	r3, r8
 80087d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087d6:	fb0b 840a 	mla	r4, fp, sl, r8
 80087da:	46e2      	mov	sl, ip
 80087dc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087e6:	454f      	cmp	r7, r9
 80087e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087ec:	f84a 3b04 	str.w	r3, [sl], #4
 80087f0:	d82b      	bhi.n	800884a <__multiply+0x11e>
 80087f2:	f8cc 8004 	str.w	r8, [ip, #4]
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	3204      	adds	r2, #4
 80087fa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087fe:	f1ba 0f00 	cmp.w	sl, #0
 8008802:	d020      	beq.n	8008846 <__multiply+0x11a>
 8008804:	4689      	mov	r9, r1
 8008806:	46a8      	mov	r8, r5
 8008808:	f04f 0b00 	mov.w	fp, #0
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	f8b9 c000 	ldrh.w	ip, [r9]
 8008812:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008816:	b29b      	uxth	r3, r3
 8008818:	fb0a 440c 	mla	r4, sl, ip, r4
 800881c:	46c4      	mov	ip, r8
 800881e:	445c      	add	r4, fp
 8008820:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008824:	f84c 3b04 	str.w	r3, [ip], #4
 8008828:	f859 3b04 	ldr.w	r3, [r9], #4
 800882c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008830:	0c1b      	lsrs	r3, r3, #16
 8008832:	fb0a b303 	mla	r3, sl, r3, fp
 8008836:	454f      	cmp	r7, r9
 8008838:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800883c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008840:	d805      	bhi.n	800884e <__multiply+0x122>
 8008842:	f8c8 3004 	str.w	r3, [r8, #4]
 8008846:	3504      	adds	r5, #4
 8008848:	e79b      	b.n	8008782 <__multiply+0x56>
 800884a:	46d4      	mov	ip, sl
 800884c:	e7b3      	b.n	80087b6 <__multiply+0x8a>
 800884e:	46e0      	mov	r8, ip
 8008850:	e7dd      	b.n	800880e <__multiply+0xe2>
 8008852:	3e01      	subs	r6, #1
 8008854:	e799      	b.n	800878a <__multiply+0x5e>
	...

08008858 <__pow5mult>:
 8008858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800885c:	4615      	mov	r5, r2
 800885e:	f012 0203 	ands.w	r2, r2, #3
 8008862:	4606      	mov	r6, r0
 8008864:	460f      	mov	r7, r1
 8008866:	d007      	beq.n	8008878 <__pow5mult+0x20>
 8008868:	4c21      	ldr	r4, [pc, #132]	; (80088f0 <__pow5mult+0x98>)
 800886a:	3a01      	subs	r2, #1
 800886c:	2300      	movs	r3, #0
 800886e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008872:	f7ff fe8b 	bl	800858c <__multadd>
 8008876:	4607      	mov	r7, r0
 8008878:	10ad      	asrs	r5, r5, #2
 800887a:	d035      	beq.n	80088e8 <__pow5mult+0x90>
 800887c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800887e:	b93c      	cbnz	r4, 8008890 <__pow5mult+0x38>
 8008880:	2010      	movs	r0, #16
 8008882:	f7ff fe13 	bl	80084ac <malloc>
 8008886:	6270      	str	r0, [r6, #36]	; 0x24
 8008888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800888c:	6004      	str	r4, [r0, #0]
 800888e:	60c4      	str	r4, [r0, #12]
 8008890:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008898:	b94c      	cbnz	r4, 80088ae <__pow5mult+0x56>
 800889a:	f240 2171 	movw	r1, #625	; 0x271
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ff3b 	bl	800871a <__i2b>
 80088a4:	2300      	movs	r3, #0
 80088a6:	4604      	mov	r4, r0
 80088a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	f04f 0800 	mov.w	r8, #0
 80088b2:	07eb      	lsls	r3, r5, #31
 80088b4:	d50a      	bpl.n	80088cc <__pow5mult+0x74>
 80088b6:	4639      	mov	r1, r7
 80088b8:	4622      	mov	r2, r4
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ff36 	bl	800872c <__multiply>
 80088c0:	4681      	mov	r9, r0
 80088c2:	4639      	mov	r1, r7
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff fe4a 	bl	800855e <_Bfree>
 80088ca:	464f      	mov	r7, r9
 80088cc:	106d      	asrs	r5, r5, #1
 80088ce:	d00b      	beq.n	80088e8 <__pow5mult+0x90>
 80088d0:	6820      	ldr	r0, [r4, #0]
 80088d2:	b938      	cbnz	r0, 80088e4 <__pow5mult+0x8c>
 80088d4:	4622      	mov	r2, r4
 80088d6:	4621      	mov	r1, r4
 80088d8:	4630      	mov	r0, r6
 80088da:	f7ff ff27 	bl	800872c <__multiply>
 80088de:	6020      	str	r0, [r4, #0]
 80088e0:	f8c0 8000 	str.w	r8, [r0]
 80088e4:	4604      	mov	r4, r0
 80088e6:	e7e4      	b.n	80088b2 <__pow5mult+0x5a>
 80088e8:	4638      	mov	r0, r7
 80088ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ee:	bf00      	nop
 80088f0:	080092e0 	.word	0x080092e0

080088f4 <__lshift>:
 80088f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	4607      	mov	r7, r0
 80088fc:	4616      	mov	r6, r2
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008904:	eb0a 0903 	add.w	r9, sl, r3
 8008908:	6849      	ldr	r1, [r1, #4]
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	f109 0501 	add.w	r5, r9, #1
 8008910:	42ab      	cmp	r3, r5
 8008912:	db32      	blt.n	800897a <__lshift+0x86>
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff fdee 	bl	80084f6 <_Balloc>
 800891a:	2300      	movs	r3, #0
 800891c:	4680      	mov	r8, r0
 800891e:	461a      	mov	r2, r3
 8008920:	f100 0114 	add.w	r1, r0, #20
 8008924:	4553      	cmp	r3, sl
 8008926:	db2b      	blt.n	8008980 <__lshift+0x8c>
 8008928:	6920      	ldr	r0, [r4, #16]
 800892a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800892e:	f104 0314 	add.w	r3, r4, #20
 8008932:	f016 021f 	ands.w	r2, r6, #31
 8008936:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800893a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800893e:	d025      	beq.n	800898c <__lshift+0x98>
 8008940:	2000      	movs	r0, #0
 8008942:	f1c2 0e20 	rsb	lr, r2, #32
 8008946:	468a      	mov	sl, r1
 8008948:	681e      	ldr	r6, [r3, #0]
 800894a:	4096      	lsls	r6, r2
 800894c:	4330      	orrs	r0, r6
 800894e:	f84a 0b04 	str.w	r0, [sl], #4
 8008952:	f853 0b04 	ldr.w	r0, [r3], #4
 8008956:	459c      	cmp	ip, r3
 8008958:	fa20 f00e 	lsr.w	r0, r0, lr
 800895c:	d814      	bhi.n	8008988 <__lshift+0x94>
 800895e:	6048      	str	r0, [r1, #4]
 8008960:	b108      	cbz	r0, 8008966 <__lshift+0x72>
 8008962:	f109 0502 	add.w	r5, r9, #2
 8008966:	3d01      	subs	r5, #1
 8008968:	4638      	mov	r0, r7
 800896a:	f8c8 5010 	str.w	r5, [r8, #16]
 800896e:	4621      	mov	r1, r4
 8008970:	f7ff fdf5 	bl	800855e <_Bfree>
 8008974:	4640      	mov	r0, r8
 8008976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897a:	3101      	adds	r1, #1
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	e7c7      	b.n	8008910 <__lshift+0x1c>
 8008980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008984:	3301      	adds	r3, #1
 8008986:	e7cd      	b.n	8008924 <__lshift+0x30>
 8008988:	4651      	mov	r1, sl
 800898a:	e7dc      	b.n	8008946 <__lshift+0x52>
 800898c:	3904      	subs	r1, #4
 800898e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008992:	459c      	cmp	ip, r3
 8008994:	f841 2f04 	str.w	r2, [r1, #4]!
 8008998:	d8f9      	bhi.n	800898e <__lshift+0x9a>
 800899a:	e7e4      	b.n	8008966 <__lshift+0x72>

0800899c <__mcmp>:
 800899c:	6903      	ldr	r3, [r0, #16]
 800899e:	690a      	ldr	r2, [r1, #16]
 80089a0:	b530      	push	{r4, r5, lr}
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	d10c      	bne.n	80089c0 <__mcmp+0x24>
 80089a6:	0092      	lsls	r2, r2, #2
 80089a8:	3014      	adds	r0, #20
 80089aa:	3114      	adds	r1, #20
 80089ac:	1884      	adds	r4, r0, r2
 80089ae:	4411      	add	r1, r2
 80089b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089b8:	4295      	cmp	r5, r2
 80089ba:	d003      	beq.n	80089c4 <__mcmp+0x28>
 80089bc:	d305      	bcc.n	80089ca <__mcmp+0x2e>
 80089be:	2301      	movs	r3, #1
 80089c0:	4618      	mov	r0, r3
 80089c2:	bd30      	pop	{r4, r5, pc}
 80089c4:	42a0      	cmp	r0, r4
 80089c6:	d3f3      	bcc.n	80089b0 <__mcmp+0x14>
 80089c8:	e7fa      	b.n	80089c0 <__mcmp+0x24>
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ce:	e7f7      	b.n	80089c0 <__mcmp+0x24>

080089d0 <__mdiff>:
 80089d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d4:	460d      	mov	r5, r1
 80089d6:	4607      	mov	r7, r0
 80089d8:	4611      	mov	r1, r2
 80089da:	4628      	mov	r0, r5
 80089dc:	4614      	mov	r4, r2
 80089de:	f7ff ffdd 	bl	800899c <__mcmp>
 80089e2:	1e06      	subs	r6, r0, #0
 80089e4:	d108      	bne.n	80089f8 <__mdiff+0x28>
 80089e6:	4631      	mov	r1, r6
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff fd84 	bl	80084f6 <_Balloc>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f8:	bfa4      	itt	ge
 80089fa:	4623      	movge	r3, r4
 80089fc:	462c      	movge	r4, r5
 80089fe:	4638      	mov	r0, r7
 8008a00:	6861      	ldr	r1, [r4, #4]
 8008a02:	bfa6      	itte	ge
 8008a04:	461d      	movge	r5, r3
 8008a06:	2600      	movge	r6, #0
 8008a08:	2601      	movlt	r6, #1
 8008a0a:	f7ff fd74 	bl	80084f6 <_Balloc>
 8008a0e:	f04f 0e00 	mov.w	lr, #0
 8008a12:	60c6      	str	r6, [r0, #12]
 8008a14:	692b      	ldr	r3, [r5, #16]
 8008a16:	6926      	ldr	r6, [r4, #16]
 8008a18:	f104 0214 	add.w	r2, r4, #20
 8008a1c:	f105 0914 	add.w	r9, r5, #20
 8008a20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a28:	f100 0114 	add.w	r1, r0, #20
 8008a2c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a30:	f859 5b04 	ldr.w	r5, [r9], #4
 8008a34:	fa1f f38a 	uxth.w	r3, sl
 8008a38:	4473      	add	r3, lr
 8008a3a:	b2ac      	uxth	r4, r5
 8008a3c:	1b1b      	subs	r3, r3, r4
 8008a3e:	0c2c      	lsrs	r4, r5, #16
 8008a40:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008a44:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008a4e:	45c8      	cmp	r8, r9
 8008a50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008a54:	4694      	mov	ip, r2
 8008a56:	f841 4b04 	str.w	r4, [r1], #4
 8008a5a:	d8e7      	bhi.n	8008a2c <__mdiff+0x5c>
 8008a5c:	45bc      	cmp	ip, r7
 8008a5e:	d304      	bcc.n	8008a6a <__mdiff+0x9a>
 8008a60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a64:	b183      	cbz	r3, 8008a88 <__mdiff+0xb8>
 8008a66:	6106      	str	r6, [r0, #16]
 8008a68:	e7c4      	b.n	80089f4 <__mdiff+0x24>
 8008a6a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008a6e:	b2a2      	uxth	r2, r4
 8008a70:	4472      	add	r2, lr
 8008a72:	1413      	asrs	r3, r2, #16
 8008a74:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a78:	b292      	uxth	r2, r2
 8008a7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a7e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a82:	f841 2b04 	str.w	r2, [r1], #4
 8008a86:	e7e9      	b.n	8008a5c <__mdiff+0x8c>
 8008a88:	3e01      	subs	r6, #1
 8008a8a:	e7e9      	b.n	8008a60 <__mdiff+0x90>

08008a8c <__ulp>:
 8008a8c:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <__ulp+0x44>)
 8008a8e:	400b      	ands	r3, r1
 8008a90:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dd02      	ble.n	8008a9e <__ulp+0x12>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4770      	bx	lr
 8008a9e:	425b      	negs	r3, r3
 8008aa0:	151b      	asrs	r3, r3, #20
 8008aa2:	2b13      	cmp	r3, #19
 8008aa4:	f04f 0000 	mov.w	r0, #0
 8008aa8:	f04f 0100 	mov.w	r1, #0
 8008aac:	dc04      	bgt.n	8008ab8 <__ulp+0x2c>
 8008aae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008ab2:	fa42 f103 	asr.w	r1, r2, r3
 8008ab6:	4770      	bx	lr
 8008ab8:	2201      	movs	r2, #1
 8008aba:	3b14      	subs	r3, #20
 8008abc:	2b1e      	cmp	r3, #30
 8008abe:	bfce      	itee	gt
 8008ac0:	4613      	movgt	r3, r2
 8008ac2:	f1c3 031f 	rsble	r3, r3, #31
 8008ac6:	fa02 f303 	lslle.w	r3, r2, r3
 8008aca:	4618      	mov	r0, r3
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	7ff00000 	.word	0x7ff00000

08008ad4 <__b2d>:
 8008ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	6907      	ldr	r7, [r0, #16]
 8008ada:	f100 0914 	add.w	r9, r0, #20
 8008ade:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008ae2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008ae6:	f1a7 0804 	sub.w	r8, r7, #4
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff fdc7 	bl	800867e <__hi0bits>
 8008af0:	f1c0 0320 	rsb	r3, r0, #32
 8008af4:	280a      	cmp	r0, #10
 8008af6:	600b      	str	r3, [r1, #0]
 8008af8:	491e      	ldr	r1, [pc, #120]	; (8008b74 <__b2d+0xa0>)
 8008afa:	dc17      	bgt.n	8008b2c <__b2d+0x58>
 8008afc:	45c1      	cmp	r9, r8
 8008afe:	bf28      	it	cs
 8008b00:	2200      	movcs	r2, #0
 8008b02:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b06:	fa26 f30c 	lsr.w	r3, r6, ip
 8008b0a:	bf38      	it	cc
 8008b0c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008b10:	ea43 0501 	orr.w	r5, r3, r1
 8008b14:	f100 0315 	add.w	r3, r0, #21
 8008b18:	fa06 f303 	lsl.w	r3, r6, r3
 8008b1c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b20:	ea43 0402 	orr.w	r4, r3, r2
 8008b24:	4620      	mov	r0, r4
 8008b26:	4629      	mov	r1, r5
 8008b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b2c:	45c1      	cmp	r9, r8
 8008b2e:	bf3a      	itte	cc
 8008b30:	f1a7 0808 	subcc.w	r8, r7, #8
 8008b34:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008b38:	2200      	movcs	r2, #0
 8008b3a:	f1b0 030b 	subs.w	r3, r0, #11
 8008b3e:	d015      	beq.n	8008b6c <__b2d+0x98>
 8008b40:	409e      	lsls	r6, r3
 8008b42:	f1c3 0720 	rsb	r7, r3, #32
 8008b46:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008b4a:	fa22 f107 	lsr.w	r1, r2, r7
 8008b4e:	45c8      	cmp	r8, r9
 8008b50:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008b54:	ea46 0501 	orr.w	r5, r6, r1
 8008b58:	bf94      	ite	ls
 8008b5a:	2100      	movls	r1, #0
 8008b5c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008b60:	fa02 f003 	lsl.w	r0, r2, r3
 8008b64:	40f9      	lsrs	r1, r7
 8008b66:	ea40 0401 	orr.w	r4, r0, r1
 8008b6a:	e7db      	b.n	8008b24 <__b2d+0x50>
 8008b6c:	ea46 0501 	orr.w	r5, r6, r1
 8008b70:	4614      	mov	r4, r2
 8008b72:	e7d7      	b.n	8008b24 <__b2d+0x50>
 8008b74:	3ff00000 	.word	0x3ff00000

08008b78 <__d2b>:
 8008b78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b7c:	461c      	mov	r4, r3
 8008b7e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008b82:	2101      	movs	r1, #1
 8008b84:	4690      	mov	r8, r2
 8008b86:	f7ff fcb6 	bl	80084f6 <_Balloc>
 8008b8a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008b8e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b92:	4607      	mov	r7, r0
 8008b94:	bb34      	cbnz	r4, 8008be4 <__d2b+0x6c>
 8008b96:	9201      	str	r2, [sp, #4]
 8008b98:	f1b8 0200 	subs.w	r2, r8, #0
 8008b9c:	d027      	beq.n	8008bee <__d2b+0x76>
 8008b9e:	a802      	add	r0, sp, #8
 8008ba0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008ba4:	f7ff fd8a 	bl	80086bc <__lo0bits>
 8008ba8:	9900      	ldr	r1, [sp, #0]
 8008baa:	b1f0      	cbz	r0, 8008bea <__d2b+0x72>
 8008bac:	9a01      	ldr	r2, [sp, #4]
 8008bae:	f1c0 0320 	rsb	r3, r0, #32
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	40c2      	lsrs	r2, r0
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	9201      	str	r2, [sp, #4]
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	bf14      	ite	ne
 8008bc4:	2102      	movne	r1, #2
 8008bc6:	2101      	moveq	r1, #1
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	6139      	str	r1, [r7, #16]
 8008bcc:	b1c4      	cbz	r4, 8008c00 <__d2b+0x88>
 8008bce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008bd2:	4404      	add	r4, r0
 8008bd4:	6034      	str	r4, [r6, #0]
 8008bd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bda:	6028      	str	r0, [r5, #0]
 8008bdc:	4638      	mov	r0, r7
 8008bde:	b002      	add	sp, #8
 8008be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008be8:	e7d5      	b.n	8008b96 <__d2b+0x1e>
 8008bea:	6179      	str	r1, [r7, #20]
 8008bec:	e7e7      	b.n	8008bbe <__d2b+0x46>
 8008bee:	a801      	add	r0, sp, #4
 8008bf0:	f7ff fd64 	bl	80086bc <__lo0bits>
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	6139      	str	r1, [r7, #16]
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	3020      	adds	r0, #32
 8008bfe:	e7e5      	b.n	8008bcc <__d2b+0x54>
 8008c00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c04:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c08:	6030      	str	r0, [r6, #0]
 8008c0a:	6918      	ldr	r0, [r3, #16]
 8008c0c:	f7ff fd37 	bl	800867e <__hi0bits>
 8008c10:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c14:	e7e1      	b.n	8008bda <__d2b+0x62>

08008c16 <__ratio>:
 8008c16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	4688      	mov	r8, r1
 8008c1c:	4669      	mov	r1, sp
 8008c1e:	4681      	mov	r9, r0
 8008c20:	f7ff ff58 	bl	8008ad4 <__b2d>
 8008c24:	468b      	mov	fp, r1
 8008c26:	4606      	mov	r6, r0
 8008c28:	460f      	mov	r7, r1
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	a901      	add	r1, sp, #4
 8008c2e:	f7ff ff51 	bl	8008ad4 <__b2d>
 8008c32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	eba3 0c02 	sub.w	ip, r3, r2
 8008c40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bfd5      	itete	le
 8008c4e:	460a      	movle	r2, r1
 8008c50:	463a      	movgt	r2, r7
 8008c52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c5a:	bfd8      	it	le
 8008c5c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008c60:	462b      	mov	r3, r5
 8008c62:	4602      	mov	r2, r0
 8008c64:	4659      	mov	r1, fp
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7f7 fd60 	bl	800072c <__aeabi_ddiv>
 8008c6c:	b003      	add	sp, #12
 8008c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c72 <__copybits>:
 8008c72:	3901      	subs	r1, #1
 8008c74:	b510      	push	{r4, lr}
 8008c76:	1149      	asrs	r1, r1, #5
 8008c78:	6914      	ldr	r4, [r2, #16]
 8008c7a:	3101      	adds	r1, #1
 8008c7c:	f102 0314 	add.w	r3, r2, #20
 8008c80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	d303      	bcc.n	8008c96 <__copybits+0x24>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	428a      	cmp	r2, r1
 8008c92:	d305      	bcc.n	8008ca0 <__copybits+0x2e>
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c9a:	f840 2b04 	str.w	r2, [r0], #4
 8008c9e:	e7f3      	b.n	8008c88 <__copybits+0x16>
 8008ca0:	f842 3b04 	str.w	r3, [r2], #4
 8008ca4:	e7f4      	b.n	8008c90 <__copybits+0x1e>

08008ca6 <__any_on>:
 8008ca6:	f100 0214 	add.w	r2, r0, #20
 8008caa:	6900      	ldr	r0, [r0, #16]
 8008cac:	114b      	asrs	r3, r1, #5
 8008cae:	4298      	cmp	r0, r3
 8008cb0:	b510      	push	{r4, lr}
 8008cb2:	db11      	blt.n	8008cd8 <__any_on+0x32>
 8008cb4:	dd0a      	ble.n	8008ccc <__any_on+0x26>
 8008cb6:	f011 011f 	ands.w	r1, r1, #31
 8008cba:	d007      	beq.n	8008ccc <__any_on+0x26>
 8008cbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cc0:	fa24 f001 	lsr.w	r0, r4, r1
 8008cc4:	fa00 f101 	lsl.w	r1, r0, r1
 8008cc8:	428c      	cmp	r4, r1
 8008cca:	d10b      	bne.n	8008ce4 <__any_on+0x3e>
 8008ccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d803      	bhi.n	8008cdc <__any_on+0x36>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	bd10      	pop	{r4, pc}
 8008cd8:	4603      	mov	r3, r0
 8008cda:	e7f7      	b.n	8008ccc <__any_on+0x26>
 8008cdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	d0f5      	beq.n	8008cd0 <__any_on+0x2a>
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	e7f6      	b.n	8008cd6 <__any_on+0x30>

08008ce8 <_calloc_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	fb02 f401 	mul.w	r4, r2, r1
 8008cee:	4621      	mov	r1, r4
 8008cf0:	f000 f854 	bl	8008d9c <_malloc_r>
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	b118      	cbz	r0, 8008d00 <_calloc_r+0x18>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	f7fc fde0 	bl	80058c0 <memset>
 8008d00:	4628      	mov	r0, r5
 8008d02:	bd38      	pop	{r3, r4, r5, pc}

08008d04 <_free_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4605      	mov	r5, r0
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d043      	beq.n	8008d94 <_free_r+0x90>
 8008d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d10:	1f0c      	subs	r4, r1, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfb8      	it	lt
 8008d16:	18e4      	addlt	r4, r4, r3
 8008d18:	f000 f962 	bl	8008fe0 <__malloc_lock>
 8008d1c:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <_free_r+0x94>)
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	4610      	mov	r0, r2
 8008d22:	b933      	cbnz	r3, 8008d32 <_free_r+0x2e>
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	6014      	str	r4, [r2, #0]
 8008d28:	4628      	mov	r0, r5
 8008d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2e:	f000 b958 	b.w	8008fe2 <__malloc_unlock>
 8008d32:	42a3      	cmp	r3, r4
 8008d34:	d90b      	bls.n	8008d4e <_free_r+0x4a>
 8008d36:	6821      	ldr	r1, [r4, #0]
 8008d38:	1862      	adds	r2, r4, r1
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	bf01      	itttt	eq
 8008d3e:	681a      	ldreq	r2, [r3, #0]
 8008d40:	685b      	ldreq	r3, [r3, #4]
 8008d42:	1852      	addeq	r2, r2, r1
 8008d44:	6022      	streq	r2, [r4, #0]
 8008d46:	6063      	str	r3, [r4, #4]
 8008d48:	6004      	str	r4, [r0, #0]
 8008d4a:	e7ed      	b.n	8008d28 <_free_r+0x24>
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	b10a      	cbz	r2, 8008d56 <_free_r+0x52>
 8008d52:	42a2      	cmp	r2, r4
 8008d54:	d9fa      	bls.n	8008d4c <_free_r+0x48>
 8008d56:	6819      	ldr	r1, [r3, #0]
 8008d58:	1858      	adds	r0, r3, r1
 8008d5a:	42a0      	cmp	r0, r4
 8008d5c:	d10b      	bne.n	8008d76 <_free_r+0x72>
 8008d5e:	6820      	ldr	r0, [r4, #0]
 8008d60:	4401      	add	r1, r0
 8008d62:	1858      	adds	r0, r3, r1
 8008d64:	4282      	cmp	r2, r0
 8008d66:	6019      	str	r1, [r3, #0]
 8008d68:	d1de      	bne.n	8008d28 <_free_r+0x24>
 8008d6a:	6810      	ldr	r0, [r2, #0]
 8008d6c:	6852      	ldr	r2, [r2, #4]
 8008d6e:	4401      	add	r1, r0
 8008d70:	6019      	str	r1, [r3, #0]
 8008d72:	605a      	str	r2, [r3, #4]
 8008d74:	e7d8      	b.n	8008d28 <_free_r+0x24>
 8008d76:	d902      	bls.n	8008d7e <_free_r+0x7a>
 8008d78:	230c      	movs	r3, #12
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	e7d4      	b.n	8008d28 <_free_r+0x24>
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	1821      	adds	r1, r4, r0
 8008d82:	428a      	cmp	r2, r1
 8008d84:	bf01      	itttt	eq
 8008d86:	6811      	ldreq	r1, [r2, #0]
 8008d88:	6852      	ldreq	r2, [r2, #4]
 8008d8a:	1809      	addeq	r1, r1, r0
 8008d8c:	6021      	streq	r1, [r4, #0]
 8008d8e:	6062      	str	r2, [r4, #4]
 8008d90:	605c      	str	r4, [r3, #4]
 8008d92:	e7c9      	b.n	8008d28 <_free_r+0x24>
 8008d94:	bd38      	pop	{r3, r4, r5, pc}
 8008d96:	bf00      	nop
 8008d98:	200002e4 	.word	0x200002e4

08008d9c <_malloc_r>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	1ccd      	adds	r5, r1, #3
 8008da0:	f025 0503 	bic.w	r5, r5, #3
 8008da4:	3508      	adds	r5, #8
 8008da6:	2d0c      	cmp	r5, #12
 8008da8:	bf38      	it	cc
 8008daa:	250c      	movcc	r5, #12
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	4606      	mov	r6, r0
 8008db0:	db01      	blt.n	8008db6 <_malloc_r+0x1a>
 8008db2:	42a9      	cmp	r1, r5
 8008db4:	d903      	bls.n	8008dbe <_malloc_r+0x22>
 8008db6:	230c      	movs	r3, #12
 8008db8:	6033      	str	r3, [r6, #0]
 8008dba:	2000      	movs	r0, #0
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	f000 f90f 	bl	8008fe0 <__malloc_lock>
 8008dc2:	4a21      	ldr	r2, [pc, #132]	; (8008e48 <_malloc_r+0xac>)
 8008dc4:	6814      	ldr	r4, [r2, #0]
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	b991      	cbnz	r1, 8008df0 <_malloc_r+0x54>
 8008dca:	4c20      	ldr	r4, [pc, #128]	; (8008e4c <_malloc_r+0xb0>)
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	b91b      	cbnz	r3, 8008dd8 <_malloc_r+0x3c>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 f83d 	bl	8008e50 <_sbrk_r>
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f000 f838 	bl	8008e50 <_sbrk_r>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d124      	bne.n	8008e2e <_malloc_r+0x92>
 8008de4:	230c      	movs	r3, #12
 8008de6:	4630      	mov	r0, r6
 8008de8:	6033      	str	r3, [r6, #0]
 8008dea:	f000 f8fa 	bl	8008fe2 <__malloc_unlock>
 8008dee:	e7e4      	b.n	8008dba <_malloc_r+0x1e>
 8008df0:	680b      	ldr	r3, [r1, #0]
 8008df2:	1b5b      	subs	r3, r3, r5
 8008df4:	d418      	bmi.n	8008e28 <_malloc_r+0x8c>
 8008df6:	2b0b      	cmp	r3, #11
 8008df8:	d90f      	bls.n	8008e1a <_malloc_r+0x7e>
 8008dfa:	600b      	str	r3, [r1, #0]
 8008dfc:	18cc      	adds	r4, r1, r3
 8008dfe:	50cd      	str	r5, [r1, r3]
 8008e00:	4630      	mov	r0, r6
 8008e02:	f000 f8ee 	bl	8008fe2 <__malloc_unlock>
 8008e06:	f104 000b 	add.w	r0, r4, #11
 8008e0a:	1d23      	adds	r3, r4, #4
 8008e0c:	f020 0007 	bic.w	r0, r0, #7
 8008e10:	1ac3      	subs	r3, r0, r3
 8008e12:	d0d3      	beq.n	8008dbc <_malloc_r+0x20>
 8008e14:	425a      	negs	r2, r3
 8008e16:	50e2      	str	r2, [r4, r3]
 8008e18:	e7d0      	b.n	8008dbc <_malloc_r+0x20>
 8008e1a:	684b      	ldr	r3, [r1, #4]
 8008e1c:	428c      	cmp	r4, r1
 8008e1e:	bf16      	itet	ne
 8008e20:	6063      	strne	r3, [r4, #4]
 8008e22:	6013      	streq	r3, [r2, #0]
 8008e24:	460c      	movne	r4, r1
 8008e26:	e7eb      	b.n	8008e00 <_malloc_r+0x64>
 8008e28:	460c      	mov	r4, r1
 8008e2a:	6849      	ldr	r1, [r1, #4]
 8008e2c:	e7cc      	b.n	8008dc8 <_malloc_r+0x2c>
 8008e2e:	1cc4      	adds	r4, r0, #3
 8008e30:	f024 0403 	bic.w	r4, r4, #3
 8008e34:	42a0      	cmp	r0, r4
 8008e36:	d005      	beq.n	8008e44 <_malloc_r+0xa8>
 8008e38:	1a21      	subs	r1, r4, r0
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f000 f808 	bl	8008e50 <_sbrk_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d0cf      	beq.n	8008de4 <_malloc_r+0x48>
 8008e44:	6025      	str	r5, [r4, #0]
 8008e46:	e7db      	b.n	8008e00 <_malloc_r+0x64>
 8008e48:	200002e4 	.word	0x200002e4
 8008e4c:	200002e8 	.word	0x200002e8

08008e50 <_sbrk_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	2300      	movs	r3, #0
 8008e54:	4c05      	ldr	r4, [pc, #20]	; (8008e6c <_sbrk_r+0x1c>)
 8008e56:	4605      	mov	r5, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	f7f9 fb4a 	bl	80024f4 <_sbrk>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_sbrk_r+0x1a>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_sbrk_r+0x1a>
 8008e68:	602b      	str	r3, [r5, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20000480 	.word	0x20000480

08008e70 <__sread>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	460c      	mov	r4, r1
 8008e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e78:	f000 f8b4 	bl	8008fe4 <_read_r>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	bfab      	itete	ge
 8008e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e82:	89a3      	ldrhlt	r3, [r4, #12]
 8008e84:	181b      	addge	r3, r3, r0
 8008e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e8a:	bfac      	ite	ge
 8008e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e8e:	81a3      	strhlt	r3, [r4, #12]
 8008e90:	bd10      	pop	{r4, pc}

08008e92 <__swrite>:
 8008e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	461f      	mov	r7, r3
 8008e98:	898b      	ldrh	r3, [r1, #12]
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	05db      	lsls	r3, r3, #23
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	4616      	mov	r6, r2
 8008ea2:	d505      	bpl.n	8008eb0 <__swrite+0x1e>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eac:	f000 f886 	bl	8008fbc <_lseek_r>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	4632      	mov	r2, r6
 8008eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec6:	f000 b835 	b.w	8008f34 <_write_r>

08008eca <__sseek>:
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	460c      	mov	r4, r1
 8008ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed2:	f000 f873 	bl	8008fbc <_lseek_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	bf15      	itete	ne
 8008edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ee6:	81a3      	strheq	r3, [r4, #12]
 8008ee8:	bf18      	it	ne
 8008eea:	81a3      	strhne	r3, [r4, #12]
 8008eec:	bd10      	pop	{r4, pc}

08008eee <__sclose>:
 8008eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef2:	f000 b831 	b.w	8008f58 <_close_r>

08008ef6 <strncmp>:
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	b16a      	cbz	r2, 8008f16 <strncmp+0x20>
 8008efa:	3901      	subs	r1, #1
 8008efc:	1884      	adds	r4, r0, r2
 8008efe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008f02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d103      	bne.n	8008f12 <strncmp+0x1c>
 8008f0a:	42a0      	cmp	r0, r4
 8008f0c:	d001      	beq.n	8008f12 <strncmp+0x1c>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f5      	bne.n	8008efe <strncmp+0x8>
 8008f12:	1a98      	subs	r0, r3, r2
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	4610      	mov	r0, r2
 8008f18:	e7fc      	b.n	8008f14 <strncmp+0x1e>

08008f1a <__ascii_wctomb>:
 8008f1a:	b149      	cbz	r1, 8008f30 <__ascii_wctomb+0x16>
 8008f1c:	2aff      	cmp	r2, #255	; 0xff
 8008f1e:	bf8b      	itete	hi
 8008f20:	238a      	movhi	r3, #138	; 0x8a
 8008f22:	700a      	strbls	r2, [r1, #0]
 8008f24:	6003      	strhi	r3, [r0, #0]
 8008f26:	2001      	movls	r0, #1
 8008f28:	bf88      	it	hi
 8008f2a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008f2e:	4770      	bx	lr
 8008f30:	4608      	mov	r0, r1
 8008f32:	4770      	bx	lr

08008f34 <_write_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4605      	mov	r5, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4c05      	ldr	r4, [pc, #20]	; (8008f54 <_write_r+0x20>)
 8008f40:	6022      	str	r2, [r4, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 f888 	bl	8009058 <_write>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_write_r+0x1e>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_write_r+0x1e>
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20000480 	.word	0x20000480

08008f58 <_close_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4c05      	ldr	r4, [pc, #20]	; (8008f74 <_close_r+0x1c>)
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	f000 f850 	bl	8009008 <_close>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_close_r+0x1a>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_close_r+0x1a>
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20000480 	.word	0x20000480

08008f78 <_fstat_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4c06      	ldr	r4, [pc, #24]	; (8008f98 <_fstat_r+0x20>)
 8008f7e:	4605      	mov	r5, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	f000 f847 	bl	8009018 <_fstat>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d102      	bne.n	8008f94 <_fstat_r+0x1c>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	b103      	cbz	r3, 8008f94 <_fstat_r+0x1c>
 8008f92:	602b      	str	r3, [r5, #0]
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	bf00      	nop
 8008f98:	20000480 	.word	0x20000480

08008f9c <_isatty_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4c05      	ldr	r4, [pc, #20]	; (8008fb8 <_isatty_r+0x1c>)
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	f000 f83e 	bl	8009028 <_isatty>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_isatty_r+0x1a>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_isatty_r+0x1a>
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000480 	.word	0x20000480

08008fbc <_lseek_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4c05      	ldr	r4, [pc, #20]	; (8008fdc <_lseek_r+0x20>)
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f000 f834 	bl	8009038 <_lseek>
 8008fd0:	1c43      	adds	r3, r0, #1
 8008fd2:	d102      	bne.n	8008fda <_lseek_r+0x1e>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	b103      	cbz	r3, 8008fda <_lseek_r+0x1e>
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	20000480 	.word	0x20000480

08008fe0 <__malloc_lock>:
 8008fe0:	4770      	bx	lr

08008fe2 <__malloc_unlock>:
 8008fe2:	4770      	bx	lr

08008fe4 <_read_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	4611      	mov	r1, r2
 8008fec:	2200      	movs	r2, #0
 8008fee:	4c05      	ldr	r4, [pc, #20]	; (8009004 <_read_r+0x20>)
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f000 f828 	bl	8009048 <_read>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_read_r+0x1e>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_read_r+0x1e>
 8009000:	602b      	str	r3, [r5, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20000480 	.word	0x20000480

08009008 <_close>:
 8009008:	2258      	movs	r2, #88	; 0x58
 800900a:	4b02      	ldr	r3, [pc, #8]	; (8009014 <_close+0xc>)
 800900c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	4770      	bx	lr
 8009014:	20000480 	.word	0x20000480

08009018 <_fstat>:
 8009018:	2258      	movs	r2, #88	; 0x58
 800901a:	4b02      	ldr	r3, [pc, #8]	; (8009024 <_fstat+0xc>)
 800901c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	4770      	bx	lr
 8009024:	20000480 	.word	0x20000480

08009028 <_isatty>:
 8009028:	2258      	movs	r2, #88	; 0x58
 800902a:	4b02      	ldr	r3, [pc, #8]	; (8009034 <_isatty+0xc>)
 800902c:	2000      	movs	r0, #0
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20000480 	.word	0x20000480

08009038 <_lseek>:
 8009038:	2258      	movs	r2, #88	; 0x58
 800903a:	4b02      	ldr	r3, [pc, #8]	; (8009044 <_lseek+0xc>)
 800903c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	4770      	bx	lr
 8009044:	20000480 	.word	0x20000480

08009048 <_read>:
 8009048:	2258      	movs	r2, #88	; 0x58
 800904a:	4b02      	ldr	r3, [pc, #8]	; (8009054 <_read+0xc>)
 800904c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	4770      	bx	lr
 8009054:	20000480 	.word	0x20000480

08009058 <_write>:
 8009058:	2258      	movs	r2, #88	; 0x58
 800905a:	4b02      	ldr	r3, [pc, #8]	; (8009064 <_write+0xc>)
 800905c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	4770      	bx	lr
 8009064:	20000480 	.word	0x20000480

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
