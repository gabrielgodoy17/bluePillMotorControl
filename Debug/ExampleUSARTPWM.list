
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006cc8  08006cc8  00016cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c0  080070c0  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  080070c0  080070c0  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070c0  080070c0  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c0  080070c0  000170c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080070c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000208  080072d0  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080072d0  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb91  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4f  00000000  00000000  0002bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002d818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002e438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018614  00000000  00000000  0002ef80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094c7  00000000  00000000  00047594  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b7f6  00000000  00000000  00050a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  000dc2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000e030c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000e03a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cb0 	.word	0x08006cb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08006cb0 	.word	0x08006cb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
//			break;
	}

}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8000ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6178      	str	r0, [r7, #20]
	if(htim->Instance == TIM1){
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a98      	ldr	r2, [pc, #608]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	f040 82f2 	bne.w	80010c2 <HAL_TIM_PeriodElapsedCallback+0x5fa>
		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 8000ade:	4b97      	ldr	r3, [pc, #604]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b94      	ldr	r3, [pc, #592]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af2:	4413      	add	r3, r2
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000af8:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 8000afa:	4b92      	ldr	r3, [pc, #584]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b92      	ldr	r3, [pc, #584]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc7d 	bl	8000404 <__aeabi_i2d>
 8000b0a:	4b90      	ldr	r3, [pc, #576]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b0c:	cb18      	ldmia	r3, {r3, r4}
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4623      	mov	r3, r4
 8000b12:	f7ff fe0b 	bl	800072c <__aeabi_ddiv>
 8000b16:	4603      	mov	r3, r0
 8000b18:	460c      	mov	r4, r1
 8000b1a:	4a8d      	ldr	r2, [pc, #564]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b1c:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 8000b20:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b26:	a382      	add	r3, pc, #520	; (adr r3, 8000d30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fdfe 	bl	800072c <__aeabi_ddiv>
 8000b30:	4603      	mov	r3, r0
 8000b32:	460c      	mov	r4, r1
 8000b34:	4618      	mov	r0, r3
 8000b36:	4621      	mov	r1, r4
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b85      	ldr	r3, [pc, #532]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b3e:	f7ff fccb 	bl	80004d8 <__aeabi_dmul>
 8000b42:	4603      	mov	r3, r0
 8000b44:	460c      	mov	r4, r1
 8000b46:	4a84      	ldr	r2, [pc, #528]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b48:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8000b4c:	4b7d      	ldr	r3, [pc, #500]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a7d      	ldr	r2, [pc, #500]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000b52:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 8000b54:	4b81      	ldr	r3, [pc, #516]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	4413      	add	r3, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b7d      	ldr	r3, [pc, #500]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b6e:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 8000b70:	4b7c      	ldr	r3, [pc, #496]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b7c      	ldr	r3, [pc, #496]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fc42 	bl	8000404 <__aeabi_i2d>
 8000b80:	4b72      	ldr	r3, [pc, #456]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b82:	cb18      	ldmia	r3, {r3, r4}
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	f7ff fdd0 	bl	800072c <__aeabi_ddiv>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	460c      	mov	r4, r1
 8000b90:	4a76      	ldr	r2, [pc, #472]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b92:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 8000b96:	4b75      	ldr	r3, [pc, #468]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b9c:	a364      	add	r3, pc, #400	; (adr r3, 8000d30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba2:	f7ff fdc3 	bl	800072c <__aeabi_ddiv>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460c      	mov	r4, r1
 8000baa:	4618      	mov	r0, r3
 8000bac:	4621      	mov	r1, r4
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	4b68      	ldr	r3, [pc, #416]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	460c      	mov	r4, r1
 8000bbc:	4a6c      	ldr	r2, [pc, #432]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000bbe:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 8000bc2:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a68      	ldr	r2, [pc, #416]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000bc8:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 8000bca:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	f040 82b6 	bne.w	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bda:	4b5f      	ldr	r3, [pc, #380]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000bdc:	cb18      	ldmia	r3, {r3, r4}
 8000bde:	461a      	mov	r2, r3
 8000be0:	4623      	mov	r3, r4
 8000be2:	f7ff fac1 	bl	8000168 <__aeabi_dsub>
 8000be6:	4603      	mov	r3, r0
 8000be8:	460c      	mov	r4, r1
 8000bea:	4a64      	ldr	r2, [pc, #400]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bec:	e9c2 3400 	strd	r3, r4, [r2]
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//			}else if(error_vel_act>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
			if(stop1==1){
 8000bf0:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d106      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x13e>
			  Ui_anterior=0;
 8000bf8:	4a62      	ldr	r2, [pc, #392]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	f04f 0400 	mov.w	r4, #0
 8000c02:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 8000c06:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc0c 	bl	8000428 <__aeabi_f2d>
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c12:	cb18      	ldmia	r3, {r3, r4}
 8000c14:	461a      	mov	r2, r3
 8000c16:	4623      	mov	r3, r4
 8000c18:	f7ff fc5e 	bl	80004d8 <__aeabi_dmul>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	460c      	mov	r4, r1
 8000c20:	4a5a      	ldr	r2, [pc, #360]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c22:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_ant);
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fbfc 	bl	8000428 <__aeabi_f2d>
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c32:	cb18      	ldmia	r3, {r3, r4}
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	f7ff fc4e 	bl	80004d8 <__aeabi_dmul>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	460c      	mov	r4, r1
 8000c40:	4618      	mov	r0, r3
 8000c42:	4621      	mov	r1, r4
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c46:	cb18      	ldmia	r3, {r3, r4}
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	f7ff fc44 	bl	80004d8 <__aeabi_dmul>
 8000c50:	4603      	mov	r3, r0
 8000c52:	460c      	mov	r4, r1
 8000c54:	4618      	mov	r0, r3
 8000c56:	4621      	mov	r1, r4
 8000c58:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c5a:	cb18      	ldmia	r3, {r3, r4}
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f7ff fa84 	bl	800016c <__adddf3>
 8000c64:	4603      	mov	r3, r0
 8000c66:	460c      	mov	r4, r1
 8000c68:	4a4b      	ldr	r2, [pc, #300]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c6a:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbd8 	bl	8000428 <__aeabi_f2d>
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c7a:	cb18      	ldmia	r3, {r3, r4}
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4623      	mov	r3, r4
 8000c80:	f7ff fd54 	bl	800072c <__aeabi_ddiv>
 8000c84:	4603      	mov	r3, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	461d      	mov	r5, r3
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c92:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c94:	cb18      	ldmia	r3, {r3, r4}
 8000c96:	461a      	mov	r2, r3
 8000c98:	4623      	mov	r3, r4
 8000c9a:	f7ff fa65 	bl	8000168 <__aeabi_dsub>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460c      	mov	r4, r1
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	4631      	mov	r1, r6
 8000caa:	f7ff fc15 	bl	80004d8 <__aeabi_dmul>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460c      	mov	r4, r1
 8000cb2:	4a3b      	ldr	r2, [pc, #236]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cb4:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna>0){
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	f7ff fe97 	bl	80009f8 <__aeabi_dcmpgt>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d06b      	beq.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid +(Up + Ui_actual + Ud));
 8000cd0:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb85 	bl	80003e4 <__aeabi_ui2d>
 8000cda:	4605      	mov	r5, r0
 8000cdc:	460e      	mov	r6, r1
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ce6:	cb18      	ldmia	r3, {r3, r4}
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4623      	mov	r3, r4
 8000cec:	f7ff fa3e 	bl	800016c <__adddf3>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	4621      	mov	r1, r4
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cfa:	cb18      	ldmia	r3, {r3, r4}
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4623      	mov	r3, r4
 8000d00:	f7ff fa34 	bl	800016c <__adddf3>
 8000d04:	4603      	mov	r3, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	4631      	mov	r1, r6
 8000d10:	f7ff fa2c 	bl	800016c <__adddf3>
 8000d14:	4603      	mov	r3, r0
 8000d16:	460c      	mov	r4, r1
 8000d18:	469a      	mov	sl, r3
 8000d1a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8000d1e:	4650      	mov	r0, sl
 8000d20:	4659      	mov	r1, fp
 8000d22:	f7ff feb1 	bl	8000a88 <__aeabi_d2uiz>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e07a      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x35c>
 8000d2e:	bf00      	nop
 8000d30:	00000000 	.word	0x00000000
 8000d34:	40bce000 	.word	0x40bce000
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	20000224 	.word	0x20000224
 8000d40:	20000388 	.word	0x20000388
 8000d44:	2000022c 	.word	0x2000022c
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000240 	.word	0x20000240
 8000d54:	404e0000 	.word	0x404e0000
 8000d58:	20000248 	.word	0x20000248
 8000d5c:	20000230 	.word	0x20000230
 8000d60:	2000033c 	.word	0x2000033c
 8000d64:	20000238 	.word	0x20000238
 8000d68:	20000234 	.word	0x20000234
 8000d6c:	20000250 	.word	0x20000250
 8000d70:	20000258 	.word	0x20000258
 8000d74:	20000020 	.word	0x20000020
 8000d78:	20000280 	.word	0x20000280
 8000d7c:	20000260 	.word	0x20000260
 8000d80:	20000024 	.word	0x20000024
 8000d84:	20000290 	.word	0x20000290
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200002a0 	.word	0x200002a0
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20000268 	.word	0x20000268
 8000d98:	20000298 	.word	0x20000298
 8000d9c:	20000010 	.word	0x20000010
 8000da0:	200002a8 	.word	0x200002a8
 8000da4:	200002d0 	.word	0x200002d0
			}else if(velocidad_consigna<0){
 8000da8:	4ba0      	ldr	r3, [pc, #640]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	f7ff fe01 	bl	80009bc <__aeabi_dcmplt>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02e      	beq.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x356>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid -(Up + Ui_actual + Ud));
 8000dc0:	4b9b      	ldr	r3, [pc, #620]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fb0d 	bl	80003e4 <__aeabi_ui2d>
 8000dca:	4605      	mov	r5, r0
 8000dcc:	460e      	mov	r6, r1
 8000dce:	4b99      	ldr	r3, [pc, #612]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd4:	4b98      	ldr	r3, [pc, #608]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000dd6:	cb18      	ldmia	r3, {r3, r4}
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4623      	mov	r3, r4
 8000ddc:	f7ff f9c6 	bl	800016c <__adddf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	4618      	mov	r0, r3
 8000de6:	4621      	mov	r1, r4
 8000de8:	4b94      	ldr	r3, [pc, #592]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000dea:	cb18      	ldmia	r3, {r3, r4}
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	f7ff f9bc 	bl	800016c <__adddf3>
 8000df4:	4603      	mov	r3, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	4631      	mov	r1, r6
 8000e00:	f7ff f9b2 	bl	8000168 <__aeabi_dsub>
 8000e04:	4603      	mov	r3, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	4698      	mov	r8, r3
 8000e0a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8000e0e:	4640      	mov	r0, r8
 8000e10:	4649      	mov	r1, r9
 8000e12:	f7ff fe39 	bl	8000a88 <__aeabi_d2uiz>
 8000e16:	4602      	mov	r2, r0
 8000e18:	4b85      	ldr	r3, [pc, #532]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e002      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x35c>
			}else{
				duty_cycle_pid = 0;
 8000e1e:	4b84      	ldr	r3, [pc, #528]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
			}
      if(duty_cycle_pid > 14000){
 8000e24:	4b82      	ldr	r3, [pc, #520]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d903      	bls.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x370>
				duty_cycle_pid=14000;
 8000e30:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e32:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000e36:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8000e38:	4b81      	ldr	r3, [pc, #516]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a7c      	ldr	r2, [pc, #496]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8000e42:	4b7d      	ldr	r3, [pc, #500]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e44:	cb18      	ldmia	r3, {r3, r4}
 8000e46:	4a7f      	ldr	r2, [pc, #508]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000e48:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 8000e4c:	4b7e      	ldr	r3, [pc, #504]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000e4e:	cb18      	ldmia	r3, {r3, r4}
 8000e50:	4a7e      	ldr	r2, [pc, #504]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000e52:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 8000e56:	4b7e      	ldr	r3, [pc, #504]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e5c:	4b7d      	ldr	r3, [pc, #500]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000e5e:	cb18      	ldmia	r3, {r3, r4}
 8000e60:	461a      	mov	r2, r3
 8000e62:	4623      	mov	r3, r4
 8000e64:	f7ff f980 	bl	8000168 <__aeabi_dsub>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4a7a      	ldr	r2, [pc, #488]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e6e:	e9c2 3400 	strd	r3, r4, [r2]
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
//			}else if(error_vel_act2>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
//     }
			if(stop2==1){
 8000e72:	4b7a      	ldr	r3, [pc, #488]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d106      	bne.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				Ui_anterior2=0;
 8000e7a:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	f04f 0400 	mov.w	r4, #0
 8000e84:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2=KP2 * error_vel_act2;
 8000e88:	4b76      	ldr	r3, [pc, #472]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff facb 	bl	8000428 <__aeabi_f2d>
 8000e92:	4b71      	ldr	r3, [pc, #452]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000e94:	cb18      	ldmia	r3, {r3, r4}
 8000e96:	461a      	mov	r2, r3
 8000e98:	4623      	mov	r3, r4
 8000e9a:	f7ff fb1d 	bl	80004d8 <__aeabi_dmul>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	4a71      	ldr	r2, [pc, #452]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000ea4:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 8000ea8:	4b70      	ldr	r3, [pc, #448]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fabb 	bl	8000428 <__aeabi_f2d>
 8000eb2:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000eb4:	cb18      	ldmia	r3, {r3, r4}
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff fb0d 	bl	80004d8 <__aeabi_dmul>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000ec8:	cb18      	ldmia	r3, {r3, r4}
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4623      	mov	r3, r4
 8000ece:	f7ff fb03 	bl	80004d8 <__aeabi_dmul>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	4621      	mov	r1, r4
 8000eda:	4b61      	ldr	r3, [pc, #388]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000edc:	cb18      	ldmia	r3, {r3, r4}
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4623      	mov	r3, r4
 8000ee2:	f7ff f943 	bl	800016c <__adddf3>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4a63      	ldr	r2, [pc, #396]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000eec:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 8000ef0:	4b62      	ldr	r3, [pc, #392]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fa97 	bl	8000428 <__aeabi_f2d>
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000efc:	cb18      	ldmia	r3, {r3, r4}
 8000efe:	461a      	mov	r2, r3
 8000f00:	4623      	mov	r3, r4
 8000f02:	f7ff fc13 	bl	800072c <__aeabi_ddiv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	460c      	mov	r4, r1
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	4626      	mov	r6, r4
 8000f0e:	4b52      	ldr	r3, [pc, #328]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000f16:	cb18      	ldmia	r3, {r3, r4}
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	f7ff f924 	bl	8000168 <__aeabi_dsub>
 8000f20:	4603      	mov	r3, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	461a      	mov	r2, r3
 8000f26:	4623      	mov	r3, r4
 8000f28:	4628      	mov	r0, r5
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	f7ff fad4 	bl	80004d8 <__aeabi_dmul>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4a52      	ldr	r2, [pc, #328]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000f36:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna2 > 0){
 8000f3a:	4b45      	ldr	r3, [pc, #276]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	f7ff fd56 	bl	80009f8 <__aeabi_dcmpgt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02f      	beq.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x4ea>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 +(Up2 + Ui_actual2 + Ud2));
 8000f52:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa44 	bl	80003e4 <__aeabi_ui2d>
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	460e      	mov	r6, r1
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000f68:	cb18      	ldmia	r3, {r3, r4}
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	f7ff f8fd 	bl	800016c <__adddf3>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	4618      	mov	r0, r3
 8000f78:	4621      	mov	r1, r4
 8000f7a:	4b41      	ldr	r3, [pc, #260]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000f7c:	cb18      	ldmia	r3, {r3, r4}
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4623      	mov	r3, r4
 8000f82:	f7ff f8f3 	bl	800016c <__adddf3>
 8000f86:	4603      	mov	r3, r0
 8000f88:	460c      	mov	r4, r1
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	4628      	mov	r0, r5
 8000f90:	4631      	mov	r1, r6
 8000f92:	f7ff f8eb 	bl	800016c <__adddf3>
 8000f96:	4603      	mov	r3, r0
 8000f98:	460c      	mov	r4, r1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa6:	f7ff fd6f 	bl	8000a88 <__aeabi_d2uiz>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e06d      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x5c6>
			}else if(velocidad_consigna2 < 0){
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	f7ff fcfc 	bl	80009bc <__aeabi_dcmplt>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d05e      	beq.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x5c0>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 -(Up2 + Ui_actual2 + Ud2));
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa08 	bl	80003e4 <__aeabi_ui2d>
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	460e      	mov	r6, r1
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fe0:	cb18      	ldmia	r3, {r3, r4}
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	f7ff f8c1 	bl	800016c <__adddf3>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000ff4:	cb18      	ldmia	r3, {r3, r4}
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	f7ff f8b7 	bl	800016c <__adddf3>
 8000ffe:	4603      	mov	r3, r0
 8001000:	460c      	mov	r4, r1
 8001002:	461a      	mov	r2, r3
 8001004:	4623      	mov	r3, r4
 8001006:	4628      	mov	r0, r5
 8001008:	4631      	mov	r1, r6
 800100a:	f7ff f8ad 	bl	8000168 <__aeabi_dsub>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800101e:	f7ff fd33 	bl	8000a88 <__aeabi_d2uiz>
 8001022:	4602      	mov	r2, r0
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e031      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x5c6>
 800102a:	bf00      	nop
 800102c:	20000280 	.word	0x20000280
 8001030:	200002d0 	.word	0x200002d0
 8001034:	200002a0 	.word	0x200002a0
 8001038:	20000298 	.word	0x20000298
 800103c:	200002a8 	.word	0x200002a8
 8001040:	20000444 	.word	0x20000444
 8001044:	20000290 	.word	0x20000290
 8001048:	20000260 	.word	0x20000260
 800104c:	20000268 	.word	0x20000268
 8001050:	20000288 	.word	0x20000288
 8001054:	20000258 	.word	0x20000258
 8001058:	20000270 	.word	0x20000270
 800105c:	20000028 	.word	0x20000028
 8001060:	200002b0 	.word	0x200002b0
 8001064:	20000014 	.word	0x20000014
 8001068:	200002c0 	.word	0x200002c0
 800106c:	20000018 	.word	0x20000018
 8001070:	20000000 	.word	0x20000000
 8001074:	20000278 	.word	0x20000278
 8001078:	200002b8 	.word	0x200002b8
 800107c:	2000001c 	.word	0x2000001c
 8001080:	200002c8 	.word	0x200002c8
 8001084:	200002d4 	.word	0x200002d4
			}else{
				duty_cycle_pid2 = 0;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
			}
			if(duty_cycle_pid2 > 14000){
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001096:	4293      	cmp	r3, r2
 8001098:	d903      	bls.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x5da>
				duty_cycle_pid2=14000;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800109c:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80010a0:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a29      	ldr	r2, [pc, #164]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80010ae:	cb18      	ldmia	r3, {r3, r4}
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80010b2:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x694>)
 80010b8:	cb18      	ldmia	r3, {r3, r4}
 80010ba:	4a29      	ldr	r2, [pc, #164]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80010bc:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 80010c0:	e03e      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM3){
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d11a      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x63a>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	085b      	lsrs	r3, r3, #1
 80010da:	429a      	cmp	r2, r3
 80010dc:	d908      	bls.n	80010f0 <HAL_TIM_PeriodElapsedCallback+0x628>
			contOUFlow--;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010e6:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 80010e8:	4821      	ldr	r0, [pc, #132]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80010ea:	f004 f83b 	bl	8005164 <puts>
}
 80010ee:	e027      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow++;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80010f8:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 80010fa:	481e      	ldr	r0, [pc, #120]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80010fc:	f004 f832 	bl	8005164 <puts>
}
 8001100:	e01e      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM4){
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d119      	bne.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	429a      	cmp	r2, r3
 800111c:	d908      	bls.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x668>
			contOUFlow2--;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3b01      	subs	r3, #1
 8001124:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001126:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 8001128:	4816      	ldr	r0, [pc, #88]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800112a:	f004 f81b 	bl	8005164 <puts>
}
 800112e:	e007      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow2++;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001138:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800113c:	f004 f812 	bl	8005164 <puts>
}
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114a:	bf00      	nop
 800114c:	200002d4 	.word	0x200002d4
 8001150:	20000444 	.word	0x20000444
 8001154:	200002b8 	.word	0x200002b8
 8001158:	200002b0 	.word	0x200002b0
 800115c:	20000270 	.word	0x20000270
 8001160:	20000278 	.word	0x20000278
 8001164:	40000400 	.word	0x40000400
 8001168:	20000388 	.word	0x20000388
 800116c:	20000224 	.word	0x20000224
 8001170:	08006db8 	.word	0x08006db8
 8001174:	08006dcc 	.word	0x08006dcc
 8001178:	40000800 	.word	0x40000800
 800117c:	2000033c 	.word	0x2000033c
 8001180:	20000230 	.word	0x20000230
 8001184:	08006de0 	.word	0x08006de0
 8001188:	08006df4 	.word	0x08006df4

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 fe2f 	bl	8001df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f8b7 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 faf7 	bl	800178c <MX_GPIO_Init>
  MX_TIM2_Init();
 800119e:	f000 f9cd 	bl	800153c <MX_TIM2_Init>
  MX_TIM1_Init();
 80011a2:	f000 f92d 	bl	8001400 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011a6:	f000 fa49 	bl	800163c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011aa:	f000 fa9b 	bl	80016e4 <MX_TIM4_Init>
  MX_SPI2_Init();
 80011ae:	f000 f8f1 	bl	8001394 <MX_SPI2_Init>

	//RetargetInit(&huart2);
	//HAL_UART_Receive_IT(&huart2, &byte, 1);
    //HAL_SPI_Receive_IT(&hspi2, &byte, 1);

	HAL_TIM_Base_Start_IT(&htim1);
 80011b2:	484b      	ldr	r0, [pc, #300]	; (80012e0 <main+0x154>)
 80011b4:	f002 f988 	bl	80034c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	4849      	ldr	r0, [pc, #292]	; (80012e0 <main+0x154>)
 80011bc:	f002 fa2e 	bl	800361c <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 80011c0:	4848      	ldr	r0, [pc, #288]	; (80012e4 <main+0x158>)
 80011c2:	f002 f937 	bl	8003434 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80011c6:	2100      	movs	r1, #0
 80011c8:	4846      	ldr	r0, [pc, #280]	; (80012e4 <main+0x158>)
 80011ca:	f002 fb67 	bl	800389c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80011ce:	2108      	movs	r1, #8
 80011d0:	4844      	ldr	r0, [pc, #272]	; (80012e4 <main+0x158>)
 80011d2:	f002 fb63 	bl	800389c <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80011d6:	4844      	ldr	r0, [pc, #272]	; (80012e8 <main+0x15c>)
 80011d8:	f002 f976 	bl	80034c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80011dc:	213c      	movs	r1, #60	; 0x3c
 80011de:	4842      	ldr	r0, [pc, #264]	; (80012e8 <main+0x15c>)
 80011e0:	f002 fce6 	bl	8003bb0 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 80011e4:	4841      	ldr	r0, [pc, #260]	; (80012ec <main+0x160>)
 80011e6:	f002 f96f 	bl	80034c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80011ea:	213c      	movs	r1, #60	; 0x3c
 80011ec:	483f      	ldr	r0, [pc, #252]	; (80012ec <main+0x160>)
 80011ee:	f002 fcdf 	bl	8003bb0 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	483e      	ldr	r0, [pc, #248]	; (80012f0 <main+0x164>)
 80011f8:	f001 f95e 	bl	80024b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2120      	movs	r1, #32
 8001200:	483b      	ldr	r0, [pc, #236]	; (80012f0 <main+0x164>)
 8001202:	f001 f959 	bl	80024b8 <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120c:	4838      	ldr	r0, [pc, #224]	; (80012f0 <main+0x164>)
 800120e:	f001 f953 	bl	80024b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001218:	4835      	ldr	r0, [pc, #212]	; (80012f0 <main+0x164>)
 800121a:	f001 f94d 	bl	80024b8 <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <main+0x15c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <main+0x160>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t intBuffer[10] = {':','w','1','+','2','5','\n'};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	811a      	strh	r2, [r3, #8]
 8001238:	233a      	movs	r3, #58	; 0x3a
 800123a:	713b      	strb	r3, [r7, #4]
 800123c:	2377      	movs	r3, #119	; 0x77
 800123e:	717b      	strb	r3, [r7, #5]
 8001240:	2331      	movs	r3, #49	; 0x31
 8001242:	71bb      	strb	r3, [r7, #6]
 8001244:	232b      	movs	r3, #43	; 0x2b
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	2332      	movs	r3, #50	; 0x32
 800124a:	723b      	strb	r3, [r7, #8]
 800124c:	2335      	movs	r3, #53	; 0x35
 800124e:	727b      	strb	r3, [r7, #9]
 8001250:	230a      	movs	r3, #10
 8001252:	72bb      	strb	r3, [r7, #10]
	buffer[0]=':';
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <main+0x168>)
 8001256:	223a      	movs	r2, #58	; 0x3a
 8001258:	701a      	strb	r2, [r3, #0]
	buffer[1]='w';
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <main+0x168>)
 800125c:	2277      	movs	r2, #119	; 0x77
 800125e:	705a      	strb	r2, [r3, #1]
	buffer[2]='1';
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <main+0x168>)
 8001262:	2231      	movs	r2, #49	; 0x31
 8001264:	709a      	strb	r2, [r3, #2]
	buffer[3]='+';
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <main+0x168>)
 8001268:	222b      	movs	r2, #43	; 0x2b
 800126a:	70da      	strb	r2, [r3, #3]
	buffer[4]='2';
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <main+0x168>)
 800126e:	2232      	movs	r2, #50	; 0x32
 8001270:	711a      	strb	r2, [r3, #4]
	buffer[5]='5';
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <main+0x168>)
 8001274:	2235      	movs	r2, #53	; 0x35
 8001276:	715a      	strb	r2, [r3, #5]
	buffer[6]='\n';
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <main+0x168>)
 800127a:	220a      	movs	r2, #10
 800127c:	719a      	strb	r2, [r3, #6]
	byte=':';
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <main+0x16c>)
 8001280:	223a      	movs	r2, #58	; 0x3a
 8001282:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800128a:	481c      	ldr	r0, [pc, #112]	; (80012fc <main+0x170>)
 800128c:	f001 f914 	bl	80024b8 <HAL_GPIO_WritePin>
	while (1) {
		//transmision spi

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001296:	4819      	ldr	r0, [pc, #100]	; (80012fc <main+0x170>)
 8001298:	f001 f90e 	bl	80024b8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &intBuffer[0], 7,1);
 800129c:	1d39      	adds	r1, r7, #4
 800129e:	2301      	movs	r3, #1
 80012a0:	2207      	movs	r2, #7
 80012a2:	4817      	ldr	r0, [pc, #92]	; (8001300 <main+0x174>)
 80012a4:	f001 fd8e 	bl	8002dc4 <HAL_SPI_Transmit>
		HAL_Delay(100);
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f000 fe05 	bl	8001eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b4:	4811      	ldr	r0, [pc, #68]	; (80012fc <main+0x170>)
 80012b6:	f001 f8ff 	bl	80024b8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <main+0x178>)
 80012c2:	f001 f8f9 	bl	80024b8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f000 fdf6 	bl	8001eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <main+0x178>)
 80012d4:	f001 f8f0 	bl	80024b8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80012d8:	2064      	movs	r0, #100	; 0x64
 80012da:	f000 fded 	bl	8001eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80012de:	e7d7      	b.n	8001290 <main+0x104>
 80012e0:	200003fc 	.word	0x200003fc
 80012e4:	20000444 	.word	0x20000444
 80012e8:	20000388 	.word	0x20000388
 80012ec:	2000033c 	.word	0x2000033c
 80012f0:	40010800 	.word	0x40010800
 80012f4:	200003d0 	.word	0x200003d0
 80012f8:	200003f8 	.word	0x200003f8
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	200002e4 	.word	0x200002e4
 8001304:	40011000 	.word	0x40011000

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b090      	sub	sp, #64	; 0x40
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	2228      	movs	r2, #40	; 0x28
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fb82 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001332:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001346:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f001 f8c9 	bl	80024e8 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800135c:	f000 fa9c 	bl	8001898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fb34 	bl	80029e8 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001386:	f000 fa87 	bl	8001898 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3740      	adds	r7, #64	; 0x40
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_SPI2_Init+0x64>)
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <MX_SPI2_Init+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013c8:	2238      	movs	r2, #56	; 0x38
 80013ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013e0:	220a      	movs	r2, #10
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_SPI2_Init+0x64>)
 80013e6:	f001 fc69 	bl	8002cbc <HAL_SPI_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013f0:	f000 fa52 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200002e4 	.word	0x200002e4
 80013fc:	40003800 	.word	0x40003800

08001400 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b096      	sub	sp, #88	; 0x58
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2220      	movs	r2, #32
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f003 faf1 	bl	8004a20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <MX_TIM1_Init+0x134>)
 8001440:	4a3d      	ldr	r2, [pc, #244]	; (8001538 <MX_TIM1_Init+0x138>)
 8001442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <MX_TIM1_Init+0x134>)
 8001446:	220b      	movs	r2, #11
 8001448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <MX_TIM1_Init+0x134>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <MX_TIM1_Init+0x134>)
 8001452:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001456:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <MX_TIM1_Init+0x134>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800145e:	4b35      	ldr	r3, [pc, #212]	; (8001534 <MX_TIM1_Init+0x134>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <MX_TIM1_Init+0x134>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800146a:	4832      	ldr	r0, [pc, #200]	; (8001534 <MX_TIM1_Init+0x134>)
 800146c:	f001 ff92 	bl	8003394 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001476:	f000 fa0f 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001484:	4619      	mov	r1, r3
 8001486:	482b      	ldr	r0, [pc, #172]	; (8001534 <MX_TIM1_Init+0x134>)
 8001488:	f002 fe5e 	bl	8004148 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001492:	f000 fa01 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001496:	4827      	ldr	r0, [pc, #156]	; (8001534 <MX_TIM1_Init+0x134>)
 8001498:	f002 f868 	bl	800356c <HAL_TIM_OC_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014a2:	f000 f9f9 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b2:	4619      	mov	r1, r3
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <MX_TIM1_Init+0x134>)
 80014b6:	f003 f9c7 	bl	8004848 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014c0:	f000 f9ea 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4812      	ldr	r0, [pc, #72]	; (8001534 <MX_TIM1_Init+0x134>)
 80014ea:	f002 fd17 	bl	8003f1c <HAL_TIM_OC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014f4:	f000 f9d0 	bl	8001898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_TIM1_Init+0x134>)
 800151c:	f003 f9f2 	bl	8004904 <HAL_TIMEx_ConfigBreakDeadTime>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001526:	f000 f9b7 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3758      	adds	r7, #88	; 0x58
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200003fc 	.word	0x200003fc
 8001538:	40012c00 	.word	0x40012c00

0800153c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800156c:	4b32      	ldr	r3, [pc, #200]	; (8001638 <MX_TIM2_Init+0xfc>)
 800156e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001574:	4b30      	ldr	r3, [pc, #192]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <MX_TIM2_Init+0xfc>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001582:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <MX_TIM2_Init+0xfc>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001594:	4828      	ldr	r0, [pc, #160]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001596:	f001 fefd 	bl	8003394 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015a0:	f000 f97a 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4821      	ldr	r0, [pc, #132]	; (8001638 <MX_TIM2_Init+0xfc>)
 80015b2:	f002 fdc9 	bl	8004148 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015bc:	f000 f96c 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015c0:	481d      	ldr	r0, [pc, #116]	; (8001638 <MX_TIM2_Init+0xfc>)
 80015c2:	f002 f913 	bl	80037ec <HAL_TIM_PWM_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015cc:	f000 f964 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4619      	mov	r1, r3
 80015de:	4816      	ldr	r0, [pc, #88]	; (8001638 <MX_TIM2_Init+0xfc>)
 80015e0:	f003 f932 	bl	8004848 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015ea:	f000 f955 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ee:	2360      	movs	r3, #96	; 0x60
 80015f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <MX_TIM2_Init+0xfc>)
 8001606:	f002 fce1 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001610:	f000 f942 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2208      	movs	r2, #8
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM2_Init+0xfc>)
 800161c:	f002 fcd6 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001626:	f000 f937 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM2_Init+0xfc>)
 800162c:	f000 fa8c 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 8001630:	bf00      	nop
 8001632:	3738      	adds	r7, #56	; 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000444 	.word	0x20000444

0800163c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f003 f9e8 	bl	8004a20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <MX_TIM3_Init+0xa0>)
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <MX_TIM3_Init+0xa4>)
 800165c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <MX_TIM3_Init+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_TIM3_Init+0xa0>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <MX_TIM3_Init+0xa0>)
 800166c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001670:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_TIM3_Init+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_TIM3_Init+0xa0>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800167e:	2303      	movs	r3, #3
 8001680:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001696:	2301      	movs	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_TIM3_Init+0xa0>)
 80016aa:	f002 f9df 	bl	8003a6c <HAL_TIM_Encoder_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f000 f8f0 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_TIM3_Init+0xa0>)
 80016c6:	f003 f8bf 	bl	8004848 <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016d0:	f000 f8e2 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3730      	adds	r7, #48	; 0x30
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000388 	.word	0x20000388
 80016e0:	40000400 	.word	0x40000400

080016e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2224      	movs	r2, #36	; 0x24
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 f994 	bl	8004a20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_TIM4_Init+0xa0>)
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <MX_TIM4_Init+0xa4>)
 8001704:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <MX_TIM4_Init+0xa0>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM4_Init+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM4_Init+0xa0>)
 8001714:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001718:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM4_Init+0xa0>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_TIM4_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800172e:	2301      	movs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800173e:	2301      	movs	r3, #1
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_TIM4_Init+0xa0>)
 8001752:	f002 f98b 	bl	8003a6c <HAL_TIM_Encoder_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800175c:	f000 f89c 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_TIM4_Init+0xa0>)
 800176e:	f003 f86b 	bl	8004848 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001778:	f000 f88e 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3730      	adds	r7, #48	; 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000033c 	.word	0x2000033c
 8001788:	40000800 	.word	0x40000800

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	4b39      	ldr	r3, [pc, #228]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a38      	ldr	r2, [pc, #224]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b8:	4b33      	ldr	r3, [pc, #204]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a32      	ldr	r2, [pc, #200]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017be:	f043 0320 	orr.w	r3, r3, #32
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a26      	ldr	r2, [pc, #152]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <MX_GPIO_Init+0xfc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_GPIO_Init+0x100>)
 8001808:	f000 fe56 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001812:	481f      	ldr	r0, [pc, #124]	; (8001890 <MX_GPIO_Init+0x104>)
 8001814:	f000 fe50 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181e:	481d      	ldr	r0, [pc, #116]	; (8001894 <MX_GPIO_Init+0x108>)
 8001820:	f000 fe4a 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2302      	movs	r3, #2
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_GPIO_Init+0x100>)
 800183e:	f000 fce1 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 8001842:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2302      	movs	r3, #2
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_GPIO_Init+0x104>)
 800185c:	f000 fcd2 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2302      	movs	r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4619      	mov	r1, r3
 8001878:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_GPIO_Init+0x108>)
 800187a:	f000 fcc3 	bl	8002204 <HAL_GPIO_Init>

}
 800187e:	bf00      	nop
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40011000 	.word	0x40011000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_MspInit+0x5c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <HAL_MspInit+0x5c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_MspInit+0x5c>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_MspInit+0x5c>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_MspInit+0x5c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_MspInit+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_MspInit+0x60>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_MspInit+0x60>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000

08001908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <HAL_SPI_MspInit+0x9c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d139      	bne.n	800199c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <HAL_SPI_MspInit+0xa0>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <HAL_SPI_MspInit+0xa0>)
 800192e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001932:	61d3      	str	r3, [r2, #28]
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_SPI_MspInit+0xa0>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_SPI_MspInit+0xa0>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_SPI_MspInit+0xa0>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_SPI_MspInit+0xa0>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001958:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800195c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	4619      	mov	r1, r3
 800196c:	480f      	ldr	r0, [pc, #60]	; (80019ac <HAL_SPI_MspInit+0xa4>)
 800196e:	f000 fc49 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_SPI_MspInit+0xa4>)
 8001988:	f000 fc3c 	bl	8002204 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2024      	movs	r0, #36	; 0x24
 8001992:	f000 fb8a 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001996:	2024      	movs	r0, #36	; 0x24
 8001998:	f000 fba3 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40003800 	.word	0x40003800
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010c00 	.word	0x40010c00

080019b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_TIM_Base_MspInit+0x98>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12c      	bne.n	8001a1c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_TIM_Base_MspInit+0x9c>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_TIM_Base_MspInit+0x9c>)
 80019c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_TIM_Base_MspInit+0x9c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	2018      	movs	r0, #24
 80019e0:	f000 fb63 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80019e4:	2018      	movs	r0, #24
 80019e6:	f000 fb7c 	bl	80020e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2019      	movs	r0, #25
 80019f0:	f000 fb5b 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019f4:	2019      	movs	r0, #25
 80019f6:	f000 fb74 	bl	80020e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	201a      	movs	r0, #26
 8001a00:	f000 fb53 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001a04:	201a      	movs	r0, #26
 8001a06:	f000 fb6c 	bl	80020e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	201b      	movs	r0, #27
 8001a10:	f000 fb4b 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a14:	201b      	movs	r0, #27
 8001a16:	f000 fb64 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a1a:	e010      	b.n	8001a3e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a24:	d10b      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_TIM_Base_MspInit+0x9c>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_TIM_Base_MspInit+0x9c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_TIM_Base_MspInit+0x9c>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d12c      	bne.n	8001aca <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	61d3      	str	r3, [r2, #28]
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa0:	23c0      	movs	r3, #192	; 0xc0
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4822      	ldr	r0, [pc, #136]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ab4:	f000 fba6 	bl	8002204 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	201d      	movs	r0, #29
 8001abe:	f000 faf4 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ac2:	201d      	movs	r0, #29
 8001ac4:	f000 fb0d 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ac8:	e030      	b.n	8001b2c <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12b      	bne.n	8001b2c <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	61d3      	str	r3, [r2, #28]
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b04:	23c0      	movs	r3, #192	; 0xc0
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4619      	mov	r1, r3
 8001b16:	480b      	ldr	r0, [pc, #44]	; (8001b44 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b18:	f000 fb74 	bl	8002204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	201e      	movs	r0, #30
 8001b22:	f000 fac2 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b26:	201e      	movs	r0, #30
 8001b28:	f000 fadb 	bl	80020e2 <HAL_NVIC_EnableIRQ>
}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40000800 	.word	0x40000800
 8001b44:	40010c00 	.word	0x40010c00

08001b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b66:	d142      	bne.n	8001bee <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_TIM_MspPostInit+0xb0>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_TIM_MspPostInit+0xb0>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_TIM_MspPostInit+0xb0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_TIM_MspPostInit+0xb0>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_TIM_MspPostInit+0xb0>)
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_TIM_MspPostInit+0xb0>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <HAL_TIM_MspPostInit+0xb4>)
 8001bac:	f000 fb2a 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480e      	ldr	r0, [pc, #56]	; (8001c00 <HAL_TIM_MspPostInit+0xb8>)
 8001bc6:	f000 fb1d 	bl	8002204 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_TIM_MspPostInit+0xbc>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_TIM_MspPostInit+0xbc>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40010000 	.word	0x40010000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <HardFault_Handler+0x4>

08001c1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <MemManage_Handler+0x4>

08001c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <BusFault_Handler+0x4>

08001c26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <UsageFault_Handler+0x4>

08001c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f914 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM1_BRK_IRQHandler+0x10>)
 8001c62:	f002 f852 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200003fc 	.word	0x200003fc

08001c70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM1_UP_IRQHandler+0x10>)
 8001c76:	f002 f848 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200003fc 	.word	0x200003fc

08001c84 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001c8a:	f002 f83e 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200003fc 	.word	0x200003fc

08001c98 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM1_CC_IRQHandler+0x10>)
 8001c9e:	f002 f834 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200003fc 	.word	0x200003fc

08001cac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM3_IRQHandler+0x10>)
 8001cb2:	f002 f82a 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000388 	.word	0x20000388

08001cc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM4_IRQHandler+0x10>)
 8001cc6:	f002 f820 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000033c 	.word	0x2000033c

08001cd4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <SPI2_IRQHandler+0x10>)
 8001cda:	f001 f9af 	bl	800303c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002e4 	.word	0x200002e4

08001ce8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x50>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x16>
		heap_end = &end;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <_sbrk+0x50>)
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <_sbrk+0x54>)
 8001cfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <_sbrk+0x50>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <_sbrk+0x50>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	466a      	mov	r2, sp
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d907      	bls.n	8001d22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d12:	f002 fe5b 	bl	80049cc <__errno>
 8001d16:	4602      	mov	r2, r0
 8001d18:	230c      	movs	r3, #12
 8001d1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d20:	e006      	b.n	8001d30 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <_sbrk+0x50>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <_sbrk+0x50>)
 8001d2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200002d8 	.word	0x200002d8
 8001d3c:	20000498 	.word	0x20000498

08001d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <SystemInit+0x5c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <SystemInit+0x5c>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <SystemInit+0x5c>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4911      	ldr	r1, [pc, #68]	; (8001d9c <SystemInit+0x5c>)
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <SystemInit+0x60>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <SystemInit+0x5c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <SystemInit+0x5c>)
 8001d62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <SystemInit+0x5c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <SystemInit+0x5c>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <SystemInit+0x5c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <SystemInit+0x5c>)
 8001d7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <SystemInit+0x5c>)
 8001d86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SystemInit+0x64>)
 8001d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d92:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	f8ff0000 	.word	0xf8ff0000
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001da8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001daa:	e003      	b.n	8001db4 <LoopCopyDataInit>

08001dac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001db0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001db2:	3104      	adds	r1, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001db4:	480a      	ldr	r0, [pc, #40]	; (8001de0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001db8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dbc:	d3f6      	bcc.n	8001dac <CopyDataInit>
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dc0:	e002      	b.n	8001dc8 <LoopFillZerobss>

08001dc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001dc4:	f842 3b04 	str.w	r3, [r2], #4

08001dc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001dcc:	d3f9      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dce:	f7ff ffb7 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f002 fe01 	bl	80049d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dd6:	f7ff f9d9 	bl	800118c <main>
  bx lr
 8001dda:	4770      	bx	lr
  ldr r3, =_sidata
 8001ddc:	080070c8 	.word	0x080070c8
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001de4:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 8001de8:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8001dec:	20000494 	.word	0x20000494

08001df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC1_2_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_Init+0x28>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_Init+0x28>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f945 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f808 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fd48 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40022000 	.word	0x40022000

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x54>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f95d 	bl	80020fe <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5c:	f000 f925 	bl	80020aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <HAL_InitTick+0x5c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000002c 	.word	0x2000002c
 8001e78:	20000034 	.word	0x20000034
 8001e7c:	20000030 	.word	0x20000030

08001e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_IncTick+0x1c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000034 	.word	0x20000034
 8001ea0:	2000048c 	.word	0x2000048c

08001ea4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_GetTick+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	2000048c 	.word	0x2000048c

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_Delay+0x40>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffe0 	bl	8001ea4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000034 	.word	0x20000034

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4906      	ldr	r1, [pc, #24]	; (8001f94 <__NVIC_EnableIRQ+0x34>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002074:	f7ff ff90 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff2d 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff42 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff90 	bl	8001fec <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5f 	bl	8001f98 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff35 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffa2 	bl	8002050 <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	2b02      	cmp	r3, #2
 800212c:	d005      	beq.n	800213a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2204      	movs	r2, #4
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e051      	b.n	80021de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 020e 	bic.w	r2, r2, #14
 8002148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_DMA_Abort_IT+0xd0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d029      	beq.n	80021b8 <HAL_DMA_Abort_IT+0xa0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_DMA_Abort_IT+0xd4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d022      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x9c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_DMA_Abort_IT+0xd8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01a      	beq.n	80021ae <HAL_DMA_Abort_IT+0x96>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_DMA_Abort_IT+0xdc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d012      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x90>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_DMA_Abort_IT+0xe0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00a      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x8a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <HAL_DMA_Abort_IT+0xe4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d102      	bne.n	800219c <HAL_DMA_Abort_IT+0x84>
 8002196:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800219a:	e00e      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 800219c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a0:	e00b      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a6:	e008      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ac:	e005      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b2:	e002      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021b4:	2310      	movs	r3, #16
 80021b6:	e000      	b.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 80021b8:	2301      	movs	r3, #1
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_DMA_Abort_IT+0xe8>)
 80021bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
    } 
  }
  return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020008 	.word	0x40020008
 80021ec:	4002001c 	.word	0x4002001c
 80021f0:	40020030 	.word	0x40020030
 80021f4:	40020044 	.word	0x40020044
 80021f8:	40020058 	.word	0x40020058
 80021fc:	4002006c 	.word	0x4002006c
 8002200:	40020000 	.word	0x40020000

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b08b      	sub	sp, #44	; 0x2c
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002216:	e127      	b.n	8002468 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002218:	2201      	movs	r2, #1
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8116 	bne.w	8002462 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b12      	cmp	r3, #18
 800223c:	d034      	beq.n	80022a8 <HAL_GPIO_Init+0xa4>
 800223e:	2b12      	cmp	r3, #18
 8002240:	d80d      	bhi.n	800225e <HAL_GPIO_Init+0x5a>
 8002242:	2b02      	cmp	r3, #2
 8002244:	d02b      	beq.n	800229e <HAL_GPIO_Init+0x9a>
 8002246:	2b02      	cmp	r3, #2
 8002248:	d804      	bhi.n	8002254 <HAL_GPIO_Init+0x50>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d031      	beq.n	80022b2 <HAL_GPIO_Init+0xae>
 800224e:	2b01      	cmp	r3, #1
 8002250:	d01c      	beq.n	800228c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002252:	e048      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002254:	2b03      	cmp	r3, #3
 8002256:	d043      	beq.n	80022e0 <HAL_GPIO_Init+0xdc>
 8002258:	2b11      	cmp	r3, #17
 800225a:	d01b      	beq.n	8002294 <HAL_GPIO_Init+0x90>
          break;
 800225c:	e043      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800225e:	4a89      	ldr	r2, [pc, #548]	; (8002484 <HAL_GPIO_Init+0x280>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d026      	beq.n	80022b2 <HAL_GPIO_Init+0xae>
 8002264:	4a87      	ldr	r2, [pc, #540]	; (8002484 <HAL_GPIO_Init+0x280>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d806      	bhi.n	8002278 <HAL_GPIO_Init+0x74>
 800226a:	4a87      	ldr	r2, [pc, #540]	; (8002488 <HAL_GPIO_Init+0x284>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d020      	beq.n	80022b2 <HAL_GPIO_Init+0xae>
 8002270:	4a86      	ldr	r2, [pc, #536]	; (800248c <HAL_GPIO_Init+0x288>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01d      	beq.n	80022b2 <HAL_GPIO_Init+0xae>
          break;
 8002276:	e036      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002278:	4a85      	ldr	r2, [pc, #532]	; (8002490 <HAL_GPIO_Init+0x28c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_Init+0xae>
 800227e:	4a85      	ldr	r2, [pc, #532]	; (8002494 <HAL_GPIO_Init+0x290>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d016      	beq.n	80022b2 <HAL_GPIO_Init+0xae>
 8002284:	4a84      	ldr	r2, [pc, #528]	; (8002498 <HAL_GPIO_Init+0x294>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0xae>
          break;
 800228a:	e02c      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e028      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	3304      	adds	r3, #4
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e023      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	3308      	adds	r3, #8
 80022a4:	623b      	str	r3, [r7, #32]
          break;
 80022a6:	e01e      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	330c      	adds	r3, #12
 80022ae:	623b      	str	r3, [r7, #32]
          break;
 80022b0:	e019      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ba:	2304      	movs	r3, #4
 80022bc:	623b      	str	r3, [r7, #32]
          break;
 80022be:	e012      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c8:	2308      	movs	r3, #8
 80022ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	611a      	str	r2, [r3, #16]
          break;
 80022d2:	e008      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d4:	2308      	movs	r3, #8
 80022d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	615a      	str	r2, [r3, #20]
          break;
 80022de:	e002      	b.n	80022e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
          break;
 80022e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2bff      	cmp	r3, #255	; 0xff
 80022ea:	d801      	bhi.n	80022f0 <HAL_GPIO_Init+0xec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	e001      	b.n	80022f4 <HAL_GPIO_Init+0xf0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2bff      	cmp	r3, #255	; 0xff
 80022fa:	d802      	bhi.n	8002302 <HAL_GPIO_Init+0xfe>
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x104>
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3b08      	subs	r3, #8
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	210f      	movs	r1, #15
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	6a39      	ldr	r1, [r7, #32]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	431a      	orrs	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8096 	beq.w	8002462 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002336:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_GPIO_Init+0x298>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4a58      	ldr	r2, [pc, #352]	; (800249c <HAL_GPIO_Init+0x298>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6193      	str	r3, [r2, #24]
 8002342:	4b56      	ldr	r3, [pc, #344]	; (800249c <HAL_GPIO_Init+0x298>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800234e:	4a54      	ldr	r2, [pc, #336]	; (80024a0 <HAL_GPIO_Init+0x29c>)
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x19e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4a      	ldr	r2, [pc, #296]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x19a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a49      	ldr	r2, [pc, #292]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x196>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a48      	ldr	r2, [pc, #288]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x192>
 8002392:	2303      	movs	r3, #3
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x1a0>
 8002396:	2304      	movs	r3, #4
 8002398:	e004      	b.n	80023a4 <HAL_GPIO_Init+0x1a0>
 800239a:	2302      	movs	r3, #2
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_Init+0x1a0>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x1a0>
 80023a2:	2300      	movs	r3, #0
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023b4:	493a      	ldr	r1, [pc, #232]	; (80024a0 <HAL_GPIO_Init+0x29c>)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4938      	ldr	r1, [pc, #224]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023dc:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4933      	ldr	r1, [pc, #204]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	492e      	ldr	r1, [pc, #184]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 8002402:	e006      	b.n	8002412 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	43db      	mvns	r3, r3
 800240c:	4929      	ldr	r1, [pc, #164]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 800240e:	4013      	ands	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	4924      	ldr	r1, [pc, #144]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	43db      	mvns	r3, r3
 8002434:	491f      	ldr	r1, [pc, #124]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002436:	4013      	ands	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	491a      	ldr	r1, [pc, #104]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	60cb      	str	r3, [r1, #12]
 8002452:	e006      	b.n	8002462 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	43db      	mvns	r3, r3
 800245c:	4915      	ldr	r1, [pc, #84]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 800245e:	4013      	ands	r3, r2
 8002460:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	3301      	adds	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f aed0 	bne.w	8002218 <HAL_GPIO_Init+0x14>
  }
}
 8002478:	bf00      	nop
 800247a:	372c      	adds	r7, #44	; 0x2c
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	10210000 	.word	0x10210000
 8002488:	10110000 	.word	0x10110000
 800248c:	10120000 	.word	0x10120000
 8002490:	10310000 	.word	0x10310000
 8002494:	10320000 	.word	0x10320000
 8002498:	10220000 	.word	0x10220000
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40010800 	.word	0x40010800
 80024a8:	40010c00 	.word	0x40010c00
 80024ac:	40011000 	.word	0x40011000
 80024b0:	40011400 	.word	0x40011400
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e26c      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002508:	4b92      	ldr	r3, [pc, #584]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00c      	beq.n	800252e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002514:	4b8f      	ldr	r3, [pc, #572]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
 8002520:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d10b      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06c      	beq.n	8002614 <HAL_RCC_OscConfig+0x12c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d168      	bne.n	8002614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e246      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x76>
 8002550:	4b80      	ldr	r3, [pc, #512]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a7f      	ldr	r2, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e02e      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x98>
 8002566:	4b7b      	ldr	r3, [pc, #492]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7a      	ldr	r2, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b78      	ldr	r3, [pc, #480]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a77      	ldr	r2, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0xbc>
 800258a:	4b72      	ldr	r3, [pc, #456]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a71      	ldr	r2, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6e      	ldr	r2, [pc, #440]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 80025a4:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a67      	ldr	r2, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fc6e 	bl	8001ea4 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff fc6a 	bl	8001ea4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1fa      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5d      	ldr	r3, [pc, #372]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xe4>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fc5a 	bl	8001ea4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff fc56 	bl	8001ea4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1e6      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x10c>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002622:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
 800263a:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1ba      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4939      	ldr	r1, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff fc0f 	bl	8001ea4 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff fc0b 	bl	8001ea4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e19b      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4927      	ldr	r1, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fbee 	bl	8001ea4 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7ff fbea 	bl	8001ea4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e17a      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03a      	beq.n	800276c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_RCC_OscConfig+0x274>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff fbce 	bl	8001ea4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7ff fbca 	bl	8001ea4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e15a      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272a:	2001      	movs	r0, #1
 800272c:	f000 faa8 	bl	8002c80 <RCC_Delay>
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_RCC_OscConfig+0x274>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7ff fbb4 	bl	8001ea4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273e:	e00f      	b.n	8002760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7ff fbb0 	bl	8001ea4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d908      	bls.n	8002760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e140      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	42420000 	.word	0x42420000
 800275c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b9e      	ldr	r3, [pc, #632]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e9      	bne.n	8002740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a6 	beq.w	80028c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b97      	ldr	r3, [pc, #604]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b94      	ldr	r3, [pc, #592]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a93      	ldr	r2, [pc, #588]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
 8002796:	4b91      	ldr	r3, [pc, #580]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b8e      	ldr	r3, [pc, #568]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7ff fb71 	bl	8001ea4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7ff fb6d 	bl	8001ea4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0fd      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x312>
 80027ec:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	e02d      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x334>
 8002802:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a75      	ldr	r2, [pc, #468]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b73      	ldr	r3, [pc, #460]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a72      	ldr	r2, [pc, #456]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	e01c      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b05      	cmp	r3, #5
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0x356>
 8002824:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a6c      	ldr	r2, [pc, #432]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a69      	ldr	r2, [pc, #420]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e00b      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	4b64      	ldr	r3, [pc, #400]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a63      	ldr	r2, [pc, #396]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff fb21 	bl	8001ea4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7ff fb1d 	bl	8001ea4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0ab      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	4b57      	ldr	r3, [pc, #348]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ee      	beq.n	8002866 <HAL_RCC_OscConfig+0x37e>
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7ff fb0b 	bl	8001ea4 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7ff fb07 	bl	8001ea4 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e095      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ee      	bne.n	8002892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a47      	ldr	r2, [pc, #284]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8081 	beq.w	80029d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	4b42      	ldr	r3, [pc, #264]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d061      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d146      	bne.n	8002972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_OscConfig+0x4fc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7ff fadb 	bl	8001ea4 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7ff fad7 	bl	8001ea4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e067      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d108      	bne.n	800292c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	492d      	ldr	r1, [pc, #180]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a19      	ldr	r1, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	430b      	orrs	r3, r1
 800293e:	4927      	ldr	r1, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_OscConfig+0x4fc>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7ff faab 	bl	8001ea4 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7ff faa7 	bl	8001ea4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e037      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x46a>
 8002970:	e02f      	b.n	80029d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <HAL_RCC_OscConfig+0x4fc>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fa94 	bl	8001ea4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff fa90 	bl	8001ea4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e020      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x498>
 800299e:	e018      	b.n	80029d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e013      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
 80029e4:	42420060 	.word	0x42420060

080029e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0d0      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4965      	ldr	r1, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d040      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d115      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e073      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06b      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4936      	ldr	r1, [pc, #216]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7ff f9e4 	bl	8001ea4 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7ff f9e0 	bl	8001ea4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e053      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 020c 	and.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1eb      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d210      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0207 	bic.w	r2, r3, #7
 8002b1e:	4922      	ldr	r1, [pc, #136]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f942 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08006e1c 	.word	0x08006e1c
 8002bb4:	2000002c 	.word	0x2000002c
 8002bb8:	20000030 	.word	0x20000030

08002bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b490      	push	{r4, r7}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bc2:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bc4:	1d3c      	adds	r4, r7, #4
 8002bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bcc:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x40>
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x46>
 8002bfa:	e02d      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfe:	623b      	str	r3, [r7, #32]
      break;
 8002c00:	e02d      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	0c9b      	lsrs	r3, r3, #18
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c0e:	4413      	add	r3, r2
 8002c10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0c5b      	lsrs	r3, r3, #17
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c2e:	4413      	add	r3, r2
 8002c30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	4a0f      	ldr	r2, [pc, #60]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c3a:	fb02 f203 	mul.w	r2, r2, r3
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	e004      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	623b      	str	r3, [r7, #32]
      break;
 8002c56:	e002      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c5a:	623b      	str	r3, [r7, #32]
      break;
 8002c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3728      	adds	r7, #40	; 0x28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc90      	pop	{r4, r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	08006e08 	.word	0x08006e08
 8002c70:	08006e18 	.word	0x08006e18
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	003d0900 	.word	0x003d0900

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <RCC_Delay+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <RCC_Delay+0x38>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c9c:	bf00      	nop
  }
  while (Delay --);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	2000002c 	.word	0x2000002c
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e076      	b.n	8002dbc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cde:	d009      	beq.n	8002cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
 8002ce6:	e005      	b.n	8002cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fdfa 	bl	8001908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	0c1a      	lsrs	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f002 0204 	and.w	r2, r2, #4
 8002d9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002daa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_SPI_Transmit+0x22>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e126      	b.n	8003034 <HAL_SPI_Transmit+0x270>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dee:	f7ff f859 	bl	8001ea4 <HAL_GetTick>
 8002df2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d002      	beq.n	8002e0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e08:	e10b      	b.n	8003022 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_SPI_Transmit+0x52>
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e1a:	e102      	b.n	8003022 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e62:	d10f      	bne.n	8002e84 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d007      	beq.n	8002ea2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eaa:	d14b      	bne.n	8002f44 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Transmit+0xf6>
 8002eb4:	8afb      	ldrh	r3, [r7, #22]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d13e      	bne.n	8002f38 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	881a      	ldrh	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	1c9a      	adds	r2, r3, #2
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ede:	e02b      	b.n	8002f38 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d112      	bne.n	8002f14 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	1c9a      	adds	r2, r3, #2
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f12:	e011      	b.n	8002f38 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f14:	f7fe ffc6 	bl	8001ea4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d803      	bhi.n	8002f2c <HAL_SPI_Transmit+0x168>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f2a:	d102      	bne.n	8002f32 <HAL_SPI_Transmit+0x16e>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f36:	e074      	b.n	8003022 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ce      	bne.n	8002ee0 <HAL_SPI_Transmit+0x11c>
 8002f42:	e04c      	b.n	8002fde <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <HAL_SPI_Transmit+0x18e>
 8002f4c:	8afb      	ldrh	r3, [r7, #22]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d140      	bne.n	8002fd4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f78:	e02c      	b.n	8002fd4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d113      	bne.n	8002fb0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	330c      	adds	r3, #12
 8002f92:	7812      	ldrb	r2, [r2, #0]
 8002f94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fae:	e011      	b.n	8002fd4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb0:	f7fe ff78 	bl	8001ea4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d803      	bhi.n	8002fc8 <HAL_SPI_Transmit+0x204>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc6:	d102      	bne.n	8002fce <HAL_SPI_Transmit+0x20a>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fd2:	e026      	b.n	8003022 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1cd      	bne.n	8002f7a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f9b8 	bl	8003358 <SPI_EndRxTxTransaction>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e000      	b.n	8003022 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003032:	7ffb      	ldrb	r3, [r7, #31]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10f      	bne.n	8003080 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
    return;
 800307e:	e0bf      	b.n	8003200 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_SPI_IRQHandler+0x66>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	09db      	lsrs	r3, r3, #7
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    return;
 80030a0:	e0ae      	b.n	8003200 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_SPI_IRQHandler+0x80>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a2 	beq.w	8003200 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 809b 	beq.w	8003200 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d023      	beq.n	800311e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d011      	beq.n	8003106 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0204 	orr.w	r2, r3, #4
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	e00b      	b.n	800311e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
        return;
 800311c:	e070      	b.n	8003200 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d014      	beq.n	8003154 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	2b00      	cmp	r3, #0
 800315a:	d050      	beq.n	80031fe <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800316a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d104      	bne.n	8003188 <HAL_SPI_IRQHandler+0x14c>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d034      	beq.n	80031f2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0203 	bic.w	r2, r2, #3
 8003196:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_SPI_IRQHandler+0x1cc>)
 80031a6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe ffb3 	bl	8002118 <HAL_DMA_Abort_IT>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d016      	beq.n	80031fa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <HAL_SPI_IRQHandler+0x1cc>)
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe ff9d 	bl	8002118 <HAL_DMA_Abort_IT>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80031f0:	e003      	b.n	80031fa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f80a 	bl	800320c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80031f8:	e000      	b.n	80031fc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80031fa:	bf00      	nop
    return;
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
  }
}
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	0800321f 	.word	0x0800321f

0800320c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff ffe7 	bl	800320c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003258:	f7fe fe24 	bl	8001ea4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003268:	f7fe fe1c 	bl	8001ea4 <HAL_GetTick>
 800326c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	015b      	lsls	r3, r3, #5
 8003274:	0d1b      	lsrs	r3, r3, #20
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800327e:	e054      	b.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003286:	d050      	beq.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003288:	f7fe fe0c 	bl	8001ea4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	429a      	cmp	r2, r3
 8003296:	d902      	bls.n	800329e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d13d      	bne.n	800331a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b6:	d111      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d004      	beq.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d107      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e4:	d10f      	bne.n	8003306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e017      	b.n	800334a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b01      	subs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	429a      	cmp	r2, r3
 8003346:	d19b      	bne.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000002c 	.word	0x2000002c

08003358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2200      	movs	r2, #0
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ff6a 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e000      	b.n	800338c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e041      	b.n	800342a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe faf8 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 ff94 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d001      	beq.n	800344c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e032      	b.n	80034b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_TIM_Base_Start+0x88>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_Base_Start+0x48>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003466:	d009      	beq.n	800347c <HAL_TIM_Base_Start+0x48>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <HAL_TIM_Base_Start+0x8c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_Base_Start+0x48>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <HAL_TIM_Base_Start+0x90>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d111      	bne.n	80034a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d010      	beq.n	80034b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	e007      	b.n	80034b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800

080034c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e03a      	b.n	8003556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a18      	ldr	r2, [pc, #96]	; (8003560 <HAL_TIM_Base_Start_IT+0x98>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x58>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d009      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x58>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <HAL_TIM_Base_Start_IT+0x9c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x58>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <HAL_TIM_Base_Start_IT+0xa0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b06      	cmp	r3, #6
 8003530:	d010      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003542:	e007      	b.n	8003554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800

0800356c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e041      	b.n	8003602 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f839 	bl	800360a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f000 fea8 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_TIM_OC_Start_IT+0x24>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e022      	b.n	8003686 <HAL_TIM_OC_Start_IT+0x6a>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d109      	bne.n	800365a <HAL_TIM_OC_Start_IT+0x3e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e015      	b.n	8003686 <HAL_TIM_OC_Start_IT+0x6a>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d109      	bne.n	8003674 <HAL_TIM_OC_Start_IT+0x58>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e008      	b.n	8003686 <HAL_TIM_OC_Start_IT+0x6a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0a4      	b.n	80037d8 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_TIM_OC_Start_IT+0x82>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	e013      	b.n	80036c6 <HAL_TIM_OC_Start_IT+0xaa>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_OC_Start_IT+0x92>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	e00b      	b.n	80036c6 <HAL_TIM_OC_Start_IT+0xaa>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d104      	bne.n	80036be <HAL_TIM_OC_Start_IT+0xa2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036bc:	e003      	b.n	80036c6 <HAL_TIM_OC_Start_IT+0xaa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d841      	bhi.n	8003750 <HAL_TIM_OC_Start_IT+0x134>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <HAL_TIM_OC_Start_IT+0xb8>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003751 	.word	0x08003751
 80036dc:	08003751 	.word	0x08003751
 80036e0:	08003751 	.word	0x08003751
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	08003751 	.word	0x08003751
 80036ec:	08003751 	.word	0x08003751
 80036f0:	08003751 	.word	0x08003751
 80036f4:	0800372d 	.word	0x0800372d
 80036f8:	08003751 	.word	0x08003751
 80036fc:	08003751 	.word	0x08003751
 8003700:	08003751 	.word	0x08003751
 8003704:	0800373f 	.word	0x0800373f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0202 	orr.w	r2, r2, #2
 8003716:	60da      	str	r2, [r3, #12]
      break;
 8003718:	e01b      	b.n	8003752 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0204 	orr.w	r2, r2, #4
 8003728:	60da      	str	r2, [r3, #12]
      break;
 800372a:	e012      	b.n	8003752 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0208 	orr.w	r2, r2, #8
 800373a:	60da      	str	r2, [r3, #12]
      break;
 800373c:	e009      	b.n	8003752 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0210 	orr.w	r2, r2, #16
 800374c:	60da      	str	r2, [r3, #12]
      break;
 800374e:	e000      	b.n	8003752 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8003750:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f001 f850 	bl	8004800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_TIM_OC_Start_IT+0x1c4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d107      	bne.n	800377a <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_TIM_OC_Start_IT+0x1c4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIM_OC_Start_IT+0x186>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d009      	beq.n	80037a2 <HAL_TIM_OC_Start_IT+0x186>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <HAL_TIM_OC_Start_IT+0x1c8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_OC_Start_IT+0x186>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_TIM_OC_Start_IT+0x1cc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d111      	bne.n	80037c6 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b06      	cmp	r3, #6
 80037b2:	d010      	beq.n	80037d6 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800

080037ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e041      	b.n	8003882 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f839 	bl	800388a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f000 fd68 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_TIM_PWM_Start_IT+0x24>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e022      	b.n	8003906 <HAL_TIM_PWM_Start_IT+0x6a>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d109      	bne.n	80038da <HAL_TIM_PWM_Start_IT+0x3e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e015      	b.n	8003906 <HAL_TIM_PWM_Start_IT+0x6a>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d109      	bne.n	80038f4 <HAL_TIM_PWM_Start_IT+0x58>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e008      	b.n	8003906 <HAL_TIM_PWM_Start_IT+0x6a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0a4      	b.n	8003a58 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Start_IT+0x82>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800391c:	e013      	b.n	8003946 <HAL_TIM_PWM_Start_IT+0xaa>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Start_IT+0x92>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392c:	e00b      	b.n	8003946 <HAL_TIM_PWM_Start_IT+0xaa>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d104      	bne.n	800393e <HAL_TIM_PWM_Start_IT+0xa2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393c:	e003      	b.n	8003946 <HAL_TIM_PWM_Start_IT+0xaa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b0c      	cmp	r3, #12
 800394a:	d841      	bhi.n	80039d0 <HAL_TIM_PWM_Start_IT+0x134>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_TIM_PWM_Start_IT+0xb8>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003989 	.word	0x08003989
 8003958:	080039d1 	.word	0x080039d1
 800395c:	080039d1 	.word	0x080039d1
 8003960:	080039d1 	.word	0x080039d1
 8003964:	0800399b 	.word	0x0800399b
 8003968:	080039d1 	.word	0x080039d1
 800396c:	080039d1 	.word	0x080039d1
 8003970:	080039d1 	.word	0x080039d1
 8003974:	080039ad 	.word	0x080039ad
 8003978:	080039d1 	.word	0x080039d1
 800397c:	080039d1 	.word	0x080039d1
 8003980:	080039d1 	.word	0x080039d1
 8003984:	080039bf 	.word	0x080039bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0202 	orr.w	r2, r2, #2
 8003996:	60da      	str	r2, [r3, #12]
      break;
 8003998:	e01b      	b.n	80039d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0204 	orr.w	r2, r2, #4
 80039a8:	60da      	str	r2, [r3, #12]
      break;
 80039aa:	e012      	b.n	80039d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	60da      	str	r2, [r3, #12]
      break;
 80039bc:	e009      	b.n	80039d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0210 	orr.w	r2, r2, #16
 80039cc:	60da      	str	r2, [r3, #12]
      break;
 80039ce:	e000      	b.n	80039d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80039d0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 ff10 	bl	8004800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d107      	bne.n	80039fa <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_TIM_PWM_Start_IT+0x186>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d009      	beq.n	8003a22 <HAL_TIM_PWM_Start_IT+0x186>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIM_PWM_Start_IT+0x186>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d111      	bne.n	8003a46 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d010      	beq.n	8003a56 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a44:	e007      	b.n	8003a56 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800

08003a6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e093      	b.n	8003ba8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fd ffdb 	bl	8001a50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab0:	f023 0307 	bic.w	r3, r3, #7
 8003ab4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f000 fc1d 	bl	8004300 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	4313      	orrs	r3, r2
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b0c:	f023 030c 	bic.w	r3, r3, #12
 8003b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	011a      	lsls	r2, r3, #4
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	031b      	lsls	r3, r3, #12
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4313      	orrs	r3, r2
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d110      	bne.n	8003c02 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003be6:	7b7b      	ldrb	r3, [r7, #13]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e088      	b.n	8003d02 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	e031      	b.n	8003c66 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d110      	bne.n	8003c2a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c08:	7bbb      	ldrb	r3, [r7, #14]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c0e:	7b3b      	ldrb	r3, [r7, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d001      	beq.n	8003c18 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e074      	b.n	8003d02 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c28:	e01d      	b.n	8003c66 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d108      	bne.n	8003c42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c30:	7bbb      	ldrb	r3, [r7, #14]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c36:	7b7b      	ldrb	r3, [r7, #13]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c3c:	7b3b      	ldrb	r3, [r7, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e05d      	b.n	8003d02 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_TIM_Encoder_Start_IT+0xc2>
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d010      	beq.n	8003c92 <HAL_TIM_Encoder_Start_IT+0xe2>
 8003c70:	e01f      	b.n	8003cb2 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fdc0 	bl	8004800 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0202 	orr.w	r2, r2, #2
 8003c8e:	60da      	str	r2, [r3, #12]
      break;
 8003c90:	e02e      	b.n	8003cf0 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fdb0 	bl	8004800 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0204 	orr.w	r2, r2, #4
 8003cae:	60da      	str	r2, [r3, #12]
      break;
 8003cb0:	e01e      	b.n	8003cf0 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fda0 	bl	8004800 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fd99 	bl	8004800 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0202 	orr.w	r2, r2, #2
 8003cdc:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0204 	orr.w	r2, r2, #4
 8003cec:	60da      	str	r2, [r3, #12]
      break;
 8003cee:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d122      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11b      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f06f 0202 	mvn.w	r2, #2
 8003d36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fabb 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003d52:	e005      	b.n	8003d60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 faae 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fabd 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d122      	bne.n	8003dba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d11b      	bne.n	8003dba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0204 	mvn.w	r2, #4
 8003d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa91 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003da6:	e005      	b.n	8003db4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa84 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa93 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d122      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d11b      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f06f 0208 	mvn.w	r2, #8
 8003dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2204      	movs	r2, #4
 8003de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fa67 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003dfa:	e005      	b.n	8003e08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fa5a 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa69 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d122      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d11b      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f06f 0210 	mvn.w	r2, #16
 8003e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2208      	movs	r2, #8
 8003e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fa3d 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003e4e:	e005      	b.n	8003e5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fa30 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa3f 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10e      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0201 	mvn.w	r2, #1
 8003e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fc fe1d 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d10e      	bne.n	8003eba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fd7f 	bl	80049b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fa03 	bl	80042ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0220 	mvn.w	r2, #32
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fd4a 	bl	80049a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e046      	b.n	8003fc4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d839      	bhi.n	8003fb8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_TIM_OC_ConfigChannel+0x30>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003fb9 	.word	0x08003fb9
 8003f54:	08003fb9 	.word	0x08003fb9
 8003f58:	08003fb9 	.word	0x08003fb9
 8003f5c:	08003f8f 	.word	0x08003f8f
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003fb9 	.word	0x08003fb9
 8003f6c:	08003f9d 	.word	0x08003f9d
 8003f70:	08003fb9 	.word	0x08003fb9
 8003f74:	08003fb9 	.word	0x08003fb9
 8003f78:	08003fb9 	.word	0x08003fb9
 8003f7c:	08003fab 	.word	0x08003fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fa1c 	bl	80043c4 <TIM_OC1_SetConfig>
      break;
 8003f8c:	e015      	b.n	8003fba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fa7b 	bl	8004490 <TIM_OC2_SetConfig>
      break;
 8003f9a:	e00e      	b.n	8003fba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fade 	bl	8004564 <TIM_OC3_SetConfig>
      break;
 8003fa8:	e007      	b.n	8003fba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fb41 	bl	8004638 <TIM_OC4_SetConfig>
      break;
 8003fb6:	e000      	b.n	8003fba <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003fb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ac      	b.n	8004140 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	f200 809f 	bhi.w	8004134 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004135 	.word	0x08004135
 8004004:	08004135 	.word	0x08004135
 8004008:	08004135 	.word	0x08004135
 800400c:	08004071 	.word	0x08004071
 8004010:	08004135 	.word	0x08004135
 8004014:	08004135 	.word	0x08004135
 8004018:	08004135 	.word	0x08004135
 800401c:	080040b3 	.word	0x080040b3
 8004020:	08004135 	.word	0x08004135
 8004024:	08004135 	.word	0x08004135
 8004028:	08004135 	.word	0x08004135
 800402c:	080040f3 	.word	0x080040f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f9c4 	bl	80043c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	619a      	str	r2, [r3, #24]
      break;
 800406e:	e062      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fa0a 	bl	8004490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800408a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	619a      	str	r2, [r3, #24]
      break;
 80040b0:	e041      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa53 	bl	8004564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0208 	orr.w	r2, r2, #8
 80040cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69d9      	ldr	r1, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	61da      	str	r2, [r3, #28]
      break;
 80040f0:	e021      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fa9d 	bl	8004638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69d9      	ldr	r1, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	021a      	lsls	r2, r3, #8
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	61da      	str	r2, [r3, #28]
      break;
 8004132:	e000      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIM_ConfigClockSource+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e0a6      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x166>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800417e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d067      	beq.n	8004268 <HAL_TIM_ConfigClockSource+0x120>
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d80b      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x6c>
 800419c:	2b10      	cmp	r3, #16
 800419e:	d073      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0x140>
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d802      	bhi.n	80041aa <HAL_TIM_ConfigClockSource+0x62>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d06f      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041a8:	e078      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d06c      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0x140>
 80041ae:	2b30      	cmp	r3, #48	; 0x30
 80041b0:	d06a      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041b2:	e073      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041b4:	2b70      	cmp	r3, #112	; 0x70
 80041b6:	d00d      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x8c>
 80041b8:	2b70      	cmp	r3, #112	; 0x70
 80041ba:	d804      	bhi.n	80041c6 <HAL_TIM_ConfigClockSource+0x7e>
 80041bc:	2b50      	cmp	r3, #80	; 0x50
 80041be:	d033      	beq.n	8004228 <HAL_TIM_ConfigClockSource+0xe0>
 80041c0:	2b60      	cmp	r3, #96	; 0x60
 80041c2:	d041      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041c4:	e06a      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d066      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x152>
 80041cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d0:	d017      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041d2:	e063      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6899      	ldr	r1, [r3, #8]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f000 faed 	bl	80047c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]
      break;
 8004200:	e04c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6899      	ldr	r1, [r3, #8]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f000 fad6 	bl	80047c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004224:	609a      	str	r2, [r3, #8]
      break;
 8004226:	e039      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	461a      	mov	r2, r3
 8004236:	f000 fa4d 	bl	80046d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2150      	movs	r1, #80	; 0x50
 8004240:	4618      	mov	r0, r3
 8004242:	f000 faa4 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004246:	e029      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	461a      	mov	r2, r3
 8004256:	f000 fa6b 	bl	8004730 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2160      	movs	r1, #96	; 0x60
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa94 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004266:	e019      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	461a      	mov	r2, r3
 8004276:	f000 fa2d 	bl	80046d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fa84 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004286:	e009      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 fa7b 	bl	800478e <TIM_ITRx_SetConfig>
        break;
 8004298:	e000      	b.n	800429c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800429a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
	...

08004300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <TIM_Base_SetConfig+0xb8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00b      	beq.n	8004330 <TIM_Base_SetConfig+0x30>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431e:	d007      	beq.n	8004330 <TIM_Base_SetConfig+0x30>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a26      	ldr	r2, [pc, #152]	; (80043bc <TIM_Base_SetConfig+0xbc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0x30>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <TIM_Base_SetConfig+0xc0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <TIM_Base_SetConfig+0xb8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0x62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <TIM_Base_SetConfig+0xbc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0x62>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <TIM_Base_SetConfig+0xc0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <TIM_Base_SetConfig+0xb8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d103      	bne.n	80043a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	615a      	str	r2, [r3, #20]
}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800

080043c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0302 	bic.w	r3, r3, #2
 800440c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1c      	ldr	r2, [pc, #112]	; (800448c <TIM_OC1_SetConfig+0xc8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d10c      	bne.n	800443a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0308 	bic.w	r3, r3, #8
 8004426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <TIM_OC1_SetConfig+0xc8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	621a      	str	r2, [r3, #32]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40012c00 	.word	0x40012c00

08004490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 0320 	bic.w	r3, r3, #32
 80044da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <TIM_OC2_SetConfig+0xd0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10d      	bne.n	800450c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a14      	ldr	r2, [pc, #80]	; (8004560 <TIM_OC2_SetConfig+0xd0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d113      	bne.n	800453c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00

08004564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <TIM_OC3_SetConfig+0xd0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10d      	bne.n	80045de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <TIM_OC3_SetConfig+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d113      	bne.n	800460e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40012c00 	.word	0x40012c00

08004638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <TIM_OC4_SetConfig+0x98>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d109      	bne.n	80046ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	40012c00 	.word	0x40012c00

080046d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 030a 	bic.w	r3, r3, #10
 8004710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f023 0210 	bic.w	r2, r3, #16
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800475a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	031b      	lsls	r3, r3, #12
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800476c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	621a      	str	r2, [r3, #32]
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f043 0307 	orr.w	r3, r3, #7
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b087      	sub	sp, #28
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	021a      	lsls	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	609a      	str	r2, [r3, #8]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	2201      	movs	r2, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	43db      	mvns	r3, r3
 8004822:	401a      	ands	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	431a      	orrs	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800485c:	2302      	movs	r3, #2
 800485e:	e046      	b.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d009      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a10      	ldr	r2, [pc, #64]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10c      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800

08004904 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800491c:	2302      	movs	r3, #2
 800491e:	e03d      	b.n	800499c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
	...

080049cc <__errno>:
 80049cc:	4b01      	ldr	r3, [pc, #4]	; (80049d4 <__errno+0x8>)
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000038 	.word	0x20000038

080049d8 <__libc_init_array>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	2500      	movs	r5, #0
 80049dc:	4e0c      	ldr	r6, [pc, #48]	; (8004a10 <__libc_init_array+0x38>)
 80049de:	4c0d      	ldr	r4, [pc, #52]	; (8004a14 <__libc_init_array+0x3c>)
 80049e0:	1ba4      	subs	r4, r4, r6
 80049e2:	10a4      	asrs	r4, r4, #2
 80049e4:	42a5      	cmp	r5, r4
 80049e6:	d109      	bne.n	80049fc <__libc_init_array+0x24>
 80049e8:	f002 f962 	bl	8006cb0 <_init>
 80049ec:	2500      	movs	r5, #0
 80049ee:	4e0a      	ldr	r6, [pc, #40]	; (8004a18 <__libc_init_array+0x40>)
 80049f0:	4c0a      	ldr	r4, [pc, #40]	; (8004a1c <__libc_init_array+0x44>)
 80049f2:	1ba4      	subs	r4, r4, r6
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	42a5      	cmp	r5, r4
 80049f8:	d105      	bne.n	8004a06 <__libc_init_array+0x2e>
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a00:	4798      	blx	r3
 8004a02:	3501      	adds	r5, #1
 8004a04:	e7ee      	b.n	80049e4 <__libc_init_array+0xc>
 8004a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a0a:	4798      	blx	r3
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	e7f2      	b.n	80049f6 <__libc_init_array+0x1e>
 8004a10:	080070c0 	.word	0x080070c0
 8004a14:	080070c0 	.word	0x080070c0
 8004a18:	080070c0 	.word	0x080070c0
 8004a1c:	080070c4 	.word	0x080070c4

08004a20 <memset>:
 8004a20:	4603      	mov	r3, r0
 8004a22:	4402      	add	r2, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <__cvt>:
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a36:	461e      	mov	r6, r3
 8004a38:	bfbb      	ittet	lt
 8004a3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a3e:	461e      	movlt	r6, r3
 8004a40:	2300      	movge	r3, #0
 8004a42:	232d      	movlt	r3, #45	; 0x2d
 8004a44:	b088      	sub	sp, #32
 8004a46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a48:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004a4c:	f027 0720 	bic.w	r7, r7, #32
 8004a50:	2f46      	cmp	r7, #70	; 0x46
 8004a52:	4614      	mov	r4, r2
 8004a54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a56:	700b      	strb	r3, [r1, #0]
 8004a58:	d004      	beq.n	8004a64 <__cvt+0x34>
 8004a5a:	2f45      	cmp	r7, #69	; 0x45
 8004a5c:	d100      	bne.n	8004a60 <__cvt+0x30>
 8004a5e:	3501      	adds	r5, #1
 8004a60:	2302      	movs	r3, #2
 8004a62:	e000      	b.n	8004a66 <__cvt+0x36>
 8004a64:	2303      	movs	r3, #3
 8004a66:	aa07      	add	r2, sp, #28
 8004a68:	9204      	str	r2, [sp, #16]
 8004a6a:	aa06      	add	r2, sp, #24
 8004a6c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a70:	e9cd 3500 	strd	r3, r5, [sp]
 8004a74:	4622      	mov	r2, r4
 8004a76:	4633      	mov	r3, r6
 8004a78:	f000 fcca 	bl	8005410 <_dtoa_r>
 8004a7c:	2f47      	cmp	r7, #71	; 0x47
 8004a7e:	4680      	mov	r8, r0
 8004a80:	d102      	bne.n	8004a88 <__cvt+0x58>
 8004a82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a84:	07db      	lsls	r3, r3, #31
 8004a86:	d526      	bpl.n	8004ad6 <__cvt+0xa6>
 8004a88:	2f46      	cmp	r7, #70	; 0x46
 8004a8a:	eb08 0905 	add.w	r9, r8, r5
 8004a8e:	d111      	bne.n	8004ab4 <__cvt+0x84>
 8004a90:	f898 3000 	ldrb.w	r3, [r8]
 8004a94:	2b30      	cmp	r3, #48	; 0x30
 8004a96:	d10a      	bne.n	8004aae <__cvt+0x7e>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	f7fb ff82 	bl	80009a8 <__aeabi_dcmpeq>
 8004aa4:	b918      	cbnz	r0, 8004aae <__cvt+0x7e>
 8004aa6:	f1c5 0501 	rsb	r5, r5, #1
 8004aaa:	f8ca 5000 	str.w	r5, [sl]
 8004aae:	f8da 3000 	ldr.w	r3, [sl]
 8004ab2:	4499      	add	r9, r3
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4631      	mov	r1, r6
 8004abc:	f7fb ff74 	bl	80009a8 <__aeabi_dcmpeq>
 8004ac0:	b938      	cbnz	r0, 8004ad2 <__cvt+0xa2>
 8004ac2:	2230      	movs	r2, #48	; 0x30
 8004ac4:	9b07      	ldr	r3, [sp, #28]
 8004ac6:	454b      	cmp	r3, r9
 8004ac8:	d205      	bcs.n	8004ad6 <__cvt+0xa6>
 8004aca:	1c59      	adds	r1, r3, #1
 8004acc:	9107      	str	r1, [sp, #28]
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	e7f8      	b.n	8004ac4 <__cvt+0x94>
 8004ad2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	9b07      	ldr	r3, [sp, #28]
 8004ada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004adc:	eba3 0308 	sub.w	r3, r3, r8
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	b008      	add	sp, #32
 8004ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ae8 <__exponent>:
 8004ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aea:	2900      	cmp	r1, #0
 8004aec:	bfb4      	ite	lt
 8004aee:	232d      	movlt	r3, #45	; 0x2d
 8004af0:	232b      	movge	r3, #43	; 0x2b
 8004af2:	4604      	mov	r4, r0
 8004af4:	bfb8      	it	lt
 8004af6:	4249      	neglt	r1, r1
 8004af8:	2909      	cmp	r1, #9
 8004afa:	f804 2b02 	strb.w	r2, [r4], #2
 8004afe:	7043      	strb	r3, [r0, #1]
 8004b00:	dd21      	ble.n	8004b46 <__exponent+0x5e>
 8004b02:	f10d 0307 	add.w	r3, sp, #7
 8004b06:	461f      	mov	r7, r3
 8004b08:	260a      	movs	r6, #10
 8004b0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b0e:	fb06 1115 	mls	r1, r6, r5, r1
 8004b12:	2d09      	cmp	r5, #9
 8004b14:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004b18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b1c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004b20:	4629      	mov	r1, r5
 8004b22:	dc09      	bgt.n	8004b38 <__exponent+0x50>
 8004b24:	3130      	adds	r1, #48	; 0x30
 8004b26:	3b02      	subs	r3, #2
 8004b28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b2c:	42bb      	cmp	r3, r7
 8004b2e:	4622      	mov	r2, r4
 8004b30:	d304      	bcc.n	8004b3c <__exponent+0x54>
 8004b32:	1a10      	subs	r0, r2, r0
 8004b34:	b003      	add	sp, #12
 8004b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b38:	4613      	mov	r3, r2
 8004b3a:	e7e6      	b.n	8004b0a <__exponent+0x22>
 8004b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b40:	f804 2b01 	strb.w	r2, [r4], #1
 8004b44:	e7f2      	b.n	8004b2c <__exponent+0x44>
 8004b46:	2330      	movs	r3, #48	; 0x30
 8004b48:	4419      	add	r1, r3
 8004b4a:	7083      	strb	r3, [r0, #2]
 8004b4c:	1d02      	adds	r2, r0, #4
 8004b4e:	70c1      	strb	r1, [r0, #3]
 8004b50:	e7ef      	b.n	8004b32 <__exponent+0x4a>
	...

08004b54 <_printf_float>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b091      	sub	sp, #68	; 0x44
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b5e:	4693      	mov	fp, r2
 8004b60:	461e      	mov	r6, r3
 8004b62:	4605      	mov	r5, r0
 8004b64:	f001 fb82 	bl	800626c <_localeconv_r>
 8004b68:	6803      	ldr	r3, [r0, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6e:	f7fb faef 	bl	8000150 <strlen>
 8004b72:	2300      	movs	r3, #0
 8004b74:	930e      	str	r3, [sp, #56]	; 0x38
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	900a      	str	r0, [sp, #40]	; 0x28
 8004b7a:	3307      	adds	r3, #7
 8004b7c:	f023 0307 	bic.w	r3, r3, #7
 8004b80:	f103 0208 	add.w	r2, r3, #8
 8004b84:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004b88:	f8d4 a000 	ldr.w	sl, [r4]
 8004b8c:	603a      	str	r2, [r7, #0]
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b96:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ba4:	4ba6      	ldr	r3, [pc, #664]	; (8004e40 <_printf_float+0x2ec>)
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004baa:	f7fb ff2f 	bl	8000a0c <__aeabi_dcmpun>
 8004bae:	bb68      	cbnz	r0, 8004c0c <_printf_float+0xb8>
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb4:	4ba2      	ldr	r3, [pc, #648]	; (8004e40 <_printf_float+0x2ec>)
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bba:	f7fb ff09 	bl	80009d0 <__aeabi_dcmple>
 8004bbe:	bb28      	cbnz	r0, 8004c0c <_printf_float+0xb8>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	f7fb fef8 	bl	80009bc <__aeabi_dcmplt>
 8004bcc:	b110      	cbz	r0, 8004bd4 <_printf_float+0x80>
 8004bce:	232d      	movs	r3, #45	; 0x2d
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd4:	4f9b      	ldr	r7, [pc, #620]	; (8004e44 <_printf_float+0x2f0>)
 8004bd6:	4b9c      	ldr	r3, [pc, #624]	; (8004e48 <_printf_float+0x2f4>)
 8004bd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bdc:	bf98      	it	ls
 8004bde:	461f      	movls	r7, r3
 8004be0:	2303      	movs	r3, #3
 8004be2:	f04f 0900 	mov.w	r9, #0
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	f02a 0304 	bic.w	r3, sl, #4
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	9600      	str	r6, [sp, #0]
 8004bf0:	465b      	mov	r3, fp
 8004bf2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 f9e2 	bl	8004fc0 <_printf_common>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	f040 8090 	bne.w	8004d22 <_printf_float+0x1ce>
 8004c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c06:	b011      	add	sp, #68	; 0x44
 8004c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	464b      	mov	r3, r9
 8004c10:	4638      	mov	r0, r7
 8004c12:	4649      	mov	r1, r9
 8004c14:	f7fb fefa 	bl	8000a0c <__aeabi_dcmpun>
 8004c18:	b110      	cbz	r0, 8004c20 <_printf_float+0xcc>
 8004c1a:	4f8c      	ldr	r7, [pc, #560]	; (8004e4c <_printf_float+0x2f8>)
 8004c1c:	4b8c      	ldr	r3, [pc, #560]	; (8004e50 <_printf_float+0x2fc>)
 8004c1e:	e7db      	b.n	8004bd8 <_printf_float+0x84>
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	a80d      	add	r0, sp, #52	; 0x34
 8004c2a:	a90e      	add	r1, sp, #56	; 0x38
 8004c2c:	d140      	bne.n	8004cb0 <_printf_float+0x15c>
 8004c2e:	2306      	movs	r3, #6
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	f04f 0c00 	mov.w	ip, #0
 8004c36:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004c3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	6022      	str	r2, [r4, #0]
 8004c42:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	463a      	mov	r2, r7
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c50:	4628      	mov	r0, r5
 8004c52:	f7ff feed 	bl	8004a30 <__cvt>
 8004c56:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004c5a:	2b47      	cmp	r3, #71	; 0x47
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	d109      	bne.n	8004c74 <_printf_float+0x120>
 8004c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c62:	1cd8      	adds	r0, r3, #3
 8004c64:	db02      	blt.n	8004c6c <_printf_float+0x118>
 8004c66:	6862      	ldr	r2, [r4, #4]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	dd47      	ble.n	8004cfc <_printf_float+0x1a8>
 8004c6c:	f1a8 0802 	sub.w	r8, r8, #2
 8004c70:	fa5f f888 	uxtb.w	r8, r8
 8004c74:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c7a:	d824      	bhi.n	8004cc6 <_printf_float+0x172>
 8004c7c:	3901      	subs	r1, #1
 8004c7e:	4642      	mov	r2, r8
 8004c80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c84:	910d      	str	r1, [sp, #52]	; 0x34
 8004c86:	f7ff ff2f 	bl	8004ae8 <__exponent>
 8004c8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c8c:	4681      	mov	r9, r0
 8004c8e:	1813      	adds	r3, r2, r0
 8004c90:	2a01      	cmp	r2, #1
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	dc02      	bgt.n	8004c9c <_printf_float+0x148>
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	07d1      	lsls	r1, r2, #31
 8004c9a:	d501      	bpl.n	8004ca0 <_printf_float+0x14c>
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0a2      	beq.n	8004bee <_printf_float+0x9a>
 8004ca8:	232d      	movs	r3, #45	; 0x2d
 8004caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cae:	e79e      	b.n	8004bee <_printf_float+0x9a>
 8004cb0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004cb4:	f000 816e 	beq.w	8004f94 <_printf_float+0x440>
 8004cb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cbc:	d1b9      	bne.n	8004c32 <_printf_float+0xde>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1b7      	bne.n	8004c32 <_printf_float+0xde>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e7b4      	b.n	8004c30 <_printf_float+0xdc>
 8004cc6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004cca:	d119      	bne.n	8004d00 <_printf_float+0x1ac>
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	dd0c      	ble.n	8004cec <_printf_float+0x198>
 8004cd2:	6121      	str	r1, [r4, #16]
 8004cd4:	b913      	cbnz	r3, 8004cdc <_printf_float+0x188>
 8004cd6:	6822      	ldr	r2, [r4, #0]
 8004cd8:	07d2      	lsls	r2, r2, #31
 8004cda:	d502      	bpl.n	8004ce2 <_printf_float+0x18e>
 8004cdc:	3301      	adds	r3, #1
 8004cde:	440b      	add	r3, r1
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ce4:	f04f 0900 	mov.w	r9, #0
 8004ce8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cea:	e7d9      	b.n	8004ca0 <_printf_float+0x14c>
 8004cec:	b913      	cbnz	r3, 8004cf4 <_printf_float+0x1a0>
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	07d0      	lsls	r0, r2, #31
 8004cf2:	d501      	bpl.n	8004cf8 <_printf_float+0x1a4>
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	e7f3      	b.n	8004ce0 <_printf_float+0x18c>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e7f1      	b.n	8004ce0 <_printf_float+0x18c>
 8004cfc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004d00:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d04:	4293      	cmp	r3, r2
 8004d06:	db05      	blt.n	8004d14 <_printf_float+0x1c0>
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	07d1      	lsls	r1, r2, #31
 8004d0e:	d5e8      	bpl.n	8004ce2 <_printf_float+0x18e>
 8004d10:	3301      	adds	r3, #1
 8004d12:	e7e5      	b.n	8004ce0 <_printf_float+0x18c>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bfcc      	ite	gt
 8004d18:	2301      	movgt	r3, #1
 8004d1a:	f1c3 0302 	rsble	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	e7de      	b.n	8004ce0 <_printf_float+0x18c>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	055a      	lsls	r2, r3, #21
 8004d26:	d407      	bmi.n	8004d38 <_printf_float+0x1e4>
 8004d28:	6923      	ldr	r3, [r4, #16]
 8004d2a:	463a      	mov	r2, r7
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b0      	blx	r6
 8004d32:	3001      	adds	r0, #1
 8004d34:	d129      	bne.n	8004d8a <_printf_float+0x236>
 8004d36:	e764      	b.n	8004c02 <_printf_float+0xae>
 8004d38:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004d3c:	f240 80d7 	bls.w	8004eee <_printf_float+0x39a>
 8004d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d44:	2200      	movs	r2, #0
 8004d46:	2300      	movs	r3, #0
 8004d48:	f7fb fe2e 	bl	80009a8 <__aeabi_dcmpeq>
 8004d4c:	b388      	cbz	r0, 8004db2 <_printf_float+0x25e>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <_printf_float+0x300>)
 8004d52:	4659      	mov	r1, fp
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f43f af52 	beq.w	8004c02 <_printf_float+0xae>
 8004d5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d62:	429a      	cmp	r2, r3
 8004d64:	db02      	blt.n	8004d6c <_printf_float+0x218>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	07d8      	lsls	r0, r3, #31
 8004d6a:	d50e      	bpl.n	8004d8a <_printf_float+0x236>
 8004d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d70:	4659      	mov	r1, fp
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b0      	blx	r6
 8004d76:	3001      	adds	r0, #1
 8004d78:	f43f af43 	beq.w	8004c02 <_printf_float+0xae>
 8004d7c:	2700      	movs	r7, #0
 8004d7e:	f104 081a 	add.w	r8, r4, #26
 8004d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d84:	3b01      	subs	r3, #1
 8004d86:	42bb      	cmp	r3, r7
 8004d88:	dc09      	bgt.n	8004d9e <_printf_float+0x24a>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	079f      	lsls	r7, r3, #30
 8004d8e:	f100 80fd 	bmi.w	8004f8c <_printf_float+0x438>
 8004d92:	68e0      	ldr	r0, [r4, #12]
 8004d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d96:	4298      	cmp	r0, r3
 8004d98:	bfb8      	it	lt
 8004d9a:	4618      	movlt	r0, r3
 8004d9c:	e733      	b.n	8004c06 <_printf_float+0xb2>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4642      	mov	r2, r8
 8004da2:	4659      	mov	r1, fp
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b0      	blx	r6
 8004da8:	3001      	adds	r0, #1
 8004daa:	f43f af2a 	beq.w	8004c02 <_printf_float+0xae>
 8004dae:	3701      	adds	r7, #1
 8004db0:	e7e7      	b.n	8004d82 <_printf_float+0x22e>
 8004db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dc2b      	bgt.n	8004e10 <_printf_float+0x2bc>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <_printf_float+0x300>)
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b0      	blx	r6
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f af1d 	beq.w	8004c02 <_printf_float+0xae>
 8004dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dca:	b923      	cbnz	r3, 8004dd6 <_printf_float+0x282>
 8004dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dce:	b913      	cbnz	r3, 8004dd6 <_printf_float+0x282>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07d9      	lsls	r1, r3, #31
 8004dd4:	d5d9      	bpl.n	8004d8a <_printf_float+0x236>
 8004dd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dda:	4659      	mov	r1, fp
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b0      	blx	r6
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f af0e 	beq.w	8004c02 <_printf_float+0xae>
 8004de6:	f04f 0800 	mov.w	r8, #0
 8004dea:	f104 091a 	add.w	r9, r4, #26
 8004dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df0:	425b      	negs	r3, r3
 8004df2:	4543      	cmp	r3, r8
 8004df4:	dc01      	bgt.n	8004dfa <_printf_float+0x2a6>
 8004df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df8:	e797      	b.n	8004d2a <_printf_float+0x1d6>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	4659      	mov	r1, fp
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b0      	blx	r6
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f aefc 	beq.w	8004c02 <_printf_float+0xae>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	e7ee      	b.n	8004dee <_printf_float+0x29a>
 8004e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e14:	429a      	cmp	r2, r3
 8004e16:	bfa8      	it	ge
 8004e18:	461a      	movge	r2, r3
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	4690      	mov	r8, r2
 8004e1e:	dd07      	ble.n	8004e30 <_printf_float+0x2dc>
 8004e20:	4613      	mov	r3, r2
 8004e22:	4659      	mov	r1, fp
 8004e24:	463a      	mov	r2, r7
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b0      	blx	r6
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f aee9 	beq.w	8004c02 <_printf_float+0xae>
 8004e30:	f104 031a 	add.w	r3, r4, #26
 8004e34:	f04f 0a00 	mov.w	sl, #0
 8004e38:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e3e:	e015      	b.n	8004e6c <_printf_float+0x318>
 8004e40:	7fefffff 	.word	0x7fefffff
 8004e44:	08006e34 	.word	0x08006e34
 8004e48:	08006e30 	.word	0x08006e30
 8004e4c:	08006e3c 	.word	0x08006e3c
 8004e50:	08006e38 	.word	0x08006e38
 8004e54:	08006e40 	.word	0x08006e40
 8004e58:	2301      	movs	r3, #1
 8004e5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b0      	blx	r6
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f aecd 	beq.w	8004c02 <_printf_float+0xae>
 8004e68:	f10a 0a01 	add.w	sl, sl, #1
 8004e6c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e70:	eba9 0308 	sub.w	r3, r9, r8
 8004e74:	4553      	cmp	r3, sl
 8004e76:	dcef      	bgt.n	8004e58 <_printf_float+0x304>
 8004e78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	444f      	add	r7, r9
 8004e80:	db14      	blt.n	8004eac <_printf_float+0x358>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	07da      	lsls	r2, r3, #31
 8004e86:	d411      	bmi.n	8004eac <_printf_float+0x358>
 8004e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e8c:	eba3 0209 	sub.w	r2, r3, r9
 8004e90:	eba3 0901 	sub.w	r9, r3, r1
 8004e94:	4591      	cmp	r9, r2
 8004e96:	bfa8      	it	ge
 8004e98:	4691      	movge	r9, r2
 8004e9a:	f1b9 0f00 	cmp.w	r9, #0
 8004e9e:	dc0d      	bgt.n	8004ebc <_printf_float+0x368>
 8004ea0:	2700      	movs	r7, #0
 8004ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ea6:	f104 081a 	add.w	r8, r4, #26
 8004eaa:	e018      	b.n	8004ede <_printf_float+0x38a>
 8004eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b0      	blx	r6
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d1e6      	bne.n	8004e88 <_printf_float+0x334>
 8004eba:	e6a2      	b.n	8004c02 <_printf_float+0xae>
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b0      	blx	r6
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d1ea      	bne.n	8004ea0 <_printf_float+0x34c>
 8004eca:	e69a      	b.n	8004c02 <_printf_float+0xae>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4642      	mov	r2, r8
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b0      	blx	r6
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f ae93 	beq.w	8004c02 <_printf_float+0xae>
 8004edc:	3701      	adds	r7, #1
 8004ede:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	eba3 0309 	sub.w	r3, r3, r9
 8004ee8:	42bb      	cmp	r3, r7
 8004eea:	dcef      	bgt.n	8004ecc <_printf_float+0x378>
 8004eec:	e74d      	b.n	8004d8a <_printf_float+0x236>
 8004eee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ef0:	2a01      	cmp	r2, #1
 8004ef2:	dc01      	bgt.n	8004ef8 <_printf_float+0x3a4>
 8004ef4:	07db      	lsls	r3, r3, #31
 8004ef6:	d538      	bpl.n	8004f6a <_printf_float+0x416>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	463a      	mov	r2, r7
 8004efc:	4659      	mov	r1, fp
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b0      	blx	r6
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f ae7d 	beq.w	8004c02 <_printf_float+0xae>
 8004f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b0      	blx	r6
 8004f12:	3001      	adds	r0, #1
 8004f14:	f107 0701 	add.w	r7, r7, #1
 8004f18:	f43f ae73 	beq.w	8004c02 <_printf_float+0xae>
 8004f1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f22:	2200      	movs	r2, #0
 8004f24:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f7fb fd3d 	bl	80009a8 <__aeabi_dcmpeq>
 8004f2e:	b9c0      	cbnz	r0, 8004f62 <_printf_float+0x40e>
 8004f30:	4643      	mov	r3, r8
 8004f32:	463a      	mov	r2, r7
 8004f34:	4659      	mov	r1, fp
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b0      	blx	r6
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d10d      	bne.n	8004f5a <_printf_float+0x406>
 8004f3e:	e660      	b.n	8004c02 <_printf_float+0xae>
 8004f40:	2301      	movs	r3, #1
 8004f42:	4642      	mov	r2, r8
 8004f44:	4659      	mov	r1, fp
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b0      	blx	r6
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	f43f ae59 	beq.w	8004c02 <_printf_float+0xae>
 8004f50:	3701      	adds	r7, #1
 8004f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f54:	3b01      	subs	r3, #1
 8004f56:	42bb      	cmp	r3, r7
 8004f58:	dcf2      	bgt.n	8004f40 <_printf_float+0x3ec>
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f60:	e6e4      	b.n	8004d2c <_printf_float+0x1d8>
 8004f62:	2700      	movs	r7, #0
 8004f64:	f104 081a 	add.w	r8, r4, #26
 8004f68:	e7f3      	b.n	8004f52 <_printf_float+0x3fe>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e7e1      	b.n	8004f32 <_printf_float+0x3de>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4642      	mov	r2, r8
 8004f72:	4659      	mov	r1, fp
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b0      	blx	r6
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae42 	beq.w	8004c02 <_printf_float+0xae>
 8004f7e:	3701      	adds	r7, #1
 8004f80:	68e3      	ldr	r3, [r4, #12]
 8004f82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	42bb      	cmp	r3, r7
 8004f88:	dcf1      	bgt.n	8004f6e <_printf_float+0x41a>
 8004f8a:	e702      	b.n	8004d92 <_printf_float+0x23e>
 8004f8c:	2700      	movs	r7, #0
 8004f8e:	f104 0819 	add.w	r8, r4, #25
 8004f92:	e7f5      	b.n	8004f80 <_printf_float+0x42c>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f43f ae94 	beq.w	8004cc2 <_printf_float+0x16e>
 8004f9a:	f04f 0c00 	mov.w	ip, #0
 8004f9e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004fa2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004fa6:	6022      	str	r2, [r4, #0]
 8004fa8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004fac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	463a      	mov	r2, r7
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7ff fd3a 	bl	8004a30 <__cvt>
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	e64f      	b.n	8004c60 <_printf_float+0x10c>

08004fc0 <_printf_common>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	4691      	mov	r9, r2
 8004fc6:	461f      	mov	r7, r3
 8004fc8:	688a      	ldr	r2, [r1, #8]
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	4606      	mov	r6, r0
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	bfb8      	it	lt
 8004fd2:	4613      	movlt	r3, r2
 8004fd4:	f8c9 3000 	str.w	r3, [r9]
 8004fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fdc:	460c      	mov	r4, r1
 8004fde:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fe2:	b112      	cbz	r2, 8004fea <_printf_common+0x2a>
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f8c9 3000 	str.w	r3, [r9]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	0699      	lsls	r1, r3, #26
 8004fee:	bf42      	ittt	mi
 8004ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ff4:	3302      	addmi	r3, #2
 8004ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	f015 0506 	ands.w	r5, r5, #6
 8005000:	d107      	bne.n	8005012 <_printf_common+0x52>
 8005002:	f104 0a19 	add.w	sl, r4, #25
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	f8d9 2000 	ldr.w	r2, [r9]
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	42ab      	cmp	r3, r5
 8005010:	dc29      	bgt.n	8005066 <_printf_common+0xa6>
 8005012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	3300      	adds	r3, #0
 800501a:	bf18      	it	ne
 800501c:	2301      	movne	r3, #1
 800501e:	0692      	lsls	r2, r2, #26
 8005020:	d42e      	bmi.n	8005080 <_printf_common+0xc0>
 8005022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005026:	4639      	mov	r1, r7
 8005028:	4630      	mov	r0, r6
 800502a:	47c0      	blx	r8
 800502c:	3001      	adds	r0, #1
 800502e:	d021      	beq.n	8005074 <_printf_common+0xb4>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	68e5      	ldr	r5, [r4, #12]
 8005034:	f003 0306 	and.w	r3, r3, #6
 8005038:	2b04      	cmp	r3, #4
 800503a:	bf18      	it	ne
 800503c:	2500      	movne	r5, #0
 800503e:	f8d9 2000 	ldr.w	r2, [r9]
 8005042:	f04f 0900 	mov.w	r9, #0
 8005046:	bf08      	it	eq
 8005048:	1aad      	subeq	r5, r5, r2
 800504a:	68a3      	ldr	r3, [r4, #8]
 800504c:	6922      	ldr	r2, [r4, #16]
 800504e:	bf08      	it	eq
 8005050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005054:	4293      	cmp	r3, r2
 8005056:	bfc4      	itt	gt
 8005058:	1a9b      	subgt	r3, r3, r2
 800505a:	18ed      	addgt	r5, r5, r3
 800505c:	341a      	adds	r4, #26
 800505e:	454d      	cmp	r5, r9
 8005060:	d11a      	bne.n	8005098 <_printf_common+0xd8>
 8005062:	2000      	movs	r0, #0
 8005064:	e008      	b.n	8005078 <_printf_common+0xb8>
 8005066:	2301      	movs	r3, #1
 8005068:	4652      	mov	r2, sl
 800506a:	4639      	mov	r1, r7
 800506c:	4630      	mov	r0, r6
 800506e:	47c0      	blx	r8
 8005070:	3001      	adds	r0, #1
 8005072:	d103      	bne.n	800507c <_printf_common+0xbc>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	3501      	adds	r5, #1
 800507e:	e7c2      	b.n	8005006 <_printf_common+0x46>
 8005080:	2030      	movs	r0, #48	; 0x30
 8005082:	18e1      	adds	r1, r4, r3
 8005084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800508e:	4422      	add	r2, r4
 8005090:	3302      	adds	r3, #2
 8005092:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005096:	e7c4      	b.n	8005022 <_printf_common+0x62>
 8005098:	2301      	movs	r3, #1
 800509a:	4622      	mov	r2, r4
 800509c:	4639      	mov	r1, r7
 800509e:	4630      	mov	r0, r6
 80050a0:	47c0      	blx	r8
 80050a2:	3001      	adds	r0, #1
 80050a4:	d0e6      	beq.n	8005074 <_printf_common+0xb4>
 80050a6:	f109 0901 	add.w	r9, r9, #1
 80050aa:	e7d8      	b.n	800505e <_printf_common+0x9e>

080050ac <_puts_r>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	460e      	mov	r6, r1
 80050b0:	4605      	mov	r5, r0
 80050b2:	b118      	cbz	r0, 80050bc <_puts_r+0x10>
 80050b4:	6983      	ldr	r3, [r0, #24]
 80050b6:	b90b      	cbnz	r3, 80050bc <_puts_r+0x10>
 80050b8:	f001 f84e 	bl	8006158 <__sinit>
 80050bc:	69ab      	ldr	r3, [r5, #24]
 80050be:	68ac      	ldr	r4, [r5, #8]
 80050c0:	b913      	cbnz	r3, 80050c8 <_puts_r+0x1c>
 80050c2:	4628      	mov	r0, r5
 80050c4:	f001 f848 	bl	8006158 <__sinit>
 80050c8:	4b23      	ldr	r3, [pc, #140]	; (8005158 <_puts_r+0xac>)
 80050ca:	429c      	cmp	r4, r3
 80050cc:	d117      	bne.n	80050fe <_puts_r+0x52>
 80050ce:	686c      	ldr	r4, [r5, #4]
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	071b      	lsls	r3, r3, #28
 80050d4:	d51d      	bpl.n	8005112 <_puts_r+0x66>
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	b1db      	cbz	r3, 8005112 <_puts_r+0x66>
 80050da:	3e01      	subs	r6, #1
 80050dc:	68a3      	ldr	r3, [r4, #8]
 80050de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050e2:	3b01      	subs	r3, #1
 80050e4:	60a3      	str	r3, [r4, #8]
 80050e6:	b9e9      	cbnz	r1, 8005124 <_puts_r+0x78>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	da2e      	bge.n	800514a <_puts_r+0x9e>
 80050ec:	4622      	mov	r2, r4
 80050ee:	210a      	movs	r1, #10
 80050f0:	4628      	mov	r0, r5
 80050f2:	f000 f83f 	bl	8005174 <__swbuf_r>
 80050f6:	3001      	adds	r0, #1
 80050f8:	d011      	beq.n	800511e <_puts_r+0x72>
 80050fa:	200a      	movs	r0, #10
 80050fc:	e011      	b.n	8005122 <_puts_r+0x76>
 80050fe:	4b17      	ldr	r3, [pc, #92]	; (800515c <_puts_r+0xb0>)
 8005100:	429c      	cmp	r4, r3
 8005102:	d101      	bne.n	8005108 <_puts_r+0x5c>
 8005104:	68ac      	ldr	r4, [r5, #8]
 8005106:	e7e3      	b.n	80050d0 <_puts_r+0x24>
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <_puts_r+0xb4>)
 800510a:	429c      	cmp	r4, r3
 800510c:	bf08      	it	eq
 800510e:	68ec      	ldreq	r4, [r5, #12]
 8005110:	e7de      	b.n	80050d0 <_puts_r+0x24>
 8005112:	4621      	mov	r1, r4
 8005114:	4628      	mov	r0, r5
 8005116:	f000 f87f 	bl	8005218 <__swsetup_r>
 800511a:	2800      	cmp	r0, #0
 800511c:	d0dd      	beq.n	80050da <_puts_r+0x2e>
 800511e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	2b00      	cmp	r3, #0
 8005126:	da04      	bge.n	8005132 <_puts_r+0x86>
 8005128:	69a2      	ldr	r2, [r4, #24]
 800512a:	429a      	cmp	r2, r3
 800512c:	dc06      	bgt.n	800513c <_puts_r+0x90>
 800512e:	290a      	cmp	r1, #10
 8005130:	d004      	beq.n	800513c <_puts_r+0x90>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	7019      	strb	r1, [r3, #0]
 800513a:	e7cf      	b.n	80050dc <_puts_r+0x30>
 800513c:	4622      	mov	r2, r4
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f818 	bl	8005174 <__swbuf_r>
 8005144:	3001      	adds	r0, #1
 8005146:	d1c9      	bne.n	80050dc <_puts_r+0x30>
 8005148:	e7e9      	b.n	800511e <_puts_r+0x72>
 800514a:	200a      	movs	r0, #10
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	7018      	strb	r0, [r3, #0]
 8005154:	e7e5      	b.n	8005122 <_puts_r+0x76>
 8005156:	bf00      	nop
 8005158:	08006e70 	.word	0x08006e70
 800515c:	08006e90 	.word	0x08006e90
 8005160:	08006e50 	.word	0x08006e50

08005164 <puts>:
 8005164:	4b02      	ldr	r3, [pc, #8]	; (8005170 <puts+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f7ff bf9f 	b.w	80050ac <_puts_r>
 800516e:	bf00      	nop
 8005170:	20000038 	.word	0x20000038

08005174 <__swbuf_r>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	460e      	mov	r6, r1
 8005178:	4614      	mov	r4, r2
 800517a:	4605      	mov	r5, r0
 800517c:	b118      	cbz	r0, 8005186 <__swbuf_r+0x12>
 800517e:	6983      	ldr	r3, [r0, #24]
 8005180:	b90b      	cbnz	r3, 8005186 <__swbuf_r+0x12>
 8005182:	f000 ffe9 	bl	8006158 <__sinit>
 8005186:	4b21      	ldr	r3, [pc, #132]	; (800520c <__swbuf_r+0x98>)
 8005188:	429c      	cmp	r4, r3
 800518a:	d12a      	bne.n	80051e2 <__swbuf_r+0x6e>
 800518c:	686c      	ldr	r4, [r5, #4]
 800518e:	69a3      	ldr	r3, [r4, #24]
 8005190:	60a3      	str	r3, [r4, #8]
 8005192:	89a3      	ldrh	r3, [r4, #12]
 8005194:	071a      	lsls	r2, r3, #28
 8005196:	d52e      	bpl.n	80051f6 <__swbuf_r+0x82>
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	b363      	cbz	r3, 80051f6 <__swbuf_r+0x82>
 800519c:	6923      	ldr	r3, [r4, #16]
 800519e:	6820      	ldr	r0, [r4, #0]
 80051a0:	b2f6      	uxtb	r6, r6
 80051a2:	1ac0      	subs	r0, r0, r3
 80051a4:	6963      	ldr	r3, [r4, #20]
 80051a6:	4637      	mov	r7, r6
 80051a8:	4283      	cmp	r3, r0
 80051aa:	dc04      	bgt.n	80051b6 <__swbuf_r+0x42>
 80051ac:	4621      	mov	r1, r4
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 ff68 	bl	8006084 <_fflush_r>
 80051b4:	bb28      	cbnz	r0, 8005202 <__swbuf_r+0x8e>
 80051b6:	68a3      	ldr	r3, [r4, #8]
 80051b8:	3001      	adds	r0, #1
 80051ba:	3b01      	subs	r3, #1
 80051bc:	60a3      	str	r3, [r4, #8]
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	6022      	str	r2, [r4, #0]
 80051c4:	701e      	strb	r6, [r3, #0]
 80051c6:	6963      	ldr	r3, [r4, #20]
 80051c8:	4283      	cmp	r3, r0
 80051ca:	d004      	beq.n	80051d6 <__swbuf_r+0x62>
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	07db      	lsls	r3, r3, #31
 80051d0:	d519      	bpl.n	8005206 <__swbuf_r+0x92>
 80051d2:	2e0a      	cmp	r6, #10
 80051d4:	d117      	bne.n	8005206 <__swbuf_r+0x92>
 80051d6:	4621      	mov	r1, r4
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 ff53 	bl	8006084 <_fflush_r>
 80051de:	b190      	cbz	r0, 8005206 <__swbuf_r+0x92>
 80051e0:	e00f      	b.n	8005202 <__swbuf_r+0x8e>
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <__swbuf_r+0x9c>)
 80051e4:	429c      	cmp	r4, r3
 80051e6:	d101      	bne.n	80051ec <__swbuf_r+0x78>
 80051e8:	68ac      	ldr	r4, [r5, #8]
 80051ea:	e7d0      	b.n	800518e <__swbuf_r+0x1a>
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <__swbuf_r+0xa0>)
 80051ee:	429c      	cmp	r4, r3
 80051f0:	bf08      	it	eq
 80051f2:	68ec      	ldreq	r4, [r5, #12]
 80051f4:	e7cb      	b.n	800518e <__swbuf_r+0x1a>
 80051f6:	4621      	mov	r1, r4
 80051f8:	4628      	mov	r0, r5
 80051fa:	f000 f80d 	bl	8005218 <__swsetup_r>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d0cc      	beq.n	800519c <__swbuf_r+0x28>
 8005202:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005206:	4638      	mov	r0, r7
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520a:	bf00      	nop
 800520c:	08006e70 	.word	0x08006e70
 8005210:	08006e90 	.word	0x08006e90
 8005214:	08006e50 	.word	0x08006e50

08005218 <__swsetup_r>:
 8005218:	4b32      	ldr	r3, [pc, #200]	; (80052e4 <__swsetup_r+0xcc>)
 800521a:	b570      	push	{r4, r5, r6, lr}
 800521c:	681d      	ldr	r5, [r3, #0]
 800521e:	4606      	mov	r6, r0
 8005220:	460c      	mov	r4, r1
 8005222:	b125      	cbz	r5, 800522e <__swsetup_r+0x16>
 8005224:	69ab      	ldr	r3, [r5, #24]
 8005226:	b913      	cbnz	r3, 800522e <__swsetup_r+0x16>
 8005228:	4628      	mov	r0, r5
 800522a:	f000 ff95 	bl	8006158 <__sinit>
 800522e:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <__swsetup_r+0xd0>)
 8005230:	429c      	cmp	r4, r3
 8005232:	d10f      	bne.n	8005254 <__swsetup_r+0x3c>
 8005234:	686c      	ldr	r4, [r5, #4]
 8005236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523a:	b29a      	uxth	r2, r3
 800523c:	0715      	lsls	r5, r2, #28
 800523e:	d42c      	bmi.n	800529a <__swsetup_r+0x82>
 8005240:	06d0      	lsls	r0, r2, #27
 8005242:	d411      	bmi.n	8005268 <__swsetup_r+0x50>
 8005244:	2209      	movs	r2, #9
 8005246:	6032      	str	r2, [r6, #0]
 8005248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800524c:	81a3      	strh	r3, [r4, #12]
 800524e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005252:	e03e      	b.n	80052d2 <__swsetup_r+0xba>
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <__swsetup_r+0xd4>)
 8005256:	429c      	cmp	r4, r3
 8005258:	d101      	bne.n	800525e <__swsetup_r+0x46>
 800525a:	68ac      	ldr	r4, [r5, #8]
 800525c:	e7eb      	b.n	8005236 <__swsetup_r+0x1e>
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <__swsetup_r+0xd8>)
 8005260:	429c      	cmp	r4, r3
 8005262:	bf08      	it	eq
 8005264:	68ec      	ldreq	r4, [r5, #12]
 8005266:	e7e6      	b.n	8005236 <__swsetup_r+0x1e>
 8005268:	0751      	lsls	r1, r2, #29
 800526a:	d512      	bpl.n	8005292 <__swsetup_r+0x7a>
 800526c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800526e:	b141      	cbz	r1, 8005282 <__swsetup_r+0x6a>
 8005270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005274:	4299      	cmp	r1, r3
 8005276:	d002      	beq.n	800527e <__swsetup_r+0x66>
 8005278:	4630      	mov	r0, r6
 800527a:	f001 fb79 	bl	8006970 <_free_r>
 800527e:	2300      	movs	r3, #0
 8005280:	6363      	str	r3, [r4, #52]	; 0x34
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	2300      	movs	r3, #0
 800528c:	6063      	str	r3, [r4, #4]
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	f043 0308 	orr.w	r3, r3, #8
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	6923      	ldr	r3, [r4, #16]
 800529c:	b94b      	cbnz	r3, 80052b2 <__swsetup_r+0x9a>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a8:	d003      	beq.n	80052b2 <__swsetup_r+0x9a>
 80052aa:	4621      	mov	r1, r4
 80052ac:	4630      	mov	r0, r6
 80052ae:	f001 f80f 	bl	80062d0 <__smakebuf_r>
 80052b2:	89a2      	ldrh	r2, [r4, #12]
 80052b4:	f012 0301 	ands.w	r3, r2, #1
 80052b8:	d00c      	beq.n	80052d4 <__swsetup_r+0xbc>
 80052ba:	2300      	movs	r3, #0
 80052bc:	60a3      	str	r3, [r4, #8]
 80052be:	6963      	ldr	r3, [r4, #20]
 80052c0:	425b      	negs	r3, r3
 80052c2:	61a3      	str	r3, [r4, #24]
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	b953      	cbnz	r3, 80052de <__swsetup_r+0xc6>
 80052c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80052d0:	d1ba      	bne.n	8005248 <__swsetup_r+0x30>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	0792      	lsls	r2, r2, #30
 80052d6:	bf58      	it	pl
 80052d8:	6963      	ldrpl	r3, [r4, #20]
 80052da:	60a3      	str	r3, [r4, #8]
 80052dc:	e7f2      	b.n	80052c4 <__swsetup_r+0xac>
 80052de:	2000      	movs	r0, #0
 80052e0:	e7f7      	b.n	80052d2 <__swsetup_r+0xba>
 80052e2:	bf00      	nop
 80052e4:	20000038 	.word	0x20000038
 80052e8:	08006e70 	.word	0x08006e70
 80052ec:	08006e90 	.word	0x08006e90
 80052f0:	08006e50 	.word	0x08006e50

080052f4 <quorem>:
 80052f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	6903      	ldr	r3, [r0, #16]
 80052fa:	690c      	ldr	r4, [r1, #16]
 80052fc:	4680      	mov	r8, r0
 80052fe:	42a3      	cmp	r3, r4
 8005300:	f2c0 8084 	blt.w	800540c <quorem+0x118>
 8005304:	3c01      	subs	r4, #1
 8005306:	f101 0714 	add.w	r7, r1, #20
 800530a:	f100 0614 	add.w	r6, r0, #20
 800530e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005312:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005316:	3501      	adds	r5, #1
 8005318:	fbb0 f5f5 	udiv	r5, r0, r5
 800531c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005320:	eb06 030c 	add.w	r3, r6, ip
 8005324:	eb07 090c 	add.w	r9, r7, ip
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	b39d      	cbz	r5, 8005394 <quorem+0xa0>
 800532c:	f04f 0a00 	mov.w	sl, #0
 8005330:	4638      	mov	r0, r7
 8005332:	46b6      	mov	lr, r6
 8005334:	46d3      	mov	fp, sl
 8005336:	f850 2b04 	ldr.w	r2, [r0], #4
 800533a:	b293      	uxth	r3, r2
 800533c:	fb05 a303 	mla	r3, r5, r3, sl
 8005340:	0c12      	lsrs	r2, r2, #16
 8005342:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005346:	fb05 a202 	mla	r2, r5, r2, sl
 800534a:	b29b      	uxth	r3, r3
 800534c:	ebab 0303 	sub.w	r3, fp, r3
 8005350:	f8de b000 	ldr.w	fp, [lr]
 8005354:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005358:	fa1f fb8b 	uxth.w	fp, fp
 800535c:	445b      	add	r3, fp
 800535e:	fa1f fb82 	uxth.w	fp, r2
 8005362:	f8de 2000 	ldr.w	r2, [lr]
 8005366:	4581      	cmp	r9, r0
 8005368:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800536c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005370:	b29b      	uxth	r3, r3
 8005372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005376:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800537a:	f84e 3b04 	str.w	r3, [lr], #4
 800537e:	d2da      	bcs.n	8005336 <quorem+0x42>
 8005380:	f856 300c 	ldr.w	r3, [r6, ip]
 8005384:	b933      	cbnz	r3, 8005394 <quorem+0xa0>
 8005386:	9b01      	ldr	r3, [sp, #4]
 8005388:	3b04      	subs	r3, #4
 800538a:	429e      	cmp	r6, r3
 800538c:	461a      	mov	r2, r3
 800538e:	d331      	bcc.n	80053f4 <quorem+0x100>
 8005390:	f8c8 4010 	str.w	r4, [r8, #16]
 8005394:	4640      	mov	r0, r8
 8005396:	f001 fa15 	bl	80067c4 <__mcmp>
 800539a:	2800      	cmp	r0, #0
 800539c:	db26      	blt.n	80053ec <quorem+0xf8>
 800539e:	4630      	mov	r0, r6
 80053a0:	f04f 0c00 	mov.w	ip, #0
 80053a4:	3501      	adds	r5, #1
 80053a6:	f857 1b04 	ldr.w	r1, [r7], #4
 80053aa:	f8d0 e000 	ldr.w	lr, [r0]
 80053ae:	b28b      	uxth	r3, r1
 80053b0:	ebac 0303 	sub.w	r3, ip, r3
 80053b4:	fa1f f28e 	uxth.w	r2, lr
 80053b8:	4413      	add	r3, r2
 80053ba:	0c0a      	lsrs	r2, r1, #16
 80053bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053ca:	45b9      	cmp	r9, r7
 80053cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053d0:	f840 3b04 	str.w	r3, [r0], #4
 80053d4:	d2e7      	bcs.n	80053a6 <quorem+0xb2>
 80053d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053de:	b92a      	cbnz	r2, 80053ec <quorem+0xf8>
 80053e0:	3b04      	subs	r3, #4
 80053e2:	429e      	cmp	r6, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	d30b      	bcc.n	8005400 <quorem+0x10c>
 80053e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80053ec:	4628      	mov	r0, r5
 80053ee:	b003      	add	sp, #12
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	3b04      	subs	r3, #4
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d1c9      	bne.n	8005390 <quorem+0x9c>
 80053fc:	3c01      	subs	r4, #1
 80053fe:	e7c4      	b.n	800538a <quorem+0x96>
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	3b04      	subs	r3, #4
 8005404:	2a00      	cmp	r2, #0
 8005406:	d1ef      	bne.n	80053e8 <quorem+0xf4>
 8005408:	3c01      	subs	r4, #1
 800540a:	e7ea      	b.n	80053e2 <quorem+0xee>
 800540c:	2000      	movs	r0, #0
 800540e:	e7ee      	b.n	80053ee <quorem+0xfa>

08005410 <_dtoa_r>:
 8005410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	4616      	mov	r6, r2
 8005416:	461f      	mov	r7, r3
 8005418:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800541a:	b095      	sub	sp, #84	; 0x54
 800541c:	4604      	mov	r4, r0
 800541e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005422:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005426:	b93d      	cbnz	r5, 8005438 <_dtoa_r+0x28>
 8005428:	2010      	movs	r0, #16
 800542a:	f000 ff91 	bl	8006350 <malloc>
 800542e:	6260      	str	r0, [r4, #36]	; 0x24
 8005430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005434:	6005      	str	r5, [r0, #0]
 8005436:	60c5      	str	r5, [r0, #12]
 8005438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	b151      	cbz	r1, 8005454 <_dtoa_r+0x44>
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	2301      	movs	r3, #1
 8005442:	4093      	lsls	r3, r2
 8005444:	604a      	str	r2, [r1, #4]
 8005446:	608b      	str	r3, [r1, #8]
 8005448:	4620      	mov	r0, r4
 800544a:	f000 ffda 	bl	8006402 <_Bfree>
 800544e:	2200      	movs	r2, #0
 8005450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	1e3b      	subs	r3, r7, #0
 8005456:	bfaf      	iteee	ge
 8005458:	2300      	movge	r3, #0
 800545a:	2201      	movlt	r2, #1
 800545c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005460:	9303      	strlt	r3, [sp, #12]
 8005462:	bfac      	ite	ge
 8005464:	f8c8 3000 	strge.w	r3, [r8]
 8005468:	f8c8 2000 	strlt.w	r2, [r8]
 800546c:	4bae      	ldr	r3, [pc, #696]	; (8005728 <_dtoa_r+0x318>)
 800546e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005472:	ea33 0308 	bics.w	r3, r3, r8
 8005476:	d11b      	bne.n	80054b0 <_dtoa_r+0xa0>
 8005478:	f242 730f 	movw	r3, #9999	; 0x270f
 800547c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	9b02      	ldr	r3, [sp, #8]
 8005482:	b923      	cbnz	r3, 800548e <_dtoa_r+0x7e>
 8005484:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005488:	2800      	cmp	r0, #0
 800548a:	f000 8545 	beq.w	8005f18 <_dtoa_r+0xb08>
 800548e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005490:	b953      	cbnz	r3, 80054a8 <_dtoa_r+0x98>
 8005492:	4ba6      	ldr	r3, [pc, #664]	; (800572c <_dtoa_r+0x31c>)
 8005494:	e021      	b.n	80054da <_dtoa_r+0xca>
 8005496:	4ba6      	ldr	r3, [pc, #664]	; (8005730 <_dtoa_r+0x320>)
 8005498:	9306      	str	r3, [sp, #24]
 800549a:	3308      	adds	r3, #8
 800549c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	9806      	ldr	r0, [sp, #24]
 80054a2:	b015      	add	sp, #84	; 0x54
 80054a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a8:	4ba0      	ldr	r3, [pc, #640]	; (800572c <_dtoa_r+0x31c>)
 80054aa:	9306      	str	r3, [sp, #24]
 80054ac:	3303      	adds	r3, #3
 80054ae:	e7f5      	b.n	800549c <_dtoa_r+0x8c>
 80054b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	4630      	mov	r0, r6
 80054ba:	4639      	mov	r1, r7
 80054bc:	f7fb fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80054c0:	4682      	mov	sl, r0
 80054c2:	b160      	cbz	r0, 80054de <_dtoa_r+0xce>
 80054c4:	2301      	movs	r3, #1
 80054c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8520 	beq.w	8005f12 <_dtoa_r+0xb02>
 80054d2:	4b98      	ldr	r3, [pc, #608]	; (8005734 <_dtoa_r+0x324>)
 80054d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	3b01      	subs	r3, #1
 80054da:	9306      	str	r3, [sp, #24]
 80054dc:	e7e0      	b.n	80054a0 <_dtoa_r+0x90>
 80054de:	ab12      	add	r3, sp, #72	; 0x48
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	ab13      	add	r3, sp, #76	; 0x4c
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	4632      	mov	r2, r6
 80054e8:	463b      	mov	r3, r7
 80054ea:	4620      	mov	r0, r4
 80054ec:	f001 f9e2 	bl	80068b4 <__d2b>
 80054f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054f4:	4683      	mov	fp, r0
 80054f6:	2d00      	cmp	r5, #0
 80054f8:	d07d      	beq.n	80055f6 <_dtoa_r+0x1e6>
 80054fa:	46b0      	mov	r8, r6
 80054fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005500:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005504:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005508:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800550c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005510:	2200      	movs	r2, #0
 8005512:	4b89      	ldr	r3, [pc, #548]	; (8005738 <_dtoa_r+0x328>)
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f7fa fe26 	bl	8000168 <__aeabi_dsub>
 800551c:	a37c      	add	r3, pc, #496	; (adr r3, 8005710 <_dtoa_r+0x300>)
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f7fa ffd9 	bl	80004d8 <__aeabi_dmul>
 8005526:	a37c      	add	r3, pc, #496	; (adr r3, 8005718 <_dtoa_r+0x308>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa fe1e 	bl	800016c <__adddf3>
 8005530:	4606      	mov	r6, r0
 8005532:	4628      	mov	r0, r5
 8005534:	460f      	mov	r7, r1
 8005536:	f7fa ff65 	bl	8000404 <__aeabi_i2d>
 800553a:	a379      	add	r3, pc, #484	; (adr r3, 8005720 <_dtoa_r+0x310>)
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f7fa ffca 	bl	80004d8 <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fa fe0e 	bl	800016c <__adddf3>
 8005550:	4606      	mov	r6, r0
 8005552:	460f      	mov	r7, r1
 8005554:	f7fb fa70 	bl	8000a38 <__aeabi_d2iz>
 8005558:	2200      	movs	r2, #0
 800555a:	4682      	mov	sl, r0
 800555c:	2300      	movs	r3, #0
 800555e:	4630      	mov	r0, r6
 8005560:	4639      	mov	r1, r7
 8005562:	f7fb fa2b 	bl	80009bc <__aeabi_dcmplt>
 8005566:	b148      	cbz	r0, 800557c <_dtoa_r+0x16c>
 8005568:	4650      	mov	r0, sl
 800556a:	f7fa ff4b 	bl	8000404 <__aeabi_i2d>
 800556e:	4632      	mov	r2, r6
 8005570:	463b      	mov	r3, r7
 8005572:	f7fb fa19 	bl	80009a8 <__aeabi_dcmpeq>
 8005576:	b908      	cbnz	r0, 800557c <_dtoa_r+0x16c>
 8005578:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800557c:	f1ba 0f16 	cmp.w	sl, #22
 8005580:	d85a      	bhi.n	8005638 <_dtoa_r+0x228>
 8005582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005586:	496d      	ldr	r1, [pc, #436]	; (800573c <_dtoa_r+0x32c>)
 8005588:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800558c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005590:	f7fb fa32 	bl	80009f8 <__aeabi_dcmpgt>
 8005594:	2800      	cmp	r0, #0
 8005596:	d051      	beq.n	800563c <_dtoa_r+0x22c>
 8005598:	2300      	movs	r3, #0
 800559a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800559e:	930d      	str	r3, [sp, #52]	; 0x34
 80055a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055a2:	1b5d      	subs	r5, r3, r5
 80055a4:	1e6b      	subs	r3, r5, #1
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	bf43      	ittte	mi
 80055aa:	2300      	movmi	r3, #0
 80055ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80055b0:	9307      	strmi	r3, [sp, #28]
 80055b2:	f04f 0900 	movpl.w	r9, #0
 80055b6:	f1ba 0f00 	cmp.w	sl, #0
 80055ba:	db41      	blt.n	8005640 <_dtoa_r+0x230>
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80055c2:	4453      	add	r3, sl
 80055c4:	9307      	str	r3, [sp, #28]
 80055c6:	2300      	movs	r3, #0
 80055c8:	9308      	str	r3, [sp, #32]
 80055ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055cc:	2b09      	cmp	r3, #9
 80055ce:	f200 808f 	bhi.w	80056f0 <_dtoa_r+0x2e0>
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	bfc4      	itt	gt
 80055d6:	3b04      	subgt	r3, #4
 80055d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80055da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055dc:	bfc8      	it	gt
 80055de:	2500      	movgt	r5, #0
 80055e0:	f1a3 0302 	sub.w	r3, r3, #2
 80055e4:	bfd8      	it	le
 80055e6:	2501      	movle	r5, #1
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	f200 808d 	bhi.w	8005708 <_dtoa_r+0x2f8>
 80055ee:	e8df f003 	tbb	[pc, r3]
 80055f2:	7d7b      	.short	0x7d7b
 80055f4:	6f2f      	.short	0x6f2f
 80055f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80055fa:	441d      	add	r5, r3
 80055fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005600:	2820      	cmp	r0, #32
 8005602:	dd13      	ble.n	800562c <_dtoa_r+0x21c>
 8005604:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005608:	9b02      	ldr	r3, [sp, #8]
 800560a:	fa08 f800 	lsl.w	r8, r8, r0
 800560e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005612:	fa23 f000 	lsr.w	r0, r3, r0
 8005616:	ea48 0000 	orr.w	r0, r8, r0
 800561a:	f7fa fee3 	bl	80003e4 <__aeabi_ui2d>
 800561e:	2301      	movs	r3, #1
 8005620:	4680      	mov	r8, r0
 8005622:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005626:	3d01      	subs	r5, #1
 8005628:	9310      	str	r3, [sp, #64]	; 0x40
 800562a:	e771      	b.n	8005510 <_dtoa_r+0x100>
 800562c:	9b02      	ldr	r3, [sp, #8]
 800562e:	f1c0 0020 	rsb	r0, r0, #32
 8005632:	fa03 f000 	lsl.w	r0, r3, r0
 8005636:	e7f0      	b.n	800561a <_dtoa_r+0x20a>
 8005638:	2301      	movs	r3, #1
 800563a:	e7b0      	b.n	800559e <_dtoa_r+0x18e>
 800563c:	900d      	str	r0, [sp, #52]	; 0x34
 800563e:	e7af      	b.n	80055a0 <_dtoa_r+0x190>
 8005640:	f1ca 0300 	rsb	r3, sl, #0
 8005644:	9308      	str	r3, [sp, #32]
 8005646:	2300      	movs	r3, #0
 8005648:	eba9 090a 	sub.w	r9, r9, sl
 800564c:	930c      	str	r3, [sp, #48]	; 0x30
 800564e:	e7bc      	b.n	80055ca <_dtoa_r+0x1ba>
 8005650:	2301      	movs	r3, #1
 8005652:	9309      	str	r3, [sp, #36]	; 0x24
 8005654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005656:	2b00      	cmp	r3, #0
 8005658:	dd74      	ble.n	8005744 <_dtoa_r+0x334>
 800565a:	4698      	mov	r8, r3
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	2200      	movs	r2, #0
 8005660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005662:	6072      	str	r2, [r6, #4]
 8005664:	2204      	movs	r2, #4
 8005666:	f102 0014 	add.w	r0, r2, #20
 800566a:	4298      	cmp	r0, r3
 800566c:	6871      	ldr	r1, [r6, #4]
 800566e:	d96e      	bls.n	800574e <_dtoa_r+0x33e>
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fe92 	bl	800639a <_Balloc>
 8005676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005678:	6030      	str	r0, [r6, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b8 0f0e 	cmp.w	r8, #14
 8005680:	9306      	str	r3, [sp, #24]
 8005682:	f200 80ed 	bhi.w	8005860 <_dtoa_r+0x450>
 8005686:	2d00      	cmp	r5, #0
 8005688:	f000 80ea 	beq.w	8005860 <_dtoa_r+0x450>
 800568c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005690:	f1ba 0f00 	cmp.w	sl, #0
 8005694:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005698:	dd77      	ble.n	800578a <_dtoa_r+0x37a>
 800569a:	4a28      	ldr	r2, [pc, #160]	; (800573c <_dtoa_r+0x32c>)
 800569c:	f00a 030f 	and.w	r3, sl, #15
 80056a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80056a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056a8:	06f0      	lsls	r0, r6, #27
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056b2:	d568      	bpl.n	8005786 <_dtoa_r+0x376>
 80056b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <_dtoa_r+0x330>)
 80056ba:	2503      	movs	r5, #3
 80056bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056c0:	f7fb f834 	bl	800072c <__aeabi_ddiv>
 80056c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056c8:	f006 060f 	and.w	r6, r6, #15
 80056cc:	4f1c      	ldr	r7, [pc, #112]	; (8005740 <_dtoa_r+0x330>)
 80056ce:	e04f      	b.n	8005770 <_dtoa_r+0x360>
 80056d0:	2301      	movs	r3, #1
 80056d2:	9309      	str	r3, [sp, #36]	; 0x24
 80056d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056d6:	4453      	add	r3, sl
 80056d8:	f103 0801 	add.w	r8, r3, #1
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	4643      	mov	r3, r8
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	bfb8      	it	lt
 80056e4:	2301      	movlt	r3, #1
 80056e6:	e7ba      	b.n	800565e <_dtoa_r+0x24e>
 80056e8:	2300      	movs	r3, #0
 80056ea:	e7b2      	b.n	8005652 <_dtoa_r+0x242>
 80056ec:	2300      	movs	r3, #0
 80056ee:	e7f0      	b.n	80056d2 <_dtoa_r+0x2c2>
 80056f0:	2501      	movs	r5, #1
 80056f2:	2300      	movs	r3, #0
 80056f4:	9509      	str	r5, [sp, #36]	; 0x24
 80056f6:	931e      	str	r3, [sp, #120]	; 0x78
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fc:	2200      	movs	r2, #0
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	4698      	mov	r8, r3
 8005702:	2312      	movs	r3, #18
 8005704:	921f      	str	r2, [sp, #124]	; 0x7c
 8005706:	e7aa      	b.n	800565e <_dtoa_r+0x24e>
 8005708:	2301      	movs	r3, #1
 800570a:	9309      	str	r3, [sp, #36]	; 0x24
 800570c:	e7f4      	b.n	80056f8 <_dtoa_r+0x2e8>
 800570e:	bf00      	nop
 8005710:	636f4361 	.word	0x636f4361
 8005714:	3fd287a7 	.word	0x3fd287a7
 8005718:	8b60c8b3 	.word	0x8b60c8b3
 800571c:	3fc68a28 	.word	0x3fc68a28
 8005720:	509f79fb 	.word	0x509f79fb
 8005724:	3fd34413 	.word	0x3fd34413
 8005728:	7ff00000 	.word	0x7ff00000
 800572c:	08006e4b 	.word	0x08006e4b
 8005730:	08006e42 	.word	0x08006e42
 8005734:	08006e41 	.word	0x08006e41
 8005738:	3ff80000 	.word	0x3ff80000
 800573c:	08006ee8 	.word	0x08006ee8
 8005740:	08006ec0 	.word	0x08006ec0
 8005744:	2301      	movs	r3, #1
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	4698      	mov	r8, r3
 800574a:	461a      	mov	r2, r3
 800574c:	e7da      	b.n	8005704 <_dtoa_r+0x2f4>
 800574e:	3101      	adds	r1, #1
 8005750:	6071      	str	r1, [r6, #4]
 8005752:	0052      	lsls	r2, r2, #1
 8005754:	e787      	b.n	8005666 <_dtoa_r+0x256>
 8005756:	07f1      	lsls	r1, r6, #31
 8005758:	d508      	bpl.n	800576c <_dtoa_r+0x35c>
 800575a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800575e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005762:	f7fa feb9 	bl	80004d8 <__aeabi_dmul>
 8005766:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800576a:	3501      	adds	r5, #1
 800576c:	1076      	asrs	r6, r6, #1
 800576e:	3708      	adds	r7, #8
 8005770:	2e00      	cmp	r6, #0
 8005772:	d1f0      	bne.n	8005756 <_dtoa_r+0x346>
 8005774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800577c:	f7fa ffd6 	bl	800072c <__aeabi_ddiv>
 8005780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005784:	e01b      	b.n	80057be <_dtoa_r+0x3ae>
 8005786:	2502      	movs	r5, #2
 8005788:	e7a0      	b.n	80056cc <_dtoa_r+0x2bc>
 800578a:	f000 80a4 	beq.w	80058d6 <_dtoa_r+0x4c6>
 800578e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005792:	f1ca 0600 	rsb	r6, sl, #0
 8005796:	4ba0      	ldr	r3, [pc, #640]	; (8005a18 <_dtoa_r+0x608>)
 8005798:	f006 020f 	and.w	r2, r6, #15
 800579c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f7fa fe98 	bl	80004d8 <__aeabi_dmul>
 80057a8:	2502      	movs	r5, #2
 80057aa:	2300      	movs	r3, #0
 80057ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057b0:	4f9a      	ldr	r7, [pc, #616]	; (8005a1c <_dtoa_r+0x60c>)
 80057b2:	1136      	asrs	r6, r6, #4
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	f040 8083 	bne.w	80058c0 <_dtoa_r+0x4b0>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e0      	bne.n	8005780 <_dtoa_r+0x370>
 80057be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 808a 	beq.w	80058da <_dtoa_r+0x4ca>
 80057c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057d2:	2200      	movs	r2, #0
 80057d4:	4b92      	ldr	r3, [pc, #584]	; (8005a20 <_dtoa_r+0x610>)
 80057d6:	f7fb f8f1 	bl	80009bc <__aeabi_dcmplt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d07d      	beq.n	80058da <_dtoa_r+0x4ca>
 80057de:	f1b8 0f00 	cmp.w	r8, #0
 80057e2:	d07a      	beq.n	80058da <_dtoa_r+0x4ca>
 80057e4:	9b04      	ldr	r3, [sp, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	dd36      	ble.n	8005858 <_dtoa_r+0x448>
 80057ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057ee:	2200      	movs	r2, #0
 80057f0:	4b8c      	ldr	r3, [pc, #560]	; (8005a24 <_dtoa_r+0x614>)
 80057f2:	f7fa fe71 	bl	80004d8 <__aeabi_dmul>
 80057f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057fa:	9e04      	ldr	r6, [sp, #16]
 80057fc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005800:	3501      	adds	r5, #1
 8005802:	4628      	mov	r0, r5
 8005804:	f7fa fdfe 	bl	8000404 <__aeabi_i2d>
 8005808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800580c:	f7fa fe64 	bl	80004d8 <__aeabi_dmul>
 8005810:	2200      	movs	r2, #0
 8005812:	4b85      	ldr	r3, [pc, #532]	; (8005a28 <_dtoa_r+0x618>)
 8005814:	f7fa fcaa 	bl	800016c <__adddf3>
 8005818:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800581c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005820:	950b      	str	r5, [sp, #44]	; 0x2c
 8005822:	2e00      	cmp	r6, #0
 8005824:	d15c      	bne.n	80058e0 <_dtoa_r+0x4d0>
 8005826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	4b7f      	ldr	r3, [pc, #508]	; (8005a2c <_dtoa_r+0x61c>)
 800582e:	f7fa fc9b 	bl	8000168 <__aeabi_dsub>
 8005832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005834:	462b      	mov	r3, r5
 8005836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800583a:	f7fb f8dd 	bl	80009f8 <__aeabi_dcmpgt>
 800583e:	2800      	cmp	r0, #0
 8005840:	f040 8281 	bne.w	8005d46 <_dtoa_r+0x936>
 8005844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800584e:	f7fb f8b5 	bl	80009bc <__aeabi_dcmplt>
 8005852:	2800      	cmp	r0, #0
 8005854:	f040 8275 	bne.w	8005d42 <_dtoa_r+0x932>
 8005858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800585c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005860:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005862:	2b00      	cmp	r3, #0
 8005864:	f2c0 814b 	blt.w	8005afe <_dtoa_r+0x6ee>
 8005868:	f1ba 0f0e 	cmp.w	sl, #14
 800586c:	f300 8147 	bgt.w	8005afe <_dtoa_r+0x6ee>
 8005870:	4b69      	ldr	r3, [pc, #420]	; (8005a18 <_dtoa_r+0x608>)
 8005872:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800587e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005880:	2b00      	cmp	r3, #0
 8005882:	f280 80d7 	bge.w	8005a34 <_dtoa_r+0x624>
 8005886:	f1b8 0f00 	cmp.w	r8, #0
 800588a:	f300 80d3 	bgt.w	8005a34 <_dtoa_r+0x624>
 800588e:	f040 8257 	bne.w	8005d40 <_dtoa_r+0x930>
 8005892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005896:	2200      	movs	r2, #0
 8005898:	4b64      	ldr	r3, [pc, #400]	; (8005a2c <_dtoa_r+0x61c>)
 800589a:	f7fa fe1d 	bl	80004d8 <__aeabi_dmul>
 800589e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058a2:	f7fb f89f 	bl	80009e4 <__aeabi_dcmpge>
 80058a6:	4646      	mov	r6, r8
 80058a8:	4647      	mov	r7, r8
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f040 822d 	bne.w	8005d0a <_dtoa_r+0x8fa>
 80058b0:	9b06      	ldr	r3, [sp, #24]
 80058b2:	9a06      	ldr	r2, [sp, #24]
 80058b4:	1c5d      	adds	r5, r3, #1
 80058b6:	2331      	movs	r3, #49	; 0x31
 80058b8:	f10a 0a01 	add.w	sl, sl, #1
 80058bc:	7013      	strb	r3, [r2, #0]
 80058be:	e228      	b.n	8005d12 <_dtoa_r+0x902>
 80058c0:	07f2      	lsls	r2, r6, #31
 80058c2:	d505      	bpl.n	80058d0 <_dtoa_r+0x4c0>
 80058c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c8:	f7fa fe06 	bl	80004d8 <__aeabi_dmul>
 80058cc:	2301      	movs	r3, #1
 80058ce:	3501      	adds	r5, #1
 80058d0:	1076      	asrs	r6, r6, #1
 80058d2:	3708      	adds	r7, #8
 80058d4:	e76e      	b.n	80057b4 <_dtoa_r+0x3a4>
 80058d6:	2502      	movs	r5, #2
 80058d8:	e771      	b.n	80057be <_dtoa_r+0x3ae>
 80058da:	4657      	mov	r7, sl
 80058dc:	4646      	mov	r6, r8
 80058de:	e790      	b.n	8005802 <_dtoa_r+0x3f2>
 80058e0:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <_dtoa_r+0x608>)
 80058e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d048      	beq.n	8005982 <_dtoa_r+0x572>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	2000      	movs	r0, #0
 80058f6:	494e      	ldr	r1, [pc, #312]	; (8005a30 <_dtoa_r+0x620>)
 80058f8:	f7fa ff18 	bl	800072c <__aeabi_ddiv>
 80058fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005900:	f7fa fc32 	bl	8000168 <__aeabi_dsub>
 8005904:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005908:	9d06      	ldr	r5, [sp, #24]
 800590a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800590e:	f7fb f893 	bl	8000a38 <__aeabi_d2iz>
 8005912:	9011      	str	r0, [sp, #68]	; 0x44
 8005914:	f7fa fd76 	bl	8000404 <__aeabi_i2d>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005920:	f7fa fc22 	bl	8000168 <__aeabi_dsub>
 8005924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800592a:	3330      	adds	r3, #48	; 0x30
 800592c:	f805 3b01 	strb.w	r3, [r5], #1
 8005930:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005934:	f7fb f842 	bl	80009bc <__aeabi_dcmplt>
 8005938:	2800      	cmp	r0, #0
 800593a:	d163      	bne.n	8005a04 <_dtoa_r+0x5f4>
 800593c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005940:	2000      	movs	r0, #0
 8005942:	4937      	ldr	r1, [pc, #220]	; (8005a20 <_dtoa_r+0x610>)
 8005944:	f7fa fc10 	bl	8000168 <__aeabi_dsub>
 8005948:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800594c:	f7fb f836 	bl	80009bc <__aeabi_dcmplt>
 8005950:	2800      	cmp	r0, #0
 8005952:	f040 80b5 	bne.w	8005ac0 <_dtoa_r+0x6b0>
 8005956:	9b06      	ldr	r3, [sp, #24]
 8005958:	1aeb      	subs	r3, r5, r3
 800595a:	429e      	cmp	r6, r3
 800595c:	f77f af7c 	ble.w	8005858 <_dtoa_r+0x448>
 8005960:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005964:	2200      	movs	r2, #0
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <_dtoa_r+0x614>)
 8005968:	f7fa fdb6 	bl	80004d8 <__aeabi_dmul>
 800596c:	2200      	movs	r2, #0
 800596e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005976:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <_dtoa_r+0x614>)
 8005978:	f7fa fdae 	bl	80004d8 <__aeabi_dmul>
 800597c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005980:	e7c3      	b.n	800590a <_dtoa_r+0x4fa>
 8005982:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005986:	f7fa fda7 	bl	80004d8 <__aeabi_dmul>
 800598a:	9b06      	ldr	r3, [sp, #24]
 800598c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005990:	199d      	adds	r5, r3, r6
 8005992:	461e      	mov	r6, r3
 8005994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005998:	f7fb f84e 	bl	8000a38 <__aeabi_d2iz>
 800599c:	9011      	str	r0, [sp, #68]	; 0x44
 800599e:	f7fa fd31 	bl	8000404 <__aeabi_i2d>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059aa:	f7fa fbdd 	bl	8000168 <__aeabi_dsub>
 80059ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b4:	3330      	adds	r3, #48	; 0x30
 80059b6:	f806 3b01 	strb.w	r3, [r6], #1
 80059ba:	42ae      	cmp	r6, r5
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	d124      	bne.n	8005a0c <_dtoa_r+0x5fc>
 80059c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059c6:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <_dtoa_r+0x620>)
 80059c8:	f7fa fbd0 	bl	800016c <__adddf3>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059d4:	f7fb f810 	bl	80009f8 <__aeabi_dcmpgt>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d171      	bne.n	8005ac0 <_dtoa_r+0x6b0>
 80059dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059e0:	2000      	movs	r0, #0
 80059e2:	4913      	ldr	r1, [pc, #76]	; (8005a30 <_dtoa_r+0x620>)
 80059e4:	f7fa fbc0 	bl	8000168 <__aeabi_dsub>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f0:	f7fa ffe4 	bl	80009bc <__aeabi_dcmplt>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f43f af2f 	beq.w	8005858 <_dtoa_r+0x448>
 80059fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059fe:	1e6a      	subs	r2, r5, #1
 8005a00:	2b30      	cmp	r3, #48	; 0x30
 8005a02:	d001      	beq.n	8005a08 <_dtoa_r+0x5f8>
 8005a04:	46ba      	mov	sl, r7
 8005a06:	e04a      	b.n	8005a9e <_dtoa_r+0x68e>
 8005a08:	4615      	mov	r5, r2
 8005a0a:	e7f6      	b.n	80059fa <_dtoa_r+0x5ea>
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <_dtoa_r+0x614>)
 8005a0e:	f7fa fd63 	bl	80004d8 <__aeabi_dmul>
 8005a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a16:	e7bd      	b.n	8005994 <_dtoa_r+0x584>
 8005a18:	08006ee8 	.word	0x08006ee8
 8005a1c:	08006ec0 	.word	0x08006ec0
 8005a20:	3ff00000 	.word	0x3ff00000
 8005a24:	40240000 	.word	0x40240000
 8005a28:	401c0000 	.word	0x401c0000
 8005a2c:	40140000 	.word	0x40140000
 8005a30:	3fe00000 	.word	0x3fe00000
 8005a34:	9d06      	ldr	r5, [sp, #24]
 8005a36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fe73 	bl	800072c <__aeabi_ddiv>
 8005a46:	f7fa fff7 	bl	8000a38 <__aeabi_d2iz>
 8005a4a:	4681      	mov	r9, r0
 8005a4c:	f7fa fcda 	bl	8000404 <__aeabi_i2d>
 8005a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a54:	f7fa fd40 	bl	80004d8 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f7fa fb82 	bl	8000168 <__aeabi_dsub>
 8005a64:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005a68:	f805 6b01 	strb.w	r6, [r5], #1
 8005a6c:	9e06      	ldr	r6, [sp, #24]
 8005a6e:	4602      	mov	r2, r0
 8005a70:	1bae      	subs	r6, r5, r6
 8005a72:	45b0      	cmp	r8, r6
 8005a74:	460b      	mov	r3, r1
 8005a76:	d135      	bne.n	8005ae4 <_dtoa_r+0x6d4>
 8005a78:	f7fa fb78 	bl	800016c <__adddf3>
 8005a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a80:	4606      	mov	r6, r0
 8005a82:	460f      	mov	r7, r1
 8005a84:	f7fa ffb8 	bl	80009f8 <__aeabi_dcmpgt>
 8005a88:	b9c8      	cbnz	r0, 8005abe <_dtoa_r+0x6ae>
 8005a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4639      	mov	r1, r7
 8005a92:	f7fa ff89 	bl	80009a8 <__aeabi_dcmpeq>
 8005a96:	b110      	cbz	r0, 8005a9e <_dtoa_r+0x68e>
 8005a98:	f019 0f01 	tst.w	r9, #1
 8005a9c:	d10f      	bne.n	8005abe <_dtoa_r+0x6ae>
 8005a9e:	4659      	mov	r1, fp
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fcae 	bl	8006402 <_Bfree>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005aaa:	702b      	strb	r3, [r5, #0]
 8005aac:	f10a 0301 	add.w	r3, sl, #1
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f43f acf3 	beq.w	80054a0 <_dtoa_r+0x90>
 8005aba:	601d      	str	r5, [r3, #0]
 8005abc:	e4f0      	b.n	80054a0 <_dtoa_r+0x90>
 8005abe:	4657      	mov	r7, sl
 8005ac0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ac4:	1e6b      	subs	r3, r5, #1
 8005ac6:	2a39      	cmp	r2, #57	; 0x39
 8005ac8:	d106      	bne.n	8005ad8 <_dtoa_r+0x6c8>
 8005aca:	9a06      	ldr	r2, [sp, #24]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d107      	bne.n	8005ae0 <_dtoa_r+0x6d0>
 8005ad0:	2330      	movs	r3, #48	; 0x30
 8005ad2:	7013      	strb	r3, [r2, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	3701      	adds	r7, #1
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	3201      	adds	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e791      	b.n	8005a04 <_dtoa_r+0x5f4>
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	e7ed      	b.n	8005ac0 <_dtoa_r+0x6b0>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4b99      	ldr	r3, [pc, #612]	; (8005d4c <_dtoa_r+0x93c>)
 8005ae8:	f7fa fcf6 	bl	80004d8 <__aeabi_dmul>
 8005aec:	2200      	movs	r2, #0
 8005aee:	2300      	movs	r3, #0
 8005af0:	4606      	mov	r6, r0
 8005af2:	460f      	mov	r7, r1
 8005af4:	f7fa ff58 	bl	80009a8 <__aeabi_dcmpeq>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d09e      	beq.n	8005a3a <_dtoa_r+0x62a>
 8005afc:	e7cf      	b.n	8005a9e <_dtoa_r+0x68e>
 8005afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	f000 8088 	beq.w	8005c16 <_dtoa_r+0x806>
 8005b06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b08:	2a01      	cmp	r2, #1
 8005b0a:	dc6d      	bgt.n	8005be8 <_dtoa_r+0x7d8>
 8005b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	d066      	beq.n	8005be0 <_dtoa_r+0x7d0>
 8005b12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b16:	464d      	mov	r5, r9
 8005b18:	9e08      	ldr	r6, [sp, #32]
 8005b1a:	9a07      	ldr	r2, [sp, #28]
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	441a      	add	r2, r3
 8005b20:	4620      	mov	r0, r4
 8005b22:	4499      	add	r9, r3
 8005b24:	9207      	str	r2, [sp, #28]
 8005b26:	f000 fd0c 	bl	8006542 <__i2b>
 8005b2a:	4607      	mov	r7, r0
 8005b2c:	2d00      	cmp	r5, #0
 8005b2e:	dd0b      	ble.n	8005b48 <_dtoa_r+0x738>
 8005b30:	9b07      	ldr	r3, [sp, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	dd08      	ble.n	8005b48 <_dtoa_r+0x738>
 8005b36:	42ab      	cmp	r3, r5
 8005b38:	bfa8      	it	ge
 8005b3a:	462b      	movge	r3, r5
 8005b3c:	9a07      	ldr	r2, [sp, #28]
 8005b3e:	eba9 0903 	sub.w	r9, r9, r3
 8005b42:	1aed      	subs	r5, r5, r3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	9307      	str	r3, [sp, #28]
 8005b48:	9b08      	ldr	r3, [sp, #32]
 8005b4a:	b1eb      	cbz	r3, 8005b88 <_dtoa_r+0x778>
 8005b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d065      	beq.n	8005c1e <_dtoa_r+0x80e>
 8005b52:	b18e      	cbz	r6, 8005b78 <_dtoa_r+0x768>
 8005b54:	4639      	mov	r1, r7
 8005b56:	4632      	mov	r2, r6
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fd91 	bl	8006680 <__pow5mult>
 8005b5e:	465a      	mov	r2, fp
 8005b60:	4601      	mov	r1, r0
 8005b62:	4607      	mov	r7, r0
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fcf5 	bl	8006554 <__multiply>
 8005b6a:	4659      	mov	r1, fp
 8005b6c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 fc47 	bl	8006402 <_Bfree>
 8005b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b76:	469b      	mov	fp, r3
 8005b78:	9b08      	ldr	r3, [sp, #32]
 8005b7a:	1b9a      	subs	r2, r3, r6
 8005b7c:	d004      	beq.n	8005b88 <_dtoa_r+0x778>
 8005b7e:	4659      	mov	r1, fp
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 fd7d 	bl	8006680 <__pow5mult>
 8005b86:	4683      	mov	fp, r0
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f000 fcd9 	bl	8006542 <__i2b>
 8005b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b92:	4606      	mov	r6, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 81c6 	beq.w	8005f26 <_dtoa_r+0xb16>
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4601      	mov	r1, r0
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 fd6e 	bl	8006680 <__pow5mult>
 8005ba4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	dc3e      	bgt.n	8005c2a <_dtoa_r+0x81a>
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d137      	bne.n	8005c22 <_dtoa_r+0x812>
 8005bb2:	9b03      	ldr	r3, [sp, #12]
 8005bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d134      	bne.n	8005c26 <_dtoa_r+0x816>
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bc2:	0d1b      	lsrs	r3, r3, #20
 8005bc4:	051b      	lsls	r3, r3, #20
 8005bc6:	b12b      	cbz	r3, 8005bd4 <_dtoa_r+0x7c4>
 8005bc8:	9b07      	ldr	r3, [sp, #28]
 8005bca:	f109 0901 	add.w	r9, r9, #1
 8005bce:	3301      	adds	r3, #1
 8005bd0:	9307      	str	r3, [sp, #28]
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	9308      	str	r3, [sp, #32]
 8005bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d128      	bne.n	8005c2e <_dtoa_r+0x81e>
 8005bdc:	2001      	movs	r0, #1
 8005bde:	e02e      	b.n	8005c3e <_dtoa_r+0x82e>
 8005be0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005be2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005be6:	e796      	b.n	8005b16 <_dtoa_r+0x706>
 8005be8:	9b08      	ldr	r3, [sp, #32]
 8005bea:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005bee:	42b3      	cmp	r3, r6
 8005bf0:	bfb7      	itett	lt
 8005bf2:	9b08      	ldrlt	r3, [sp, #32]
 8005bf4:	1b9e      	subge	r6, r3, r6
 8005bf6:	1af2      	sublt	r2, r6, r3
 8005bf8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005bfa:	bfbf      	itttt	lt
 8005bfc:	9608      	strlt	r6, [sp, #32]
 8005bfe:	189b      	addlt	r3, r3, r2
 8005c00:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005c02:	2600      	movlt	r6, #0
 8005c04:	f1b8 0f00 	cmp.w	r8, #0
 8005c08:	bfb9      	ittee	lt
 8005c0a:	eba9 0508 	sublt.w	r5, r9, r8
 8005c0e:	2300      	movlt	r3, #0
 8005c10:	464d      	movge	r5, r9
 8005c12:	4643      	movge	r3, r8
 8005c14:	e781      	b.n	8005b1a <_dtoa_r+0x70a>
 8005c16:	9e08      	ldr	r6, [sp, #32]
 8005c18:	464d      	mov	r5, r9
 8005c1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c1c:	e786      	b.n	8005b2c <_dtoa_r+0x71c>
 8005c1e:	9a08      	ldr	r2, [sp, #32]
 8005c20:	e7ad      	b.n	8005b7e <_dtoa_r+0x76e>
 8005c22:	2300      	movs	r3, #0
 8005c24:	e7d6      	b.n	8005bd4 <_dtoa_r+0x7c4>
 8005c26:	9b02      	ldr	r3, [sp, #8]
 8005c28:	e7d4      	b.n	8005bd4 <_dtoa_r+0x7c4>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9308      	str	r3, [sp, #32]
 8005c2e:	6933      	ldr	r3, [r6, #16]
 8005c30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c34:	6918      	ldr	r0, [r3, #16]
 8005c36:	f000 fc36 	bl	80064a6 <__hi0bits>
 8005c3a:	f1c0 0020 	rsb	r0, r0, #32
 8005c3e:	9b07      	ldr	r3, [sp, #28]
 8005c40:	4418      	add	r0, r3
 8005c42:	f010 001f 	ands.w	r0, r0, #31
 8005c46:	d047      	beq.n	8005cd8 <_dtoa_r+0x8c8>
 8005c48:	f1c0 0320 	rsb	r3, r0, #32
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	dd3b      	ble.n	8005cc8 <_dtoa_r+0x8b8>
 8005c50:	9b07      	ldr	r3, [sp, #28]
 8005c52:	f1c0 001c 	rsb	r0, r0, #28
 8005c56:	4481      	add	r9, r0
 8005c58:	4405      	add	r5, r0
 8005c5a:	4403      	add	r3, r0
 8005c5c:	9307      	str	r3, [sp, #28]
 8005c5e:	f1b9 0f00 	cmp.w	r9, #0
 8005c62:	dd05      	ble.n	8005c70 <_dtoa_r+0x860>
 8005c64:	4659      	mov	r1, fp
 8005c66:	464a      	mov	r2, r9
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fd57 	bl	800671c <__lshift>
 8005c6e:	4683      	mov	fp, r0
 8005c70:	9b07      	ldr	r3, [sp, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dd05      	ble.n	8005c82 <_dtoa_r+0x872>
 8005c76:	4631      	mov	r1, r6
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 fd4e 	bl	800671c <__lshift>
 8005c80:	4606      	mov	r6, r0
 8005c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c84:	b353      	cbz	r3, 8005cdc <_dtoa_r+0x8cc>
 8005c86:	4631      	mov	r1, r6
 8005c88:	4658      	mov	r0, fp
 8005c8a:	f000 fd9b 	bl	80067c4 <__mcmp>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	da24      	bge.n	8005cdc <_dtoa_r+0x8cc>
 8005c92:	2300      	movs	r3, #0
 8005c94:	4659      	mov	r1, fp
 8005c96:	220a      	movs	r2, #10
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fbc9 	bl	8006430 <__multadd>
 8005c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ca4:	4683      	mov	fp, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8144 	beq.w	8005f34 <_dtoa_r+0xb24>
 8005cac:	2300      	movs	r3, #0
 8005cae:	4639      	mov	r1, r7
 8005cb0:	220a      	movs	r2, #10
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fbbc 	bl	8006430 <__multadd>
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	4607      	mov	r7, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dc4d      	bgt.n	8005d5c <_dtoa_r+0x94c>
 8005cc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	dd4a      	ble.n	8005d5c <_dtoa_r+0x94c>
 8005cc6:	e011      	b.n	8005cec <_dtoa_r+0x8dc>
 8005cc8:	d0c9      	beq.n	8005c5e <_dtoa_r+0x84e>
 8005cca:	9a07      	ldr	r2, [sp, #28]
 8005ccc:	331c      	adds	r3, #28
 8005cce:	441a      	add	r2, r3
 8005cd0:	4499      	add	r9, r3
 8005cd2:	441d      	add	r5, r3
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	e7c1      	b.n	8005c5c <_dtoa_r+0x84c>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	e7f6      	b.n	8005cca <_dtoa_r+0x8ba>
 8005cdc:	f1b8 0f00 	cmp.w	r8, #0
 8005ce0:	dc36      	bgt.n	8005d50 <_dtoa_r+0x940>
 8005ce2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	dd33      	ble.n	8005d50 <_dtoa_r+0x940>
 8005ce8:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cec:	9b04      	ldr	r3, [sp, #16]
 8005cee:	b963      	cbnz	r3, 8005d0a <_dtoa_r+0x8fa>
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	2205      	movs	r2, #5
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 fb9b 	bl	8006430 <__multadd>
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	4658      	mov	r0, fp
 8005d00:	f000 fd60 	bl	80067c4 <__mcmp>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f73f add3 	bgt.w	80058b0 <_dtoa_r+0x4a0>
 8005d0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d0c:	9d06      	ldr	r5, [sp, #24]
 8005d0e:	ea6f 0a03 	mvn.w	sl, r3
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	4631      	mov	r1, r6
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fb72 	bl	8006402 <_Bfree>
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	f43f aebd 	beq.w	8005a9e <_dtoa_r+0x68e>
 8005d24:	f1b9 0f00 	cmp.w	r9, #0
 8005d28:	d005      	beq.n	8005d36 <_dtoa_r+0x926>
 8005d2a:	45b9      	cmp	r9, r7
 8005d2c:	d003      	beq.n	8005d36 <_dtoa_r+0x926>
 8005d2e:	4649      	mov	r1, r9
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fb66 	bl	8006402 <_Bfree>
 8005d36:	4639      	mov	r1, r7
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fb62 	bl	8006402 <_Bfree>
 8005d3e:	e6ae      	b.n	8005a9e <_dtoa_r+0x68e>
 8005d40:	2600      	movs	r6, #0
 8005d42:	4637      	mov	r7, r6
 8005d44:	e7e1      	b.n	8005d0a <_dtoa_r+0x8fa>
 8005d46:	46ba      	mov	sl, r7
 8005d48:	4637      	mov	r7, r6
 8005d4a:	e5b1      	b.n	80058b0 <_dtoa_r+0x4a0>
 8005d4c:	40240000 	.word	0x40240000
 8005d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d52:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 80f3 	beq.w	8005f42 <_dtoa_r+0xb32>
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	dd05      	ble.n	8005d6c <_dtoa_r+0x95c>
 8005d60:	4639      	mov	r1, r7
 8005d62:	462a      	mov	r2, r5
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fcd9 	bl	800671c <__lshift>
 8005d6a:	4607      	mov	r7, r0
 8005d6c:	9b08      	ldr	r3, [sp, #32]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d04c      	beq.n	8005e0c <_dtoa_r+0x9fc>
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 fb10 	bl	800639a <_Balloc>
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	f107 010c 	add.w	r1, r7, #12
 8005d82:	3202      	adds	r2, #2
 8005d84:	0092      	lsls	r2, r2, #2
 8005d86:	300c      	adds	r0, #12
 8005d88:	f000 fafc 	bl	8006384 <memcpy>
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fcc3 	bl	800671c <__lshift>
 8005d96:	46b9      	mov	r9, r7
 8005d98:	4607      	mov	r7, r0
 8005d9a:	9b06      	ldr	r3, [sp, #24]
 8005d9c:	9307      	str	r3, [sp, #28]
 8005d9e:	9b02      	ldr	r3, [sp, #8]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	9308      	str	r3, [sp, #32]
 8005da6:	4631      	mov	r1, r6
 8005da8:	4658      	mov	r0, fp
 8005daa:	f7ff faa3 	bl	80052f4 <quorem>
 8005dae:	4649      	mov	r1, r9
 8005db0:	4605      	mov	r5, r0
 8005db2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005db6:	4658      	mov	r0, fp
 8005db8:	f000 fd04 	bl	80067c4 <__mcmp>
 8005dbc:	463a      	mov	r2, r7
 8005dbe:	9002      	str	r0, [sp, #8]
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 fd18 	bl	80067f8 <__mdiff>
 8005dc8:	68c3      	ldr	r3, [r0, #12]
 8005dca:	4602      	mov	r2, r0
 8005dcc:	bb03      	cbnz	r3, 8005e10 <_dtoa_r+0xa00>
 8005dce:	4601      	mov	r1, r0
 8005dd0:	9009      	str	r0, [sp, #36]	; 0x24
 8005dd2:	4658      	mov	r0, fp
 8005dd4:	f000 fcf6 	bl	80067c4 <__mcmp>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4620      	mov	r0, r4
 8005de0:	9309      	str	r3, [sp, #36]	; 0x24
 8005de2:	f000 fb0e 	bl	8006402 <_Bfree>
 8005de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de8:	b9a3      	cbnz	r3, 8005e14 <_dtoa_r+0xa04>
 8005dea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dec:	b992      	cbnz	r2, 8005e14 <_dtoa_r+0xa04>
 8005dee:	9a08      	ldr	r2, [sp, #32]
 8005df0:	b982      	cbnz	r2, 8005e14 <_dtoa_r+0xa04>
 8005df2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005df6:	d029      	beq.n	8005e4c <_dtoa_r+0xa3c>
 8005df8:	9b02      	ldr	r3, [sp, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dd01      	ble.n	8005e02 <_dtoa_r+0x9f2>
 8005dfe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005e02:	9b07      	ldr	r3, [sp, #28]
 8005e04:	1c5d      	adds	r5, r3, #1
 8005e06:	f883 8000 	strb.w	r8, [r3]
 8005e0a:	e784      	b.n	8005d16 <_dtoa_r+0x906>
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	e7c2      	b.n	8005d96 <_dtoa_r+0x986>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e7e3      	b.n	8005ddc <_dtoa_r+0x9cc>
 8005e14:	9a02      	ldr	r2, [sp, #8]
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	db04      	blt.n	8005e24 <_dtoa_r+0xa14>
 8005e1a:	d123      	bne.n	8005e64 <_dtoa_r+0xa54>
 8005e1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e1e:	bb0a      	cbnz	r2, 8005e64 <_dtoa_r+0xa54>
 8005e20:	9a08      	ldr	r2, [sp, #32]
 8005e22:	b9fa      	cbnz	r2, 8005e64 <_dtoa_r+0xa54>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	ddec      	ble.n	8005e02 <_dtoa_r+0x9f2>
 8005e28:	4659      	mov	r1, fp
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 fc75 	bl	800671c <__lshift>
 8005e32:	4631      	mov	r1, r6
 8005e34:	4683      	mov	fp, r0
 8005e36:	f000 fcc5 	bl	80067c4 <__mcmp>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	dc03      	bgt.n	8005e46 <_dtoa_r+0xa36>
 8005e3e:	d1e0      	bne.n	8005e02 <_dtoa_r+0x9f2>
 8005e40:	f018 0f01 	tst.w	r8, #1
 8005e44:	d0dd      	beq.n	8005e02 <_dtoa_r+0x9f2>
 8005e46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e4a:	d1d8      	bne.n	8005dfe <_dtoa_r+0x9ee>
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	9a07      	ldr	r2, [sp, #28]
 8005e50:	1c5d      	adds	r5, r3, #1
 8005e52:	2339      	movs	r3, #57	; 0x39
 8005e54:	7013      	strb	r3, [r2, #0]
 8005e56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e5a:	1e6a      	subs	r2, r5, #1
 8005e5c:	2b39      	cmp	r3, #57	; 0x39
 8005e5e:	d04d      	beq.n	8005efc <_dtoa_r+0xaec>
 8005e60:	3301      	adds	r3, #1
 8005e62:	e052      	b.n	8005f0a <_dtoa_r+0xafa>
 8005e64:	9a07      	ldr	r2, [sp, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f102 0501 	add.w	r5, r2, #1
 8005e6c:	dd06      	ble.n	8005e7c <_dtoa_r+0xa6c>
 8005e6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e72:	d0eb      	beq.n	8005e4c <_dtoa_r+0xa3c>
 8005e74:	f108 0801 	add.w	r8, r8, #1
 8005e78:	9b07      	ldr	r3, [sp, #28]
 8005e7a:	e7c4      	b.n	8005e06 <_dtoa_r+0x9f6>
 8005e7c:	9b06      	ldr	r3, [sp, #24]
 8005e7e:	9a04      	ldr	r2, [sp, #16]
 8005e80:	1aeb      	subs	r3, r5, r3
 8005e82:	4293      	cmp	r3, r2
 8005e84:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e88:	d021      	beq.n	8005ece <_dtoa_r+0xabe>
 8005e8a:	4659      	mov	r1, fp
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	220a      	movs	r2, #10
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 facd 	bl	8006430 <__multadd>
 8005e96:	45b9      	cmp	r9, r7
 8005e98:	4683      	mov	fp, r0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	f04f 020a 	mov.w	r2, #10
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	d105      	bne.n	8005eb4 <_dtoa_r+0xaa4>
 8005ea8:	f000 fac2 	bl	8006430 <__multadd>
 8005eac:	4681      	mov	r9, r0
 8005eae:	4607      	mov	r7, r0
 8005eb0:	9507      	str	r5, [sp, #28]
 8005eb2:	e778      	b.n	8005da6 <_dtoa_r+0x996>
 8005eb4:	f000 fabc 	bl	8006430 <__multadd>
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4681      	mov	r9, r0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	220a      	movs	r2, #10
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 fab5 	bl	8006430 <__multadd>
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	e7f2      	b.n	8005eb0 <_dtoa_r+0xaa0>
 8005eca:	f04f 0900 	mov.w	r9, #0
 8005ece:	4659      	mov	r1, fp
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 fc22 	bl	800671c <__lshift>
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4683      	mov	fp, r0
 8005edc:	f000 fc72 	bl	80067c4 <__mcmp>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	dcb8      	bgt.n	8005e56 <_dtoa_r+0xa46>
 8005ee4:	d102      	bne.n	8005eec <_dtoa_r+0xadc>
 8005ee6:	f018 0f01 	tst.w	r8, #1
 8005eea:	d1b4      	bne.n	8005e56 <_dtoa_r+0xa46>
 8005eec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ef0:	1e6a      	subs	r2, r5, #1
 8005ef2:	2b30      	cmp	r3, #48	; 0x30
 8005ef4:	f47f af0f 	bne.w	8005d16 <_dtoa_r+0x906>
 8005ef8:	4615      	mov	r5, r2
 8005efa:	e7f7      	b.n	8005eec <_dtoa_r+0xadc>
 8005efc:	9b06      	ldr	r3, [sp, #24]
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d105      	bne.n	8005f0e <_dtoa_r+0xafe>
 8005f02:	2331      	movs	r3, #49	; 0x31
 8005f04:	9a06      	ldr	r2, [sp, #24]
 8005f06:	f10a 0a01 	add.w	sl, sl, #1
 8005f0a:	7013      	strb	r3, [r2, #0]
 8005f0c:	e703      	b.n	8005d16 <_dtoa_r+0x906>
 8005f0e:	4615      	mov	r5, r2
 8005f10:	e7a1      	b.n	8005e56 <_dtoa_r+0xa46>
 8005f12:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <_dtoa_r+0xb60>)
 8005f14:	f7ff bae1 	b.w	80054da <_dtoa_r+0xca>
 8005f18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f47f aabb 	bne.w	8005496 <_dtoa_r+0x86>
 8005f20:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <_dtoa_r+0xb64>)
 8005f22:	f7ff bada 	b.w	80054da <_dtoa_r+0xca>
 8005f26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f77f ae3f 	ble.w	8005bac <_dtoa_r+0x79c>
 8005f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f30:	9308      	str	r3, [sp, #32]
 8005f32:	e653      	b.n	8005bdc <_dtoa_r+0x7cc>
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dc03      	bgt.n	8005f42 <_dtoa_r+0xb32>
 8005f3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f73f aed5 	bgt.w	8005cec <_dtoa_r+0x8dc>
 8005f42:	9d06      	ldr	r5, [sp, #24]
 8005f44:	4631      	mov	r1, r6
 8005f46:	4658      	mov	r0, fp
 8005f48:	f7ff f9d4 	bl	80052f4 <quorem>
 8005f4c:	9b06      	ldr	r3, [sp, #24]
 8005f4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f52:	f805 8b01 	strb.w	r8, [r5], #1
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	1aeb      	subs	r3, r5, r3
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	ddb5      	ble.n	8005eca <_dtoa_r+0xaba>
 8005f5e:	4659      	mov	r1, fp
 8005f60:	2300      	movs	r3, #0
 8005f62:	220a      	movs	r2, #10
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 fa63 	bl	8006430 <__multadd>
 8005f6a:	4683      	mov	fp, r0
 8005f6c:	e7ea      	b.n	8005f44 <_dtoa_r+0xb34>
 8005f6e:	bf00      	nop
 8005f70:	08006e40 	.word	0x08006e40
 8005f74:	08006e42 	.word	0x08006e42

08005f78 <__sflush_r>:
 8005f78:	898a      	ldrh	r2, [r1, #12]
 8005f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7e:	4605      	mov	r5, r0
 8005f80:	0710      	lsls	r0, r2, #28
 8005f82:	460c      	mov	r4, r1
 8005f84:	d458      	bmi.n	8006038 <__sflush_r+0xc0>
 8005f86:	684b      	ldr	r3, [r1, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	dc05      	bgt.n	8005f98 <__sflush_r+0x20>
 8005f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dc02      	bgt.n	8005f98 <__sflush_r+0x20>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	d0f9      	beq.n	8005f92 <__sflush_r+0x1a>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fa4:	682f      	ldr	r7, [r5, #0]
 8005fa6:	6a21      	ldr	r1, [r4, #32]
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	d032      	beq.n	8006012 <__sflush_r+0x9a>
 8005fac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	075a      	lsls	r2, r3, #29
 8005fb2:	d505      	bpl.n	8005fc0 <__sflush_r+0x48>
 8005fb4:	6863      	ldr	r3, [r4, #4]
 8005fb6:	1ac0      	subs	r0, r0, r3
 8005fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fba:	b10b      	cbz	r3, 8005fc0 <__sflush_r+0x48>
 8005fbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fbe:	1ac0      	subs	r0, r0, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fc6:	6a21      	ldr	r1, [r4, #32]
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b0      	blx	r6
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	d106      	bne.n	8005fe0 <__sflush_r+0x68>
 8005fd2:	6829      	ldr	r1, [r5, #0]
 8005fd4:	291d      	cmp	r1, #29
 8005fd6:	d848      	bhi.n	800606a <__sflush_r+0xf2>
 8005fd8:	4a29      	ldr	r2, [pc, #164]	; (8006080 <__sflush_r+0x108>)
 8005fda:	40ca      	lsrs	r2, r1
 8005fdc:	07d6      	lsls	r6, r2, #31
 8005fde:	d544      	bpl.n	800606a <__sflush_r+0xf2>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	6062      	str	r2, [r4, #4]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	04d9      	lsls	r1, r3, #19
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	d504      	bpl.n	8005ff6 <__sflush_r+0x7e>
 8005fec:	1c42      	adds	r2, r0, #1
 8005fee:	d101      	bne.n	8005ff4 <__sflush_r+0x7c>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b903      	cbnz	r3, 8005ff6 <__sflush_r+0x7e>
 8005ff4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff8:	602f      	str	r7, [r5, #0]
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	d0c9      	beq.n	8005f92 <__sflush_r+0x1a>
 8005ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006002:	4299      	cmp	r1, r3
 8006004:	d002      	beq.n	800600c <__sflush_r+0x94>
 8006006:	4628      	mov	r0, r5
 8006008:	f000 fcb2 	bl	8006970 <_free_r>
 800600c:	2000      	movs	r0, #0
 800600e:	6360      	str	r0, [r4, #52]	; 0x34
 8006010:	e7c0      	b.n	8005f94 <__sflush_r+0x1c>
 8006012:	2301      	movs	r3, #1
 8006014:	4628      	mov	r0, r5
 8006016:	47b0      	blx	r6
 8006018:	1c41      	adds	r1, r0, #1
 800601a:	d1c8      	bne.n	8005fae <__sflush_r+0x36>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0c5      	beq.n	8005fae <__sflush_r+0x36>
 8006022:	2b1d      	cmp	r3, #29
 8006024:	d001      	beq.n	800602a <__sflush_r+0xb2>
 8006026:	2b16      	cmp	r3, #22
 8006028:	d101      	bne.n	800602e <__sflush_r+0xb6>
 800602a:	602f      	str	r7, [r5, #0]
 800602c:	e7b1      	b.n	8005f92 <__sflush_r+0x1a>
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	e7ad      	b.n	8005f94 <__sflush_r+0x1c>
 8006038:	690f      	ldr	r7, [r1, #16]
 800603a:	2f00      	cmp	r7, #0
 800603c:	d0a9      	beq.n	8005f92 <__sflush_r+0x1a>
 800603e:	0793      	lsls	r3, r2, #30
 8006040:	bf18      	it	ne
 8006042:	2300      	movne	r3, #0
 8006044:	680e      	ldr	r6, [r1, #0]
 8006046:	bf08      	it	eq
 8006048:	694b      	ldreq	r3, [r1, #20]
 800604a:	eba6 0807 	sub.w	r8, r6, r7
 800604e:	600f      	str	r7, [r1, #0]
 8006050:	608b      	str	r3, [r1, #8]
 8006052:	f1b8 0f00 	cmp.w	r8, #0
 8006056:	dd9c      	ble.n	8005f92 <__sflush_r+0x1a>
 8006058:	4643      	mov	r3, r8
 800605a:	463a      	mov	r2, r7
 800605c:	6a21      	ldr	r1, [r4, #32]
 800605e:	4628      	mov	r0, r5
 8006060:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006062:	47b0      	blx	r6
 8006064:	2800      	cmp	r0, #0
 8006066:	dc06      	bgt.n	8006076 <__sflush_r+0xfe>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006074:	e78e      	b.n	8005f94 <__sflush_r+0x1c>
 8006076:	4407      	add	r7, r0
 8006078:	eba8 0800 	sub.w	r8, r8, r0
 800607c:	e7e9      	b.n	8006052 <__sflush_r+0xda>
 800607e:	bf00      	nop
 8006080:	20400001 	.word	0x20400001

08006084 <_fflush_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	690b      	ldr	r3, [r1, #16]
 8006088:	4605      	mov	r5, r0
 800608a:	460c      	mov	r4, r1
 800608c:	b1db      	cbz	r3, 80060c6 <_fflush_r+0x42>
 800608e:	b118      	cbz	r0, 8006098 <_fflush_r+0x14>
 8006090:	6983      	ldr	r3, [r0, #24]
 8006092:	b90b      	cbnz	r3, 8006098 <_fflush_r+0x14>
 8006094:	f000 f860 	bl	8006158 <__sinit>
 8006098:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <_fflush_r+0x48>)
 800609a:	429c      	cmp	r4, r3
 800609c:	d109      	bne.n	80060b2 <_fflush_r+0x2e>
 800609e:	686c      	ldr	r4, [r5, #4]
 80060a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a4:	b17b      	cbz	r3, 80060c6 <_fflush_r+0x42>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ae:	f7ff bf63 	b.w	8005f78 <__sflush_r>
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <_fflush_r+0x4c>)
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d101      	bne.n	80060bc <_fflush_r+0x38>
 80060b8:	68ac      	ldr	r4, [r5, #8]
 80060ba:	e7f1      	b.n	80060a0 <_fflush_r+0x1c>
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <_fflush_r+0x50>)
 80060be:	429c      	cmp	r4, r3
 80060c0:	bf08      	it	eq
 80060c2:	68ec      	ldreq	r4, [r5, #12]
 80060c4:	e7ec      	b.n	80060a0 <_fflush_r+0x1c>
 80060c6:	2000      	movs	r0, #0
 80060c8:	bd38      	pop	{r3, r4, r5, pc}
 80060ca:	bf00      	nop
 80060cc:	08006e70 	.word	0x08006e70
 80060d0:	08006e90 	.word	0x08006e90
 80060d4:	08006e50 	.word	0x08006e50

080060d8 <std>:
 80060d8:	2300      	movs	r3, #0
 80060da:	b510      	push	{r4, lr}
 80060dc:	4604      	mov	r4, r0
 80060de:	e9c0 3300 	strd	r3, r3, [r0]
 80060e2:	6083      	str	r3, [r0, #8]
 80060e4:	8181      	strh	r1, [r0, #12]
 80060e6:	6643      	str	r3, [r0, #100]	; 0x64
 80060e8:	81c2      	strh	r2, [r0, #14]
 80060ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ee:	6183      	str	r3, [r0, #24]
 80060f0:	4619      	mov	r1, r3
 80060f2:	2208      	movs	r2, #8
 80060f4:	305c      	adds	r0, #92	; 0x5c
 80060f6:	f7fe fc93 	bl	8004a20 <memset>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <std+0x38>)
 80060fc:	6224      	str	r4, [r4, #32]
 80060fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <std+0x3c>)
 8006102:	62a3      	str	r3, [r4, #40]	; 0x28
 8006104:	4b04      	ldr	r3, [pc, #16]	; (8006118 <std+0x40>)
 8006106:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <std+0x44>)
 800610a:	6323      	str	r3, [r4, #48]	; 0x30
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	08006add 	.word	0x08006add
 8006114:	08006aff 	.word	0x08006aff
 8006118:	08006b37 	.word	0x08006b37
 800611c:	08006b5b 	.word	0x08006b5b

08006120 <_cleanup_r>:
 8006120:	4901      	ldr	r1, [pc, #4]	; (8006128 <_cleanup_r+0x8>)
 8006122:	f000 b885 	b.w	8006230 <_fwalk_reent>
 8006126:	bf00      	nop
 8006128:	08006085 	.word	0x08006085

0800612c <__sfmoreglue>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	2568      	movs	r5, #104	; 0x68
 8006130:	1e4a      	subs	r2, r1, #1
 8006132:	4355      	muls	r5, r2
 8006134:	460e      	mov	r6, r1
 8006136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800613a:	f000 fc65 	bl	8006a08 <_malloc_r>
 800613e:	4604      	mov	r4, r0
 8006140:	b140      	cbz	r0, 8006154 <__sfmoreglue+0x28>
 8006142:	2100      	movs	r1, #0
 8006144:	e9c0 1600 	strd	r1, r6, [r0]
 8006148:	300c      	adds	r0, #12
 800614a:	60a0      	str	r0, [r4, #8]
 800614c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006150:	f7fe fc66 	bl	8004a20 <memset>
 8006154:	4620      	mov	r0, r4
 8006156:	bd70      	pop	{r4, r5, r6, pc}

08006158 <__sinit>:
 8006158:	6983      	ldr	r3, [r0, #24]
 800615a:	b510      	push	{r4, lr}
 800615c:	4604      	mov	r4, r0
 800615e:	bb33      	cbnz	r3, 80061ae <__sinit+0x56>
 8006160:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006164:	6503      	str	r3, [r0, #80]	; 0x50
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <__sinit+0x58>)
 8006168:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <__sinit+0x5c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6282      	str	r2, [r0, #40]	; 0x28
 800616e:	4298      	cmp	r0, r3
 8006170:	bf04      	itt	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	6183      	streq	r3, [r0, #24]
 8006176:	f000 f81f 	bl	80061b8 <__sfp>
 800617a:	6060      	str	r0, [r4, #4]
 800617c:	4620      	mov	r0, r4
 800617e:	f000 f81b 	bl	80061b8 <__sfp>
 8006182:	60a0      	str	r0, [r4, #8]
 8006184:	4620      	mov	r0, r4
 8006186:	f000 f817 	bl	80061b8 <__sfp>
 800618a:	2200      	movs	r2, #0
 800618c:	60e0      	str	r0, [r4, #12]
 800618e:	2104      	movs	r1, #4
 8006190:	6860      	ldr	r0, [r4, #4]
 8006192:	f7ff ffa1 	bl	80060d8 <std>
 8006196:	2201      	movs	r2, #1
 8006198:	2109      	movs	r1, #9
 800619a:	68a0      	ldr	r0, [r4, #8]
 800619c:	f7ff ff9c 	bl	80060d8 <std>
 80061a0:	2202      	movs	r2, #2
 80061a2:	2112      	movs	r1, #18
 80061a4:	68e0      	ldr	r0, [r4, #12]
 80061a6:	f7ff ff97 	bl	80060d8 <std>
 80061aa:	2301      	movs	r3, #1
 80061ac:	61a3      	str	r3, [r4, #24]
 80061ae:	bd10      	pop	{r4, pc}
 80061b0:	08006e2c 	.word	0x08006e2c
 80061b4:	08006121 	.word	0x08006121

080061b8 <__sfp>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <__sfp+0x70>)
 80061bc:	4607      	mov	r7, r0
 80061be:	681e      	ldr	r6, [r3, #0]
 80061c0:	69b3      	ldr	r3, [r6, #24]
 80061c2:	b913      	cbnz	r3, 80061ca <__sfp+0x12>
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff ffc7 	bl	8006158 <__sinit>
 80061ca:	3648      	adds	r6, #72	; 0x48
 80061cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	d503      	bpl.n	80061dc <__sfp+0x24>
 80061d4:	6833      	ldr	r3, [r6, #0]
 80061d6:	b133      	cbz	r3, 80061e6 <__sfp+0x2e>
 80061d8:	6836      	ldr	r6, [r6, #0]
 80061da:	e7f7      	b.n	80061cc <__sfp+0x14>
 80061dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061e0:	b16d      	cbz	r5, 80061fe <__sfp+0x46>
 80061e2:	3468      	adds	r4, #104	; 0x68
 80061e4:	e7f4      	b.n	80061d0 <__sfp+0x18>
 80061e6:	2104      	movs	r1, #4
 80061e8:	4638      	mov	r0, r7
 80061ea:	f7ff ff9f 	bl	800612c <__sfmoreglue>
 80061ee:	6030      	str	r0, [r6, #0]
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d1f1      	bne.n	80061d8 <__sfp+0x20>
 80061f4:	230c      	movs	r3, #12
 80061f6:	4604      	mov	r4, r0
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4620      	mov	r0, r4
 80061fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <__sfp+0x74>)
 8006200:	6665      	str	r5, [r4, #100]	; 0x64
 8006202:	e9c4 5500 	strd	r5, r5, [r4]
 8006206:	60a5      	str	r5, [r4, #8]
 8006208:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800620c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006210:	2208      	movs	r2, #8
 8006212:	4629      	mov	r1, r5
 8006214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006218:	f7fe fc02 	bl	8004a20 <memset>
 800621c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006224:	e7e9      	b.n	80061fa <__sfp+0x42>
 8006226:	bf00      	nop
 8006228:	08006e2c 	.word	0x08006e2c
 800622c:	ffff0001 	.word	0xffff0001

08006230 <_fwalk_reent>:
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	4680      	mov	r8, r0
 8006236:	4689      	mov	r9, r1
 8006238:	2600      	movs	r6, #0
 800623a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800623e:	b914      	cbnz	r4, 8006246 <_fwalk_reent+0x16>
 8006240:	4630      	mov	r0, r6
 8006242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006246:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800624a:	3f01      	subs	r7, #1
 800624c:	d501      	bpl.n	8006252 <_fwalk_reent+0x22>
 800624e:	6824      	ldr	r4, [r4, #0]
 8006250:	e7f5      	b.n	800623e <_fwalk_reent+0xe>
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d907      	bls.n	8006268 <_fwalk_reent+0x38>
 8006258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800625c:	3301      	adds	r3, #1
 800625e:	d003      	beq.n	8006268 <_fwalk_reent+0x38>
 8006260:	4629      	mov	r1, r5
 8006262:	4640      	mov	r0, r8
 8006264:	47c8      	blx	r9
 8006266:	4306      	orrs	r6, r0
 8006268:	3568      	adds	r5, #104	; 0x68
 800626a:	e7ee      	b.n	800624a <_fwalk_reent+0x1a>

0800626c <_localeconv_r>:
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <_localeconv_r+0x14>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a18      	ldr	r0, [r3, #32]
 8006272:	4b04      	ldr	r3, [pc, #16]	; (8006284 <_localeconv_r+0x18>)
 8006274:	2800      	cmp	r0, #0
 8006276:	bf08      	it	eq
 8006278:	4618      	moveq	r0, r3
 800627a:	30f0      	adds	r0, #240	; 0xf0
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000038 	.word	0x20000038
 8006284:	2000009c 	.word	0x2000009c

08006288 <__swhatbuf_r>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	460e      	mov	r6, r1
 800628c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006290:	b096      	sub	sp, #88	; 0x58
 8006292:	2900      	cmp	r1, #0
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	da07      	bge.n	80062aa <__swhatbuf_r+0x22>
 800629a:	2300      	movs	r3, #0
 800629c:	602b      	str	r3, [r5, #0]
 800629e:	89b3      	ldrh	r3, [r6, #12]
 80062a0:	061a      	lsls	r2, r3, #24
 80062a2:	d410      	bmi.n	80062c6 <__swhatbuf_r+0x3e>
 80062a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a8:	e00e      	b.n	80062c8 <__swhatbuf_r+0x40>
 80062aa:	466a      	mov	r2, sp
 80062ac:	f000 fc88 	bl	8006bc0 <_fstat_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dbf2      	blt.n	800629a <__swhatbuf_r+0x12>
 80062b4:	9a01      	ldr	r2, [sp, #4]
 80062b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062be:	425a      	negs	r2, r3
 80062c0:	415a      	adcs	r2, r3
 80062c2:	602a      	str	r2, [r5, #0]
 80062c4:	e7ee      	b.n	80062a4 <__swhatbuf_r+0x1c>
 80062c6:	2340      	movs	r3, #64	; 0x40
 80062c8:	2000      	movs	r0, #0
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	b016      	add	sp, #88	; 0x58
 80062ce:	bd70      	pop	{r4, r5, r6, pc}

080062d0 <__smakebuf_r>:
 80062d0:	898b      	ldrh	r3, [r1, #12]
 80062d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062d4:	079d      	lsls	r5, r3, #30
 80062d6:	4606      	mov	r6, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	d507      	bpl.n	80062ec <__smakebuf_r+0x1c>
 80062dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	2301      	movs	r3, #1
 80062e6:	6163      	str	r3, [r4, #20]
 80062e8:	b002      	add	sp, #8
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	ab01      	add	r3, sp, #4
 80062ee:	466a      	mov	r2, sp
 80062f0:	f7ff ffca 	bl	8006288 <__swhatbuf_r>
 80062f4:	9900      	ldr	r1, [sp, #0]
 80062f6:	4605      	mov	r5, r0
 80062f8:	4630      	mov	r0, r6
 80062fa:	f000 fb85 	bl	8006a08 <_malloc_r>
 80062fe:	b948      	cbnz	r0, 8006314 <__smakebuf_r+0x44>
 8006300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006304:	059a      	lsls	r2, r3, #22
 8006306:	d4ef      	bmi.n	80062e8 <__smakebuf_r+0x18>
 8006308:	f023 0303 	bic.w	r3, r3, #3
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	e7e3      	b.n	80062dc <__smakebuf_r+0xc>
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <__smakebuf_r+0x7c>)
 8006316:	62b3      	str	r3, [r6, #40]	; 0x28
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	6020      	str	r0, [r4, #0]
 800631c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	9b00      	ldr	r3, [sp, #0]
 8006324:	6120      	str	r0, [r4, #16]
 8006326:	6163      	str	r3, [r4, #20]
 8006328:	9b01      	ldr	r3, [sp, #4]
 800632a:	b15b      	cbz	r3, 8006344 <__smakebuf_r+0x74>
 800632c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006330:	4630      	mov	r0, r6
 8006332:	f000 fc57 	bl	8006be4 <_isatty_r>
 8006336:	b128      	cbz	r0, 8006344 <__smakebuf_r+0x74>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	431d      	orrs	r5, r3
 8006348:	81a5      	strh	r5, [r4, #12]
 800634a:	e7cd      	b.n	80062e8 <__smakebuf_r+0x18>
 800634c:	08006121 	.word	0x08006121

08006350 <malloc>:
 8006350:	4b02      	ldr	r3, [pc, #8]	; (800635c <malloc+0xc>)
 8006352:	4601      	mov	r1, r0
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f000 bb57 	b.w	8006a08 <_malloc_r>
 800635a:	bf00      	nop
 800635c:	20000038 	.word	0x20000038

08006360 <__ascii_mbtowc>:
 8006360:	b082      	sub	sp, #8
 8006362:	b901      	cbnz	r1, 8006366 <__ascii_mbtowc+0x6>
 8006364:	a901      	add	r1, sp, #4
 8006366:	b142      	cbz	r2, 800637a <__ascii_mbtowc+0x1a>
 8006368:	b14b      	cbz	r3, 800637e <__ascii_mbtowc+0x1e>
 800636a:	7813      	ldrb	r3, [r2, #0]
 800636c:	600b      	str	r3, [r1, #0]
 800636e:	7812      	ldrb	r2, [r2, #0]
 8006370:	1c10      	adds	r0, r2, #0
 8006372:	bf18      	it	ne
 8006374:	2001      	movne	r0, #1
 8006376:	b002      	add	sp, #8
 8006378:	4770      	bx	lr
 800637a:	4610      	mov	r0, r2
 800637c:	e7fb      	b.n	8006376 <__ascii_mbtowc+0x16>
 800637e:	f06f 0001 	mvn.w	r0, #1
 8006382:	e7f8      	b.n	8006376 <__ascii_mbtowc+0x16>

08006384 <memcpy>:
 8006384:	b510      	push	{r4, lr}
 8006386:	1e43      	subs	r3, r0, #1
 8006388:	440a      	add	r2, r1
 800638a:	4291      	cmp	r1, r2
 800638c:	d100      	bne.n	8006390 <memcpy+0xc>
 800638e:	bd10      	pop	{r4, pc}
 8006390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006398:	e7f7      	b.n	800638a <memcpy+0x6>

0800639a <_Balloc>:
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800639e:	4604      	mov	r4, r0
 80063a0:	460e      	mov	r6, r1
 80063a2:	b93d      	cbnz	r5, 80063b4 <_Balloc+0x1a>
 80063a4:	2010      	movs	r0, #16
 80063a6:	f7ff ffd3 	bl	8006350 <malloc>
 80063aa:	6260      	str	r0, [r4, #36]	; 0x24
 80063ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063b0:	6005      	str	r5, [r0, #0]
 80063b2:	60c5      	str	r5, [r0, #12]
 80063b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80063b6:	68eb      	ldr	r3, [r5, #12]
 80063b8:	b183      	cbz	r3, 80063dc <_Balloc+0x42>
 80063ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80063c2:	b9b8      	cbnz	r0, 80063f4 <_Balloc+0x5a>
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f506 	lsl.w	r5, r1, r6
 80063ca:	1d6a      	adds	r2, r5, #5
 80063cc:	0092      	lsls	r2, r2, #2
 80063ce:	4620      	mov	r0, r4
 80063d0:	f000 fabf 	bl	8006952 <_calloc_r>
 80063d4:	b160      	cbz	r0, 80063f0 <_Balloc+0x56>
 80063d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80063da:	e00e      	b.n	80063fa <_Balloc+0x60>
 80063dc:	2221      	movs	r2, #33	; 0x21
 80063de:	2104      	movs	r1, #4
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fab6 	bl	8006952 <_calloc_r>
 80063e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e8:	60e8      	str	r0, [r5, #12]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e4      	bne.n	80063ba <_Balloc+0x20>
 80063f0:	2000      	movs	r0, #0
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	6802      	ldr	r2, [r0, #0]
 80063f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80063fa:	2300      	movs	r3, #0
 80063fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006400:	e7f7      	b.n	80063f2 <_Balloc+0x58>

08006402 <_Bfree>:
 8006402:	b570      	push	{r4, r5, r6, lr}
 8006404:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006406:	4606      	mov	r6, r0
 8006408:	460d      	mov	r5, r1
 800640a:	b93c      	cbnz	r4, 800641c <_Bfree+0x1a>
 800640c:	2010      	movs	r0, #16
 800640e:	f7ff ff9f 	bl	8006350 <malloc>
 8006412:	6270      	str	r0, [r6, #36]	; 0x24
 8006414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006418:	6004      	str	r4, [r0, #0]
 800641a:	60c4      	str	r4, [r0, #12]
 800641c:	b13d      	cbz	r5, 800642e <_Bfree+0x2c>
 800641e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006420:	686a      	ldr	r2, [r5, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006428:	6029      	str	r1, [r5, #0]
 800642a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800642e:	bd70      	pop	{r4, r5, r6, pc}

08006430 <__multadd>:
 8006430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006434:	461f      	mov	r7, r3
 8006436:	4606      	mov	r6, r0
 8006438:	460c      	mov	r4, r1
 800643a:	2300      	movs	r3, #0
 800643c:	690d      	ldr	r5, [r1, #16]
 800643e:	f101 0c14 	add.w	ip, r1, #20
 8006442:	f8dc 0000 	ldr.w	r0, [ip]
 8006446:	3301      	adds	r3, #1
 8006448:	b281      	uxth	r1, r0
 800644a:	fb02 7101 	mla	r1, r2, r1, r7
 800644e:	0c00      	lsrs	r0, r0, #16
 8006450:	0c0f      	lsrs	r7, r1, #16
 8006452:	fb02 7000 	mla	r0, r2, r0, r7
 8006456:	b289      	uxth	r1, r1
 8006458:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800645c:	429d      	cmp	r5, r3
 800645e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006462:	f84c 1b04 	str.w	r1, [ip], #4
 8006466:	dcec      	bgt.n	8006442 <__multadd+0x12>
 8006468:	b1d7      	cbz	r7, 80064a0 <__multadd+0x70>
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	42ab      	cmp	r3, r5
 800646e:	dc12      	bgt.n	8006496 <__multadd+0x66>
 8006470:	6861      	ldr	r1, [r4, #4]
 8006472:	4630      	mov	r0, r6
 8006474:	3101      	adds	r1, #1
 8006476:	f7ff ff90 	bl	800639a <_Balloc>
 800647a:	4680      	mov	r8, r0
 800647c:	6922      	ldr	r2, [r4, #16]
 800647e:	f104 010c 	add.w	r1, r4, #12
 8006482:	3202      	adds	r2, #2
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	300c      	adds	r0, #12
 8006488:	f7ff ff7c 	bl	8006384 <memcpy>
 800648c:	4621      	mov	r1, r4
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ffb7 	bl	8006402 <_Bfree>
 8006494:	4644      	mov	r4, r8
 8006496:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800649a:	3501      	adds	r5, #1
 800649c:	615f      	str	r7, [r3, #20]
 800649e:	6125      	str	r5, [r4, #16]
 80064a0:	4620      	mov	r0, r4
 80064a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064a6 <__hi0bits>:
 80064a6:	0c02      	lsrs	r2, r0, #16
 80064a8:	0412      	lsls	r2, r2, #16
 80064aa:	4603      	mov	r3, r0
 80064ac:	b9b2      	cbnz	r2, 80064dc <__hi0bits+0x36>
 80064ae:	0403      	lsls	r3, r0, #16
 80064b0:	2010      	movs	r0, #16
 80064b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064b6:	bf04      	itt	eq
 80064b8:	021b      	lsleq	r3, r3, #8
 80064ba:	3008      	addeq	r0, #8
 80064bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064c0:	bf04      	itt	eq
 80064c2:	011b      	lsleq	r3, r3, #4
 80064c4:	3004      	addeq	r0, #4
 80064c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064ca:	bf04      	itt	eq
 80064cc:	009b      	lsleq	r3, r3, #2
 80064ce:	3002      	addeq	r0, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db06      	blt.n	80064e2 <__hi0bits+0x3c>
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	d503      	bpl.n	80064e0 <__hi0bits+0x3a>
 80064d8:	3001      	adds	r0, #1
 80064da:	4770      	bx	lr
 80064dc:	2000      	movs	r0, #0
 80064de:	e7e8      	b.n	80064b2 <__hi0bits+0xc>
 80064e0:	2020      	movs	r0, #32
 80064e2:	4770      	bx	lr

080064e4 <__lo0bits>:
 80064e4:	6803      	ldr	r3, [r0, #0]
 80064e6:	4601      	mov	r1, r0
 80064e8:	f013 0207 	ands.w	r2, r3, #7
 80064ec:	d00b      	beq.n	8006506 <__lo0bits+0x22>
 80064ee:	07da      	lsls	r2, r3, #31
 80064f0:	d423      	bmi.n	800653a <__lo0bits+0x56>
 80064f2:	0798      	lsls	r0, r3, #30
 80064f4:	bf49      	itett	mi
 80064f6:	085b      	lsrmi	r3, r3, #1
 80064f8:	089b      	lsrpl	r3, r3, #2
 80064fa:	2001      	movmi	r0, #1
 80064fc:	600b      	strmi	r3, [r1, #0]
 80064fe:	bf5c      	itt	pl
 8006500:	600b      	strpl	r3, [r1, #0]
 8006502:	2002      	movpl	r0, #2
 8006504:	4770      	bx	lr
 8006506:	b298      	uxth	r0, r3
 8006508:	b9a8      	cbnz	r0, 8006536 <__lo0bits+0x52>
 800650a:	2010      	movs	r0, #16
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006512:	bf04      	itt	eq
 8006514:	0a1b      	lsreq	r3, r3, #8
 8006516:	3008      	addeq	r0, #8
 8006518:	071a      	lsls	r2, r3, #28
 800651a:	bf04      	itt	eq
 800651c:	091b      	lsreq	r3, r3, #4
 800651e:	3004      	addeq	r0, #4
 8006520:	079a      	lsls	r2, r3, #30
 8006522:	bf04      	itt	eq
 8006524:	089b      	lsreq	r3, r3, #2
 8006526:	3002      	addeq	r0, #2
 8006528:	07da      	lsls	r2, r3, #31
 800652a:	d402      	bmi.n	8006532 <__lo0bits+0x4e>
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	d006      	beq.n	800653e <__lo0bits+0x5a>
 8006530:	3001      	adds	r0, #1
 8006532:	600b      	str	r3, [r1, #0]
 8006534:	4770      	bx	lr
 8006536:	4610      	mov	r0, r2
 8006538:	e7e9      	b.n	800650e <__lo0bits+0x2a>
 800653a:	2000      	movs	r0, #0
 800653c:	4770      	bx	lr
 800653e:	2020      	movs	r0, #32
 8006540:	4770      	bx	lr

08006542 <__i2b>:
 8006542:	b510      	push	{r4, lr}
 8006544:	460c      	mov	r4, r1
 8006546:	2101      	movs	r1, #1
 8006548:	f7ff ff27 	bl	800639a <_Balloc>
 800654c:	2201      	movs	r2, #1
 800654e:	6144      	str	r4, [r0, #20]
 8006550:	6102      	str	r2, [r0, #16]
 8006552:	bd10      	pop	{r4, pc}

08006554 <__multiply>:
 8006554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	4614      	mov	r4, r2
 800655a:	690a      	ldr	r2, [r1, #16]
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	4688      	mov	r8, r1
 8006560:	429a      	cmp	r2, r3
 8006562:	bfbe      	ittt	lt
 8006564:	460b      	movlt	r3, r1
 8006566:	46a0      	movlt	r8, r4
 8006568:	461c      	movlt	r4, r3
 800656a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800656e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006576:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800657a:	eb07 0609 	add.w	r6, r7, r9
 800657e:	42b3      	cmp	r3, r6
 8006580:	bfb8      	it	lt
 8006582:	3101      	addlt	r1, #1
 8006584:	f7ff ff09 	bl	800639a <_Balloc>
 8006588:	f100 0514 	add.w	r5, r0, #20
 800658c:	462b      	mov	r3, r5
 800658e:	2200      	movs	r2, #0
 8006590:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006594:	4573      	cmp	r3, lr
 8006596:	d316      	bcc.n	80065c6 <__multiply+0x72>
 8006598:	f104 0214 	add.w	r2, r4, #20
 800659c:	f108 0114 	add.w	r1, r8, #20
 80065a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80065a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	9b00      	ldr	r3, [sp, #0]
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d80c      	bhi.n	80065cc <__multiply+0x78>
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	dd03      	ble.n	80065be <__multiply+0x6a>
 80065b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d05d      	beq.n	800667a <__multiply+0x126>
 80065be:	6106      	str	r6, [r0, #16]
 80065c0:	b003      	add	sp, #12
 80065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c6:	f843 2b04 	str.w	r2, [r3], #4
 80065ca:	e7e3      	b.n	8006594 <__multiply+0x40>
 80065cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80065d0:	f1bb 0f00 	cmp.w	fp, #0
 80065d4:	d023      	beq.n	800661e <__multiply+0xca>
 80065d6:	4689      	mov	r9, r1
 80065d8:	46ac      	mov	ip, r5
 80065da:	f04f 0800 	mov.w	r8, #0
 80065de:	f859 4b04 	ldr.w	r4, [r9], #4
 80065e2:	f8dc a000 	ldr.w	sl, [ip]
 80065e6:	b2a3      	uxth	r3, r4
 80065e8:	fa1f fa8a 	uxth.w	sl, sl
 80065ec:	fb0b a303 	mla	r3, fp, r3, sl
 80065f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80065f4:	f8dc 4000 	ldr.w	r4, [ip]
 80065f8:	4443      	add	r3, r8
 80065fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8006602:	46e2      	mov	sl, ip
 8006604:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800660e:	454f      	cmp	r7, r9
 8006610:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006614:	f84a 3b04 	str.w	r3, [sl], #4
 8006618:	d82b      	bhi.n	8006672 <__multiply+0x11e>
 800661a:	f8cc 8004 	str.w	r8, [ip, #4]
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	3204      	adds	r2, #4
 8006622:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006626:	f1ba 0f00 	cmp.w	sl, #0
 800662a:	d020      	beq.n	800666e <__multiply+0x11a>
 800662c:	4689      	mov	r9, r1
 800662e:	46a8      	mov	r8, r5
 8006630:	f04f 0b00 	mov.w	fp, #0
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	f8b9 c000 	ldrh.w	ip, [r9]
 800663a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800663e:	b29b      	uxth	r3, r3
 8006640:	fb0a 440c 	mla	r4, sl, ip, r4
 8006644:	46c4      	mov	ip, r8
 8006646:	445c      	add	r4, fp
 8006648:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800664c:	f84c 3b04 	str.w	r3, [ip], #4
 8006650:	f859 3b04 	ldr.w	r3, [r9], #4
 8006654:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006658:	0c1b      	lsrs	r3, r3, #16
 800665a:	fb0a b303 	mla	r3, sl, r3, fp
 800665e:	454f      	cmp	r7, r9
 8006660:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006664:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006668:	d805      	bhi.n	8006676 <__multiply+0x122>
 800666a:	f8c8 3004 	str.w	r3, [r8, #4]
 800666e:	3504      	adds	r5, #4
 8006670:	e79b      	b.n	80065aa <__multiply+0x56>
 8006672:	46d4      	mov	ip, sl
 8006674:	e7b3      	b.n	80065de <__multiply+0x8a>
 8006676:	46e0      	mov	r8, ip
 8006678:	e7dd      	b.n	8006636 <__multiply+0xe2>
 800667a:	3e01      	subs	r6, #1
 800667c:	e799      	b.n	80065b2 <__multiply+0x5e>
	...

08006680 <__pow5mult>:
 8006680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006684:	4615      	mov	r5, r2
 8006686:	f012 0203 	ands.w	r2, r2, #3
 800668a:	4606      	mov	r6, r0
 800668c:	460f      	mov	r7, r1
 800668e:	d007      	beq.n	80066a0 <__pow5mult+0x20>
 8006690:	4c21      	ldr	r4, [pc, #132]	; (8006718 <__pow5mult+0x98>)
 8006692:	3a01      	subs	r2, #1
 8006694:	2300      	movs	r3, #0
 8006696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800669a:	f7ff fec9 	bl	8006430 <__multadd>
 800669e:	4607      	mov	r7, r0
 80066a0:	10ad      	asrs	r5, r5, #2
 80066a2:	d035      	beq.n	8006710 <__pow5mult+0x90>
 80066a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066a6:	b93c      	cbnz	r4, 80066b8 <__pow5mult+0x38>
 80066a8:	2010      	movs	r0, #16
 80066aa:	f7ff fe51 	bl	8006350 <malloc>
 80066ae:	6270      	str	r0, [r6, #36]	; 0x24
 80066b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066b4:	6004      	str	r4, [r0, #0]
 80066b6:	60c4      	str	r4, [r0, #12]
 80066b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066c0:	b94c      	cbnz	r4, 80066d6 <__pow5mult+0x56>
 80066c2:	f240 2171 	movw	r1, #625	; 0x271
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff ff3b 	bl	8006542 <__i2b>
 80066cc:	2300      	movs	r3, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80066d4:	6003      	str	r3, [r0, #0]
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	07eb      	lsls	r3, r5, #31
 80066dc:	d50a      	bpl.n	80066f4 <__pow5mult+0x74>
 80066de:	4639      	mov	r1, r7
 80066e0:	4622      	mov	r2, r4
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7ff ff36 	bl	8006554 <__multiply>
 80066e8:	4681      	mov	r9, r0
 80066ea:	4639      	mov	r1, r7
 80066ec:	4630      	mov	r0, r6
 80066ee:	f7ff fe88 	bl	8006402 <_Bfree>
 80066f2:	464f      	mov	r7, r9
 80066f4:	106d      	asrs	r5, r5, #1
 80066f6:	d00b      	beq.n	8006710 <__pow5mult+0x90>
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	b938      	cbnz	r0, 800670c <__pow5mult+0x8c>
 80066fc:	4622      	mov	r2, r4
 80066fe:	4621      	mov	r1, r4
 8006700:	4630      	mov	r0, r6
 8006702:	f7ff ff27 	bl	8006554 <__multiply>
 8006706:	6020      	str	r0, [r4, #0]
 8006708:	f8c0 8000 	str.w	r8, [r0]
 800670c:	4604      	mov	r4, r0
 800670e:	e7e4      	b.n	80066da <__pow5mult+0x5a>
 8006710:	4638      	mov	r0, r7
 8006712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006716:	bf00      	nop
 8006718:	08006fb0 	.word	0x08006fb0

0800671c <__lshift>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	4607      	mov	r7, r0
 8006724:	4616      	mov	r6, r2
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800672c:	eb0a 0903 	add.w	r9, sl, r3
 8006730:	6849      	ldr	r1, [r1, #4]
 8006732:	68a3      	ldr	r3, [r4, #8]
 8006734:	f109 0501 	add.w	r5, r9, #1
 8006738:	42ab      	cmp	r3, r5
 800673a:	db32      	blt.n	80067a2 <__lshift+0x86>
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff fe2c 	bl	800639a <_Balloc>
 8006742:	2300      	movs	r3, #0
 8006744:	4680      	mov	r8, r0
 8006746:	461a      	mov	r2, r3
 8006748:	f100 0114 	add.w	r1, r0, #20
 800674c:	4553      	cmp	r3, sl
 800674e:	db2b      	blt.n	80067a8 <__lshift+0x8c>
 8006750:	6920      	ldr	r0, [r4, #16]
 8006752:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006756:	f104 0314 	add.w	r3, r4, #20
 800675a:	f016 021f 	ands.w	r2, r6, #31
 800675e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006762:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006766:	d025      	beq.n	80067b4 <__lshift+0x98>
 8006768:	2000      	movs	r0, #0
 800676a:	f1c2 0e20 	rsb	lr, r2, #32
 800676e:	468a      	mov	sl, r1
 8006770:	681e      	ldr	r6, [r3, #0]
 8006772:	4096      	lsls	r6, r2
 8006774:	4330      	orrs	r0, r6
 8006776:	f84a 0b04 	str.w	r0, [sl], #4
 800677a:	f853 0b04 	ldr.w	r0, [r3], #4
 800677e:	459c      	cmp	ip, r3
 8006780:	fa20 f00e 	lsr.w	r0, r0, lr
 8006784:	d814      	bhi.n	80067b0 <__lshift+0x94>
 8006786:	6048      	str	r0, [r1, #4]
 8006788:	b108      	cbz	r0, 800678e <__lshift+0x72>
 800678a:	f109 0502 	add.w	r5, r9, #2
 800678e:	3d01      	subs	r5, #1
 8006790:	4638      	mov	r0, r7
 8006792:	f8c8 5010 	str.w	r5, [r8, #16]
 8006796:	4621      	mov	r1, r4
 8006798:	f7ff fe33 	bl	8006402 <_Bfree>
 800679c:	4640      	mov	r0, r8
 800679e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a2:	3101      	adds	r1, #1
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	e7c7      	b.n	8006738 <__lshift+0x1c>
 80067a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80067ac:	3301      	adds	r3, #1
 80067ae:	e7cd      	b.n	800674c <__lshift+0x30>
 80067b0:	4651      	mov	r1, sl
 80067b2:	e7dc      	b.n	800676e <__lshift+0x52>
 80067b4:	3904      	subs	r1, #4
 80067b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ba:	459c      	cmp	ip, r3
 80067bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80067c0:	d8f9      	bhi.n	80067b6 <__lshift+0x9a>
 80067c2:	e7e4      	b.n	800678e <__lshift+0x72>

080067c4 <__mcmp>:
 80067c4:	6903      	ldr	r3, [r0, #16]
 80067c6:	690a      	ldr	r2, [r1, #16]
 80067c8:	b530      	push	{r4, r5, lr}
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	d10c      	bne.n	80067e8 <__mcmp+0x24>
 80067ce:	0092      	lsls	r2, r2, #2
 80067d0:	3014      	adds	r0, #20
 80067d2:	3114      	adds	r1, #20
 80067d4:	1884      	adds	r4, r0, r2
 80067d6:	4411      	add	r1, r2
 80067d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067e0:	4295      	cmp	r5, r2
 80067e2:	d003      	beq.n	80067ec <__mcmp+0x28>
 80067e4:	d305      	bcc.n	80067f2 <__mcmp+0x2e>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4618      	mov	r0, r3
 80067ea:	bd30      	pop	{r4, r5, pc}
 80067ec:	42a0      	cmp	r0, r4
 80067ee:	d3f3      	bcc.n	80067d8 <__mcmp+0x14>
 80067f0:	e7fa      	b.n	80067e8 <__mcmp+0x24>
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067f6:	e7f7      	b.n	80067e8 <__mcmp+0x24>

080067f8 <__mdiff>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	460d      	mov	r5, r1
 80067fe:	4607      	mov	r7, r0
 8006800:	4611      	mov	r1, r2
 8006802:	4628      	mov	r0, r5
 8006804:	4614      	mov	r4, r2
 8006806:	f7ff ffdd 	bl	80067c4 <__mcmp>
 800680a:	1e06      	subs	r6, r0, #0
 800680c:	d108      	bne.n	8006820 <__mdiff+0x28>
 800680e:	4631      	mov	r1, r6
 8006810:	4638      	mov	r0, r7
 8006812:	f7ff fdc2 	bl	800639a <_Balloc>
 8006816:	2301      	movs	r3, #1
 8006818:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800681c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006820:	bfa4      	itt	ge
 8006822:	4623      	movge	r3, r4
 8006824:	462c      	movge	r4, r5
 8006826:	4638      	mov	r0, r7
 8006828:	6861      	ldr	r1, [r4, #4]
 800682a:	bfa6      	itte	ge
 800682c:	461d      	movge	r5, r3
 800682e:	2600      	movge	r6, #0
 8006830:	2601      	movlt	r6, #1
 8006832:	f7ff fdb2 	bl	800639a <_Balloc>
 8006836:	f04f 0e00 	mov.w	lr, #0
 800683a:	60c6      	str	r6, [r0, #12]
 800683c:	692b      	ldr	r3, [r5, #16]
 800683e:	6926      	ldr	r6, [r4, #16]
 8006840:	f104 0214 	add.w	r2, r4, #20
 8006844:	f105 0914 	add.w	r9, r5, #20
 8006848:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800684c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006850:	f100 0114 	add.w	r1, r0, #20
 8006854:	f852 ab04 	ldr.w	sl, [r2], #4
 8006858:	f859 5b04 	ldr.w	r5, [r9], #4
 800685c:	fa1f f38a 	uxth.w	r3, sl
 8006860:	4473      	add	r3, lr
 8006862:	b2ac      	uxth	r4, r5
 8006864:	1b1b      	subs	r3, r3, r4
 8006866:	0c2c      	lsrs	r4, r5, #16
 8006868:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800686c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006876:	45c8      	cmp	r8, r9
 8006878:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800687c:	4694      	mov	ip, r2
 800687e:	f841 4b04 	str.w	r4, [r1], #4
 8006882:	d8e7      	bhi.n	8006854 <__mdiff+0x5c>
 8006884:	45bc      	cmp	ip, r7
 8006886:	d304      	bcc.n	8006892 <__mdiff+0x9a>
 8006888:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800688c:	b183      	cbz	r3, 80068b0 <__mdiff+0xb8>
 800688e:	6106      	str	r6, [r0, #16]
 8006890:	e7c4      	b.n	800681c <__mdiff+0x24>
 8006892:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006896:	b2a2      	uxth	r2, r4
 8006898:	4472      	add	r2, lr
 800689a:	1413      	asrs	r3, r2, #16
 800689c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80068a0:	b292      	uxth	r2, r2
 80068a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80068a6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80068aa:	f841 2b04 	str.w	r2, [r1], #4
 80068ae:	e7e9      	b.n	8006884 <__mdiff+0x8c>
 80068b0:	3e01      	subs	r6, #1
 80068b2:	e7e9      	b.n	8006888 <__mdiff+0x90>

080068b4 <__d2b>:
 80068b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068b8:	461c      	mov	r4, r3
 80068ba:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80068be:	2101      	movs	r1, #1
 80068c0:	4690      	mov	r8, r2
 80068c2:	f7ff fd6a 	bl	800639a <_Balloc>
 80068c6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80068ca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80068ce:	4607      	mov	r7, r0
 80068d0:	bb34      	cbnz	r4, 8006920 <__d2b+0x6c>
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	f1b8 0200 	subs.w	r2, r8, #0
 80068d8:	d027      	beq.n	800692a <__d2b+0x76>
 80068da:	a802      	add	r0, sp, #8
 80068dc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80068e0:	f7ff fe00 	bl	80064e4 <__lo0bits>
 80068e4:	9900      	ldr	r1, [sp, #0]
 80068e6:	b1f0      	cbz	r0, 8006926 <__d2b+0x72>
 80068e8:	9a01      	ldr	r2, [sp, #4]
 80068ea:	f1c0 0320 	rsb	r3, r0, #32
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	430b      	orrs	r3, r1
 80068f4:	40c2      	lsrs	r2, r0
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	9201      	str	r2, [sp, #4]
 80068fa:	9b01      	ldr	r3, [sp, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	2102      	movne	r1, #2
 8006902:	2101      	moveq	r1, #1
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	6139      	str	r1, [r7, #16]
 8006908:	b1c4      	cbz	r4, 800693c <__d2b+0x88>
 800690a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800690e:	4404      	add	r4, r0
 8006910:	6034      	str	r4, [r6, #0]
 8006912:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006916:	6028      	str	r0, [r5, #0]
 8006918:	4638      	mov	r0, r7
 800691a:	b002      	add	sp, #8
 800691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006920:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006924:	e7d5      	b.n	80068d2 <__d2b+0x1e>
 8006926:	6179      	str	r1, [r7, #20]
 8006928:	e7e7      	b.n	80068fa <__d2b+0x46>
 800692a:	a801      	add	r0, sp, #4
 800692c:	f7ff fdda 	bl	80064e4 <__lo0bits>
 8006930:	2101      	movs	r1, #1
 8006932:	9b01      	ldr	r3, [sp, #4]
 8006934:	6139      	str	r1, [r7, #16]
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	3020      	adds	r0, #32
 800693a:	e7e5      	b.n	8006908 <__d2b+0x54>
 800693c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006940:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006944:	6030      	str	r0, [r6, #0]
 8006946:	6918      	ldr	r0, [r3, #16]
 8006948:	f7ff fdad 	bl	80064a6 <__hi0bits>
 800694c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006950:	e7e1      	b.n	8006916 <__d2b+0x62>

08006952 <_calloc_r>:
 8006952:	b538      	push	{r3, r4, r5, lr}
 8006954:	fb02 f401 	mul.w	r4, r2, r1
 8006958:	4621      	mov	r1, r4
 800695a:	f000 f855 	bl	8006a08 <_malloc_r>
 800695e:	4605      	mov	r5, r0
 8006960:	b118      	cbz	r0, 800696a <_calloc_r+0x18>
 8006962:	4622      	mov	r2, r4
 8006964:	2100      	movs	r1, #0
 8006966:	f7fe f85b 	bl	8004a20 <memset>
 800696a:	4628      	mov	r0, r5
 800696c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006970 <_free_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4605      	mov	r5, r0
 8006974:	2900      	cmp	r1, #0
 8006976:	d043      	beq.n	8006a00 <_free_r+0x90>
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f0c      	subs	r4, r1, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfb8      	it	lt
 8006982:	18e4      	addlt	r4, r4, r3
 8006984:	f000 f950 	bl	8006c28 <__malloc_lock>
 8006988:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <_free_r+0x94>)
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	4610      	mov	r0, r2
 800698e:	b933      	cbnz	r3, 800699e <_free_r+0x2e>
 8006990:	6063      	str	r3, [r4, #4]
 8006992:	6014      	str	r4, [r2, #0]
 8006994:	4628      	mov	r0, r5
 8006996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800699a:	f000 b946 	b.w	8006c2a <__malloc_unlock>
 800699e:	42a3      	cmp	r3, r4
 80069a0:	d90b      	bls.n	80069ba <_free_r+0x4a>
 80069a2:	6821      	ldr	r1, [r4, #0]
 80069a4:	1862      	adds	r2, r4, r1
 80069a6:	4293      	cmp	r3, r2
 80069a8:	bf01      	itttt	eq
 80069aa:	681a      	ldreq	r2, [r3, #0]
 80069ac:	685b      	ldreq	r3, [r3, #4]
 80069ae:	1852      	addeq	r2, r2, r1
 80069b0:	6022      	streq	r2, [r4, #0]
 80069b2:	6063      	str	r3, [r4, #4]
 80069b4:	6004      	str	r4, [r0, #0]
 80069b6:	e7ed      	b.n	8006994 <_free_r+0x24>
 80069b8:	4613      	mov	r3, r2
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	b10a      	cbz	r2, 80069c2 <_free_r+0x52>
 80069be:	42a2      	cmp	r2, r4
 80069c0:	d9fa      	bls.n	80069b8 <_free_r+0x48>
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	1858      	adds	r0, r3, r1
 80069c6:	42a0      	cmp	r0, r4
 80069c8:	d10b      	bne.n	80069e2 <_free_r+0x72>
 80069ca:	6820      	ldr	r0, [r4, #0]
 80069cc:	4401      	add	r1, r0
 80069ce:	1858      	adds	r0, r3, r1
 80069d0:	4282      	cmp	r2, r0
 80069d2:	6019      	str	r1, [r3, #0]
 80069d4:	d1de      	bne.n	8006994 <_free_r+0x24>
 80069d6:	6810      	ldr	r0, [r2, #0]
 80069d8:	6852      	ldr	r2, [r2, #4]
 80069da:	4401      	add	r1, r0
 80069dc:	6019      	str	r1, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	e7d8      	b.n	8006994 <_free_r+0x24>
 80069e2:	d902      	bls.n	80069ea <_free_r+0x7a>
 80069e4:	230c      	movs	r3, #12
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	e7d4      	b.n	8006994 <_free_r+0x24>
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1821      	adds	r1, r4, r0
 80069ee:	428a      	cmp	r2, r1
 80069f0:	bf01      	itttt	eq
 80069f2:	6811      	ldreq	r1, [r2, #0]
 80069f4:	6852      	ldreq	r2, [r2, #4]
 80069f6:	1809      	addeq	r1, r1, r0
 80069f8:	6021      	streq	r1, [r4, #0]
 80069fa:	6062      	str	r2, [r4, #4]
 80069fc:	605c      	str	r4, [r3, #4]
 80069fe:	e7c9      	b.n	8006994 <_free_r+0x24>
 8006a00:	bd38      	pop	{r3, r4, r5, pc}
 8006a02:	bf00      	nop
 8006a04:	200002dc 	.word	0x200002dc

08006a08 <_malloc_r>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	1ccd      	adds	r5, r1, #3
 8006a0c:	f025 0503 	bic.w	r5, r5, #3
 8006a10:	3508      	adds	r5, #8
 8006a12:	2d0c      	cmp	r5, #12
 8006a14:	bf38      	it	cc
 8006a16:	250c      	movcc	r5, #12
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	db01      	blt.n	8006a22 <_malloc_r+0x1a>
 8006a1e:	42a9      	cmp	r1, r5
 8006a20:	d903      	bls.n	8006a2a <_malloc_r+0x22>
 8006a22:	230c      	movs	r3, #12
 8006a24:	6033      	str	r3, [r6, #0]
 8006a26:	2000      	movs	r0, #0
 8006a28:	bd70      	pop	{r4, r5, r6, pc}
 8006a2a:	f000 f8fd 	bl	8006c28 <__malloc_lock>
 8006a2e:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <_malloc_r+0xac>)
 8006a30:	6814      	ldr	r4, [r2, #0]
 8006a32:	4621      	mov	r1, r4
 8006a34:	b991      	cbnz	r1, 8006a5c <_malloc_r+0x54>
 8006a36:	4c20      	ldr	r4, [pc, #128]	; (8006ab8 <_malloc_r+0xb0>)
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	b91b      	cbnz	r3, 8006a44 <_malloc_r+0x3c>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f000 f83d 	bl	8006abc <_sbrk_r>
 8006a42:	6020      	str	r0, [r4, #0]
 8006a44:	4629      	mov	r1, r5
 8006a46:	4630      	mov	r0, r6
 8006a48:	f000 f838 	bl	8006abc <_sbrk_r>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d124      	bne.n	8006a9a <_malloc_r+0x92>
 8006a50:	230c      	movs	r3, #12
 8006a52:	4630      	mov	r0, r6
 8006a54:	6033      	str	r3, [r6, #0]
 8006a56:	f000 f8e8 	bl	8006c2a <__malloc_unlock>
 8006a5a:	e7e4      	b.n	8006a26 <_malloc_r+0x1e>
 8006a5c:	680b      	ldr	r3, [r1, #0]
 8006a5e:	1b5b      	subs	r3, r3, r5
 8006a60:	d418      	bmi.n	8006a94 <_malloc_r+0x8c>
 8006a62:	2b0b      	cmp	r3, #11
 8006a64:	d90f      	bls.n	8006a86 <_malloc_r+0x7e>
 8006a66:	600b      	str	r3, [r1, #0]
 8006a68:	18cc      	adds	r4, r1, r3
 8006a6a:	50cd      	str	r5, [r1, r3]
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 f8dc 	bl	8006c2a <__malloc_unlock>
 8006a72:	f104 000b 	add.w	r0, r4, #11
 8006a76:	1d23      	adds	r3, r4, #4
 8006a78:	f020 0007 	bic.w	r0, r0, #7
 8006a7c:	1ac3      	subs	r3, r0, r3
 8006a7e:	d0d3      	beq.n	8006a28 <_malloc_r+0x20>
 8006a80:	425a      	negs	r2, r3
 8006a82:	50e2      	str	r2, [r4, r3]
 8006a84:	e7d0      	b.n	8006a28 <_malloc_r+0x20>
 8006a86:	684b      	ldr	r3, [r1, #4]
 8006a88:	428c      	cmp	r4, r1
 8006a8a:	bf16      	itet	ne
 8006a8c:	6063      	strne	r3, [r4, #4]
 8006a8e:	6013      	streq	r3, [r2, #0]
 8006a90:	460c      	movne	r4, r1
 8006a92:	e7eb      	b.n	8006a6c <_malloc_r+0x64>
 8006a94:	460c      	mov	r4, r1
 8006a96:	6849      	ldr	r1, [r1, #4]
 8006a98:	e7cc      	b.n	8006a34 <_malloc_r+0x2c>
 8006a9a:	1cc4      	adds	r4, r0, #3
 8006a9c:	f024 0403 	bic.w	r4, r4, #3
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d005      	beq.n	8006ab0 <_malloc_r+0xa8>
 8006aa4:	1a21      	subs	r1, r4, r0
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f000 f808 	bl	8006abc <_sbrk_r>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d0cf      	beq.n	8006a50 <_malloc_r+0x48>
 8006ab0:	6025      	str	r5, [r4, #0]
 8006ab2:	e7db      	b.n	8006a6c <_malloc_r+0x64>
 8006ab4:	200002dc 	.word	0x200002dc
 8006ab8:	200002e0 	.word	0x200002e0

08006abc <_sbrk_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4c05      	ldr	r4, [pc, #20]	; (8006ad8 <_sbrk_r+0x1c>)
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	6023      	str	r3, [r4, #0]
 8006ac8:	f7fb f90e 	bl	8001ce8 <_sbrk>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_sbrk_r+0x1a>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_sbrk_r+0x1a>
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20000490 	.word	0x20000490

08006adc <__sread>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae4:	f000 f8a2 	bl	8006c2c <_read_r>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	bfab      	itete	ge
 8006aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aee:	89a3      	ldrhlt	r3, [r4, #12]
 8006af0:	181b      	addge	r3, r3, r0
 8006af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006af6:	bfac      	ite	ge
 8006af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006afa:	81a3      	strhlt	r3, [r4, #12]
 8006afc:	bd10      	pop	{r4, pc}

08006afe <__swrite>:
 8006afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b02:	461f      	mov	r7, r3
 8006b04:	898b      	ldrh	r3, [r1, #12]
 8006b06:	4605      	mov	r5, r0
 8006b08:	05db      	lsls	r3, r3, #23
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	d505      	bpl.n	8006b1c <__swrite+0x1e>
 8006b10:	2302      	movs	r3, #2
 8006b12:	2200      	movs	r2, #0
 8006b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b18:	f000 f874 	bl	8006c04 <_lseek_r>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	4632      	mov	r2, r6
 8006b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b32:	f000 b823 	b.w	8006b7c <_write_r>

08006b36 <__sseek>:
 8006b36:	b510      	push	{r4, lr}
 8006b38:	460c      	mov	r4, r1
 8006b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3e:	f000 f861 	bl	8006c04 <_lseek_r>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	bf15      	itete	ne
 8006b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b52:	81a3      	strheq	r3, [r4, #12]
 8006b54:	bf18      	it	ne
 8006b56:	81a3      	strhne	r3, [r4, #12]
 8006b58:	bd10      	pop	{r4, pc}

08006b5a <__sclose>:
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 b81f 	b.w	8006ba0 <_close_r>

08006b62 <__ascii_wctomb>:
 8006b62:	b149      	cbz	r1, 8006b78 <__ascii_wctomb+0x16>
 8006b64:	2aff      	cmp	r2, #255	; 0xff
 8006b66:	bf8b      	itete	hi
 8006b68:	238a      	movhi	r3, #138	; 0x8a
 8006b6a:	700a      	strbls	r2, [r1, #0]
 8006b6c:	6003      	strhi	r3, [r0, #0]
 8006b6e:	2001      	movls	r0, #1
 8006b70:	bf88      	it	hi
 8006b72:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006b76:	4770      	bx	lr
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4770      	bx	lr

08006b7c <_write_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4605      	mov	r5, r0
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	2200      	movs	r2, #0
 8006b86:	4c05      	ldr	r4, [pc, #20]	; (8006b9c <_write_r+0x20>)
 8006b88:	6022      	str	r2, [r4, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 f888 	bl	8006ca0 <_write>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_write_r+0x1e>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_write_r+0x1e>
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20000490 	.word	0x20000490

08006ba0 <_close_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4c05      	ldr	r4, [pc, #20]	; (8006bbc <_close_r+0x1c>)
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	f000 f850 	bl	8006c50 <_close>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_close_r+0x1a>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_close_r+0x1a>
 8006bb8:	602b      	str	r3, [r5, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	20000490 	.word	0x20000490

08006bc0 <_fstat_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4c06      	ldr	r4, [pc, #24]	; (8006be0 <_fstat_r+0x20>)
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	f000 f847 	bl	8006c60 <_fstat>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d102      	bne.n	8006bdc <_fstat_r+0x1c>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	b103      	cbz	r3, 8006bdc <_fstat_r+0x1c>
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	bd38      	pop	{r3, r4, r5, pc}
 8006bde:	bf00      	nop
 8006be0:	20000490 	.word	0x20000490

08006be4 <_isatty_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	2300      	movs	r3, #0
 8006be8:	4c05      	ldr	r4, [pc, #20]	; (8006c00 <_isatty_r+0x1c>)
 8006bea:	4605      	mov	r5, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	f000 f83e 	bl	8006c70 <_isatty>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_isatty_r+0x1a>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_isatty_r+0x1a>
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20000490 	.word	0x20000490

08006c04 <_lseek_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4605      	mov	r5, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4c05      	ldr	r4, [pc, #20]	; (8006c24 <_lseek_r+0x20>)
 8006c10:	6022      	str	r2, [r4, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f000 f834 	bl	8006c80 <_lseek>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_lseek_r+0x1e>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_lseek_r+0x1e>
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20000490 	.word	0x20000490

08006c28 <__malloc_lock>:
 8006c28:	4770      	bx	lr

08006c2a <__malloc_unlock>:
 8006c2a:	4770      	bx	lr

08006c2c <_read_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	2200      	movs	r2, #0
 8006c36:	4c05      	ldr	r4, [pc, #20]	; (8006c4c <_read_r+0x20>)
 8006c38:	6022      	str	r2, [r4, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f000 f828 	bl	8006c90 <_read>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_read_r+0x1e>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_read_r+0x1e>
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20000490 	.word	0x20000490

08006c50 <_close>:
 8006c50:	2258      	movs	r2, #88	; 0x58
 8006c52:	4b02      	ldr	r3, [pc, #8]	; (8006c5c <_close+0xc>)
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	4770      	bx	lr
 8006c5c:	20000490 	.word	0x20000490

08006c60 <_fstat>:
 8006c60:	2258      	movs	r2, #88	; 0x58
 8006c62:	4b02      	ldr	r3, [pc, #8]	; (8006c6c <_fstat+0xc>)
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	4770      	bx	lr
 8006c6c:	20000490 	.word	0x20000490

08006c70 <_isatty>:
 8006c70:	2258      	movs	r2, #88	; 0x58
 8006c72:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <_isatty+0xc>)
 8006c74:	2000      	movs	r0, #0
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000490 	.word	0x20000490

08006c80 <_lseek>:
 8006c80:	2258      	movs	r2, #88	; 0x58
 8006c82:	4b02      	ldr	r3, [pc, #8]	; (8006c8c <_lseek+0xc>)
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	4770      	bx	lr
 8006c8c:	20000490 	.word	0x20000490

08006c90 <_read>:
 8006c90:	2258      	movs	r2, #88	; 0x58
 8006c92:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <_read+0xc>)
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	4770      	bx	lr
 8006c9c:	20000490 	.word	0x20000490

08006ca0 <_write>:
 8006ca0:	2258      	movs	r2, #88	; 0x58
 8006ca2:	4b02      	ldr	r3, [pc, #8]	; (8006cac <_write+0xc>)
 8006ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	4770      	bx	lr
 8006cac:	20000490 	.word	0x20000490

08006cb0 <_init>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr

08006cbc <_fini>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr
