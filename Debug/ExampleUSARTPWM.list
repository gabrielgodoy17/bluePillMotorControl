
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080093c8  080093c8  000193c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009848  08009848  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08009848  08009848  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009848  08009848  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08009850  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000218  08009a68  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08009a68  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbc1  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4d  00000000  00000000  0002be02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002d850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018614  00000000  00000000  0002efc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094d5  00000000  00000000  000475dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b82a  00000000  00000000  00050ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc2db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  000dc358  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000e0750  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000e07ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	080093b0 	.word	0x080093b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	080093b0 	.word	0x080093b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <interpreteComando>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interpreteComando(){
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

	//uint32_t duty_cycle;
	double consigna;

	switch (buffer[0]) {
 8000b6e:	4bac      	ldr	r3, [pc, #688]	; (8000e20 <interpreteComando+0x2b8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b44      	subs	r3, #68	; 0x44
 8000b74:	2b33      	cmp	r3, #51	; 0x33
 8000b76:	f200 8266 	bhi.w	8001046 <interpreteComando+0x4de>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <interpreteComando+0x18>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000fef 	.word	0x08000fef
 8000b84:	08001047 	.word	0x08001047
 8000b88:	08001047 	.word	0x08001047
 8000b8c:	08001047 	.word	0x08001047
 8000b90:	08001047 	.word	0x08001047
 8000b94:	08000f97 	.word	0x08000f97
 8000b98:	08001047 	.word	0x08001047
 8000b9c:	08001047 	.word	0x08001047
 8000ba0:	08001047 	.word	0x08001047
 8000ba4:	08001047 	.word	0x08001047
 8000ba8:	08001047 	.word	0x08001047
 8000bac:	08001047 	.word	0x08001047
 8000bb0:	08000f3f 	.word	0x08000f3f
 8000bb4:	08001047 	.word	0x08001047
 8000bb8:	08001047 	.word	0x08001047
 8000bbc:	08001047 	.word	0x08001047
 8000bc0:	08001047 	.word	0x08001047
 8000bc4:	08001047 	.word	0x08001047
 8000bc8:	08001047 	.word	0x08001047
 8000bcc:	08000c51 	.word	0x08000c51
 8000bd0:	08001047 	.word	0x08001047
 8000bd4:	08001047 	.word	0x08001047
 8000bd8:	08001047 	.word	0x08001047
 8000bdc:	08001047 	.word	0x08001047
 8000be0:	08001047 	.word	0x08001047
 8000be4:	08001047 	.word	0x08001047
 8000be8:	08001047 	.word	0x08001047
 8000bec:	08001047 	.word	0x08001047
 8000bf0:	08001047 	.word	0x08001047
 8000bf4:	08001047 	.word	0x08001047
 8000bf8:	08001047 	.word	0x08001047
 8000bfc:	08001047 	.word	0x08001047
 8000c00:	08000fef 	.word	0x08000fef
 8000c04:	08001047 	.word	0x08001047
 8000c08:	08001047 	.word	0x08001047
 8000c0c:	08001047 	.word	0x08001047
 8000c10:	08001047 	.word	0x08001047
 8000c14:	08000f97 	.word	0x08000f97
 8000c18:	08001047 	.word	0x08001047
 8000c1c:	08001047 	.word	0x08001047
 8000c20:	08001047 	.word	0x08001047
 8000c24:	08001047 	.word	0x08001047
 8000c28:	08001047 	.word	0x08001047
 8000c2c:	08001047 	.word	0x08001047
 8000c30:	08000f3f 	.word	0x08000f3f
 8000c34:	08001047 	.word	0x08001047
 8000c38:	08001047 	.word	0x08001047
 8000c3c:	08001047 	.word	0x08001047
 8000c40:	08001047 	.word	0x08001047
 8000c44:	08001047 	.word	0x08001047
 8000c48:	08001047 	.word	0x08001047
 8000c4c:	08000c51 	.word	0x08000c51
	case 'W':
	case 'w':
		switch (buffer[1]) {
 8000c50:	4b73      	ldr	r3, [pc, #460]	; (8000e20 <interpreteComando+0x2b8>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	2b31      	cmp	r3, #49	; 0x31
 8000c56:	d003      	beq.n	8000c60 <interpreteComando+0xf8>
 8000c58:	2b32      	cmp	r3, #50	; 0x32
 8000c5a:	f000 80a0 	beq.w	8000d9e <interpreteComando+0x236>
					printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
				}
			}
			break;
		}
			break;
 8000c5e:	e1f2      	b.n	8001046 <interpreteComando+0x4de>
			if (buffer[2]) {
 8000c60:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <interpreteComando+0x2b8>)
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 8166 	beq.w	8000f36 <interpreteComando+0x3ce>
				if (buffer[2] == 43) {
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <interpreteComando+0x2b8>)
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b2b      	cmp	r3, #43	; 0x2b
 8000c70:	d135      	bne.n	8000cde <interpreteComando+0x176>
					stop1=0;
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <interpreteComando+0x2bc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	486a      	ldr	r0, [pc, #424]	; (8000e28 <interpreteComando+0x2c0>)
 8000c7e:	f001 ff4d 	bl	8002b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2120      	movs	r1, #32
 8000c86:	4868      	ldr	r0, [pc, #416]	; (8000e28 <interpreteComando+0x2c0>)
 8000c88:	f001 ff48 	bl	8002b1c <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000c8c:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <interpreteComando+0x2b8>)
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 8150 	beq.w	8000f36 <interpreteComando+0x3ce>
						consigna = atof(&buffer[3]);
 8000c96:	4865      	ldr	r0, [pc, #404]	; (8000e2c <interpreteComando+0x2c4>)
 8000c98:	f004 fd11 	bl	80056be <atof>
 8000c9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	4b62      	ldr	r3, [pc, #392]	; (8000e30 <interpreteComando+0x2c8>)
 8000ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000caa:	f7ff fe87 	bl	80009bc <__aeabi_dcmplt>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <interpreteComando+0x158>
							velocidad_consigna = consigna;
 8000cb4:	4a5f      	ldr	r2, [pc, #380]	; (8000e34 <interpreteComando+0x2cc>)
 8000cb6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000cba:	e9c2 3400 	strd	r3, r4, [r2]
 8000cbe:	e005      	b.n	8000ccc <interpreteComando+0x164>
							velocidad_consigna = 35;
 8000cc0:	4a5c      	ldr	r2, [pc, #368]	; (8000e34 <interpreteComando+0x2cc>)
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	4c5a      	ldr	r4, [pc, #360]	; (8000e30 <interpreteComando+0x2c8>)
 8000cc8:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %s %5.3f \r\n","+", velocidad_consigna);
 8000ccc:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <interpreteComando+0x2cc>)
 8000cce:	cb18      	ldmia	r3, {r3, r4}
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	4958      	ldr	r1, [pc, #352]	; (8000e38 <interpreteComando+0x2d0>)
 8000cd6:	4859      	ldr	r0, [pc, #356]	; (8000e3c <interpreteComando+0x2d4>)
 8000cd8:	f005 f976 	bl	8005fc8 <iprintf>
			break;
 8000cdc:	e12b      	b.n	8000f36 <interpreteComando+0x3ce>
				} else if (buffer[2] == 45) {
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <interpreteComando+0x2b8>)
 8000ce0:	789b      	ldrb	r3, [r3, #2]
 8000ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8000ce4:	d13a      	bne.n	8000d5c <interpreteComando+0x1f4>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2110      	movs	r1, #16
 8000cea:	484f      	ldr	r0, [pc, #316]	; (8000e28 <interpreteComando+0x2c0>)
 8000cec:	f001 ff16 	bl	8002b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	484c      	ldr	r0, [pc, #304]	; (8000e28 <interpreteComando+0x2c0>)
 8000cf6:	f001 ff11 	bl	8002b1c <HAL_GPIO_WritePin>
					stop1=0;
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <interpreteComando+0x2bc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
					if (buffer[3]) {
 8000d00:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <interpreteComando+0x2b8>)
 8000d02:	78db      	ldrb	r3, [r3, #3]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8116 	beq.w	8000f36 <interpreteComando+0x3ce>
						consigna = atof(&buffer[3]);
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <interpreteComando+0x2c4>)
 8000d0c:	f004 fcd7 	bl	80056be <atof>
 8000d10:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <interpreteComando+0x2c8>)
 8000d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d1e:	f7ff fe4d 	bl	80009bc <__aeabi_dcmplt>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00b      	beq.n	8000d40 <interpreteComando+0x1d8>
							velocidad_consigna = -consigna;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <interpreteComando+0x2cc>)
 8000d36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d3a:	e9c3 1200 	strd	r1, r2, [r3]
 8000d3e:	e005      	b.n	8000d4c <interpreteComando+0x1e4>
							velocidad_consigna = -35;
 8000d40:	4a3c      	ldr	r2, [pc, #240]	; (8000e34 <interpreteComando+0x2cc>)
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	4c3e      	ldr	r4, [pc, #248]	; (8000e40 <interpreteComando+0x2d8>)
 8000d48:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d4c:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <interpreteComando+0x2cc>)
 8000d4e:	cb18      	ldmia	r3, {r3, r4}
 8000d50:	461a      	mov	r2, r3
 8000d52:	4623      	mov	r3, r4
 8000d54:	483b      	ldr	r0, [pc, #236]	; (8000e44 <interpreteComando+0x2dc>)
 8000d56:	f005 f937 	bl	8005fc8 <iprintf>
			break;
 8000d5a:	e0ec      	b.n	8000f36 <interpreteComando+0x3ce>
				}else if(buffer[2] == 48){
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <interpreteComando+0x2b8>)
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	2b30      	cmp	r3, #48	; 0x30
 8000d62:	f040 80e8 	bne.w	8000f36 <interpreteComando+0x3ce>
					velocidad_consigna=0;
 8000d66:	4a33      	ldr	r2, [pc, #204]	; (8000e34 <interpreteComando+0x2cc>)
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	f04f 0400 	mov.w	r4, #0
 8000d70:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	482b      	ldr	r0, [pc, #172]	; (8000e28 <interpreteComando+0x2c0>)
 8000d7a:	f001 fecf 	bl	8002b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	4829      	ldr	r0, [pc, #164]	; (8000e28 <interpreteComando+0x2c0>)
 8000d84:	f001 feca 	bl	8002b1c <HAL_GPIO_WritePin>
					stop1=1;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <interpreteComando+0x2bc>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 1 : %5.3f \r\n", velocidad_consigna);
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <interpreteComando+0x2cc>)
 8000d90:	cb18      	ldmia	r3, {r3, r4}
 8000d92:	461a      	mov	r2, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	482b      	ldr	r0, [pc, #172]	; (8000e44 <interpreteComando+0x2dc>)
 8000d98:	f005 f916 	bl	8005fc8 <iprintf>
			break;
 8000d9c:	e0cb      	b.n	8000f36 <interpreteComando+0x3ce>
			if (buffer[2]) {
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <interpreteComando+0x2b8>)
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80c9 	beq.w	8000f3a <interpreteComando+0x3d2>
				if (buffer[2] == 43) {
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <interpreteComando+0x2b8>)
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	2b2b      	cmp	r3, #43	; 0x2b
 8000dae:	d151      	bne.n	8000e54 <interpreteComando+0x2ec>
					stop2=0;
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <interpreteComando+0x2e0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <interpreteComando+0x2c0>)
 8000dbe:	f001 fead 	bl	8002b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <interpreteComando+0x2c0>)
 8000dca:	f001 fea7 	bl	8002b1c <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <interpreteComando+0x2b8>)
 8000dd0:	78db      	ldrb	r3, [r3, #3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <interpreteComando+0x3d2>
						consigna = atof(&buffer[3]);
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <interpreteComando+0x2c4>)
 8000dda:	f004 fc70 	bl	80056be <atof>
 8000dde:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if (consigna < 35) {
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <interpreteComando+0x2c8>)
 8000de8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dec:	f7ff fde6 	bl	80009bc <__aeabi_dcmplt>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d005      	beq.n	8000e02 <interpreteComando+0x29a>
							velocidad_consigna2 = consigna;
 8000df6:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <interpreteComando+0x2e4>)
 8000df8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000dfc:	e9c2 3400 	strd	r3, r4, [r2]
 8000e00:	e005      	b.n	8000e0e <interpreteComando+0x2a6>
							velocidad_consigna2 = 35;
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <interpreteComando+0x2e4>)
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	4c09      	ldr	r4, [pc, #36]	; (8000e30 <interpreteComando+0x2c8>)
 8000e0a:	e9c2 3400 	strd	r3, r4, [r2]
						printf(
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <interpreteComando+0x2e4>)
 8000e10:	cb18      	ldmia	r3, {r3, r4}
 8000e12:	461a      	mov	r2, r3
 8000e14:	4623      	mov	r3, r4
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <interpreteComando+0x2d0>)
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <interpreteComando+0x2e8>)
 8000e1a:	f005 f8d5 	bl	8005fc8 <iprintf>
			break;
 8000e1e:	e08c      	b.n	8000f3a <interpreteComando+0x3d2>
 8000e20:	20000378 	.word	0x20000378
 8000e24:	20000034 	.word	0x20000034
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	2000037b 	.word	0x2000037b
 8000e30:	40418000 	.word	0x40418000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	080093c8 	.word	0x080093c8
 8000e3c:	080093cc 	.word	0x080093cc
 8000e40:	c0418000 	.word	0xc0418000
 8000e44:	080093f8 	.word	0x080093f8
 8000e48:	20000038 	.word	0x20000038
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	08009424 	.word	0x08009424
				} else if (buffer[2] == 45) {
 8000e54:	4b7e      	ldr	r3, [pc, #504]	; (8001050 <interpreteComando+0x4e8>)
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	2b2d      	cmp	r3, #45	; 0x2d
 8000e5a:	d14a      	bne.n	8000ef2 <interpreteComando+0x38a>
					stop2=0;
 8000e5c:	4b7d      	ldr	r3, [pc, #500]	; (8001054 <interpreteComando+0x4ec>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e68:	487b      	ldr	r0, [pc, #492]	; (8001058 <interpreteComando+0x4f0>)
 8000e6a:	f001 fe57 	bl	8002b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e74:	4878      	ldr	r0, [pc, #480]	; (8001058 <interpreteComando+0x4f0>)
 8000e76:	f001 fe51 	bl	8002b1c <HAL_GPIO_WritePin>
					if (buffer[3]) {
 8000e7a:	4b75      	ldr	r3, [pc, #468]	; (8001050 <interpreteComando+0x4e8>)
 8000e7c:	78db      	ldrb	r3, [r3, #3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d05b      	beq.n	8000f3a <interpreteComando+0x3d2>
						consigna = atof(&buffer[3]);
 8000e82:	4876      	ldr	r0, [pc, #472]	; (800105c <interpreteComando+0x4f4>)
 8000e84:	f004 fc1b 	bl	80056be <atof>
 8000e88:	e9c7 0102 	strd	r0, r1, [r7, #8]
						if( consigna==0){
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e98:	f7ff fd86 	bl	80009a8 <__aeabi_dcmpeq>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <interpreteComando+0x34a>
							velocidad_consigna2=0;
 8000ea2:	4a6f      	ldr	r2, [pc, #444]	; (8001060 <interpreteComando+0x4f8>)
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	f04f 0400 	mov.w	r4, #0
 8000eac:	e9c2 3400 	strd	r3, r4, [r2]
 8000eb0:	e017      	b.n	8000ee2 <interpreteComando+0x37a>
						}else if (consigna < 35) {
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b6b      	ldr	r3, [pc, #428]	; (8001064 <interpreteComando+0x4fc>)
 8000eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ebc:	f7ff fd7e 	bl	80009bc <__aeabi_dcmplt>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <interpreteComando+0x36e>
							velocidad_consigna2 = -consigna;
 8000ec6:	68bc      	ldr	r4, [r7, #8]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000ece:	4b64      	ldr	r3, [pc, #400]	; (8001060 <interpreteComando+0x4f8>)
 8000ed0:	e9c3 4500 	strd	r4, r5, [r3]
 8000ed4:	e005      	b.n	8000ee2 <interpreteComando+0x37a>
							velocidad_consigna2 = -35;
 8000ed6:	4a62      	ldr	r2, [pc, #392]	; (8001060 <interpreteComando+0x4f8>)
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	4c62      	ldr	r4, [pc, #392]	; (8001068 <interpreteComando+0x500>)
 8000ede:	e9c2 3400 	strd	r3, r4, [r2]
						printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <interpreteComando+0x4f8>)
 8000ee4:	cb18      	ldmia	r3, {r3, r4}
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4623      	mov	r3, r4
 8000eea:	4860      	ldr	r0, [pc, #384]	; (800106c <interpreteComando+0x504>)
 8000eec:	f005 f86c 	bl	8005fc8 <iprintf>
			break;
 8000ef0:	e023      	b.n	8000f3a <interpreteComando+0x3d2>
				}else if(buffer[2] == 48){
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <interpreteComando+0x4e8>)
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	2b30      	cmp	r3, #48	; 0x30
 8000ef8:	d11f      	bne.n	8000f3a <interpreteComando+0x3d2>
					velocidad_consigna2=0;
 8000efa:	4a59      	ldr	r2, [pc, #356]	; (8001060 <interpreteComando+0x4f8>)
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	f04f 0400 	mov.w	r4, #0
 8000f04:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	4852      	ldr	r0, [pc, #328]	; (8001058 <interpreteComando+0x4f0>)
 8000f10:	f001 fe04 	bl	8002b1c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1a:	484f      	ldr	r0, [pc, #316]	; (8001058 <interpreteComando+0x4f0>)
 8000f1c:	f001 fdfe 	bl	8002b1c <HAL_GPIO_WritePin>
					stop2=0;
 8000f20:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <interpreteComando+0x4ec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
					printf("\r\n Velocidad consigna motor 2 :  %5.3f \r\n",velocidad_consigna2);
 8000f26:	4b4e      	ldr	r3, [pc, #312]	; (8001060 <interpreteComando+0x4f8>)
 8000f28:	cb18      	ldmia	r3, {r3, r4}
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4623      	mov	r3, r4
 8000f2e:	484f      	ldr	r0, [pc, #316]	; (800106c <interpreteComando+0x504>)
 8000f30:	f005 f84a 	bl	8005fc8 <iprintf>
			break;
 8000f34:	e001      	b.n	8000f3a <interpreteComando+0x3d2>
			break;
 8000f36:	bf00      	nop
 8000f38:	e085      	b.n	8001046 <interpreteComando+0x4de>
			break;
 8000f3a:	bf00      	nop
			break;
 8000f3c:	e083      	b.n	8001046 <interpreteComando+0x4de>
//		case 'C':
//			control=1;
//			break;
		case 'p':
		case 'P':
			switch (buffer[1]) {
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <interpreteComando+0x4e8>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	2b31      	cmp	r3, #49	; 0x31
 8000f44:	d002      	beq.n	8000f4c <interpreteComando+0x3e4>
 8000f46:	2b32      	cmp	r3, #50	; 0x32
 8000f48:	d010      	beq.n	8000f6c <interpreteComando+0x404>
 8000f4a:	e01f      	b.n	8000f8c <interpreteComando+0x424>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000f4c:	4848      	ldr	r0, [pc, #288]	; (8001070 <interpreteComando+0x508>)
 8000f4e:	f004 fbb6 	bl	80056be <atof>
 8000f52:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP1=(float) consigna;
 8000f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f5a:	f7ff fdb5 	bl	8000ac8 <__aeabi_d2f>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	4b44      	ldr	r3, [pc, #272]	; (8001074 <interpreteComando+0x50c>)
 8000f62:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000f64:	4844      	ldr	r0, [pc, #272]	; (8001078 <interpreteComando+0x510>)
 8000f66:	f005 f8a3 	bl	80060b0 <puts>
						break;
 8000f6a:	e013      	b.n	8000f94 <interpreteComando+0x42c>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000f6c:	4840      	ldr	r0, [pc, #256]	; (8001070 <interpreteComando+0x508>)
 8000f6e:	f004 fba6 	bl	80056be <atof>
 8000f72:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KP2=(float) consigna;
 8000f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f7a:	f7ff fda5 	bl	8000ac8 <__aeabi_d2f>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4b3e      	ldr	r3, [pc, #248]	; (800107c <interpreteComando+0x514>)
 8000f82:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000f84:	483c      	ldr	r0, [pc, #240]	; (8001078 <interpreteComando+0x510>)
 8000f86:	f005 f893 	bl	80060b0 <puts>
						break;
 8000f8a:	e003      	b.n	8000f94 <interpreteComando+0x42c>
					default:
					printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000f8c:	483c      	ldr	r0, [pc, #240]	; (8001080 <interpreteComando+0x518>)
 8000f8e:	f005 f88f 	bl	80060b0 <puts>
					break;
 8000f92:	bf00      	nop

			}
			break;
 8000f94:	e057      	b.n	8001046 <interpreteComando+0x4de>
		case 'i':
		case 'I':
			switch (buffer[1]) {
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <interpreteComando+0x4e8>)
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	2b31      	cmp	r3, #49	; 0x31
 8000f9c:	d002      	beq.n	8000fa4 <interpreteComando+0x43c>
 8000f9e:	2b32      	cmp	r3, #50	; 0x32
 8000fa0:	d010      	beq.n	8000fc4 <interpreteComando+0x45c>
 8000fa2:	e01f      	b.n	8000fe4 <interpreteComando+0x47c>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000fa4:	4832      	ldr	r0, [pc, #200]	; (8001070 <interpreteComando+0x508>)
 8000fa6:	f004 fb8a 	bl	80056be <atof>
 8000faa:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI1=(float) consigna;
 8000fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb2:	f7ff fd89 	bl	8000ac8 <__aeabi_d2f>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <interpreteComando+0x51c>)
 8000fba:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000fbc:	482e      	ldr	r0, [pc, #184]	; (8001078 <interpreteComando+0x510>)
 8000fbe:	f005 f877 	bl	80060b0 <puts>
						break;
 8000fc2:	e013      	b.n	8000fec <interpreteComando+0x484>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 8000fc4:	482a      	ldr	r0, [pc, #168]	; (8001070 <interpreteComando+0x508>)
 8000fc6:	f004 fb7a 	bl	80056be <atof>
 8000fca:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KI2=(float) consigna;
 8000fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd2:	f7ff fd79 	bl	8000ac8 <__aeabi_d2f>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <interpreteComando+0x520>)
 8000fda:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <interpreteComando+0x510>)
 8000fde:	f005 f867 	bl	80060b0 <puts>
						break;
 8000fe2:	e003      	b.n	8000fec <interpreteComando+0x484>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000fe4:	4826      	ldr	r0, [pc, #152]	; (8001080 <interpreteComando+0x518>)
 8000fe6:	f005 f863 	bl	80060b0 <puts>
						break;
 8000fea:	bf00      	nop
			}
			break;
 8000fec:	e02b      	b.n	8001046 <interpreteComando+0x4de>
		case 'd':
		case 'D':
			switch (buffer[1]) {
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <interpreteComando+0x4e8>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	2b31      	cmp	r3, #49	; 0x31
 8000ff4:	d002      	beq.n	8000ffc <interpreteComando+0x494>
 8000ff6:	2b32      	cmp	r3, #50	; 0x32
 8000ff8:	d010      	beq.n	800101c <interpreteComando+0x4b4>
 8000ffa:	e01f      	b.n	800103c <interpreteComando+0x4d4>
					/*codigo ascii de '1' = 49*/
					case 49:
						consigna = atof(&buffer[2]);
 8000ffc:	481c      	ldr	r0, [pc, #112]	; (8001070 <interpreteComando+0x508>)
 8000ffe:	f004 fb5e 	bl	80056be <atof>
 8001002:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD1=(float) consigna;
 8001006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800100a:	f7ff fd5d 	bl	8000ac8 <__aeabi_d2f>
 800100e:	4602      	mov	r2, r0
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <interpreteComando+0x524>)
 8001012:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8001014:	4818      	ldr	r0, [pc, #96]	; (8001078 <interpreteComando+0x510>)
 8001016:	f005 f84b 	bl	80060b0 <puts>
						break;
 800101a:	e013      	b.n	8001044 <interpreteComando+0x4dc>
					/*codigo ascii de '2' = 50*/
					case 50:
						consigna = atof(&buffer[2]);
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <interpreteComando+0x508>)
 800101e:	f004 fb4e 	bl	80056be <atof>
 8001022:	e9c7 0102 	strd	r0, r1, [r7, #8]
						KD2=(float) consigna;
 8001026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800102a:	f7ff fd4d 	bl	8000ac8 <__aeabi_d2f>
 800102e:	4602      	mov	r2, r0
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <interpreteComando+0x528>)
 8001032:	601a      	str	r2, [r3, #0]
						printf("\r\n");
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <interpreteComando+0x510>)
 8001036:	f005 f83b 	bl	80060b0 <puts>
						break;
 800103a:	e003      	b.n	8001044 <interpreteComando+0x4dc>
					default:
						printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 800103c:	4810      	ldr	r0, [pc, #64]	; (8001080 <interpreteComando+0x518>)
 800103e:	f005 f837 	bl	80060b0 <puts>
						break;
 8001042:	bf00      	nop
			}
			break;
 8001044:	bf00      	nop
//			control=0;
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//			break;
	}

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bdb0      	pop	{r4, r5, r7, pc}
 800104e:	bf00      	nop
 8001050:	20000378 	.word	0x20000378
 8001054:	20000038 	.word	0x20000038
 8001058:	40010800 	.word	0x40010800
 800105c:	2000037b 	.word	0x2000037b
 8001060:	20000010 	.word	0x20000010
 8001064:	40418000 	.word	0x40418000
 8001068:	c0418000 	.word	0xc0418000
 800106c:	08009454 	.word	0x08009454
 8001070:	2000037a 	.word	0x2000037a
 8001074:	20000018 	.word	0x20000018
 8001078:	08009480 	.word	0x08009480
 800107c:	20000024 	.word	0x20000024
 8001080:	08009484 	.word	0x08009484
 8001084:	2000001c 	.word	0x2000001c
 8001088:	20000028 	.word	0x20000028
 800108c:	20000020 	.word	0x20000020
 8001090:	2000002c 	.word	0x2000002c
 8001094:	00000000 	.word	0x00000000

08001098 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109c:	b087      	sub	sp, #28
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6178      	str	r0, [r7, #20]
	if(htim->Instance == TIM1){
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a98      	ldr	r2, [pc, #608]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	f040 82f2 	bne.w	8001692 <HAL_TIM_PeriodElapsedCallback+0x5fa>
		//pulsosAct = contOUFlow*(htim3.Instance->ARR) + __HAL_TIM_GET_COUNTER(&htim3);
		pulsosAct = (contOUFlow*65000) + __HAL_TIM_GET_COUNTER(&htim3);
 80010ae:	4b97      	ldr	r3, [pc, #604]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b94      	ldr	r3, [pc, #592]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	4413      	add	r3, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b93      	ldr	r3, [pc, #588]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80010c8:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt)/deltaT;
 80010ca:	4b92      	ldr	r3, [pc, #584]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b92      	ldr	r3, [pc, #584]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f995 	bl	8000404 <__aeabi_i2d>
 80010da:	4b90      	ldr	r3, [pc, #576]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010dc:	cb18      	ldmia	r3, {r3, r4}
 80010de:	461a      	mov	r2, r3
 80010e0:	4623      	mov	r3, r4
 80010e2:	f7ff fb23 	bl	800072c <__aeabi_ddiv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	460c      	mov	r4, r1
 80010ea:	4a8d      	ldr	r2, [pc, #564]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80010ec:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos/(168*44) * 60;
 80010f0:	4b8b      	ldr	r3, [pc, #556]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80010f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f6:	a382      	add	r3, pc, #520	; (adr r3, 8001300 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fb16 	bl	800072c <__aeabi_ddiv>
 8001100:	4603      	mov	r3, r0
 8001102:	460c      	mov	r4, r1
 8001104:	4618      	mov	r0, r3
 8001106:	4621      	mov	r1, r4
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b85      	ldr	r3, [pc, #532]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800110e:	f7ff f9e3 	bl	80004d8 <__aeabi_dmul>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	4a84      	ldr	r2, [pc, #528]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001118:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 800111c:	4b7d      	ldr	r3, [pc, #500]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a7d      	ldr	r2, [pc, #500]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001122:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2*65000) + __HAL_TIM_GET_COUNTER(&htim4);
 8001124:	4b81      	ldr	r3, [pc, #516]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4b7f      	ldr	r3, [pc, #508]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	4413      	add	r3, r2
 800113a:	461a      	mov	r2, r3
 800113c:	4b7d      	ldr	r3, [pc, #500]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800113e:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2)/deltaT;
 8001140:	4b7c      	ldr	r3, [pc, #496]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b7c      	ldr	r3, [pc, #496]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f95a 	bl	8000404 <__aeabi_i2d>
 8001150:	4b72      	ldr	r3, [pc, #456]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001152:	cb18      	ldmia	r3, {r3, r4}
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	f7ff fae8 	bl	800072c <__aeabi_ddiv>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	4a76      	ldr	r2, [pc, #472]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001162:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2/(168*44) * 60;
 8001166:	4b75      	ldr	r3, [pc, #468]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116c:	a364      	add	r3, pc, #400	; (adr r3, 8001300 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fadb 	bl	800072c <__aeabi_ddiv>
 8001176:	4603      	mov	r3, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4618      	mov	r0, r3
 800117c:	4621      	mov	r1, r4
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b68      	ldr	r3, [pc, #416]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001184:	f7ff f9a8 	bl	80004d8 <__aeabi_dmul>
 8001188:	4603      	mov	r3, r0
 800118a:	460c      	mov	r4, r1
 800118c:	4a6c      	ldr	r2, [pc, #432]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800118e:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a68      	ldr	r2, [pc, #416]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001198:	6013      	str	r3, [r2, #0]

		//para el control
		if(control==1){
 800119a:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f040 82b6 	bne.w	8001710 <HAL_TIM_PeriodElapsedCallback+0x678>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */
			error_vel_act = velocidad_consigna-velocidadRPM;
 80011a4:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011aa:	4b5f      	ldr	r3, [pc, #380]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80011ac:	cb18      	ldmia	r3, {r3, r4}
 80011ae:	461a      	mov	r2, r3
 80011b0:	4623      	mov	r3, r4
 80011b2:	f7fe ffd9 	bl	8000168 <__aeabi_dsub>
 80011b6:	4603      	mov	r3, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	4a64      	ldr	r2, [pc, #400]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011bc:	e9c2 3400 	strd	r3, r4, [r2]
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//			}else if(error_vel_act>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
//			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//			}
			if(stop1==1){
 80011c0:	4b63      	ldr	r3, [pc, #396]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d106      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x13e>
			  Ui_anterior=0;
 80011c8:	4a62      	ldr	r2, [pc, #392]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	e9c2 3400 	strd	r3, r4, [r2]
			}
//			error_vel_acterror_vel_act);
			Up=KP1 * error_vel_act;
 80011d6:	4b60      	ldr	r3, [pc, #384]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f924 	bl	8000428 <__aeabi_f2d>
 80011e0:	4b5a      	ldr	r3, [pc, #360]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011e2:	cb18      	ldmia	r3, {r3, r4}
 80011e4:	461a      	mov	r2, r3
 80011e6:	4623      	mov	r3, r4
 80011e8:	f7ff f976 	bl	80004d8 <__aeabi_dmul>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011f2:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual=Ui_anterior + (KI1 * deltaT * error_vel_ant);
 80011f6:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f914 	bl	8000428 <__aeabi_f2d>
 8001200:	4b46      	ldr	r3, [pc, #280]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001202:	cb18      	ldmia	r3, {r3, r4}
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	f7ff f966 	bl	80004d8 <__aeabi_dmul>
 800120c:	4603      	mov	r3, r0
 800120e:	460c      	mov	r4, r1
 8001210:	4618      	mov	r0, r3
 8001212:	4621      	mov	r1, r4
 8001214:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001216:	cb18      	ldmia	r3, {r3, r4}
 8001218:	461a      	mov	r2, r3
 800121a:	4623      	mov	r3, r4
 800121c:	f7ff f95c 	bl	80004d8 <__aeabi_dmul>
 8001220:	4603      	mov	r3, r0
 8001222:	460c      	mov	r4, r1
 8001224:	4618      	mov	r0, r3
 8001226:	4621      	mov	r1, r4
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800122a:	cb18      	ldmia	r3, {r3, r4}
 800122c:	461a      	mov	r2, r3
 800122e:	4623      	mov	r3, r4
 8001230:	f7fe ff9c 	bl	800016c <__adddf3>
 8001234:	4603      	mov	r3, r0
 8001236:	460c      	mov	r4, r1
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800123a:	e9c2 3400 	strd	r3, r4, [r2]
			Ud=(KD1/ deltaT) * (error_vel_act-error_vel_ant);
 800123e:	4b4b      	ldr	r3, [pc, #300]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8f0 	bl	8000428 <__aeabi_f2d>
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800124a:	cb18      	ldmia	r3, {r3, r4}
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	f7ff fa6c 	bl	800072c <__aeabi_ddiv>
 8001254:	4603      	mov	r3, r0
 8001256:	460c      	mov	r4, r1
 8001258:	461d      	mov	r5, r3
 800125a:	4626      	mov	r6, r4
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800125e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001264:	cb18      	ldmia	r3, {r3, r4}
 8001266:	461a      	mov	r2, r3
 8001268:	4623      	mov	r3, r4
 800126a:	f7fe ff7d 	bl	8000168 <__aeabi_dsub>
 800126e:	4603      	mov	r3, r0
 8001270:	460c      	mov	r4, r1
 8001272:	461a      	mov	r2, r3
 8001274:	4623      	mov	r3, r4
 8001276:	4628      	mov	r0, r5
 8001278:	4631      	mov	r1, r6
 800127a:	f7ff f92d 	bl	80004d8 <__aeabi_dmul>
 800127e:	4603      	mov	r3, r0
 8001280:	460c      	mov	r4, r1
 8001282:	4a3b      	ldr	r2, [pc, #236]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001284:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna>0){
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800128a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	f7ff fbaf 	bl	80009f8 <__aeabi_dcmpgt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d06b      	beq.n	8001378 <HAL_TIM_PeriodElapsedCallback+0x2e0>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid +(Up + Ui_actual + Ud));
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f89d 	bl	80003e4 <__aeabi_ui2d>
 80012aa:	4605      	mov	r5, r0
 80012ac:	460e      	mov	r6, r1
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b4:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012b6:	cb18      	ldmia	r3, {r3, r4}
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	f7fe ff56 	bl	800016c <__adddf3>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4618      	mov	r0, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80012ca:	cb18      	ldmia	r3, {r3, r4}
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	f7fe ff4c 	bl	800016c <__adddf3>
 80012d4:	4603      	mov	r3, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	4628      	mov	r0, r5
 80012de:	4631      	mov	r1, r6
 80012e0:	f7fe ff44 	bl	800016c <__adddf3>
 80012e4:	4603      	mov	r3, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	469a      	mov	sl, r3
 80012ea:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80012ee:	4650      	mov	r0, sl
 80012f0:	4659      	mov	r1, fp
 80012f2:	f7ff fbc9 	bl	8000a88 <__aeabi_d2uiz>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e07a      	b.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80012fe:	bf00      	nop
 8001300:	00000000 	.word	0x00000000
 8001304:	40bce000 	.word	0x40bce000
 8001308:	40012c00 	.word	0x40012c00
 800130c:	20000238 	.word	0x20000238
 8001310:	20000330 	.word	0x20000330
 8001314:	20000240 	.word	0x20000240
 8001318:	2000023c 	.word	0x2000023c
 800131c:	20000000 	.word	0x20000000
 8001320:	20000250 	.word	0x20000250
 8001324:	404e0000 	.word	0x404e0000
 8001328:	20000258 	.word	0x20000258
 800132c:	20000244 	.word	0x20000244
 8001330:	200002e4 	.word	0x200002e4
 8001334:	2000024c 	.word	0x2000024c
 8001338:	20000248 	.word	0x20000248
 800133c:	20000260 	.word	0x20000260
 8001340:	20000268 	.word	0x20000268
 8001344:	20000030 	.word	0x20000030
 8001348:	20000008 	.word	0x20000008
 800134c:	20000270 	.word	0x20000270
 8001350:	20000034 	.word	0x20000034
 8001354:	20000290 	.word	0x20000290
 8001358:	20000018 	.word	0x20000018
 800135c:	200002a0 	.word	0x200002a0
 8001360:	2000001c 	.word	0x2000001c
 8001364:	20000278 	.word	0x20000278
 8001368:	20000298 	.word	0x20000298
 800136c:	20000020 	.word	0x20000020
 8001370:	200002a8 	.word	0x200002a8
 8001374:	200002d0 	.word	0x200002d0
			}else if(velocidad_consigna<0){
 8001378:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x564>)
 800137a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	f7ff fb19 	bl	80009bc <__aeabi_dcmplt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d02e      	beq.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x356>
				duty_cycle_pid = (uint32_t) fabs(duty_cycle_pid -(Up + Ui_actual + Ud));
 8001390:	4b9b      	ldr	r3, [pc, #620]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f825 	bl	80003e4 <__aeabi_ui2d>
 800139a:	4605      	mov	r5, r0
 800139c:	460e      	mov	r6, r1
 800139e:	4b99      	ldr	r3, [pc, #612]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80013a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a4:	4b98      	ldr	r3, [pc, #608]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80013a6:	cb18      	ldmia	r3, {r3, r4}
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	f7fe fede 	bl	800016c <__adddf3>
 80013b0:	4603      	mov	r3, r0
 80013b2:	460c      	mov	r4, r1
 80013b4:	4618      	mov	r0, r3
 80013b6:	4621      	mov	r1, r4
 80013b8:	4b94      	ldr	r3, [pc, #592]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80013ba:	cb18      	ldmia	r3, {r3, r4}
 80013bc:	461a      	mov	r2, r3
 80013be:	4623      	mov	r3, r4
 80013c0:	f7fe fed4 	bl	800016c <__adddf3>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	4628      	mov	r0, r5
 80013ce:	4631      	mov	r1, r6
 80013d0:	f7fe feca 	bl	8000168 <__aeabi_dsub>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	4698      	mov	r8, r3
 80013da:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80013de:	4640      	mov	r0, r8
 80013e0:	4649      	mov	r1, r9
 80013e2:	f7ff fb51 	bl	8000a88 <__aeabi_d2uiz>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b85      	ldr	r3, [pc, #532]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e002      	b.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x35c>
			}else{
				duty_cycle_pid = 0;
 80013ee:	4b84      	ldr	r3, [pc, #528]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
			}
      if(duty_cycle_pid > 14000){
 80013f4:	4b82      	ldr	r3, [pc, #520]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d903      	bls.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x370>
				duty_cycle_pid=14000;
 8001400:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001402:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001406:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8001408:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a7c      	ldr	r2, [pc, #496]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior=Ui_actual;
 8001412:	4b7d      	ldr	r3, [pc, #500]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001414:	cb18      	ldmia	r3, {r3, r4}
 8001416:	4a7f      	ldr	r2, [pc, #508]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001418:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant=error_vel_act;
 800141c:	4b7e      	ldr	r3, [pc, #504]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800141e:	cb18      	ldmia	r3, {r3, r4}
 8001420:	4a7e      	ldr	r2, [pc, #504]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001422:	e9c2 3400 	strd	r3, r4, [r2]

			/*
			 * ------------------control motor 2
			 */
			error_vel_act2 = velocidad_consigna2-velocidadRPM2;
 8001426:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142c:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800142e:	cb18      	ldmia	r3, {r3, r4}
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	f7fe fe98 	bl	8000168 <__aeabi_dsub>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	4a7a      	ldr	r2, [pc, #488]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800143e:	e9c2 3400 	strd	r3, r4, [r2]
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
//			}else if(error_vel_act2>0){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
//			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
//     }
			if(stop2==1){
 8001442:	4b7a      	ldr	r3, [pc, #488]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				Ui_anterior2=0;
 800144a:	4a79      	ldr	r2, [pc, #484]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	f04f 0400 	mov.w	r4, #0
 8001454:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2=KP2 * error_vel_act2;
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ffe3 	bl	8000428 <__aeabi_f2d>
 8001462:	4b71      	ldr	r3, [pc, #452]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001464:	cb18      	ldmia	r3, {r3, r4}
 8001466:	461a      	mov	r2, r3
 8001468:	4623      	mov	r3, r4
 800146a:	f7ff f835 	bl	80004d8 <__aeabi_dmul>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	4a71      	ldr	r2, [pc, #452]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001474:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2=Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 8001478:	4b70      	ldr	r3, [pc, #448]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe ffd3 	bl	8000428 <__aeabi_f2d>
 8001482:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001484:	cb18      	ldmia	r3, {r3, r4}
 8001486:	461a      	mov	r2, r3
 8001488:	4623      	mov	r3, r4
 800148a:	f7ff f825 	bl	80004d8 <__aeabi_dmul>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001498:	cb18      	ldmia	r3, {r3, r4}
 800149a:	461a      	mov	r2, r3
 800149c:	4623      	mov	r3, r4
 800149e:	f7ff f81b 	bl	80004d8 <__aeabi_dmul>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	4b61      	ldr	r3, [pc, #388]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80014ac:	cb18      	ldmia	r3, {r3, r4}
 80014ae:	461a      	mov	r2, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	f7fe fe5b 	bl	800016c <__adddf3>
 80014b6:	4603      	mov	r3, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80014bc:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2=KD2/ deltaT * (error_vel_act2-error_vel_ant2);
 80014c0:	4b62      	ldr	r3, [pc, #392]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ffaf 	bl	8000428 <__aeabi_f2d>
 80014ca:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80014cc:	cb18      	ldmia	r3, {r3, r4}
 80014ce:	461a      	mov	r2, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	f7ff f92b 	bl	800072c <__aeabi_ddiv>
 80014d6:	4603      	mov	r3, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	461d      	mov	r5, r3
 80014dc:	4626      	mov	r6, r4
 80014de:	4b52      	ldr	r3, [pc, #328]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80014e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e4:	4b57      	ldr	r3, [pc, #348]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80014e6:	cb18      	ldmia	r3, {r3, r4}
 80014e8:	461a      	mov	r2, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	f7fe fe3c 	bl	8000168 <__aeabi_dsub>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	4628      	mov	r0, r5
 80014fa:	4631      	mov	r1, r6
 80014fc:	f7fe ffec 	bl	80004d8 <__aeabi_dmul>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001506:	e9c2 3400 	strd	r3, r4, [r2]
			if(velocidad_consigna2 > 0){
 800150a:	4b45      	ldr	r3, [pc, #276]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800150c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	f7ff fa6e 	bl	80009f8 <__aeabi_dcmpgt>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d02f      	beq.n	8001582 <HAL_TIM_PeriodElapsedCallback+0x4ea>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 +(Up2 + Ui_actual2 + Ud2));
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe ff5c 	bl	80003e4 <__aeabi_ui2d>
 800152c:	4605      	mov	r5, r0
 800152e:	460e      	mov	r6, r1
 8001530:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001538:	cb18      	ldmia	r3, {r3, r4}
 800153a:	461a      	mov	r2, r3
 800153c:	4623      	mov	r3, r4
 800153e:	f7fe fe15 	bl	800016c <__adddf3>
 8001542:	4603      	mov	r3, r0
 8001544:	460c      	mov	r4, r1
 8001546:	4618      	mov	r0, r3
 8001548:	4621      	mov	r1, r4
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800154c:	cb18      	ldmia	r3, {r3, r4}
 800154e:	461a      	mov	r2, r3
 8001550:	4623      	mov	r3, r4
 8001552:	f7fe fe0b 	bl	800016c <__adddf3>
 8001556:	4603      	mov	r3, r0
 8001558:	460c      	mov	r4, r1
 800155a:	461a      	mov	r2, r3
 800155c:	4623      	mov	r3, r4
 800155e:	4628      	mov	r0, r5
 8001560:	4631      	mov	r1, r6
 8001562:	f7fe fe03 	bl	800016c <__adddf3>
 8001566:	4603      	mov	r3, r0
 8001568:	460c      	mov	r4, r1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001576:	f7ff fa87 	bl	8000a88 <__aeabi_d2uiz>
 800157a:	4602      	mov	r2, r0
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e06d      	b.n	800165e <HAL_TIM_PeriodElapsedCallback+0x5c6>
			}else if(velocidad_consigna2 < 0){
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f7ff fa14 	bl	80009bc <__aeabi_dcmplt>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d05e      	beq.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x5c0>
				duty_cycle_pid2 = (uint32_t) fabs(duty_cycle_pid2 -(Up2 + Ui_actual2 + Ud2));
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff20 	bl	80003e4 <__aeabi_ui2d>
 80015a4:	4605      	mov	r5, r0
 80015a6:	460e      	mov	r6, r1
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80015aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80015b0:	cb18      	ldmia	r3, {r3, r4}
 80015b2:	461a      	mov	r2, r3
 80015b4:	4623      	mov	r3, r4
 80015b6:	f7fe fdd9 	bl	800016c <__adddf3>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4618      	mov	r0, r3
 80015c0:	4621      	mov	r1, r4
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80015c4:	cb18      	ldmia	r3, {r3, r4}
 80015c6:	461a      	mov	r2, r3
 80015c8:	4623      	mov	r3, r4
 80015ca:	f7fe fdcf 	bl	800016c <__adddf3>
 80015ce:	4603      	mov	r3, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	461a      	mov	r2, r3
 80015d4:	4623      	mov	r3, r4
 80015d6:	4628      	mov	r0, r5
 80015d8:	4631      	mov	r1, r6
 80015da:	f7fe fdc5 	bl	8000168 <__aeabi_dsub>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ee:	f7ff fa4b 	bl	8000a88 <__aeabi_d2uiz>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e031      	b.n	800165e <HAL_TIM_PeriodElapsedCallback+0x5c6>
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	200002d0 	.word	0x200002d0
 8001604:	200002a0 	.word	0x200002a0
 8001608:	20000298 	.word	0x20000298
 800160c:	200002a8 	.word	0x200002a8
 8001610:	20000444 	.word	0x20000444
 8001614:	20000290 	.word	0x20000290
 8001618:	20000270 	.word	0x20000270
 800161c:	20000278 	.word	0x20000278
 8001620:	20000010 	.word	0x20000010
 8001624:	20000268 	.word	0x20000268
 8001628:	20000280 	.word	0x20000280
 800162c:	20000038 	.word	0x20000038
 8001630:	200002b0 	.word	0x200002b0
 8001634:	20000024 	.word	0x20000024
 8001638:	200002c0 	.word	0x200002c0
 800163c:	20000028 	.word	0x20000028
 8001640:	20000000 	.word	0x20000000
 8001644:	20000288 	.word	0x20000288
 8001648:	200002b8 	.word	0x200002b8
 800164c:	2000002c 	.word	0x2000002c
 8001650:	200002c8 	.word	0x200002c8
 8001654:	200002d4 	.word	0x200002d4
			}else{
				duty_cycle_pid2 = 0;
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
			}
			if(duty_cycle_pid2 > 14000){
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001666:	4293      	cmp	r3, r2
 8001668:	d903      	bls.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x5da>
				duty_cycle_pid2=14000;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800166c:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001670:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a29      	ldr	r2, [pc, #164]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2=Ui_actual2;
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800167e:	cb18      	ldmia	r3, {r3, r4}
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001682:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2=error_vel_act2;
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001688:	cb18      	ldmia	r3, {r3, r4}
 800168a:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x698>)
 800168c:	e9c2 3400 	strd	r3, r4, [r2]
		}else { //Overflow
			contOUFlow2++;
			printf("overflow motor 2 \r\n");
		}
	}
}
 8001690:	e03e      	b.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM3){
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d11a      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x63a>
		if(__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period+1)/2){ //Underflow
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d908      	bls.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0x628>
			contOUFlow--;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80016b6:	6013      	str	r3, [r2, #0]
			printf("underflow motor 1 \r\n");
 80016b8:	4821      	ldr	r0, [pc, #132]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80016ba:	f004 fcf9 	bl	80060b0 <puts>
}
 80016be:	e027      	b.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow++;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80016c8:	6013      	str	r3, [r2, #0]
			printf("overflow motor 1 \r\n");
 80016ca:	481e      	ldr	r0, [pc, #120]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80016cc:	f004 fcf0 	bl	80060b0 <puts>
}
 80016d0:	e01e      	b.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x678>
	}else if(htim->Instance == TIM4){
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d119      	bne.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x678>
		if(__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period+1)/2){ //Underflow
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d908      	bls.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x668>
			contOUFlow2--;
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 80016f6:	6013      	str	r3, [r2, #0]
			printf("underflow motor 2 \r\n");
 80016f8:	4816      	ldr	r0, [pc, #88]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 80016fa:	f004 fcd9 	bl	80060b0 <puts>
}
 80016fe:	e007      	b.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x678>
			contOUFlow2++;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001708:	6013      	str	r3, [r2, #0]
			printf("overflow motor 2 \r\n");
 800170a:	4813      	ldr	r0, [pc, #76]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800170c:	f004 fcd0 	bl	80060b0 <puts>
}
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800171a:	bf00      	nop
 800171c:	200002d4 	.word	0x200002d4
 8001720:	20000444 	.word	0x20000444
 8001724:	200002b8 	.word	0x200002b8
 8001728:	200002b0 	.word	0x200002b0
 800172c:	20000280 	.word	0x20000280
 8001730:	20000288 	.word	0x20000288
 8001734:	40000400 	.word	0x40000400
 8001738:	20000330 	.word	0x20000330
 800173c:	20000238 	.word	0x20000238
 8001740:	080094b8 	.word	0x080094b8
 8001744:	080094cc 	.word	0x080094cc
 8001748:	40000800 	.word	0x40000800
 800174c:	200002e4 	.word	0x200002e4
 8001750:	20000244 	.word	0x20000244
 8001754:	080094e0 	.word	0x080094e0
 8001758:	080094f4 	.word	0x080094f4

0800175c <HAL_SPI_RxCpltCallback>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

	  if (hspi->Instance == SPI1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a36      	ldr	r2, [pc, #216]	; (8001844 <HAL_SPI_RxCpltCallback+0xe8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d165      	bne.n	800183a <HAL_SPI_RxCpltCallback+0xde>
	  {
		  switch(byte){
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_SPI_RxCpltCallback+0xec>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b0d      	cmp	r3, #13
 8001774:	d016      	beq.n	80017a4 <HAL_SPI_RxCpltCallback+0x48>
 8001776:	2b0d      	cmp	r3, #13
 8001778:	dc02      	bgt.n	8001780 <HAL_SPI_RxCpltCallback+0x24>
 800177a:	2b08      	cmp	r3, #8
 800177c:	d028      	beq.n	80017d0 <HAL_SPI_RxCpltCallback+0x74>
 800177e:	e036      	b.n	80017ee <HAL_SPI_RxCpltCallback+0x92>
 8001780:	2b3a      	cmp	r3, #58	; 0x3a
 8001782:	d002      	beq.n	800178a <HAL_SPI_RxCpltCallback+0x2e>
 8001784:	2b3b      	cmp	r3, #59	; 0x3b
 8001786:	d00d      	beq.n	80017a4 <HAL_SPI_RxCpltCallback+0x48>
 8001788:	e031      	b.n	80017ee <HAL_SPI_RxCpltCallback+0x92>
		  	  case ':': //Comienzo de la trama
				  flagRx = 1;
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_SPI_RxCpltCallback+0xf0>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
				  indRx = 0;
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
				  //imprimir = 0;
				  HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	2201      	movs	r2, #1
 800179a:	492b      	ldr	r1, [pc, #172]	; (8001848 <HAL_SPI_RxCpltCallback+0xec>)
 800179c:	482d      	ldr	r0, [pc, #180]	; (8001854 <HAL_SPI_RxCpltCallback+0xf8>)
 800179e:	f001 fe43 	bl	8003428 <HAL_SPI_Transmit>
				  break;
 80017a2:	e045      	b.n	8001830 <HAL_SPI_RxCpltCallback+0xd4>
		  	  case '\r': //Retorno, fin de trama.
		  	  case ';':  //Fin de trama.
		  		  HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 80017a4:	2364      	movs	r3, #100	; 0x64
 80017a6:	2201      	movs	r2, #1
 80017a8:	4927      	ldr	r1, [pc, #156]	; (8001848 <HAL_SPI_RxCpltCallback+0xec>)
 80017aa:	482a      	ldr	r0, [pc, #168]	; (8001854 <HAL_SPI_RxCpltCallback+0xf8>)
 80017ac:	f001 fe3c 	bl	8003428 <HAL_SPI_Transmit>
		  		  if(flagRx){
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_SPI_RxCpltCallback+0xf0>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d036      	beq.n	8001826 <HAL_SPI_RxCpltCallback+0xca>
		  			flagRx = 0;
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_SPI_RxCpltCallback+0xf0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
		  			buffer[indRx] = 0;
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_SPI_RxCpltCallback+0xfc>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	5499      	strb	r1, [r3, r2]
		  			interpreteComando();
 80017ca:	f7ff f9cd 	bl	8000b68 <interpreteComando>
		  		  }
		  		  break;
 80017ce:	e02a      	b.n	8001826 <HAL_SPI_RxCpltCallback+0xca>
		  	  case 8: //Retroceso es permitido de esta manera.
		  		  if(flagRx){
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_SPI_RxCpltCallback+0xf0>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d028      	beq.n	800182a <HAL_SPI_RxCpltCallback+0xce>
		  			  if(indRx > 0){
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d024      	beq.n	800182a <HAL_SPI_RxCpltCallback+0xce>
		  				indRx--;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 80017ea:	701a      	strb	r2, [r3, #0]
		  			  }
		  		  }
		  		  break;
 80017ec:	e01d      	b.n	800182a <HAL_SPI_RxCpltCallback+0xce>
		  	  default: //Almacenamiento de la trama.
		  		  HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 80017ee:	2364      	movs	r3, #100	; 0x64
 80017f0:	2201      	movs	r2, #1
 80017f2:	4915      	ldr	r1, [pc, #84]	; (8001848 <HAL_SPI_RxCpltCallback+0xec>)
 80017f4:	4817      	ldr	r0, [pc, #92]	; (8001854 <HAL_SPI_RxCpltCallback+0xf8>)
 80017f6:	f001 fe17 	bl	8003428 <HAL_SPI_Transmit>
		  		  if(flagRx){
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_SPI_RxCpltCallback+0xf0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d015      	beq.n	800182e <HAL_SPI_RxCpltCallback+0xd2>
		  			  buffer[indRx] = byte;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_SPI_RxCpltCallback+0xec>)
 800180a:	7819      	ldrb	r1, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_SPI_RxCpltCallback+0xfc>)
 800180e:	5499      	strb	r1, [r3, r2]
		  			  if(indRx < MAX_BUFFER - 1){
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b26      	cmp	r3, #38	; 0x26
 8001816:	d80a      	bhi.n	800182e <HAL_SPI_RxCpltCallback+0xd2>
		  				indRx++;
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_SPI_RxCpltCallback+0xf4>)
 8001822:	701a      	strb	r2, [r3, #0]
		  			  }

		  		  }
		  		break;
 8001824:	e003      	b.n	800182e <HAL_SPI_RxCpltCallback+0xd2>
		  		  break;
 8001826:	bf00      	nop
 8001828:	e002      	b.n	8001830 <HAL_SPI_RxCpltCallback+0xd4>
		  		  break;
 800182a:	bf00      	nop
 800182c:	e000      	b.n	8001830 <HAL_SPI_RxCpltCallback+0xd4>
		  		break;
 800182e:	bf00      	nop
		  }

	    /* Receive one byte in interrupt mode */
		 HAL_SPI_Receive_IT(&hspi1, &byte, 1);
 8001830:	2201      	movs	r2, #1
 8001832:	4905      	ldr	r1, [pc, #20]	; (8001848 <HAL_SPI_RxCpltCallback+0xec>)
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <HAL_SPI_RxCpltCallback+0xf8>)
 8001836:	f001 ff33 	bl	80036a0 <HAL_SPI_Receive_IT>
	  }
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40013000 	.word	0x40013000
 8001848:	200003a0 	.word	0x200003a0
 800184c:	2000032d 	.word	0x2000032d
 8001850:	20000234 	.word	0x20000234
 8001854:	200003ec 	.word	0x200003ec
 8001858:	20000378 	.word	0x20000378

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001860:	f000 fdfa 	bl	8002458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f872 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001868:	f000 fab0 	bl	8001dcc <MX_GPIO_Init>
  MX_TIM2_Init();
 800186c:	f000 f986 	bl	8001b7c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001870:	f000 f8e6 	bl	8001a40 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001874:	f000 fa02 	bl	8001c7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001878:	f000 fa54 	bl	8001d24 <MX_TIM4_Init>
  MX_SPI1_Init();
 800187c:	f000 f8ac 	bl	80019d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	//RetargetInit(&huart2);
	//HAL_UART_Receive_IT(&huart2, &byte, 1);
    HAL_SPI_Receive_IT(&hspi1, &byte, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	492a      	ldr	r1, [pc, #168]	; (800192c <main+0xd0>)
 8001884:	482a      	ldr	r0, [pc, #168]	; (8001930 <main+0xd4>)
 8001886:	f001 ff0b 	bl	80036a0 <HAL_SPI_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 800188a:	482a      	ldr	r0, [pc, #168]	; (8001934 <main+0xd8>)
 800188c:	f002 fc96 	bl	80041bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001890:	2100      	movs	r1, #0
 8001892:	4828      	ldr	r0, [pc, #160]	; (8001934 <main+0xd8>)
 8001894:	f002 fd3c 	bl	8004310 <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal  para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 8001898:	4827      	ldr	r0, [pc, #156]	; (8001938 <main+0xdc>)
 800189a:	f002 fc45 	bl	8004128 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800189e:	2100      	movs	r1, #0
 80018a0:	4825      	ldr	r0, [pc, #148]	; (8001938 <main+0xdc>)
 80018a2:	f002 fe75 	bl	8004590 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80018a6:	2108      	movs	r1, #8
 80018a8:	4823      	ldr	r0, [pc, #140]	; (8001938 <main+0xdc>)
 80018aa:	f002 fe71 	bl	8004590 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 80018ae:	4823      	ldr	r0, [pc, #140]	; (800193c <main+0xe0>)
 80018b0:	f002 fc84 	bl	80041bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80018b4:	213c      	movs	r1, #60	; 0x3c
 80018b6:	4821      	ldr	r0, [pc, #132]	; (800193c <main+0xe0>)
 80018b8:	f002 fff4 	bl	80048a4 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 80018bc:	4820      	ldr	r0, [pc, #128]	; (8001940 <main+0xe4>)
 80018be:	f002 fc7d 	bl	80041bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80018c2:	213c      	movs	r1, #60	; 0x3c
 80018c4:	481e      	ldr	r0, [pc, #120]	; (8001940 <main+0xe4>)
 80018c6:	f002 ffed 	bl	80048a4 <HAL_TIM_Encoder_Start_IT>

	/*Se activa en sentido positivo del motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2110      	movs	r1, #16
 80018ce:	481d      	ldr	r0, [pc, #116]	; (8001944 <main+0xe8>)
 80018d0:	f001 f924 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2120      	movs	r1, #32
 80018d8:	481a      	ldr	r0, [pc, #104]	; (8001944 <main+0xe8>)
 80018da:	f001 f91f 	bl	8002b1c <HAL_GPIO_WritePin>

	/*Se activa el sentido positivo del motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e4:	4817      	ldr	r0, [pc, #92]	; (8001944 <main+0xe8>)
 80018e6:	f001 f919 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <main+0xe8>)
 80018f2:	f001 f913 	bl	8002b1c <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <main+0xe0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <main+0xe4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190c:	480e      	ldr	r0, [pc, #56]	; (8001948 <main+0xec>)
 800190e:	f001 f905 	bl	8002b1c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	f000 fe02 	bl	800251c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191e:	480a      	ldr	r0, [pc, #40]	; (8001948 <main+0xec>)
 8001920:	f001 f8fc 	bl	8002b1c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001924:	2064      	movs	r0, #100	; 0x64
 8001926:	f000 fdf9 	bl	800251c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800192a:	e7ec      	b.n	8001906 <main+0xaa>
 800192c:	200003a0 	.word	0x200003a0
 8001930:	200003ec 	.word	0x200003ec
 8001934:	200003a4 	.word	0x200003a4
 8001938:	20000444 	.word	0x20000444
 800193c:	20000330 	.word	0x20000330
 8001940:	200002e4 	.word	0x200002e4
 8001944:	40010800 	.word	0x40010800
 8001948:	40011000 	.word	0x40011000

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b090      	sub	sp, #64	; 0x40
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	2228      	movs	r2, #40	; 0x28
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fedc 	bl	8005718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197c:	2301      	movs	r3, #1
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001980:	2302      	movs	r3, #2
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800198a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	4618      	mov	r0, r3
 8001996:	f001 f8d9 	bl	8002b4c <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019a0:	f000 fa82 	bl	8001ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a4:	230f      	movs	r3, #15
 80019a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a8:	2302      	movs	r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2102      	movs	r1, #2
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fb44 	bl	800304c <HAL_RCC_ClockConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019ca:	f000 fa6d 	bl	8001ea8 <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3740      	adds	r7, #64	; 0x40
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_SPI1_Init+0x60>)
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <MX_SPI1_Init+0x64>)
 80019e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_SPI1_Init+0x60>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_SPI1_Init+0x60>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_SPI1_Init+0x60>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <MX_SPI1_Init+0x60>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_SPI1_Init+0x60>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <MX_SPI1_Init+0x60>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_SPI1_Init+0x60>)
 8001a08:	2210      	movs	r2, #16
 8001a0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_SPI1_Init+0x60>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_SPI1_Init+0x60>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_SPI1_Init+0x60>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_SPI1_Init+0x60>)
 8001a20:	220a      	movs	r2, #10
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_SPI1_Init+0x60>)
 8001a26:	f001 fc7b 	bl	8003320 <HAL_SPI_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8001a30:	f000 fa3a 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200003ec 	.word	0x200003ec
 8001a3c:	40013000 	.word	0x40013000

08001a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b096      	sub	sp, #88	; 0x58
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2220      	movs	r2, #32
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fe4d 	bl	8005718 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001a80:	4a3d      	ldr	r2, [pc, #244]	; (8001b78 <MX_TIM1_Init+0x138>)
 8001a82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001a84:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001a86:	220b      	movs	r2, #11
 8001a88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001a92:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001a96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a9e:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aaa:	4832      	ldr	r0, [pc, #200]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001aac:	f002 faed 	bl	800408a <HAL_TIM_Base_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ab6:	f000 f9f7 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	482b      	ldr	r0, [pc, #172]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001ac8:	f003 f9b8 	bl	8004e3c <HAL_TIM_ConfigClockSource>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ad2:	f000 f9e9 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001ad6:	4827      	ldr	r0, [pc, #156]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001ad8:	f002 fbc2 	bl	8004260 <HAL_TIM_OC_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ae2:	f000 f9e1 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001af2:	4619      	mov	r1, r3
 8001af4:	481f      	ldr	r0, [pc, #124]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001af6:	f003 fd21 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b00:	f000 f9d2 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	2200      	movs	r2, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001b2a:	f003 f871 	bl	8004c10 <HAL_TIM_OC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b34:	f000 f9b8 	bl	8001ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <MX_TIM1_Init+0x134>)
 8001b5c:	f003 fd4c 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b66:	f000 f99f 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3758      	adds	r7, #88	; 0x58
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200003a4 	.word	0x200003a4
 8001b78:	40012c00 	.word	0x40012c00

08001b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	; 0x38
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	615a      	str	r2, [r3, #20]
 8001baa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bc2:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001bc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd4:	4828      	ldr	r0, [pc, #160]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bd6:	f002 fa58 	bl	800408a <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001be0:	f000 f962 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4821      	ldr	r0, [pc, #132]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001bf2:	f003 f923 	bl	8004e3c <HAL_TIM_ConfigClockSource>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bfc:	f000 f954 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c00:	481d      	ldr	r0, [pc, #116]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001c02:	f002 fc6d 	bl	80044e0 <HAL_TIM_PWM_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c0c:	f000 f94c 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4816      	ldr	r0, [pc, #88]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001c20:	f003 fc8c 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c2a:	f000 f93d 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2e:	2360      	movs	r3, #96	; 0x60
 8001c30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001c46:	f003 f83b 	bl	8004cc0 <HAL_TIM_PWM_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c50:	f000 f92a 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2208      	movs	r2, #8
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001c5c:	f003 f830 	bl	8004cc0 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001c66:	f000 f91f 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <MX_TIM2_Init+0xfc>)
 8001c6c:	f000 fa9e 	bl	80021ac <HAL_TIM_MspPostInit>

}
 8001c70:	bf00      	nop
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000444 	.word	0x20000444

08001c7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fd44 	bl	8005718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001c9a:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <MX_TIM3_Init+0xa4>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001cac:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480c      	ldr	r0, [pc, #48]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001cea:	f002 fd39 	bl	8004760 <HAL_TIM_Encoder_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cf4:	f000 f8d8 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_TIM3_Init+0xa0>)
 8001d06:	f003 fc19 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d10:	f000 f8ca 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3730      	adds	r7, #48	; 0x30
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000330 	.word	0x20000330
 8001d20:	40000400 	.word	0x40000400

08001d24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2224      	movs	r2, #36	; 0x24
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fcf0 	bl	8005718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <MX_TIM4_Init+0xa4>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001d54:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001d58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d66:	2303      	movs	r3, #3
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001d92:	f002 fce5 	bl	8004760 <HAL_TIM_Encoder_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d9c:	f000 f884 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_TIM4_Init+0xa0>)
 8001dae:	f003 fbc5 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001db8:	f000 f876 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200002e4 	.word	0x200002e4
 8001dc8:	40000800 	.word	0x40000800

08001dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001dfe:	f043 0320 	orr.w	r3, r3, #32
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <MX_GPIO_Init+0xd0>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e46:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <MX_GPIO_Init+0xd4>)
 8001e48:	f000 fe68 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001e52:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <MX_GPIO_Init+0xd8>)
 8001e54:	f000 fe62 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <MX_GPIO_Init+0xd4>)
 8001e72:	f000 fcf9 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 8001e76:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_GPIO_Init+0xd8>)
 8001e90:	f000 fcea 	bl	8002868 <HAL_GPIO_Init>

}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40011000 	.word	0x40011000
 8001ea4:	40010800 	.word	0x40010800

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_MspInit+0x5c>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_MspInit+0x5c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_MspInit+0x5c>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_MspInit+0x5c>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_MspInit+0x5c>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_MspInit+0x5c>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_MspInit+0x60>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_MspInit+0x60>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010000 	.word	0x40010000

08001f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_SPI_MspInit+0xe8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d15e      	bne.n	8001ff6 <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a31      	ldr	r2, [pc, #196]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_SPI_MspInit+0xec>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	481c      	ldr	r0, [pc, #112]	; (8002008 <HAL_SPI_MspInit+0xf0>)
 8001f96:	f000 fc67 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001f9a:	2328      	movs	r3, #40	; 0x28
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4817      	ldr	r0, [pc, #92]	; (800200c <HAL_SPI_MspInit+0xf4>)
 8001fae:	f000 fc5b 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4811      	ldr	r0, [pc, #68]	; (800200c <HAL_SPI_MspInit+0xf4>)
 8001fc6:	f000 fc4f 	bl	8002868 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_SPI_MspInit+0xf8>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_SPI_MspInit+0xf8>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2023      	movs	r0, #35	; 0x23
 8001fec:	f000 fb8f 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ff0:	2023      	movs	r0, #35	; 0x23
 8001ff2:	f000 fba8 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013000 	.word	0x40013000
 8002004:	40021000 	.word	0x40021000
 8002008:	40010800 	.word	0x40010800
 800200c:	40010c00 	.word	0x40010c00
 8002010:	40010000 	.word	0x40010000

08002014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_TIM_Base_MspInit+0x98>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12c      	bne.n	8002080 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <HAL_TIM_Base_MspInit+0x9c>)
 800202c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002030:	6193      	str	r3, [r2, #24]
 8002032:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	2018      	movs	r0, #24
 8002044:	f000 fb63 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002048:	2018      	movs	r0, #24
 800204a:	f000 fb7c 	bl	8002746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2019      	movs	r0, #25
 8002054:	f000 fb5b 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002058:	2019      	movs	r0, #25
 800205a:	f000 fb74 	bl	8002746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	201a      	movs	r0, #26
 8002064:	f000 fb53 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002068:	201a      	movs	r0, #26
 800206a:	f000 fb6c 	bl	8002746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	201b      	movs	r0, #27
 8002074:	f000 fb4b 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002078:	201b      	movs	r0, #27
 800207a:	f000 fb64 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800207e:	e010      	b.n	80020a2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d10b      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_TIM_Base_MspInit+0x9c>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40021000 	.word	0x40021000

080020b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_TIM_Encoder_MspInit+0xe4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d12c      	bne.n	800212e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	4a30      	ldr	r2, [pc, #192]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	61d3      	str	r3, [r2, #28]
 80020e0:	4b2e      	ldr	r3, [pc, #184]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a2a      	ldr	r2, [pc, #168]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002104:	23c0      	movs	r3, #192	; 0xc0
 8002106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0318 	add.w	r3, r7, #24
 8002114:	4619      	mov	r1, r3
 8002116:	4822      	ldr	r0, [pc, #136]	; (80021a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002118:	f000 fba6 	bl	8002868 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	201d      	movs	r0, #29
 8002122:	f000 faf4 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002126:	201d      	movs	r0, #29
 8002128:	f000 fb0d 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800212c:	e030      	b.n	8002190 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d12b      	bne.n	8002190 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	61d3      	str	r3, [r2, #28]
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_TIM_Encoder_MspInit+0xe8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002168:	23c0      	movs	r3, #192	; 0xc0
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	4619      	mov	r1, r3
 800217a:	480b      	ldr	r0, [pc, #44]	; (80021a8 <HAL_TIM_Encoder_MspInit+0xf4>)
 800217c:	f000 fb74 	bl	8002868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	201e      	movs	r0, #30
 8002186:	f000 fac2 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800218a:	201e      	movs	r0, #30
 800218c:	f000 fadb 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40000400 	.word	0x40000400
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010800 	.word	0x40010800
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40010c00 	.word	0x40010c00

080021ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d142      	bne.n	8002252 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_TIM_MspPostInit+0xb0>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_TIM_MspPostInit+0xb0>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_TIM_MspPostInit+0xb0>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_TIM_MspPostInit+0xb0>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_TIM_MspPostInit+0xb0>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_TIM_MspPostInit+0xb0>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021fc:	2301      	movs	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <HAL_TIM_MspPostInit+0xb4>)
 8002210:	f000 fb2a 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <HAL_TIM_MspPostInit+0xb8>)
 800222a:	f000 fb1d 	bl	8002868 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_TIM_MspPostInit+0xbc>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_TIM_MspPostInit+0xbc>)
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	40010800 	.word	0x40010800
 8002264:	40010c00 	.word	0x40010c00
 8002268:	40010000 	.word	0x40010000

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <HardFault_Handler+0x4>

0800227e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <MemManage_Handler+0x4>

08002284 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <BusFault_Handler+0x4>

0800228a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <UsageFault_Handler+0x4>

08002290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b8:	f000 f914 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM1_BRK_IRQHandler+0x10>)
 80022c6:	f002 fb9a 	bl	80049fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200003a4 	.word	0x200003a4

080022d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM1_UP_IRQHandler+0x10>)
 80022da:	f002 fb90 	bl	80049fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200003a4 	.word	0x200003a4

080022e8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022ee:	f002 fb86 	bl	80049fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200003a4 	.word	0x200003a4

080022fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM1_CC_IRQHandler+0x10>)
 8002302:	f002 fb7c 	bl	80049fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200003a4 	.word	0x200003a4

08002310 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM3_IRQHandler+0x10>)
 8002316:	f002 fb72 	bl	80049fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000330 	.word	0x20000330

08002324 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM4_IRQHandler+0x10>)
 800232a:	f002 fb68 	bl	80049fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200002e4 	.word	0x200002e4

08002338 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <SPI1_IRQHandler+0x10>)
 800233e:	f001 fae1 	bl	8003904 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200003ec 	.word	0x200003ec

0800234c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x50>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x16>
		heap_end = &end;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <_sbrk+0x50>)
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <_sbrk+0x54>)
 8002360:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <_sbrk+0x50>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <_sbrk+0x50>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	466a      	mov	r2, sp
 8002372:	4293      	cmp	r3, r2
 8002374:	d907      	bls.n	8002386 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002376:	f003 f9a5 	bl	80056c4 <__errno>
 800237a:	4602      	mov	r2, r0
 800237c:	230c      	movs	r3, #12
 800237e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002384:	e006      	b.n	8002394 <_sbrk+0x48>
	}

	heap_end += incr;
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <_sbrk+0x50>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a03      	ldr	r2, [pc, #12]	; (800239c <_sbrk+0x50>)
 8002390:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200002d8 	.word	0x200002d8
 80023a0:	20000498 	.word	0x20000498

080023a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <SystemInit+0x5c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <SystemInit+0x5c>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <SystemInit+0x5c>)
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4911      	ldr	r1, [pc, #68]	; (8002400 <SystemInit+0x5c>)
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <SystemInit+0x60>)
 80023bc:	4013      	ands	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <SystemInit+0x5c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <SystemInit+0x5c>)
 80023c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <SystemInit+0x5c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SystemInit+0x5c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <SystemInit+0x5c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <SystemInit+0x5c>)
 80023e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SystemInit+0x5c>)
 80023ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SystemInit+0x64>)
 80023f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	40021000 	.word	0x40021000
 8002404:	f8ff0000 	.word	0xf8ff0000
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:
 800240c:	2100      	movs	r1, #0
 800240e:	e003      	b.n	8002418 <LoopCopyDataInit>

08002410 <CopyDataInit>:
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <LoopFillZerobss+0x14>)
 8002412:	585b      	ldr	r3, [r3, r1]
 8002414:	5043      	str	r3, [r0, r1]
 8002416:	3104      	adds	r1, #4

08002418 <LoopCopyDataInit>:
 8002418:	480a      	ldr	r0, [pc, #40]	; (8002444 <LoopFillZerobss+0x18>)
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <LoopFillZerobss+0x1c>)
 800241c:	1842      	adds	r2, r0, r1
 800241e:	429a      	cmp	r2, r3
 8002420:	d3f6      	bcc.n	8002410 <CopyDataInit>
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <LoopFillZerobss+0x20>)
 8002424:	e002      	b.n	800242c <LoopFillZerobss>

08002426 <FillZerobss>:
 8002426:	2300      	movs	r3, #0
 8002428:	f842 3b04 	str.w	r3, [r2], #4

0800242c <LoopFillZerobss>:
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <LoopFillZerobss+0x24>)
 800242e:	429a      	cmp	r2, r3
 8002430:	d3f9      	bcc.n	8002426 <FillZerobss>
 8002432:	f7ff ffb7 	bl	80023a4 <SystemInit>
 8002436:	f003 f94b 	bl	80056d0 <__libc_init_array>
 800243a:	f7ff fa0f 	bl	800185c <main>
 800243e:	4770      	bx	lr
 8002440:	08009850 	.word	0x08009850
 8002444:	20000000 	.word	0x20000000
 8002448:	20000218 	.word	0x20000218
 800244c:	20000218 	.word	0x20000218
 8002450:	20000494 	.word	0x20000494

08002454 <ADC1_2_IRQHandler>:
 8002454:	e7fe      	b.n	8002454 <ADC1_2_IRQHandler>
	...

08002458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x28>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x28>)
 8002462:	f043 0310 	orr.w	r3, r3, #16
 8002466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 f945 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	2000      	movs	r0, #0
 8002470:	f000 f808 	bl	8002484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff fd1e 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x54>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x58>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f95d 	bl	8002762 <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d80a      	bhi.n	80024ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b8:	2200      	movs	r2, #0
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c0:	f000 f925 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_InitTick+0x5c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000003c 	.word	0x2000003c
 80024dc:	20000044 	.word	0x20000044
 80024e0:	20000040 	.word	0x20000040

080024e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_IncTick+0x1c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_IncTick+0x20>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a03      	ldr	r2, [pc, #12]	; (8002504 <HAL_IncTick+0x20>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	20000044 	.word	0x20000044
 8002504:	2000048c 	.word	0x2000048c

08002508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <HAL_GetTick+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	2000048c 	.word	0x2000048c

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff fff0 	bl	8002508 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_Delay+0x40>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffe0 	bl	8002508 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000044 	.word	0x20000044

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4906      	ldr	r1, [pc, #24]	; (80025f8 <__NVIC_EnableIRQ+0x34>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d8:	f7ff ff90 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff2d 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff42 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff90 	bl	8002650 <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5f 	bl	80025fc <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff35 	bl	80025c4 <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa2 	bl	80026b4 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278e:	2b02      	cmp	r3, #2
 8002790:	d005      	beq.n	800279e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2204      	movs	r2, #4
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e051      	b.n	8002842 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 020e 	bic.w	r2, r2, #14
 80027ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Abort_IT+0xd0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d029      	beq.n	800281c <HAL_DMA_Abort_IT+0xa0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a20      	ldr	r2, [pc, #128]	; (8002850 <HAL_DMA_Abort_IT+0xd4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d022      	beq.n	8002818 <HAL_DMA_Abort_IT+0x9c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_DMA_Abort_IT+0xd8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d01a      	beq.n	8002812 <HAL_DMA_Abort_IT+0x96>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_DMA_Abort_IT+0xdc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d012      	beq.n	800280c <HAL_DMA_Abort_IT+0x90>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_DMA_Abort_IT+0xe0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00a      	beq.n	8002806 <HAL_DMA_Abort_IT+0x8a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_DMA_Abort_IT+0xe4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d102      	bne.n	8002800 <HAL_DMA_Abort_IT+0x84>
 80027fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027fe:	e00e      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002804:	e00b      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280a:	e008      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 800280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002810:	e005      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002816:	e002      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 8002818:	2310      	movs	r3, #16
 800281a:	e000      	b.n	800281e <HAL_DMA_Abort_IT+0xa2>
 800281c:	2301      	movs	r3, #1
 800281e:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_DMA_Abort_IT+0xe8>)
 8002820:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
    } 
  }
  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40020008 	.word	0x40020008
 8002850:	4002001c 	.word	0x4002001c
 8002854:	40020030 	.word	0x40020030
 8002858:	40020044 	.word	0x40020044
 800285c:	40020058 	.word	0x40020058
 8002860:	4002006c 	.word	0x4002006c
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b08b      	sub	sp, #44	; 0x2c
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287a:	e127      	b.n	8002acc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800287c:	2201      	movs	r2, #1
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8116 	bne.w	8002ac6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b12      	cmp	r3, #18
 80028a0:	d034      	beq.n	800290c <HAL_GPIO_Init+0xa4>
 80028a2:	2b12      	cmp	r3, #18
 80028a4:	d80d      	bhi.n	80028c2 <HAL_GPIO_Init+0x5a>
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d02b      	beq.n	8002902 <HAL_GPIO_Init+0x9a>
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d804      	bhi.n	80028b8 <HAL_GPIO_Init+0x50>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d031      	beq.n	8002916 <HAL_GPIO_Init+0xae>
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d01c      	beq.n	80028f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028b6:	e048      	b.n	800294a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d043      	beq.n	8002944 <HAL_GPIO_Init+0xdc>
 80028bc:	2b11      	cmp	r3, #17
 80028be:	d01b      	beq.n	80028f8 <HAL_GPIO_Init+0x90>
          break;
 80028c0:	e043      	b.n	800294a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028c2:	4a89      	ldr	r2, [pc, #548]	; (8002ae8 <HAL_GPIO_Init+0x280>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d026      	beq.n	8002916 <HAL_GPIO_Init+0xae>
 80028c8:	4a87      	ldr	r2, [pc, #540]	; (8002ae8 <HAL_GPIO_Init+0x280>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d806      	bhi.n	80028dc <HAL_GPIO_Init+0x74>
 80028ce:	4a87      	ldr	r2, [pc, #540]	; (8002aec <HAL_GPIO_Init+0x284>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d020      	beq.n	8002916 <HAL_GPIO_Init+0xae>
 80028d4:	4a86      	ldr	r2, [pc, #536]	; (8002af0 <HAL_GPIO_Init+0x288>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01d      	beq.n	8002916 <HAL_GPIO_Init+0xae>
          break;
 80028da:	e036      	b.n	800294a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028dc:	4a85      	ldr	r2, [pc, #532]	; (8002af4 <HAL_GPIO_Init+0x28c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d019      	beq.n	8002916 <HAL_GPIO_Init+0xae>
 80028e2:	4a85      	ldr	r2, [pc, #532]	; (8002af8 <HAL_GPIO_Init+0x290>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d016      	beq.n	8002916 <HAL_GPIO_Init+0xae>
 80028e8:	4a84      	ldr	r2, [pc, #528]	; (8002afc <HAL_GPIO_Init+0x294>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0xae>
          break;
 80028ee:	e02c      	b.n	800294a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	623b      	str	r3, [r7, #32]
          break;
 80028f6:	e028      	b.n	800294a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	3304      	adds	r3, #4
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e023      	b.n	800294a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	3308      	adds	r3, #8
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e01e      	b.n	800294a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	330c      	adds	r3, #12
 8002912:	623b      	str	r3, [r7, #32]
          break;
 8002914:	e019      	b.n	800294a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800291e:	2304      	movs	r3, #4
 8002920:	623b      	str	r3, [r7, #32]
          break;
 8002922:	e012      	b.n	800294a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800292c:	2308      	movs	r3, #8
 800292e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	611a      	str	r2, [r3, #16]
          break;
 8002936:	e008      	b.n	800294a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002938:	2308      	movs	r3, #8
 800293a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	615a      	str	r2, [r3, #20]
          break;
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2bff      	cmp	r3, #255	; 0xff
 800294e:	d801      	bhi.n	8002954 <HAL_GPIO_Init+0xec>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	e001      	b.n	8002958 <HAL_GPIO_Init+0xf0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2bff      	cmp	r3, #255	; 0xff
 800295e:	d802      	bhi.n	8002966 <HAL_GPIO_Init+0xfe>
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x104>
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	3b08      	subs	r3, #8
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	210f      	movs	r1, #15
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	401a      	ands	r2, r3
 800297e:	6a39      	ldr	r1, [r7, #32]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	431a      	orrs	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8096 	beq.w	8002ac6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800299a:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_GPIO_Init+0x298>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_GPIO_Init+0x298>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6193      	str	r3, [r2, #24]
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_GPIO_Init+0x298>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029b2:	4a54      	ldr	r2, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x29c>)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_GPIO_Init+0x2a0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x19e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4a      	ldr	r2, [pc, #296]	; (8002b0c <HAL_GPIO_Init+0x2a4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x19a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <HAL_GPIO_Init+0x2a8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x196>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a48      	ldr	r2, [pc, #288]	; (8002b14 <HAL_GPIO_Init+0x2ac>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x192>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x1a0>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e004      	b.n	8002a08 <HAL_GPIO_Init+0x1a0>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_Init+0x1a0>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_GPIO_Init+0x1a0>
 8002a06:	2300      	movs	r3, #0
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	f002 0203 	and.w	r2, r2, #3
 8002a0e:	0092      	lsls	r2, r2, #2
 8002a10:	4093      	lsls	r3, r2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a18:	493a      	ldr	r1, [pc, #232]	; (8002b04 <HAL_GPIO_Init+0x29c>)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4938      	ldr	r1, [pc, #224]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
 8002a3e:	e006      	b.n	8002a4e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a40:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	4933      	ldr	r1, [pc, #204]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	492e      	ldr	r1, [pc, #184]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e006      	b.n	8002a76 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	4929      	ldr	r1, [pc, #164]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	4924      	ldr	r1, [pc, #144]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
 8002a8e:	e006      	b.n	8002a9e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	491f      	ldr	r1, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	491a      	ldr	r1, [pc, #104]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60cb      	str	r3, [r1, #12]
 8002ab6:	e006      	b.n	8002ac6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	4915      	ldr	r1, [pc, #84]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	3301      	adds	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f47f aed0 	bne.w	800287c <HAL_GPIO_Init+0x14>
  }
}
 8002adc:	bf00      	nop
 8002ade:	372c      	adds	r7, #44	; 0x2c
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	10210000 	.word	0x10210000
 8002aec:	10110000 	.word	0x10110000
 8002af0:	10120000 	.word	0x10120000
 8002af4:	10310000 	.word	0x10310000
 8002af8:	10320000 	.word	0x10320000
 8002afc:	10220000 	.word	0x10220000
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40010800 	.word	0x40010800
 8002b0c:	40010c00 	.word	0x40010c00
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40011400 	.word	0x40011400
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	611a      	str	r2, [r3, #16]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e26c      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8087 	beq.w	8002c7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6c:	4b92      	ldr	r3, [pc, #584]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d00c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b78:	4b8f      	ldr	r3, [pc, #572]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d112      	bne.n	8002baa <HAL_RCC_OscConfig+0x5e>
 8002b84:	4b8c      	ldr	r3, [pc, #560]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d10b      	bne.n	8002baa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b92:	4b89      	ldr	r3, [pc, #548]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d06c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x12c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d168      	bne.n	8002c78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e246      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x76>
 8002bb4:	4b80      	ldr	r3, [pc, #512]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a7f      	ldr	r2, [pc, #508]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e02e      	b.n	8002c20 <HAL_RCC_OscConfig+0xd4>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x98>
 8002bca:	4b7b      	ldr	r3, [pc, #492]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7a      	ldr	r2, [pc, #488]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b78      	ldr	r3, [pc, #480]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a77      	ldr	r2, [pc, #476]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xd4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0xbc>
 8002bee:	4b72      	ldr	r3, [pc, #456]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a71      	ldr	r2, [pc, #452]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b6f      	ldr	r3, [pc, #444]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6e      	ldr	r2, [pc, #440]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xd4>
 8002c08:	4b6b      	ldr	r3, [pc, #428]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6a      	ldr	r2, [pc, #424]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a67      	ldr	r2, [pc, #412]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fc6e 	bl	8002508 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff fc6a 	bl	8002508 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1fa      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xe4>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fc5a 	bl	8002508 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff fc56 	bl	8002508 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1e6      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x10c>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d063      	beq.n	8002d4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c86:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c92:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x18c>
 8002c9e:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x176>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1ba      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4939      	ldr	r1, [pc, #228]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	e03a      	b.n	8002d4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7ff fc0f 	bl	8002508 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cee:	f7ff fc0b 	bl	8002508 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e19b      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0c:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4927      	ldr	r1, [pc, #156]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
 8002d20:	e015      	b.n	8002d4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff fbee 	bl	8002508 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d30:	f7ff fbea 	bl	8002508 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e17a      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d03a      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d019      	beq.n	8002d96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7ff fbce 	bl	8002508 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d70:	f7ff fbca 	bl	8002508 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e15a      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f000 faa8 	bl	80032e4 <RCC_Delay>
 8002d94:	e01c      	b.n	8002dd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9c:	f7ff fbb4 	bl	8002508 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da2:	e00f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da4:	f7ff fbb0 	bl	8002508 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d908      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e140      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	42420000 	.word	0x42420000
 8002dc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	4b9e      	ldr	r3, [pc, #632]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e9      	bne.n	8002da4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80a6 	beq.w	8002f2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de2:	4b97      	ldr	r3, [pc, #604]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10d      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	4b94      	ldr	r3, [pc, #592]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4a93      	ldr	r2, [pc, #588]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df8:	61d3      	str	r3, [r2, #28]
 8002dfa:	4b91      	ldr	r3, [pc, #580]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b8e      	ldr	r3, [pc, #568]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e16:	4b8b      	ldr	r3, [pc, #556]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a8a      	ldr	r2, [pc, #552]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e22:	f7ff fb71 	bl	8002508 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2a:	f7ff fb6d 	bl	8002508 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	; 0x64
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0fd      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <HAL_RCC_OscConfig+0x4f8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x312>
 8002e50:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4a7a      	ldr	r2, [pc, #488]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6213      	str	r3, [r2, #32]
 8002e5c:	e02d      	b.n	8002eba <HAL_RCC_OscConfig+0x36e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x334>
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a75      	ldr	r2, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6213      	str	r3, [r2, #32]
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a72      	ldr	r2, [pc, #456]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	6213      	str	r3, [r2, #32]
 8002e7e:	e01c      	b.n	8002eba <HAL_RCC_OscConfig+0x36e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d10c      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x356>
 8002e88:	4b6d      	ldr	r3, [pc, #436]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a6c      	ldr	r2, [pc, #432]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4a69      	ldr	r2, [pc, #420]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6213      	str	r3, [r2, #32]
 8002ea0:	e00b      	b.n	8002eba <HAL_RCC_OscConfig+0x36e>
 8002ea2:	4b67      	ldr	r3, [pc, #412]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a66      	ldr	r2, [pc, #408]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	4b64      	ldr	r3, [pc, #400]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a63      	ldr	r2, [pc, #396]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d015      	beq.n	8002eee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7ff fb21 	bl	8002508 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7ff fb1d 	bl	8002508 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0ab      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ee      	beq.n	8002eca <HAL_RCC_OscConfig+0x37e>
 8002eec:	e014      	b.n	8002f18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7ff fb0b 	bl	8002508 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7ff fb07 	bl	8002508 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e095      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0c:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ee      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1e:	4b48      	ldr	r3, [pc, #288]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a47      	ldr	r2, [pc, #284]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8081 	beq.w	8003036 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d061      	beq.n	8003004 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d146      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f48:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_RCC_OscConfig+0x4fc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7ff fadb 	bl	8002508 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7ff fad7 	bl	8002508 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e067      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f68:	4b35      	ldr	r3, [pc, #212]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d108      	bne.n	8002f90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	492d      	ldr	r1, [pc, #180]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f90:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a19      	ldr	r1, [r3, #32]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	4927      	ldr	r1, [pc, #156]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_RCC_OscConfig+0x4fc>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7ff faab 	bl	8002508 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7ff faa7 	bl	8002508 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e037      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x46a>
 8002fd4:	e02f      	b.n	8003036 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_RCC_OscConfig+0x4fc>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7ff fa94 	bl	8002508 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7ff fa90 	bl	8002508 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e020      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x498>
 8003002:	e018      	b.n	8003036 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e013      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_OscConfig+0x4f4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	429a      	cmp	r2, r3
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	40007000 	.word	0x40007000
 8003048:	42420060 	.word	0x42420060

0800304c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0d0      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d910      	bls.n	8003090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b67      	ldr	r3, [pc, #412]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4965      	ldr	r1, [pc, #404]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d040      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d115      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e073      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06b      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4936      	ldr	r1, [pc, #216]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800313c:	f7ff f9e4 	bl	8002508 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7ff f9e0 	bl	8002508 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e053      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d210      	bcs.n	800319c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	4922      	ldr	r1, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4601      	mov	r1, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	fa21 f303 	lsr.w	r3, r1, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1cc>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1d0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f942 	bl	8002484 <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
 8003214:	0800951c 	.word	0x0800951c
 8003218:	2000003c 	.word	0x2000003c
 800321c:	20000040 	.word	0x20000040

08003220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b490      	push	{r4, r7}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003228:	1d3c      	adds	r4, r7, #4
 800322a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800322c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800324a:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b04      	cmp	r3, #4
 8003258:	d002      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x40>
 800325a:	2b08      	cmp	r3, #8
 800325c:	d003      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x46>
 800325e:	e02d      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003260:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003262:	623b      	str	r3, [r7, #32]
      break;
 8003264:	e02d      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	0c9b      	lsrs	r3, r3, #18
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003272:	4413      	add	r3, r2
 8003274:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003278:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	0c5b      	lsrs	r3, r3, #17
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003298:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800329e:	fb02 f203 	mul.w	r2, r2, r3
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	e004      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	623b      	str	r3, [r7, #32]
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80032be:	623b      	str	r3, [r7, #32]
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	6a3b      	ldr	r3, [r7, #32]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc90      	pop	{r4, r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	08009508 	.word	0x08009508
 80032d4:	08009518 	.word	0x08009518
 80032d8:	40021000 	.word	0x40021000
 80032dc:	007a1200 	.word	0x007a1200
 80032e0:	003d0900 	.word	0x003d0900

080032e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <RCC_Delay+0x34>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <RCC_Delay+0x38>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	0a5b      	lsrs	r3, r3, #9
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003300:	bf00      	nop
  }
  while (Delay --);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	60fa      	str	r2, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f9      	bne.n	8003300 <RCC_Delay+0x1c>
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	2000003c 	.word	0x2000003c
 800331c:	10624dd3 	.word	0x10624dd3

08003320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e076      	b.n	8003420 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003342:	d009      	beq.n	8003358 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
 800334a:	e005      	b.n	8003358 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe fdd0 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	ea42 0103 	orr.w	r1, r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	0c1a      	lsrs	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f002 0204 	and.w	r2, r2, #4
 80033fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_SPI_Transmit+0x22>
 8003446:	2302      	movs	r3, #2
 8003448:	e126      	b.n	8003698 <HAL_SPI_Transmit+0x270>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003452:	f7ff f859 	bl	8002508 <HAL_GetTick>
 8003456:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d002      	beq.n	800346e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003468:	2302      	movs	r3, #2
 800346a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800346c:	e10b      	b.n	8003686 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_Transmit+0x52>
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800347e:	e102      	b.n	8003686 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2203      	movs	r2, #3
 8003484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c6:	d10f      	bne.n	80034e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d007      	beq.n	8003506 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350e:	d14b      	bne.n	80035a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_SPI_Transmit+0xf6>
 8003518:	8afb      	ldrh	r3, [r7, #22]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d13e      	bne.n	800359c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	881a      	ldrh	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003542:	e02b      	b.n	800359c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d112      	bne.n	8003578 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	1c9a      	adds	r2, r3, #2
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	86da      	strh	r2, [r3, #54]	; 0x36
 8003576:	e011      	b.n	800359c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003578:	f7fe ffc6 	bl	8002508 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d803      	bhi.n	8003590 <HAL_SPI_Transmit+0x168>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800358e:	d102      	bne.n	8003596 <HAL_SPI_Transmit+0x16e>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	77fb      	strb	r3, [r7, #31]
          goto error;
 800359a:	e074      	b.n	8003686 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ce      	bne.n	8003544 <HAL_SPI_Transmit+0x11c>
 80035a6:	e04c      	b.n	8003642 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_SPI_Transmit+0x18e>
 80035b0:	8afb      	ldrh	r3, [r7, #22]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d140      	bne.n	8003638 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	7812      	ldrb	r2, [r2, #0]
 80035c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035dc:	e02c      	b.n	8003638 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d113      	bne.n	8003614 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36
 8003612:	e011      	b.n	8003638 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003614:	f7fe ff78 	bl	8002508 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d803      	bhi.n	800362c <HAL_SPI_Transmit+0x204>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362a:	d102      	bne.n	8003632 <HAL_SPI_Transmit+0x20a>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003636:	e026      	b.n	8003686 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1cd      	bne.n	80035de <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fc4e 	bl	8003ee8 <SPI_EndRxTxTransaction>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e000      	b.n	8003686 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003684:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003696:	7ffb      	ldrb	r3, [r7, #31]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d110      	bne.n	80036dc <HAL_SPI_Receive_IT+0x3c>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c2:	d10b      	bne.n	80036dc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2204      	movs	r2, #4
 80036c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f882 	bl	80037dc <HAL_SPI_TransmitReceive_IT>
 80036d8:	4603      	mov	r3, r0
 80036da:	e076      	b.n	80037ca <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_Receive_IT+0x4a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e06f      	b.n	80037ca <HAL_SPI_Receive_IT+0x12a>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
 8003700:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003702:	e05d      	b.n	80037c0 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_SPI_Receive_IT+0x70>
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003714:	e054      	b.n	80037c0 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2204      	movs	r2, #4
 800371a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_SPI_Receive_IT+0x134>)
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
 800375c:	e002      	b.n	8003764 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <HAL_SPI_Receive_IT+0x138>)
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376c:	d10f      	bne.n	800378e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800378c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800379c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d008      	beq.n	80037be <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e000      	b.n	80037c0 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80037be:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	08003ced 	.word	0x08003ced
 80037d8:	08003ca3 	.word	0x08003ca3

080037dc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_SPI_TransmitReceive_IT+0x20>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e075      	b.n	80038e8 <HAL_SPI_TransmitReceive_IT+0x10c>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003812:	7dbb      	ldrb	r3, [r7, #22]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d00d      	beq.n	8003834 <HAL_SPI_TransmitReceive_IT+0x58>
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381e:	d106      	bne.n	800382e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_SPI_TransmitReceive_IT+0x52>
 8003828:	7dbb      	ldrb	r3, [r7, #22]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d002      	beq.n	8003834 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003832:	e054      	b.n	80038de <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_SPI_TransmitReceive_IT+0x6a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800384a:	e048      	b.n	80038de <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b04      	cmp	r3, #4
 8003856:	d003      	beq.n	8003860 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2205      	movs	r2, #5
 800385c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	887a      	ldrh	r2, [r7, #2]
 8003882:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d006      	beq.n	80038a0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
 800389e:	e005      	b.n	80038ac <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_SPI_TransmitReceive_IT+0x120>)
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a15      	ldr	r2, [pc, #84]	; (8003900 <HAL_SPI_TransmitReceive_IT+0x124>)
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80038ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d008      	beq.n	80038dc <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e000      	b.n	80038de <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80038dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	08003be5 	.word	0x08003be5
 80038f8:	08003c45 	.word	0x08003c45
 80038fc:	08003b21 	.word	0x08003b21
 8003900:	08003b85 	.word	0x08003b85

08003904 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10f      	bne.n	8003948 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
    return;
 8003946:	e0bf      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_SPI_IRQHandler+0x66>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
    return;
 8003968:	e0ae      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_SPI_IRQHandler+0x80>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80a2 	beq.w	8003ac8 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 809b 	beq.w	8003ac8 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d023      	beq.n	80039e6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d011      	beq.n	80039ce <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f043 0204 	orr.w	r2, r3, #4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	e00b      	b.n	80039e6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	693b      	ldr	r3, [r7, #16]
        return;
 80039e4:	e070      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d014      	beq.n	8003a1c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d050      	beq.n	8003ac6 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a32:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_SPI_IRQHandler+0x14c>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d034      	beq.n	8003aba <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0203 	bic.w	r2, r2, #3
 8003a5e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d011      	beq.n	8003a8c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_SPI_IRQHandler+0x1cc>)
 8003a6e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fe81 	bl	800277c <HAL_DMA_Abort_IT>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <HAL_SPI_IRQHandler+0x1cc>)
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fe6b 	bl	800277c <HAL_DMA_Abort_IT>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003ab8:	e003      	b.n	8003ac2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f813 	bl	8003ae6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ac0:	e000      	b.n	8003ac4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003ac2:	bf00      	nop
    return;
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
  }
}
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08003af9 	.word	0x08003af9

08003ad4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff ffe7 	bl	8003ae6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f103 020c 	add.w	r2, r3, #12
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10f      	bne.n	8003b7c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b6a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9d4 	bl	8003f24 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bca:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9a4 	bl	8003f24 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f974 	bl	8003f24 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c88:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f945 	bl	8003f24 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f103 020c 	add.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	7812      	ldrb	r2, [r2, #0]
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f994 	bl	800400c <SPI_CloseRx_ISR>
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f971 	bl	800400c <SPI_CloseRx_ISR>
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d44:	f7fe fbe0 	bl	8002508 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d54:	f7fe fbd8 	bl	8002508 <HAL_GetTick>
 8003d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	015b      	lsls	r3, r3, #5
 8003d60:	0d1b      	lsrs	r3, r3, #20
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d6a:	e054      	b.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d72:	d050      	beq.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d74:	f7fe fbc8 	bl	8002508 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d902      	bls.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d13d      	bne.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da2:	d111      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d004      	beq.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d107      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd0:	d10f      	bne.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e017      	b.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d19b      	bne.n	8003d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000003c 	.word	0x2000003c

08003e44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e58:	d111      	bne.n	8003e7e <SPI_EndRxTransaction+0x3a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e62:	d004      	beq.n	8003e6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6c:	d107      	bne.n	8003e7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e86:	d117      	bne.n	8003eb8 <SPI_EndRxTransaction+0x74>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e90:	d112      	bne.n	8003eb8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff ff49 	bl	8003d34 <SPI_WaitFlagStateUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01a      	beq.n	8003ede <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e013      	b.n	8003ee0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ff36 	bl	8003d34 <SPI_WaitFlagStateUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e000      	b.n	8003ee0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff ff18 	bl	8003d34 <SPI_WaitFlagStateUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e000      	b.n	8003f1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <SPI_CloseRxTx_ISR+0xe0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a35      	ldr	r2, [pc, #212]	; (8004008 <SPI_CloseRxTx_ISR+0xe4>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a5b      	lsrs	r3, r3, #9
 8003f38:	2264      	movs	r2, #100	; 0x64
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f40:	f7fe fae2 	bl	8002508 <HAL_GetTick>
 8003f44:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0220 	bic.w	r2, r2, #32
 8003f54:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f68:	e009      	b.n	8003f7e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0eb      	beq.n	8003f56 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	2164      	movs	r1, #100	; 0x64
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffb0 	bl	8003ee8 <SPI_EndRxTxTransaction>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d115      	bne.n	8003fec <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fd fbc1 	bl	800175c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003fda:	e00e      	b.n	8003ffa <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fd75 	bl	8003ad4 <HAL_SPI_TxRxCpltCallback>
}
 8003fea:	e006      	b.n	8003ffa <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fd76 	bl	8003ae6 <HAL_SPI_ErrorCallback>
}
 8003ffa:	bf00      	nop
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	2000003c 	.word	0x2000003c
 8004008:	057619f1 	.word	0x057619f1

0800400c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004022:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004024:	f7fe fa70 	bl	8002508 <HAL_GetTick>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	2164      	movs	r1, #100	; 0x64
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff ff08 	bl	8003e44 <SPI_EndRxTransaction>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fd fb71 	bl	800175c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800407a:	e002      	b.n	8004082 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fd32 	bl	8003ae6 <HAL_SPI_ErrorCallback>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e041      	b.n	8004120 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fd ffaf 	bl	8002014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f000 ff93 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e032      	b.n	80041a6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_TIM_Base_Start+0x88>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00e      	beq.n	8004170 <HAL_TIM_Base_Start+0x48>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415a:	d009      	beq.n	8004170 <HAL_TIM_Base_Start+0x48>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <HAL_TIM_Base_Start+0x8c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_TIM_Base_Start+0x48>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <HAL_TIM_Base_Start+0x90>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d111      	bne.n	8004194 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b06      	cmp	r3, #6
 8004180:	d010      	beq.n	80041a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004192:	e007      	b.n	80041a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800

080041bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d001      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e03a      	b.n	800424a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_TIM_Base_Start_IT+0x98>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x58>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fe:	d009      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x58>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <HAL_TIM_Base_Start_IT+0x9c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x58>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <HAL_TIM_Base_Start_IT+0xa0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d111      	bne.n	8004238 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b06      	cmp	r3, #6
 8004224:	d010      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	e007      	b.n	8004248 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800

08004260 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e041      	b.n	80042f6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f839 	bl	80042fe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f000 fea8 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_TIM_OC_Start_IT+0x24>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	e022      	b.n	800437a <HAL_TIM_OC_Start_IT+0x6a>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b04      	cmp	r3, #4
 8004338:	d109      	bne.n	800434e <HAL_TIM_OC_Start_IT+0x3e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	e015      	b.n	800437a <HAL_TIM_OC_Start_IT+0x6a>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d109      	bne.n	8004368 <HAL_TIM_OC_Start_IT+0x58>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e008      	b.n	800437a <HAL_TIM_OC_Start_IT+0x6a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0a4      	b.n	80044cc <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <HAL_TIM_OC_Start_IT+0x82>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	e013      	b.n	80043ba <HAL_TIM_OC_Start_IT+0xaa>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_OC_Start_IT+0x92>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	e00b      	b.n	80043ba <HAL_TIM_OC_Start_IT+0xaa>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_OC_Start_IT+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b0:	e003      	b.n	80043ba <HAL_TIM_OC_Start_IT+0xaa>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d841      	bhi.n	8004444 <HAL_TIM_OC_Start_IT+0x134>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <HAL_TIM_OC_Start_IT+0xb8>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	08004445 	.word	0x08004445
 80043d0:	08004445 	.word	0x08004445
 80043d4:	08004445 	.word	0x08004445
 80043d8:	0800440f 	.word	0x0800440f
 80043dc:	08004445 	.word	0x08004445
 80043e0:	08004445 	.word	0x08004445
 80043e4:	08004445 	.word	0x08004445
 80043e8:	08004421 	.word	0x08004421
 80043ec:	08004445 	.word	0x08004445
 80043f0:	08004445 	.word	0x08004445
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004433 	.word	0x08004433
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0202 	orr.w	r2, r2, #2
 800440a:	60da      	str	r2, [r3, #12]
      break;
 800440c:	e01b      	b.n	8004446 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0204 	orr.w	r2, r2, #4
 800441c:	60da      	str	r2, [r3, #12]
      break;
 800441e:	e012      	b.n	8004446 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0208 	orr.w	r2, r2, #8
 800442e:	60da      	str	r2, [r3, #12]
      break;
 8004430:	e009      	b.n	8004446 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0210 	orr.w	r2, r2, #16
 8004440:	60da      	str	r2, [r3, #12]
      break;
 8004442:	e000      	b.n	8004446 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8004444:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2201      	movs	r2, #1
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f850 	bl	80054f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <HAL_TIM_OC_Start_IT+0x1c4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d107      	bne.n	800446e <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <HAL_TIM_OC_Start_IT+0x1c4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIM_OC_Start_IT+0x186>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d009      	beq.n	8004496 <HAL_TIM_OC_Start_IT+0x186>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <HAL_TIM_OC_Start_IT+0x1c8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIM_OC_Start_IT+0x186>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a12      	ldr	r2, [pc, #72]	; (80044dc <HAL_TIM_OC_Start_IT+0x1cc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d111      	bne.n	80044ba <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d010      	beq.n	80044ca <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	e007      	b.n	80044ca <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800

080044e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e041      	b.n	8004576 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f839 	bl	800457e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f000 fd68 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_TIM_PWM_Start_IT+0x24>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	bf14      	ite	ne
 80045ac:	2301      	movne	r3, #1
 80045ae:	2300      	moveq	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e022      	b.n	80045fa <HAL_TIM_PWM_Start_IT+0x6a>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d109      	bne.n	80045ce <HAL_TIM_PWM_Start_IT+0x3e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	e015      	b.n	80045fa <HAL_TIM_PWM_Start_IT+0x6a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d109      	bne.n	80045e8 <HAL_TIM_PWM_Start_IT+0x58>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e008      	b.n	80045fa <HAL_TIM_PWM_Start_IT+0x6a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0a4      	b.n	800474c <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start_IT+0x82>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004610:	e013      	b.n	800463a <HAL_TIM_PWM_Start_IT+0xaa>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start_IT+0x92>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004620:	e00b      	b.n	800463a <HAL_TIM_PWM_Start_IT+0xaa>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start_IT+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004630:	e003      	b.n	800463a <HAL_TIM_PWM_Start_IT+0xaa>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d841      	bhi.n	80046c4 <HAL_TIM_PWM_Start_IT+0x134>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_TIM_PWM_Start_IT+0xb8>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800467d 	.word	0x0800467d
 800464c:	080046c5 	.word	0x080046c5
 8004650:	080046c5 	.word	0x080046c5
 8004654:	080046c5 	.word	0x080046c5
 8004658:	0800468f 	.word	0x0800468f
 800465c:	080046c5 	.word	0x080046c5
 8004660:	080046c5 	.word	0x080046c5
 8004664:	080046c5 	.word	0x080046c5
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046c5 	.word	0x080046c5
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080046b3 	.word	0x080046b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0202 	orr.w	r2, r2, #2
 800468a:	60da      	str	r2, [r3, #12]
      break;
 800468c:	e01b      	b.n	80046c6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0204 	orr.w	r2, r2, #4
 800469c:	60da      	str	r2, [r3, #12]
      break;
 800469e:	e012      	b.n	80046c6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	60da      	str	r2, [r3, #12]
      break;
 80046b0:	e009      	b.n	80046c6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0210 	orr.w	r2, r2, #16
 80046c0:	60da      	str	r2, [r3, #12]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80046c4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 ff10 	bl	80054f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_TIM_PWM_Start_IT+0x186>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004700:	d009      	beq.n	8004716 <HAL_TIM_PWM_Start_IT+0x186>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a14      	ldr	r2, [pc, #80]	; (8004758 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_TIM_PWM_Start_IT+0x186>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a12      	ldr	r2, [pc, #72]	; (800475c <HAL_TIM_PWM_Start_IT+0x1cc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d111      	bne.n	800473a <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d010      	beq.n	800474a <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	e007      	b.n	800474a <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800

08004760 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e093      	b.n	800489c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fd fc93 	bl	80020b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f000 fc1d 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	f023 0303 	bic.w	r3, r3, #3
 80047e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	4313      	orrs	r3, r2
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004800:	f023 030c 	bic.w	r3, r3, #12
 8004804:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800480c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	4313      	orrs	r3, r2
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	011a      	lsls	r2, r3, #4
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	031b      	lsls	r3, r3, #12
 8004830:	4313      	orrs	r3, r2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800483e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4313      	orrs	r3, r2
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d110      	bne.n	80048f6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d102      	bne.n	80048e0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048da:	7b7b      	ldrb	r3, [r7, #13]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d001      	beq.n	80048e4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e088      	b.n	80049f6 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f4:	e031      	b.n	800495a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d110      	bne.n	800491e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d102      	bne.n	8004908 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004902:	7b3b      	ldrb	r3, [r7, #12]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d001      	beq.n	800490c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e074      	b.n	80049f6 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491c:	e01d      	b.n	800495a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d108      	bne.n	8004936 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800492a:	7b7b      	ldrb	r3, [r7, #13]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d102      	bne.n	8004936 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004930:	7b3b      	ldrb	r3, [r7, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d001      	beq.n	800493a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e05d      	b.n	80049f6 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_TIM_Encoder_Start_IT+0xc2>
 8004960:	2b04      	cmp	r3, #4
 8004962:	d010      	beq.n	8004986 <HAL_TIM_Encoder_Start_IT+0xe2>
 8004964:	e01f      	b.n	80049a6 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2201      	movs	r2, #1
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fdc0 	bl	80054f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0202 	orr.w	r2, r2, #2
 8004982:	60da      	str	r2, [r3, #12]
      break;
 8004984:	e02e      	b.n	80049e4 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	2104      	movs	r1, #4
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fdb0 	bl	80054f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0204 	orr.w	r2, r2, #4
 80049a2:	60da      	str	r2, [r3, #12]
      break;
 80049a4:	e01e      	b.n	80049e4 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2201      	movs	r2, #1
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fda0 	bl	80054f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	2104      	movs	r1, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fd99 	bl	80054f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0202 	orr.w	r2, r2, #2
 80049d0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0204 	orr.w	r2, r2, #4
 80049e0:	60da      	str	r2, [r3, #12]
      break;
 80049e2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d122      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d11b      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0202 	mvn.w	r2, #2
 8004a2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fabb 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004a46:	e005      	b.n	8004a54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 faae 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fabd 	bl	8004fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d122      	bne.n	8004aae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d11b      	bne.n	8004aae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 0204 	mvn.w	r2, #4
 8004a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa91 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004a9a:	e005      	b.n	8004aa8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fa84 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa93 	bl	8004fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d122      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d11b      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f06f 0208 	mvn.w	r2, #8
 8004ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa67 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004aee:	e005      	b.n	8004afc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa5a 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa69 	bl	8004fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d122      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d11b      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0210 	mvn.w	r2, #16
 8004b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fa3d 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004b42:	e005      	b.n	8004b50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa30 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa3f 	bl	8004fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10e      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d107      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0201 	mvn.w	r2, #1
 8004b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fc fa8b 	bl	8001098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fd7f 	bl	80056ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa03 	bl	8004fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0220 	mvn.w	r2, #32
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fd4a 	bl	800569a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e046      	b.n	8004cb8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d839      	bhi.n	8004cac <HAL_TIM_OC_ConfigChannel+0x9c>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c75 	.word	0x08004c75
 8004c44:	08004cad 	.word	0x08004cad
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004cad 	.word	0x08004cad
 8004c50:	08004c83 	.word	0x08004c83
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004c91 	.word	0x08004c91
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004c9f 	.word	0x08004c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fa1c 	bl	80050b8 <TIM_OC1_SetConfig>
      break;
 8004c80:	e015      	b.n	8004cae <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fa7b 	bl	8005184 <TIM_OC2_SetConfig>
      break;
 8004c8e:	e00e      	b.n	8004cae <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fade 	bl	8005258 <TIM_OC3_SetConfig>
      break;
 8004c9c:	e007      	b.n	8004cae <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fb41 	bl	800532c <TIM_OC4_SetConfig>
      break;
 8004caa:	e000      	b.n	8004cae <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e0ac      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	f200 809f 	bhi.w	8004e28 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004e29 	.word	0x08004e29
 8004cf8:	08004e29 	.word	0x08004e29
 8004cfc:	08004e29 	.word	0x08004e29
 8004d00:	08004d65 	.word	0x08004d65
 8004d04:	08004e29 	.word	0x08004e29
 8004d08:	08004e29 	.word	0x08004e29
 8004d0c:	08004e29 	.word	0x08004e29
 8004d10:	08004da7 	.word	0x08004da7
 8004d14:	08004e29 	.word	0x08004e29
 8004d18:	08004e29 	.word	0x08004e29
 8004d1c:	08004e29 	.word	0x08004e29
 8004d20:	08004de7 	.word	0x08004de7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f9c4 	bl	80050b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0208 	orr.w	r2, r2, #8
 8004d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0204 	bic.w	r2, r2, #4
 8004d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6999      	ldr	r1, [r3, #24]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	619a      	str	r2, [r3, #24]
      break;
 8004d62:	e062      	b.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa0a 	bl	8005184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6999      	ldr	r1, [r3, #24]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	021a      	lsls	r2, r3, #8
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	619a      	str	r2, [r3, #24]
      break;
 8004da4:	e041      	b.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fa53 	bl	8005258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0208 	orr.w	r2, r2, #8
 8004dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0204 	bic.w	r2, r2, #4
 8004dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69d9      	ldr	r1, [r3, #28]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	61da      	str	r2, [r3, #28]
      break;
 8004de4:	e021      	b.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fa9d 	bl	800532c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69d9      	ldr	r1, [r3, #28]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	021a      	lsls	r2, r3, #8
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	61da      	str	r2, [r3, #28]
      break;
 8004e26:	e000      	b.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_ConfigClockSource+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0a6      	b.n	8004fa2 <HAL_TIM_ConfigClockSource+0x166>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d067      	beq.n	8004f5c <HAL_TIM_ConfigClockSource+0x120>
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d80b      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x6c>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d073      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0x140>
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d802      	bhi.n	8004e9e <HAL_TIM_ConfigClockSource+0x62>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d06f      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e9c:	e078      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d06c      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0x140>
 8004ea2:	2b30      	cmp	r3, #48	; 0x30
 8004ea4:	d06a      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ea6:	e073      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ea8:	2b70      	cmp	r3, #112	; 0x70
 8004eaa:	d00d      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x8c>
 8004eac:	2b70      	cmp	r3, #112	; 0x70
 8004eae:	d804      	bhi.n	8004eba <HAL_TIM_ConfigClockSource+0x7e>
 8004eb0:	2b50      	cmp	r3, #80	; 0x50
 8004eb2:	d033      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0xe0>
 8004eb4:	2b60      	cmp	r3, #96	; 0x60
 8004eb6:	d041      	beq.n	8004f3c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004eb8:	e06a      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	d066      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x152>
 8004ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec4:	d017      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ec6:	e063      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6899      	ldr	r1, [r3, #8]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f000 faed 	bl	80054b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	609a      	str	r2, [r3, #8]
      break;
 8004ef4:	e04c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f000 fad6 	bl	80054b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f18:	609a      	str	r2, [r3, #8]
      break;
 8004f1a:	e039      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6859      	ldr	r1, [r3, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f000 fa4d 	bl	80053c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2150      	movs	r1, #80	; 0x50
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 faa4 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004f3a:	e029      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6859      	ldr	r1, [r3, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f000 fa6b 	bl	8005424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2160      	movs	r1, #96	; 0x60
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fa94 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004f5a:	e019      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f000 fa2d 	bl	80053c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fa84 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004f7a:	e009      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fa7b 	bl	8005482 <TIM_ITRx_SetConfig>
        break;
 8004f8c:	e000      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr
	...

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a29      	ldr	r2, [pc, #164]	; (80050ac <TIM_Base_SetConfig+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0x30>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0x30>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <TIM_Base_SetConfig+0xbc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x30>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <TIM_Base_SetConfig+0xc0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <TIM_Base_SetConfig+0xb8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0x62>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0x62>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <TIM_Base_SetConfig+0xbc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0x62>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <TIM_Base_SetConfig+0xc0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a07      	ldr	r2, [pc, #28]	; (80050ac <TIM_Base_SetConfig+0xb8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d103      	bne.n	800509c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	615a      	str	r2, [r3, #20]
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800

080050b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f023 0302 	bic.w	r3, r3, #2
 8005100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <TIM_OC1_SetConfig+0xc8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10c      	bne.n	800512e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0308 	bic.w	r3, r3, #8
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <TIM_OC1_SetConfig+0xc8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40012c00 	.word	0x40012c00

08005184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0210 	bic.w	r2, r3, #16
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0320 	bic.w	r3, r3, #32
 80051ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <TIM_OC2_SetConfig+0xd0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10d      	bne.n	8005200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a14      	ldr	r2, [pc, #80]	; (8005254 <TIM_OC2_SetConfig+0xd0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d113      	bne.n	8005230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800520e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	40012c00 	.word	0x40012c00

08005258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <TIM_OC3_SetConfig+0xd0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10d      	bne.n	80052d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a14      	ldr	r2, [pc, #80]	; (8005328 <TIM_OC3_SetConfig+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d113      	bne.n	8005302 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00

0800532c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a0f      	ldr	r2, [pc, #60]	; (80053c4 <TIM_OC4_SetConfig+0x98>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d109      	bne.n	80053a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	019b      	lsls	r3, r3, #6
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr
 80053c4:	40012c00 	.word	0x40012c00

080053c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 030a 	bic.w	r3, r3, #10
 8005404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f023 0210 	bic.w	r2, r3, #16
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800544e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	031b      	lsls	r3, r3, #12
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005460:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	621a      	str	r2, [r3, #32]
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	f043 0307 	orr.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	021a      	lsls	r2, r3, #8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	431a      	orrs	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4313      	orrs	r3, r2
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	609a      	str	r2, [r3, #8]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2201      	movs	r2, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005550:	2302      	movs	r3, #2
 8005552:	e046      	b.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a16      	ldr	r2, [pc, #88]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a0:	d009      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a12      	ldr	r2, [pc, #72]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10c      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800

080055f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e03d      	b.n	8005690 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <atof>:
 80056be:	2100      	movs	r1, #0
 80056c0:	f001 bb22 	b.w	8006d08 <strtod>

080056c4 <__errno>:
 80056c4:	4b01      	ldr	r3, [pc, #4]	; (80056cc <__errno+0x8>)
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000048 	.word	0x20000048

080056d0 <__libc_init_array>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	2500      	movs	r5, #0
 80056d4:	4e0c      	ldr	r6, [pc, #48]	; (8005708 <__libc_init_array+0x38>)
 80056d6:	4c0d      	ldr	r4, [pc, #52]	; (800570c <__libc_init_array+0x3c>)
 80056d8:	1ba4      	subs	r4, r4, r6
 80056da:	10a4      	asrs	r4, r4, #2
 80056dc:	42a5      	cmp	r5, r4
 80056de:	d109      	bne.n	80056f4 <__libc_init_array+0x24>
 80056e0:	f003 fe66 	bl	80093b0 <_init>
 80056e4:	2500      	movs	r5, #0
 80056e6:	4e0a      	ldr	r6, [pc, #40]	; (8005710 <__libc_init_array+0x40>)
 80056e8:	4c0a      	ldr	r4, [pc, #40]	; (8005714 <__libc_init_array+0x44>)
 80056ea:	1ba4      	subs	r4, r4, r6
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	42a5      	cmp	r5, r4
 80056f0:	d105      	bne.n	80056fe <__libc_init_array+0x2e>
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056f8:	4798      	blx	r3
 80056fa:	3501      	adds	r5, #1
 80056fc:	e7ee      	b.n	80056dc <__libc_init_array+0xc>
 80056fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005702:	4798      	blx	r3
 8005704:	3501      	adds	r5, #1
 8005706:	e7f2      	b.n	80056ee <__libc_init_array+0x1e>
 8005708:	08009848 	.word	0x08009848
 800570c:	08009848 	.word	0x08009848
 8005710:	08009848 	.word	0x08009848
 8005714:	0800984c 	.word	0x0800984c

08005718 <memset>:
 8005718:	4603      	mov	r3, r0
 800571a:	4402      	add	r2, r0
 800571c:	4293      	cmp	r3, r2
 800571e:	d100      	bne.n	8005722 <memset+0xa>
 8005720:	4770      	bx	lr
 8005722:	f803 1b01 	strb.w	r1, [r3], #1
 8005726:	e7f9      	b.n	800571c <memset+0x4>

08005728 <__cvt>:
 8005728:	2b00      	cmp	r3, #0
 800572a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572e:	461e      	mov	r6, r3
 8005730:	bfbb      	ittet	lt
 8005732:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005736:	461e      	movlt	r6, r3
 8005738:	2300      	movge	r3, #0
 800573a:	232d      	movlt	r3, #45	; 0x2d
 800573c:	b088      	sub	sp, #32
 800573e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005740:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005744:	f027 0720 	bic.w	r7, r7, #32
 8005748:	2f46      	cmp	r7, #70	; 0x46
 800574a:	4614      	mov	r4, r2
 800574c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800574e:	700b      	strb	r3, [r1, #0]
 8005750:	d004      	beq.n	800575c <__cvt+0x34>
 8005752:	2f45      	cmp	r7, #69	; 0x45
 8005754:	d100      	bne.n	8005758 <__cvt+0x30>
 8005756:	3501      	adds	r5, #1
 8005758:	2302      	movs	r3, #2
 800575a:	e000      	b.n	800575e <__cvt+0x36>
 800575c:	2303      	movs	r3, #3
 800575e:	aa07      	add	r2, sp, #28
 8005760:	9204      	str	r2, [sp, #16]
 8005762:	aa06      	add	r2, sp, #24
 8005764:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005768:	e9cd 3500 	strd	r3, r5, [sp]
 800576c:	4622      	mov	r2, r4
 800576e:	4633      	mov	r3, r6
 8005770:	f001 fc2a 	bl	8006fc8 <_dtoa_r>
 8005774:	2f47      	cmp	r7, #71	; 0x47
 8005776:	4680      	mov	r8, r0
 8005778:	d102      	bne.n	8005780 <__cvt+0x58>
 800577a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800577c:	07db      	lsls	r3, r3, #31
 800577e:	d526      	bpl.n	80057ce <__cvt+0xa6>
 8005780:	2f46      	cmp	r7, #70	; 0x46
 8005782:	eb08 0905 	add.w	r9, r8, r5
 8005786:	d111      	bne.n	80057ac <__cvt+0x84>
 8005788:	f898 3000 	ldrb.w	r3, [r8]
 800578c:	2b30      	cmp	r3, #48	; 0x30
 800578e:	d10a      	bne.n	80057a6 <__cvt+0x7e>
 8005790:	2200      	movs	r2, #0
 8005792:	2300      	movs	r3, #0
 8005794:	4620      	mov	r0, r4
 8005796:	4631      	mov	r1, r6
 8005798:	f7fb f906 	bl	80009a8 <__aeabi_dcmpeq>
 800579c:	b918      	cbnz	r0, 80057a6 <__cvt+0x7e>
 800579e:	f1c5 0501 	rsb	r5, r5, #1
 80057a2:	f8ca 5000 	str.w	r5, [sl]
 80057a6:	f8da 3000 	ldr.w	r3, [sl]
 80057aa:	4499      	add	r9, r3
 80057ac:	2200      	movs	r2, #0
 80057ae:	2300      	movs	r3, #0
 80057b0:	4620      	mov	r0, r4
 80057b2:	4631      	mov	r1, r6
 80057b4:	f7fb f8f8 	bl	80009a8 <__aeabi_dcmpeq>
 80057b8:	b938      	cbnz	r0, 80057ca <__cvt+0xa2>
 80057ba:	2230      	movs	r2, #48	; 0x30
 80057bc:	9b07      	ldr	r3, [sp, #28]
 80057be:	454b      	cmp	r3, r9
 80057c0:	d205      	bcs.n	80057ce <__cvt+0xa6>
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	9107      	str	r1, [sp, #28]
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e7f8      	b.n	80057bc <__cvt+0x94>
 80057ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80057ce:	4640      	mov	r0, r8
 80057d0:	9b07      	ldr	r3, [sp, #28]
 80057d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057d4:	eba3 0308 	sub.w	r3, r3, r8
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	b008      	add	sp, #32
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080057e0 <__exponent>:
 80057e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e2:	2900      	cmp	r1, #0
 80057e4:	bfb4      	ite	lt
 80057e6:	232d      	movlt	r3, #45	; 0x2d
 80057e8:	232b      	movge	r3, #43	; 0x2b
 80057ea:	4604      	mov	r4, r0
 80057ec:	bfb8      	it	lt
 80057ee:	4249      	neglt	r1, r1
 80057f0:	2909      	cmp	r1, #9
 80057f2:	f804 2b02 	strb.w	r2, [r4], #2
 80057f6:	7043      	strb	r3, [r0, #1]
 80057f8:	dd21      	ble.n	800583e <__exponent+0x5e>
 80057fa:	f10d 0307 	add.w	r3, sp, #7
 80057fe:	461f      	mov	r7, r3
 8005800:	260a      	movs	r6, #10
 8005802:	fb91 f5f6 	sdiv	r5, r1, r6
 8005806:	fb06 1115 	mls	r1, r6, r5, r1
 800580a:	2d09      	cmp	r5, #9
 800580c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005810:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005814:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005818:	4629      	mov	r1, r5
 800581a:	dc09      	bgt.n	8005830 <__exponent+0x50>
 800581c:	3130      	adds	r1, #48	; 0x30
 800581e:	3b02      	subs	r3, #2
 8005820:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005824:	42bb      	cmp	r3, r7
 8005826:	4622      	mov	r2, r4
 8005828:	d304      	bcc.n	8005834 <__exponent+0x54>
 800582a:	1a10      	subs	r0, r2, r0
 800582c:	b003      	add	sp, #12
 800582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005830:	4613      	mov	r3, r2
 8005832:	e7e6      	b.n	8005802 <__exponent+0x22>
 8005834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005838:	f804 2b01 	strb.w	r2, [r4], #1
 800583c:	e7f2      	b.n	8005824 <__exponent+0x44>
 800583e:	2330      	movs	r3, #48	; 0x30
 8005840:	4419      	add	r1, r3
 8005842:	7083      	strb	r3, [r0, #2]
 8005844:	1d02      	adds	r2, r0, #4
 8005846:	70c1      	strb	r1, [r0, #3]
 8005848:	e7ef      	b.n	800582a <__exponent+0x4a>
	...

0800584c <_printf_float>:
 800584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005850:	b091      	sub	sp, #68	; 0x44
 8005852:	460c      	mov	r4, r1
 8005854:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005856:	4693      	mov	fp, r2
 8005858:	461e      	mov	r6, r3
 800585a:	4605      	mov	r5, r0
 800585c:	f002 fe0c 	bl	8008478 <_localeconv_r>
 8005860:	6803      	ldr	r3, [r0, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	9309      	str	r3, [sp, #36]	; 0x24
 8005866:	f7fa fc73 	bl	8000150 <strlen>
 800586a:	2300      	movs	r3, #0
 800586c:	930e      	str	r3, [sp, #56]	; 0x38
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	900a      	str	r0, [sp, #40]	; 0x28
 8005872:	3307      	adds	r3, #7
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	f103 0208 	add.w	r2, r3, #8
 800587c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005880:	f8d4 a000 	ldr.w	sl, [r4]
 8005884:	603a      	str	r2, [r7, #0]
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800588e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005896:	930b      	str	r3, [sp, #44]	; 0x2c
 8005898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800589c:	4ba6      	ldr	r3, [pc, #664]	; (8005b38 <_printf_float+0x2ec>)
 800589e:	4638      	mov	r0, r7
 80058a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058a2:	f7fb f8b3 	bl	8000a0c <__aeabi_dcmpun>
 80058a6:	bb68      	cbnz	r0, 8005904 <_printf_float+0xb8>
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ac:	4ba2      	ldr	r3, [pc, #648]	; (8005b38 <_printf_float+0x2ec>)
 80058ae:	4638      	mov	r0, r7
 80058b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058b2:	f7fb f88d 	bl	80009d0 <__aeabi_dcmple>
 80058b6:	bb28      	cbnz	r0, 8005904 <_printf_float+0xb8>
 80058b8:	2200      	movs	r2, #0
 80058ba:	2300      	movs	r3, #0
 80058bc:	4638      	mov	r0, r7
 80058be:	4649      	mov	r1, r9
 80058c0:	f7fb f87c 	bl	80009bc <__aeabi_dcmplt>
 80058c4:	b110      	cbz	r0, 80058cc <_printf_float+0x80>
 80058c6:	232d      	movs	r3, #45	; 0x2d
 80058c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058cc:	4f9b      	ldr	r7, [pc, #620]	; (8005b3c <_printf_float+0x2f0>)
 80058ce:	4b9c      	ldr	r3, [pc, #624]	; (8005b40 <_printf_float+0x2f4>)
 80058d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058d4:	bf98      	it	ls
 80058d6:	461f      	movls	r7, r3
 80058d8:	2303      	movs	r3, #3
 80058da:	f04f 0900 	mov.w	r9, #0
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	f02a 0304 	bic.w	r3, sl, #4
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	9600      	str	r6, [sp, #0]
 80058e8:	465b      	mov	r3, fp
 80058ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80058ec:	4621      	mov	r1, r4
 80058ee:	4628      	mov	r0, r5
 80058f0:	f000 f9e2 	bl	8005cb8 <_printf_common>
 80058f4:	3001      	adds	r0, #1
 80058f6:	f040 8090 	bne.w	8005a1a <_printf_float+0x1ce>
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058fe:	b011      	add	sp, #68	; 0x44
 8005900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005904:	463a      	mov	r2, r7
 8005906:	464b      	mov	r3, r9
 8005908:	4638      	mov	r0, r7
 800590a:	4649      	mov	r1, r9
 800590c:	f7fb f87e 	bl	8000a0c <__aeabi_dcmpun>
 8005910:	b110      	cbz	r0, 8005918 <_printf_float+0xcc>
 8005912:	4f8c      	ldr	r7, [pc, #560]	; (8005b44 <_printf_float+0x2f8>)
 8005914:	4b8c      	ldr	r3, [pc, #560]	; (8005b48 <_printf_float+0x2fc>)
 8005916:	e7db      	b.n	80058d0 <_printf_float+0x84>
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800591e:	1c59      	adds	r1, r3, #1
 8005920:	a80d      	add	r0, sp, #52	; 0x34
 8005922:	a90e      	add	r1, sp, #56	; 0x38
 8005924:	d140      	bne.n	80059a8 <_printf_float+0x15c>
 8005926:	2306      	movs	r3, #6
 8005928:	6063      	str	r3, [r4, #4]
 800592a:	f04f 0c00 	mov.w	ip, #0
 800592e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005932:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	463a      	mov	r2, r7
 8005942:	464b      	mov	r3, r9
 8005944:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005948:	4628      	mov	r0, r5
 800594a:	f7ff feed 	bl	8005728 <__cvt>
 800594e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005952:	2b47      	cmp	r3, #71	; 0x47
 8005954:	4607      	mov	r7, r0
 8005956:	d109      	bne.n	800596c <_printf_float+0x120>
 8005958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800595a:	1cd8      	adds	r0, r3, #3
 800595c:	db02      	blt.n	8005964 <_printf_float+0x118>
 800595e:	6862      	ldr	r2, [r4, #4]
 8005960:	4293      	cmp	r3, r2
 8005962:	dd47      	ble.n	80059f4 <_printf_float+0x1a8>
 8005964:	f1a8 0802 	sub.w	r8, r8, #2
 8005968:	fa5f f888 	uxtb.w	r8, r8
 800596c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005970:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005972:	d824      	bhi.n	80059be <_printf_float+0x172>
 8005974:	3901      	subs	r1, #1
 8005976:	4642      	mov	r2, r8
 8005978:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800597c:	910d      	str	r1, [sp, #52]	; 0x34
 800597e:	f7ff ff2f 	bl	80057e0 <__exponent>
 8005982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005984:	4681      	mov	r9, r0
 8005986:	1813      	adds	r3, r2, r0
 8005988:	2a01      	cmp	r2, #1
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	dc02      	bgt.n	8005994 <_printf_float+0x148>
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	07d1      	lsls	r1, r2, #31
 8005992:	d501      	bpl.n	8005998 <_printf_float+0x14c>
 8005994:	3301      	adds	r3, #1
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0a2      	beq.n	80058e6 <_printf_float+0x9a>
 80059a0:	232d      	movs	r3, #45	; 0x2d
 80059a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a6:	e79e      	b.n	80058e6 <_printf_float+0x9a>
 80059a8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80059ac:	f000 816e 	beq.w	8005c8c <_printf_float+0x440>
 80059b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059b4:	d1b9      	bne.n	800592a <_printf_float+0xde>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1b7      	bne.n	800592a <_printf_float+0xde>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e7b4      	b.n	8005928 <_printf_float+0xdc>
 80059be:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80059c2:	d119      	bne.n	80059f8 <_printf_float+0x1ac>
 80059c4:	2900      	cmp	r1, #0
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	dd0c      	ble.n	80059e4 <_printf_float+0x198>
 80059ca:	6121      	str	r1, [r4, #16]
 80059cc:	b913      	cbnz	r3, 80059d4 <_printf_float+0x188>
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	07d2      	lsls	r2, r2, #31
 80059d2:	d502      	bpl.n	80059da <_printf_float+0x18e>
 80059d4:	3301      	adds	r3, #1
 80059d6:	440b      	add	r3, r1
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059dc:	f04f 0900 	mov.w	r9, #0
 80059e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80059e2:	e7d9      	b.n	8005998 <_printf_float+0x14c>
 80059e4:	b913      	cbnz	r3, 80059ec <_printf_float+0x1a0>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	07d0      	lsls	r0, r2, #31
 80059ea:	d501      	bpl.n	80059f0 <_printf_float+0x1a4>
 80059ec:	3302      	adds	r3, #2
 80059ee:	e7f3      	b.n	80059d8 <_printf_float+0x18c>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e7f1      	b.n	80059d8 <_printf_float+0x18c>
 80059f4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80059f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80059fc:	4293      	cmp	r3, r2
 80059fe:	db05      	blt.n	8005a0c <_printf_float+0x1c0>
 8005a00:	6822      	ldr	r2, [r4, #0]
 8005a02:	6123      	str	r3, [r4, #16]
 8005a04:	07d1      	lsls	r1, r2, #31
 8005a06:	d5e8      	bpl.n	80059da <_printf_float+0x18e>
 8005a08:	3301      	adds	r3, #1
 8005a0a:	e7e5      	b.n	80059d8 <_printf_float+0x18c>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfcc      	ite	gt
 8005a10:	2301      	movgt	r3, #1
 8005a12:	f1c3 0302 	rsble	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	e7de      	b.n	80059d8 <_printf_float+0x18c>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	055a      	lsls	r2, r3, #21
 8005a1e:	d407      	bmi.n	8005a30 <_printf_float+0x1e4>
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	463a      	mov	r2, r7
 8005a24:	4659      	mov	r1, fp
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b0      	blx	r6
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d129      	bne.n	8005a82 <_printf_float+0x236>
 8005a2e:	e764      	b.n	80058fa <_printf_float+0xae>
 8005a30:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005a34:	f240 80d7 	bls.w	8005be6 <_printf_float+0x39a>
 8005a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f7fa ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005a44:	b388      	cbz	r0, 8005aaa <_printf_float+0x25e>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4a40      	ldr	r2, [pc, #256]	; (8005b4c <_printf_float+0x300>)
 8005a4a:	4659      	mov	r1, fp
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	47b0      	blx	r6
 8005a50:	3001      	adds	r0, #1
 8005a52:	f43f af52 	beq.w	80058fa <_printf_float+0xae>
 8005a56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	db02      	blt.n	8005a64 <_printf_float+0x218>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	07d8      	lsls	r0, r3, #31
 8005a62:	d50e      	bpl.n	8005a82 <_printf_float+0x236>
 8005a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a68:	4659      	mov	r1, fp
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b0      	blx	r6
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f43f af43 	beq.w	80058fa <_printf_float+0xae>
 8005a74:	2700      	movs	r7, #0
 8005a76:	f104 081a 	add.w	r8, r4, #26
 8005a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	dc09      	bgt.n	8005a96 <_printf_float+0x24a>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	079f      	lsls	r7, r3, #30
 8005a86:	f100 80fd 	bmi.w	8005c84 <_printf_float+0x438>
 8005a8a:	68e0      	ldr	r0, [r4, #12]
 8005a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a8e:	4298      	cmp	r0, r3
 8005a90:	bfb8      	it	lt
 8005a92:	4618      	movlt	r0, r3
 8005a94:	e733      	b.n	80058fe <_printf_float+0xb2>
 8005a96:	2301      	movs	r3, #1
 8005a98:	4642      	mov	r2, r8
 8005a9a:	4659      	mov	r1, fp
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b0      	blx	r6
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f af2a 	beq.w	80058fa <_printf_float+0xae>
 8005aa6:	3701      	adds	r7, #1
 8005aa8:	e7e7      	b.n	8005a7a <_printf_float+0x22e>
 8005aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dc2b      	bgt.n	8005b08 <_printf_float+0x2bc>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4a26      	ldr	r2, [pc, #152]	; (8005b4c <_printf_float+0x300>)
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b0      	blx	r6
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f af1d 	beq.w	80058fa <_printf_float+0xae>
 8005ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac2:	b923      	cbnz	r3, 8005ace <_printf_float+0x282>
 8005ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac6:	b913      	cbnz	r3, 8005ace <_printf_float+0x282>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	d5d9      	bpl.n	8005a82 <_printf_float+0x236>
 8005ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad2:	4659      	mov	r1, fp
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b0      	blx	r6
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f af0e 	beq.w	80058fa <_printf_float+0xae>
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	f104 091a 	add.w	r9, r4, #26
 8005ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ae8:	425b      	negs	r3, r3
 8005aea:	4543      	cmp	r3, r8
 8005aec:	dc01      	bgt.n	8005af2 <_printf_float+0x2a6>
 8005aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af0:	e797      	b.n	8005a22 <_printf_float+0x1d6>
 8005af2:	2301      	movs	r3, #1
 8005af4:	464a      	mov	r2, r9
 8005af6:	4659      	mov	r1, fp
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b0      	blx	r6
 8005afc:	3001      	adds	r0, #1
 8005afe:	f43f aefc 	beq.w	80058fa <_printf_float+0xae>
 8005b02:	f108 0801 	add.w	r8, r8, #1
 8005b06:	e7ee      	b.n	8005ae6 <_printf_float+0x29a>
 8005b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	bfa8      	it	ge
 8005b10:	461a      	movge	r2, r3
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	4690      	mov	r8, r2
 8005b16:	dd07      	ble.n	8005b28 <_printf_float+0x2dc>
 8005b18:	4613      	mov	r3, r2
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b0      	blx	r6
 8005b22:	3001      	adds	r0, #1
 8005b24:	f43f aee9 	beq.w	80058fa <_printf_float+0xae>
 8005b28:	f104 031a 	add.w	r3, r4, #26
 8005b2c:	f04f 0a00 	mov.w	sl, #0
 8005b30:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b36:	e015      	b.n	8005b64 <_printf_float+0x318>
 8005b38:	7fefffff 	.word	0x7fefffff
 8005b3c:	08009534 	.word	0x08009534
 8005b40:	08009530 	.word	0x08009530
 8005b44:	0800953c 	.word	0x0800953c
 8005b48:	08009538 	.word	0x08009538
 8005b4c:	08009540 	.word	0x08009540
 8005b50:	2301      	movs	r3, #1
 8005b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b54:	4659      	mov	r1, fp
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b0      	blx	r6
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f aecd 	beq.w	80058fa <_printf_float+0xae>
 8005b60:	f10a 0a01 	add.w	sl, sl, #1
 8005b64:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005b68:	eba9 0308 	sub.w	r3, r9, r8
 8005b6c:	4553      	cmp	r3, sl
 8005b6e:	dcef      	bgt.n	8005b50 <_printf_float+0x304>
 8005b70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b74:	429a      	cmp	r2, r3
 8005b76:	444f      	add	r7, r9
 8005b78:	db14      	blt.n	8005ba4 <_printf_float+0x358>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	07da      	lsls	r2, r3, #31
 8005b7e:	d411      	bmi.n	8005ba4 <_printf_float+0x358>
 8005b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b82:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b84:	eba3 0209 	sub.w	r2, r3, r9
 8005b88:	eba3 0901 	sub.w	r9, r3, r1
 8005b8c:	4591      	cmp	r9, r2
 8005b8e:	bfa8      	it	ge
 8005b90:	4691      	movge	r9, r2
 8005b92:	f1b9 0f00 	cmp.w	r9, #0
 8005b96:	dc0d      	bgt.n	8005bb4 <_printf_float+0x368>
 8005b98:	2700      	movs	r7, #0
 8005b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b9e:	f104 081a 	add.w	r8, r4, #26
 8005ba2:	e018      	b.n	8005bd6 <_printf_float+0x38a>
 8005ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba8:	4659      	mov	r1, fp
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b0      	blx	r6
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d1e6      	bne.n	8005b80 <_printf_float+0x334>
 8005bb2:	e6a2      	b.n	80058fa <_printf_float+0xae>
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	463a      	mov	r2, r7
 8005bb8:	4659      	mov	r1, fp
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b0      	blx	r6
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d1ea      	bne.n	8005b98 <_printf_float+0x34c>
 8005bc2:	e69a      	b.n	80058fa <_printf_float+0xae>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	4659      	mov	r1, fp
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b0      	blx	r6
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f ae93 	beq.w	80058fa <_printf_float+0xae>
 8005bd4:	3701      	adds	r7, #1
 8005bd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	eba3 0309 	sub.w	r3, r3, r9
 8005be0:	42bb      	cmp	r3, r7
 8005be2:	dcef      	bgt.n	8005bc4 <_printf_float+0x378>
 8005be4:	e74d      	b.n	8005a82 <_printf_float+0x236>
 8005be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005be8:	2a01      	cmp	r2, #1
 8005bea:	dc01      	bgt.n	8005bf0 <_printf_float+0x3a4>
 8005bec:	07db      	lsls	r3, r3, #31
 8005bee:	d538      	bpl.n	8005c62 <_printf_float+0x416>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b0      	blx	r6
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f ae7d 	beq.w	80058fa <_printf_float+0xae>
 8005c00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c04:	4659      	mov	r1, fp
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b0      	blx	r6
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f107 0701 	add.w	r7, r7, #1
 8005c10:	f43f ae73 	beq.w	80058fa <_printf_float+0xae>
 8005c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005c20:	2300      	movs	r3, #0
 8005c22:	f7fa fec1 	bl	80009a8 <__aeabi_dcmpeq>
 8005c26:	b9c0      	cbnz	r0, 8005c5a <_printf_float+0x40e>
 8005c28:	4643      	mov	r3, r8
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b0      	blx	r6
 8005c32:	3001      	adds	r0, #1
 8005c34:	d10d      	bne.n	8005c52 <_printf_float+0x406>
 8005c36:	e660      	b.n	80058fa <_printf_float+0xae>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4642      	mov	r2, r8
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b0      	blx	r6
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f ae59 	beq.w	80058fa <_printf_float+0xae>
 8005c48:	3701      	adds	r7, #1
 8005c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	42bb      	cmp	r3, r7
 8005c50:	dcf2      	bgt.n	8005c38 <_printf_float+0x3ec>
 8005c52:	464b      	mov	r3, r9
 8005c54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c58:	e6e4      	b.n	8005a24 <_printf_float+0x1d8>
 8005c5a:	2700      	movs	r7, #0
 8005c5c:	f104 081a 	add.w	r8, r4, #26
 8005c60:	e7f3      	b.n	8005c4a <_printf_float+0x3fe>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e7e1      	b.n	8005c2a <_printf_float+0x3de>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4642      	mov	r2, r8
 8005c6a:	4659      	mov	r1, fp
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b0      	blx	r6
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae42 	beq.w	80058fa <_printf_float+0xae>
 8005c76:	3701      	adds	r7, #1
 8005c78:	68e3      	ldr	r3, [r4, #12]
 8005c7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	42bb      	cmp	r3, r7
 8005c80:	dcf1      	bgt.n	8005c66 <_printf_float+0x41a>
 8005c82:	e702      	b.n	8005a8a <_printf_float+0x23e>
 8005c84:	2700      	movs	r7, #0
 8005c86:	f104 0819 	add.w	r8, r4, #25
 8005c8a:	e7f5      	b.n	8005c78 <_printf_float+0x42c>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f43f ae94 	beq.w	80059ba <_printf_float+0x16e>
 8005c92:	f04f 0c00 	mov.w	ip, #0
 8005c96:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005c9a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005c9e:	6022      	str	r2, [r4, #0]
 8005ca0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005ca4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	463a      	mov	r2, r7
 8005cac:	464b      	mov	r3, r9
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7ff fd3a 	bl	8005728 <__cvt>
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	e64f      	b.n	8005958 <_printf_float+0x10c>

08005cb8 <_printf_common>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	4691      	mov	r9, r2
 8005cbe:	461f      	mov	r7, r3
 8005cc0:	688a      	ldr	r2, [r1, #8]
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	bfb8      	it	lt
 8005cca:	4613      	movlt	r3, r2
 8005ccc:	f8c9 3000 	str.w	r3, [r9]
 8005cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cda:	b112      	cbz	r2, 8005ce2 <_printf_common+0x2a>
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f8c9 3000 	str.w	r3, [r9]
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	0699      	lsls	r1, r3, #26
 8005ce6:	bf42      	ittt	mi
 8005ce8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cec:	3302      	addmi	r3, #2
 8005cee:	f8c9 3000 	strmi.w	r3, [r9]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d107      	bne.n	8005d0a <_printf_common+0x52>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	f8d9 2000 	ldr.w	r2, [r9]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	42ab      	cmp	r3, r5
 8005d08:	dc29      	bgt.n	8005d5e <_printf_common+0xa6>
 8005d0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	3300      	adds	r3, #0
 8005d12:	bf18      	it	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	0692      	lsls	r2, r2, #26
 8005d18:	d42e      	bmi.n	8005d78 <_printf_common+0xc0>
 8005d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4630      	mov	r0, r6
 8005d22:	47c0      	blx	r8
 8005d24:	3001      	adds	r0, #1
 8005d26:	d021      	beq.n	8005d6c <_printf_common+0xb4>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	68e5      	ldr	r5, [r4, #12]
 8005d2c:	f003 0306 	and.w	r3, r3, #6
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	bf18      	it	ne
 8005d34:	2500      	movne	r5, #0
 8005d36:	f8d9 2000 	ldr.w	r2, [r9]
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	bf08      	it	eq
 8005d40:	1aad      	subeq	r5, r5, r2
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	6922      	ldr	r2, [r4, #16]
 8005d46:	bf08      	it	eq
 8005d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	bfc4      	itt	gt
 8005d50:	1a9b      	subgt	r3, r3, r2
 8005d52:	18ed      	addgt	r5, r5, r3
 8005d54:	341a      	adds	r4, #26
 8005d56:	454d      	cmp	r5, r9
 8005d58:	d11a      	bne.n	8005d90 <_printf_common+0xd8>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e008      	b.n	8005d70 <_printf_common+0xb8>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4652      	mov	r2, sl
 8005d62:	4639      	mov	r1, r7
 8005d64:	4630      	mov	r0, r6
 8005d66:	47c0      	blx	r8
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d103      	bne.n	8005d74 <_printf_common+0xbc>
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d74:	3501      	adds	r5, #1
 8005d76:	e7c2      	b.n	8005cfe <_printf_common+0x46>
 8005d78:	2030      	movs	r0, #48	; 0x30
 8005d7a:	18e1      	adds	r1, r4, r3
 8005d7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d86:	4422      	add	r2, r4
 8005d88:	3302      	adds	r3, #2
 8005d8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d8e:	e7c4      	b.n	8005d1a <_printf_common+0x62>
 8005d90:	2301      	movs	r3, #1
 8005d92:	4622      	mov	r2, r4
 8005d94:	4639      	mov	r1, r7
 8005d96:	4630      	mov	r0, r6
 8005d98:	47c0      	blx	r8
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d0e6      	beq.n	8005d6c <_printf_common+0xb4>
 8005d9e:	f109 0901 	add.w	r9, r9, #1
 8005da2:	e7d8      	b.n	8005d56 <_printf_common+0x9e>

08005da4 <_printf_i>:
 8005da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005da8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005dac:	460c      	mov	r4, r1
 8005dae:	7e09      	ldrb	r1, [r1, #24]
 8005db0:	b085      	sub	sp, #20
 8005db2:	296e      	cmp	r1, #110	; 0x6e
 8005db4:	4617      	mov	r7, r2
 8005db6:	4606      	mov	r6, r0
 8005db8:	4698      	mov	r8, r3
 8005dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dbc:	f000 80b3 	beq.w	8005f26 <_printf_i+0x182>
 8005dc0:	d822      	bhi.n	8005e08 <_printf_i+0x64>
 8005dc2:	2963      	cmp	r1, #99	; 0x63
 8005dc4:	d036      	beq.n	8005e34 <_printf_i+0x90>
 8005dc6:	d80a      	bhi.n	8005dde <_printf_i+0x3a>
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	f000 80b9 	beq.w	8005f40 <_printf_i+0x19c>
 8005dce:	2958      	cmp	r1, #88	; 0x58
 8005dd0:	f000 8083 	beq.w	8005eda <_printf_i+0x136>
 8005dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ddc:	e032      	b.n	8005e44 <_printf_i+0xa0>
 8005dde:	2964      	cmp	r1, #100	; 0x64
 8005de0:	d001      	beq.n	8005de6 <_printf_i+0x42>
 8005de2:	2969      	cmp	r1, #105	; 0x69
 8005de4:	d1f6      	bne.n	8005dd4 <_printf_i+0x30>
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	6813      	ldr	r3, [r2, #0]
 8005dea:	0605      	lsls	r5, r0, #24
 8005dec:	f103 0104 	add.w	r1, r3, #4
 8005df0:	d52a      	bpl.n	8005e48 <_printf_i+0xa4>
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da03      	bge.n	8005e02 <_printf_i+0x5e>
 8005dfa:	222d      	movs	r2, #45	; 0x2d
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e02:	486f      	ldr	r0, [pc, #444]	; (8005fc0 <_printf_i+0x21c>)
 8005e04:	220a      	movs	r2, #10
 8005e06:	e039      	b.n	8005e7c <_printf_i+0xd8>
 8005e08:	2973      	cmp	r1, #115	; 0x73
 8005e0a:	f000 809d 	beq.w	8005f48 <_printf_i+0x1a4>
 8005e0e:	d808      	bhi.n	8005e22 <_printf_i+0x7e>
 8005e10:	296f      	cmp	r1, #111	; 0x6f
 8005e12:	d020      	beq.n	8005e56 <_printf_i+0xb2>
 8005e14:	2970      	cmp	r1, #112	; 0x70
 8005e16:	d1dd      	bne.n	8005dd4 <_printf_i+0x30>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	f043 0320 	orr.w	r3, r3, #32
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	e003      	b.n	8005e2a <_printf_i+0x86>
 8005e22:	2975      	cmp	r1, #117	; 0x75
 8005e24:	d017      	beq.n	8005e56 <_printf_i+0xb2>
 8005e26:	2978      	cmp	r1, #120	; 0x78
 8005e28:	d1d4      	bne.n	8005dd4 <_printf_i+0x30>
 8005e2a:	2378      	movs	r3, #120	; 0x78
 8005e2c:	4865      	ldr	r0, [pc, #404]	; (8005fc4 <_printf_i+0x220>)
 8005e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e32:	e055      	b.n	8005ee0 <_printf_i+0x13c>
 8005e34:	6813      	ldr	r3, [r2, #0]
 8005e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e3a:	1d19      	adds	r1, r3, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6011      	str	r1, [r2, #0]
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e08c      	b.n	8005f62 <_printf_i+0x1be>
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e4e:	6011      	str	r1, [r2, #0]
 8005e50:	bf18      	it	ne
 8005e52:	b21b      	sxthne	r3, r3
 8005e54:	e7cf      	b.n	8005df6 <_printf_i+0x52>
 8005e56:	6813      	ldr	r3, [r2, #0]
 8005e58:	6825      	ldr	r5, [r4, #0]
 8005e5a:	1d18      	adds	r0, r3, #4
 8005e5c:	6010      	str	r0, [r2, #0]
 8005e5e:	0628      	lsls	r0, r5, #24
 8005e60:	d501      	bpl.n	8005e66 <_printf_i+0xc2>
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <_printf_i+0xc8>
 8005e66:	0668      	lsls	r0, r5, #25
 8005e68:	d5fb      	bpl.n	8005e62 <_printf_i+0xbe>
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	296f      	cmp	r1, #111	; 0x6f
 8005e6e:	bf14      	ite	ne
 8005e70:	220a      	movne	r2, #10
 8005e72:	2208      	moveq	r2, #8
 8005e74:	4852      	ldr	r0, [pc, #328]	; (8005fc0 <_printf_i+0x21c>)
 8005e76:	2100      	movs	r1, #0
 8005e78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e7c:	6865      	ldr	r5, [r4, #4]
 8005e7e:	2d00      	cmp	r5, #0
 8005e80:	60a5      	str	r5, [r4, #8]
 8005e82:	f2c0 8095 	blt.w	8005fb0 <_printf_i+0x20c>
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	f021 0104 	bic.w	r1, r1, #4
 8005e8c:	6021      	str	r1, [r4, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d13d      	bne.n	8005f0e <_printf_i+0x16a>
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	f040 808e 	bne.w	8005fb4 <_printf_i+0x210>
 8005e98:	4665      	mov	r5, ip
 8005e9a:	2a08      	cmp	r2, #8
 8005e9c:	d10b      	bne.n	8005eb6 <_printf_i+0x112>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	07db      	lsls	r3, r3, #31
 8005ea2:	d508      	bpl.n	8005eb6 <_printf_i+0x112>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	6862      	ldr	r2, [r4, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bfde      	ittt	le
 8005eac:	2330      	movle	r3, #48	; 0x30
 8005eae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eb2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005eb6:	ebac 0305 	sub.w	r3, ip, r5
 8005eba:	6123      	str	r3, [r4, #16]
 8005ebc:	f8cd 8000 	str.w	r8, [sp]
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	aa03      	add	r2, sp, #12
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff fef6 	bl	8005cb8 <_printf_common>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d14d      	bne.n	8005f6c <_printf_i+0x1c8>
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed4:	b005      	add	sp, #20
 8005ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eda:	4839      	ldr	r0, [pc, #228]	; (8005fc0 <_printf_i+0x21c>)
 8005edc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ee0:	6813      	ldr	r3, [r2, #0]
 8005ee2:	6821      	ldr	r1, [r4, #0]
 8005ee4:	1d1d      	adds	r5, r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6015      	str	r5, [r2, #0]
 8005eea:	060a      	lsls	r2, r1, #24
 8005eec:	d50b      	bpl.n	8005f06 <_printf_i+0x162>
 8005eee:	07ca      	lsls	r2, r1, #31
 8005ef0:	bf44      	itt	mi
 8005ef2:	f041 0120 	orrmi.w	r1, r1, #32
 8005ef6:	6021      	strmi	r1, [r4, #0]
 8005ef8:	b91b      	cbnz	r3, 8005f02 <_printf_i+0x15e>
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	f022 0220 	bic.w	r2, r2, #32
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	2210      	movs	r2, #16
 8005f04:	e7b7      	b.n	8005e76 <_printf_i+0xd2>
 8005f06:	064d      	lsls	r5, r1, #25
 8005f08:	bf48      	it	mi
 8005f0a:	b29b      	uxthmi	r3, r3
 8005f0c:	e7ef      	b.n	8005eee <_printf_i+0x14a>
 8005f0e:	4665      	mov	r5, ip
 8005f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f14:	fb02 3311 	mls	r3, r2, r1, r3
 8005f18:	5cc3      	ldrb	r3, [r0, r3]
 8005f1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f1e:	460b      	mov	r3, r1
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d1f5      	bne.n	8005f10 <_printf_i+0x16c>
 8005f24:	e7b9      	b.n	8005e9a <_printf_i+0xf6>
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1d18      	adds	r0, r3, #4
 8005f2c:	6961      	ldr	r1, [r4, #20]
 8005f2e:	6010      	str	r0, [r2, #0]
 8005f30:	0628      	lsls	r0, r5, #24
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	d501      	bpl.n	8005f3a <_printf_i+0x196>
 8005f36:	6019      	str	r1, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <_printf_i+0x19c>
 8005f3a:	066a      	lsls	r2, r5, #25
 8005f3c:	d5fb      	bpl.n	8005f36 <_printf_i+0x192>
 8005f3e:	8019      	strh	r1, [r3, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	4665      	mov	r5, ip
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	e7b9      	b.n	8005ebc <_printf_i+0x118>
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	1d19      	adds	r1, r3, #4
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	681d      	ldr	r5, [r3, #0]
 8005f50:	6862      	ldr	r2, [r4, #4]
 8005f52:	2100      	movs	r1, #0
 8005f54:	4628      	mov	r0, r5
 8005f56:	f002 fb1b 	bl	8008590 <memchr>
 8005f5a:	b108      	cbz	r0, 8005f60 <_printf_i+0x1bc>
 8005f5c:	1b40      	subs	r0, r0, r5
 8005f5e:	6060      	str	r0, [r4, #4]
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	2300      	movs	r3, #0
 8005f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f6a:	e7a7      	b.n	8005ebc <_printf_i+0x118>
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	462a      	mov	r2, r5
 8005f70:	4639      	mov	r1, r7
 8005f72:	4630      	mov	r0, r6
 8005f74:	47c0      	blx	r8
 8005f76:	3001      	adds	r0, #1
 8005f78:	d0aa      	beq.n	8005ed0 <_printf_i+0x12c>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	079b      	lsls	r3, r3, #30
 8005f7e:	d413      	bmi.n	8005fa8 <_printf_i+0x204>
 8005f80:	68e0      	ldr	r0, [r4, #12]
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	4298      	cmp	r0, r3
 8005f86:	bfb8      	it	lt
 8005f88:	4618      	movlt	r0, r3
 8005f8a:	e7a3      	b.n	8005ed4 <_printf_i+0x130>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	464a      	mov	r2, r9
 8005f90:	4639      	mov	r1, r7
 8005f92:	4630      	mov	r0, r6
 8005f94:	47c0      	blx	r8
 8005f96:	3001      	adds	r0, #1
 8005f98:	d09a      	beq.n	8005ed0 <_printf_i+0x12c>
 8005f9a:	3501      	adds	r5, #1
 8005f9c:	68e3      	ldr	r3, [r4, #12]
 8005f9e:	9a03      	ldr	r2, [sp, #12]
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	42ab      	cmp	r3, r5
 8005fa4:	dcf2      	bgt.n	8005f8c <_printf_i+0x1e8>
 8005fa6:	e7eb      	b.n	8005f80 <_printf_i+0x1dc>
 8005fa8:	2500      	movs	r5, #0
 8005faa:	f104 0919 	add.w	r9, r4, #25
 8005fae:	e7f5      	b.n	8005f9c <_printf_i+0x1f8>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ac      	bne.n	8005f0e <_printf_i+0x16a>
 8005fb4:	7803      	ldrb	r3, [r0, #0]
 8005fb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fbe:	e76c      	b.n	8005e9a <_printf_i+0xf6>
 8005fc0:	08009542 	.word	0x08009542
 8005fc4:	08009553 	.word	0x08009553

08005fc8 <iprintf>:
 8005fc8:	b40f      	push	{r0, r1, r2, r3}
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <iprintf+0x2c>)
 8005fcc:	b513      	push	{r0, r1, r4, lr}
 8005fce:	681c      	ldr	r4, [r3, #0]
 8005fd0:	b124      	cbz	r4, 8005fdc <iprintf+0x14>
 8005fd2:	69a3      	ldr	r3, [r4, #24]
 8005fd4:	b913      	cbnz	r3, 8005fdc <iprintf+0x14>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f001 fe9a 	bl	8007d10 <__sinit>
 8005fdc:	ab05      	add	r3, sp, #20
 8005fde:	9a04      	ldr	r2, [sp, #16]
 8005fe0:	68a1      	ldr	r1, [r4, #8]
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	f002 ffc1 	bl	8008f6c <_vfiprintf_r>
 8005fea:	b002      	add	sp, #8
 8005fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff0:	b004      	add	sp, #16
 8005ff2:	4770      	bx	lr
 8005ff4:	20000048 	.word	0x20000048

08005ff8 <_puts_r>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	b118      	cbz	r0, 8006008 <_puts_r+0x10>
 8006000:	6983      	ldr	r3, [r0, #24]
 8006002:	b90b      	cbnz	r3, 8006008 <_puts_r+0x10>
 8006004:	f001 fe84 	bl	8007d10 <__sinit>
 8006008:	69ab      	ldr	r3, [r5, #24]
 800600a:	68ac      	ldr	r4, [r5, #8]
 800600c:	b913      	cbnz	r3, 8006014 <_puts_r+0x1c>
 800600e:	4628      	mov	r0, r5
 8006010:	f001 fe7e 	bl	8007d10 <__sinit>
 8006014:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <_puts_r+0xac>)
 8006016:	429c      	cmp	r4, r3
 8006018:	d117      	bne.n	800604a <_puts_r+0x52>
 800601a:	686c      	ldr	r4, [r5, #4]
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	071b      	lsls	r3, r3, #28
 8006020:	d51d      	bpl.n	800605e <_puts_r+0x66>
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	b1db      	cbz	r3, 800605e <_puts_r+0x66>
 8006026:	3e01      	subs	r6, #1
 8006028:	68a3      	ldr	r3, [r4, #8]
 800602a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800602e:	3b01      	subs	r3, #1
 8006030:	60a3      	str	r3, [r4, #8]
 8006032:	b9e9      	cbnz	r1, 8006070 <_puts_r+0x78>
 8006034:	2b00      	cmp	r3, #0
 8006036:	da2e      	bge.n	8006096 <_puts_r+0x9e>
 8006038:	4622      	mov	r2, r4
 800603a:	210a      	movs	r1, #10
 800603c:	4628      	mov	r0, r5
 800603e:	f000 fe75 	bl	8006d2c <__swbuf_r>
 8006042:	3001      	adds	r0, #1
 8006044:	d011      	beq.n	800606a <_puts_r+0x72>
 8006046:	200a      	movs	r0, #10
 8006048:	e011      	b.n	800606e <_puts_r+0x76>
 800604a:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <_puts_r+0xb0>)
 800604c:	429c      	cmp	r4, r3
 800604e:	d101      	bne.n	8006054 <_puts_r+0x5c>
 8006050:	68ac      	ldr	r4, [r5, #8]
 8006052:	e7e3      	b.n	800601c <_puts_r+0x24>
 8006054:	4b15      	ldr	r3, [pc, #84]	; (80060ac <_puts_r+0xb4>)
 8006056:	429c      	cmp	r4, r3
 8006058:	bf08      	it	eq
 800605a:	68ec      	ldreq	r4, [r5, #12]
 800605c:	e7de      	b.n	800601c <_puts_r+0x24>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 feb5 	bl	8006dd0 <__swsetup_r>
 8006066:	2800      	cmp	r0, #0
 8006068:	d0dd      	beq.n	8006026 <_puts_r+0x2e>
 800606a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	2b00      	cmp	r3, #0
 8006072:	da04      	bge.n	800607e <_puts_r+0x86>
 8006074:	69a2      	ldr	r2, [r4, #24]
 8006076:	429a      	cmp	r2, r3
 8006078:	dc06      	bgt.n	8006088 <_puts_r+0x90>
 800607a:	290a      	cmp	r1, #10
 800607c:	d004      	beq.n	8006088 <_puts_r+0x90>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	6022      	str	r2, [r4, #0]
 8006084:	7019      	strb	r1, [r3, #0]
 8006086:	e7cf      	b.n	8006028 <_puts_r+0x30>
 8006088:	4622      	mov	r2, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 fe4e 	bl	8006d2c <__swbuf_r>
 8006090:	3001      	adds	r0, #1
 8006092:	d1c9      	bne.n	8006028 <_puts_r+0x30>
 8006094:	e7e9      	b.n	800606a <_puts_r+0x72>
 8006096:	200a      	movs	r0, #10
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	7018      	strb	r0, [r3, #0]
 80060a0:	e7e5      	b.n	800606e <_puts_r+0x76>
 80060a2:	bf00      	nop
 80060a4:	080095e8 	.word	0x080095e8
 80060a8:	08009608 	.word	0x08009608
 80060ac:	080095c8 	.word	0x080095c8

080060b0 <puts>:
 80060b0:	4b02      	ldr	r3, [pc, #8]	; (80060bc <puts+0xc>)
 80060b2:	4601      	mov	r1, r0
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f7ff bf9f 	b.w	8005ff8 <_puts_r>
 80060ba:	bf00      	nop
 80060bc:	20000048 	.word	0x20000048

080060c0 <sulp>:
 80060c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c4:	460f      	mov	r7, r1
 80060c6:	4690      	mov	r8, r2
 80060c8:	f002 fd46 	bl	8008b58 <__ulp>
 80060cc:	4604      	mov	r4, r0
 80060ce:	460d      	mov	r5, r1
 80060d0:	f1b8 0f00 	cmp.w	r8, #0
 80060d4:	d011      	beq.n	80060fa <sulp+0x3a>
 80060d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80060da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd0b      	ble.n	80060fa <sulp+0x3a>
 80060e2:	2400      	movs	r4, #0
 80060e4:	051b      	lsls	r3, r3, #20
 80060e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80060ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80060ee:	4622      	mov	r2, r4
 80060f0:	462b      	mov	r3, r5
 80060f2:	f7fa f9f1 	bl	80004d8 <__aeabi_dmul>
 80060f6:	4604      	mov	r4, r0
 80060f8:	460d      	mov	r5, r1
 80060fa:	4620      	mov	r0, r4
 80060fc:	4629      	mov	r1, r5
 80060fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006102:	0000      	movs	r0, r0
 8006104:	0000      	movs	r0, r0
	...

08006108 <_strtod_l>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	461f      	mov	r7, r3
 800610e:	2300      	movs	r3, #0
 8006110:	b0a1      	sub	sp, #132	; 0x84
 8006112:	4683      	mov	fp, r0
 8006114:	4638      	mov	r0, r7
 8006116:	460e      	mov	r6, r1
 8006118:	9217      	str	r2, [sp, #92]	; 0x5c
 800611a:	931c      	str	r3, [sp, #112]	; 0x70
 800611c:	f002 f9aa 	bl	8008474 <__localeconv_l>
 8006120:	4680      	mov	r8, r0
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	f7fa f814 	bl	8000150 <strlen>
 8006128:	f04f 0900 	mov.w	r9, #0
 800612c:	4604      	mov	r4, r0
 800612e:	f04f 0a00 	mov.w	sl, #0
 8006132:	961b      	str	r6, [sp, #108]	; 0x6c
 8006134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006136:	781a      	ldrb	r2, [r3, #0]
 8006138:	2a0d      	cmp	r2, #13
 800613a:	d832      	bhi.n	80061a2 <_strtod_l+0x9a>
 800613c:	2a09      	cmp	r2, #9
 800613e:	d236      	bcs.n	80061ae <_strtod_l+0xa6>
 8006140:	2a00      	cmp	r2, #0
 8006142:	d03e      	beq.n	80061c2 <_strtod_l+0xba>
 8006144:	2300      	movs	r3, #0
 8006146:	930d      	str	r3, [sp, #52]	; 0x34
 8006148:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800614a:	782b      	ldrb	r3, [r5, #0]
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	f040 80ac 	bne.w	80062aa <_strtod_l+0x1a2>
 8006152:	786b      	ldrb	r3, [r5, #1]
 8006154:	2b58      	cmp	r3, #88	; 0x58
 8006156:	d001      	beq.n	800615c <_strtod_l+0x54>
 8006158:	2b78      	cmp	r3, #120	; 0x78
 800615a:	d167      	bne.n	800622c <_strtod_l+0x124>
 800615c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800615e:	9702      	str	r7, [sp, #8]
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	ab1c      	add	r3, sp, #112	; 0x70
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	4a89      	ldr	r2, [pc, #548]	; (800638c <_strtod_l+0x284>)
 8006168:	ab1d      	add	r3, sp, #116	; 0x74
 800616a:	a91b      	add	r1, sp, #108	; 0x6c
 800616c:	4658      	mov	r0, fp
 800616e:	f001 fea9 	bl	8007ec4 <__gethex>
 8006172:	f010 0407 	ands.w	r4, r0, #7
 8006176:	4606      	mov	r6, r0
 8006178:	d005      	beq.n	8006186 <_strtod_l+0x7e>
 800617a:	2c06      	cmp	r4, #6
 800617c:	d12b      	bne.n	80061d6 <_strtod_l+0xce>
 800617e:	2300      	movs	r3, #0
 8006180:	3501      	adds	r5, #1
 8006182:	951b      	str	r5, [sp, #108]	; 0x6c
 8006184:	930d      	str	r3, [sp, #52]	; 0x34
 8006186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 85a6 	bne.w	8006cda <_strtod_l+0xbd2>
 800618e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006190:	b1e3      	cbz	r3, 80061cc <_strtod_l+0xc4>
 8006192:	464a      	mov	r2, r9
 8006194:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	b021      	add	sp, #132	; 0x84
 800619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a2:	2a2b      	cmp	r2, #43	; 0x2b
 80061a4:	d015      	beq.n	80061d2 <_strtod_l+0xca>
 80061a6:	2a2d      	cmp	r2, #45	; 0x2d
 80061a8:	d004      	beq.n	80061b4 <_strtod_l+0xac>
 80061aa:	2a20      	cmp	r2, #32
 80061ac:	d1ca      	bne.n	8006144 <_strtod_l+0x3c>
 80061ae:	3301      	adds	r3, #1
 80061b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80061b2:	e7bf      	b.n	8006134 <_strtod_l+0x2c>
 80061b4:	2201      	movs	r2, #1
 80061b6:	920d      	str	r2, [sp, #52]	; 0x34
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1c2      	bne.n	8006148 <_strtod_l+0x40>
 80061c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 8585 	bne.w	8006cd6 <_strtod_l+0xbce>
 80061cc:	464a      	mov	r2, r9
 80061ce:	4653      	mov	r3, sl
 80061d0:	e7e2      	b.n	8006198 <_strtod_l+0x90>
 80061d2:	2200      	movs	r2, #0
 80061d4:	e7ef      	b.n	80061b6 <_strtod_l+0xae>
 80061d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80061d8:	b13a      	cbz	r2, 80061ea <_strtod_l+0xe2>
 80061da:	2135      	movs	r1, #53	; 0x35
 80061dc:	a81e      	add	r0, sp, #120	; 0x78
 80061de:	f002 fdae 	bl	8008d3e <__copybits>
 80061e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061e4:	4658      	mov	r0, fp
 80061e6:	f002 fa20 	bl	800862a <_Bfree>
 80061ea:	3c01      	subs	r4, #1
 80061ec:	2c04      	cmp	r4, #4
 80061ee:	d806      	bhi.n	80061fe <_strtod_l+0xf6>
 80061f0:	e8df f004 	tbb	[pc, r4]
 80061f4:	1714030a 	.word	0x1714030a
 80061f8:	0a          	.byte	0x0a
 80061f9:	00          	.byte	0x00
 80061fa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80061fe:	0731      	lsls	r1, r6, #28
 8006200:	d5c1      	bpl.n	8006186 <_strtod_l+0x7e>
 8006202:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006206:	e7be      	b.n	8006186 <_strtod_l+0x7e>
 8006208:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800620a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800620e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006212:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006216:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800621a:	e7f0      	b.n	80061fe <_strtod_l+0xf6>
 800621c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006390 <_strtod_l+0x288>
 8006220:	e7ed      	b.n	80061fe <_strtod_l+0xf6>
 8006222:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006226:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800622a:	e7e8      	b.n	80061fe <_strtod_l+0xf6>
 800622c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	921b      	str	r2, [sp, #108]	; 0x6c
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b30      	cmp	r3, #48	; 0x30
 8006236:	d0f9      	beq.n	800622c <_strtod_l+0x124>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0a4      	beq.n	8006186 <_strtod_l+0x7e>
 800623c:	2301      	movs	r3, #1
 800623e:	2500      	movs	r5, #0
 8006240:	220a      	movs	r2, #10
 8006242:	9307      	str	r3, [sp, #28]
 8006244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006246:	9506      	str	r5, [sp, #24]
 8006248:	9308      	str	r3, [sp, #32]
 800624a:	9504      	str	r5, [sp, #16]
 800624c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800624e:	7807      	ldrb	r7, [r0, #0]
 8006250:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006254:	b2d9      	uxtb	r1, r3
 8006256:	2909      	cmp	r1, #9
 8006258:	d929      	bls.n	80062ae <_strtod_l+0x1a6>
 800625a:	4622      	mov	r2, r4
 800625c:	f8d8 1000 	ldr.w	r1, [r8]
 8006260:	f002 ffed 	bl	800923e <strncmp>
 8006264:	2800      	cmp	r0, #0
 8006266:	d031      	beq.n	80062cc <_strtod_l+0x1c4>
 8006268:	2000      	movs	r0, #0
 800626a:	463b      	mov	r3, r7
 800626c:	4602      	mov	r2, r0
 800626e:	9c04      	ldr	r4, [sp, #16]
 8006270:	9005      	str	r0, [sp, #20]
 8006272:	2b65      	cmp	r3, #101	; 0x65
 8006274:	d001      	beq.n	800627a <_strtod_l+0x172>
 8006276:	2b45      	cmp	r3, #69	; 0x45
 8006278:	d114      	bne.n	80062a4 <_strtod_l+0x19c>
 800627a:	b924      	cbnz	r4, 8006286 <_strtod_l+0x17e>
 800627c:	b910      	cbnz	r0, 8006284 <_strtod_l+0x17c>
 800627e:	9b07      	ldr	r3, [sp, #28]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d09e      	beq.n	80061c2 <_strtod_l+0xba>
 8006284:	2400      	movs	r4, #0
 8006286:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006288:	1c73      	adds	r3, r6, #1
 800628a:	931b      	str	r3, [sp, #108]	; 0x6c
 800628c:	7873      	ldrb	r3, [r6, #1]
 800628e:	2b2b      	cmp	r3, #43	; 0x2b
 8006290:	d078      	beq.n	8006384 <_strtod_l+0x27c>
 8006292:	2b2d      	cmp	r3, #45	; 0x2d
 8006294:	d070      	beq.n	8006378 <_strtod_l+0x270>
 8006296:	f04f 0c00 	mov.w	ip, #0
 800629a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800629e:	2f09      	cmp	r7, #9
 80062a0:	d97c      	bls.n	800639c <_strtod_l+0x294>
 80062a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80062a4:	f04f 0e00 	mov.w	lr, #0
 80062a8:	e09a      	b.n	80063e0 <_strtod_l+0x2d8>
 80062aa:	2300      	movs	r3, #0
 80062ac:	e7c7      	b.n	800623e <_strtod_l+0x136>
 80062ae:	9904      	ldr	r1, [sp, #16]
 80062b0:	3001      	adds	r0, #1
 80062b2:	2908      	cmp	r1, #8
 80062b4:	bfd7      	itett	le
 80062b6:	9906      	ldrle	r1, [sp, #24]
 80062b8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80062bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80062c0:	9306      	strle	r3, [sp, #24]
 80062c2:	9b04      	ldr	r3, [sp, #16]
 80062c4:	901b      	str	r0, [sp, #108]	; 0x6c
 80062c6:	3301      	adds	r3, #1
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	e7bf      	b.n	800624c <_strtod_l+0x144>
 80062cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062ce:	191a      	adds	r2, r3, r4
 80062d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80062d2:	9a04      	ldr	r2, [sp, #16]
 80062d4:	5d1b      	ldrb	r3, [r3, r4]
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	d037      	beq.n	800634a <_strtod_l+0x242>
 80062da:	4602      	mov	r2, r0
 80062dc:	9c04      	ldr	r4, [sp, #16]
 80062de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80062e2:	2909      	cmp	r1, #9
 80062e4:	d913      	bls.n	800630e <_strtod_l+0x206>
 80062e6:	2101      	movs	r1, #1
 80062e8:	9105      	str	r1, [sp, #20]
 80062ea:	e7c2      	b.n	8006272 <_strtod_l+0x16a>
 80062ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062ee:	3001      	adds	r0, #1
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d0f8      	beq.n	80062ec <_strtod_l+0x1e4>
 80062fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80062fe:	2a08      	cmp	r2, #8
 8006300:	f200 84f0 	bhi.w	8006ce4 <_strtod_l+0xbdc>
 8006304:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006306:	9208      	str	r2, [sp, #32]
 8006308:	4602      	mov	r2, r0
 800630a:	2000      	movs	r0, #0
 800630c:	4604      	mov	r4, r0
 800630e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006312:	f100 0101 	add.w	r1, r0, #1
 8006316:	d012      	beq.n	800633e <_strtod_l+0x236>
 8006318:	440a      	add	r2, r1
 800631a:	270a      	movs	r7, #10
 800631c:	4621      	mov	r1, r4
 800631e:	eb00 0c04 	add.w	ip, r0, r4
 8006322:	458c      	cmp	ip, r1
 8006324:	d113      	bne.n	800634e <_strtod_l+0x246>
 8006326:	1821      	adds	r1, r4, r0
 8006328:	2908      	cmp	r1, #8
 800632a:	f104 0401 	add.w	r4, r4, #1
 800632e:	4404      	add	r4, r0
 8006330:	dc19      	bgt.n	8006366 <_strtod_l+0x25e>
 8006332:	210a      	movs	r1, #10
 8006334:	9b06      	ldr	r3, [sp, #24]
 8006336:	fb01 e303 	mla	r3, r1, r3, lr
 800633a:	9306      	str	r3, [sp, #24]
 800633c:	2100      	movs	r1, #0
 800633e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006340:	1c58      	adds	r0, r3, #1
 8006342:	901b      	str	r0, [sp, #108]	; 0x6c
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	4608      	mov	r0, r1
 8006348:	e7c9      	b.n	80062de <_strtod_l+0x1d6>
 800634a:	9804      	ldr	r0, [sp, #16]
 800634c:	e7d3      	b.n	80062f6 <_strtod_l+0x1ee>
 800634e:	2908      	cmp	r1, #8
 8006350:	f101 0101 	add.w	r1, r1, #1
 8006354:	dc03      	bgt.n	800635e <_strtod_l+0x256>
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	437b      	muls	r3, r7
 800635a:	9306      	str	r3, [sp, #24]
 800635c:	e7e1      	b.n	8006322 <_strtod_l+0x21a>
 800635e:	2910      	cmp	r1, #16
 8006360:	bfd8      	it	le
 8006362:	437d      	mulle	r5, r7
 8006364:	e7dd      	b.n	8006322 <_strtod_l+0x21a>
 8006366:	2c10      	cmp	r4, #16
 8006368:	bfdc      	itt	le
 800636a:	210a      	movle	r1, #10
 800636c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006370:	e7e4      	b.n	800633c <_strtod_l+0x234>
 8006372:	2301      	movs	r3, #1
 8006374:	9305      	str	r3, [sp, #20]
 8006376:	e781      	b.n	800627c <_strtod_l+0x174>
 8006378:	f04f 0c01 	mov.w	ip, #1
 800637c:	1cb3      	adds	r3, r6, #2
 800637e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006380:	78b3      	ldrb	r3, [r6, #2]
 8006382:	e78a      	b.n	800629a <_strtod_l+0x192>
 8006384:	f04f 0c00 	mov.w	ip, #0
 8006388:	e7f8      	b.n	800637c <_strtod_l+0x274>
 800638a:	bf00      	nop
 800638c:	08009564 	.word	0x08009564
 8006390:	7ff00000 	.word	0x7ff00000
 8006394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006396:	1c5f      	adds	r7, r3, #1
 8006398:	971b      	str	r7, [sp, #108]	; 0x6c
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d0f9      	beq.n	8006394 <_strtod_l+0x28c>
 80063a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80063a4:	2f08      	cmp	r7, #8
 80063a6:	f63f af7d 	bhi.w	80062a4 <_strtod_l+0x19c>
 80063aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80063ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063b0:	9309      	str	r3, [sp, #36]	; 0x24
 80063b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063b4:	1c5f      	adds	r7, r3, #1
 80063b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80063be:	f1b8 0f09 	cmp.w	r8, #9
 80063c2:	d937      	bls.n	8006434 <_strtod_l+0x32c>
 80063c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063c6:	1a7f      	subs	r7, r7, r1
 80063c8:	2f08      	cmp	r7, #8
 80063ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80063ce:	dc37      	bgt.n	8006440 <_strtod_l+0x338>
 80063d0:	45be      	cmp	lr, r7
 80063d2:	bfa8      	it	ge
 80063d4:	46be      	movge	lr, r7
 80063d6:	f1bc 0f00 	cmp.w	ip, #0
 80063da:	d001      	beq.n	80063e0 <_strtod_l+0x2d8>
 80063dc:	f1ce 0e00 	rsb	lr, lr, #0
 80063e0:	2c00      	cmp	r4, #0
 80063e2:	d151      	bne.n	8006488 <_strtod_l+0x380>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f47f aece 	bne.w	8006186 <_strtod_l+0x7e>
 80063ea:	9a07      	ldr	r2, [sp, #28]
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	f47f aeca 	bne.w	8006186 <_strtod_l+0x7e>
 80063f2:	9a05      	ldr	r2, [sp, #20]
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	f47f aee4 	bne.w	80061c2 <_strtod_l+0xba>
 80063fa:	2b4e      	cmp	r3, #78	; 0x4e
 80063fc:	d027      	beq.n	800644e <_strtod_l+0x346>
 80063fe:	dc21      	bgt.n	8006444 <_strtod_l+0x33c>
 8006400:	2b49      	cmp	r3, #73	; 0x49
 8006402:	f47f aede 	bne.w	80061c2 <_strtod_l+0xba>
 8006406:	49a4      	ldr	r1, [pc, #656]	; (8006698 <_strtod_l+0x590>)
 8006408:	a81b      	add	r0, sp, #108	; 0x6c
 800640a:	f001 ff8f 	bl	800832c <__match>
 800640e:	2800      	cmp	r0, #0
 8006410:	f43f aed7 	beq.w	80061c2 <_strtod_l+0xba>
 8006414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006416:	49a1      	ldr	r1, [pc, #644]	; (800669c <_strtod_l+0x594>)
 8006418:	3b01      	subs	r3, #1
 800641a:	a81b      	add	r0, sp, #108	; 0x6c
 800641c:	931b      	str	r3, [sp, #108]	; 0x6c
 800641e:	f001 ff85 	bl	800832c <__match>
 8006422:	b910      	cbnz	r0, 800642a <_strtod_l+0x322>
 8006424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006426:	3301      	adds	r3, #1
 8006428:	931b      	str	r3, [sp, #108]	; 0x6c
 800642a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80066b0 <_strtod_l+0x5a8>
 800642e:	f04f 0900 	mov.w	r9, #0
 8006432:	e6a8      	b.n	8006186 <_strtod_l+0x7e>
 8006434:	210a      	movs	r1, #10
 8006436:	fb01 3e0e 	mla	lr, r1, lr, r3
 800643a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800643e:	e7b8      	b.n	80063b2 <_strtod_l+0x2aa>
 8006440:	46be      	mov	lr, r7
 8006442:	e7c8      	b.n	80063d6 <_strtod_l+0x2ce>
 8006444:	2b69      	cmp	r3, #105	; 0x69
 8006446:	d0de      	beq.n	8006406 <_strtod_l+0x2fe>
 8006448:	2b6e      	cmp	r3, #110	; 0x6e
 800644a:	f47f aeba 	bne.w	80061c2 <_strtod_l+0xba>
 800644e:	4994      	ldr	r1, [pc, #592]	; (80066a0 <_strtod_l+0x598>)
 8006450:	a81b      	add	r0, sp, #108	; 0x6c
 8006452:	f001 ff6b 	bl	800832c <__match>
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f aeb3 	beq.w	80061c2 <_strtod_l+0xba>
 800645c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b28      	cmp	r3, #40	; 0x28
 8006462:	d10e      	bne.n	8006482 <_strtod_l+0x37a>
 8006464:	aa1e      	add	r2, sp, #120	; 0x78
 8006466:	498f      	ldr	r1, [pc, #572]	; (80066a4 <_strtod_l+0x59c>)
 8006468:	a81b      	add	r0, sp, #108	; 0x6c
 800646a:	f001 ff73 	bl	8008354 <__hexnan>
 800646e:	2805      	cmp	r0, #5
 8006470:	d107      	bne.n	8006482 <_strtod_l+0x37a>
 8006472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006474:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006478:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800647c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006480:	e681      	b.n	8006186 <_strtod_l+0x7e>
 8006482:	f8df a234 	ldr.w	sl, [pc, #564]	; 80066b8 <_strtod_l+0x5b0>
 8006486:	e7d2      	b.n	800642e <_strtod_l+0x326>
 8006488:	ebae 0302 	sub.w	r3, lr, r2
 800648c:	9307      	str	r3, [sp, #28]
 800648e:	9b04      	ldr	r3, [sp, #16]
 8006490:	9806      	ldr	r0, [sp, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf08      	it	eq
 8006496:	4623      	moveq	r3, r4
 8006498:	2c10      	cmp	r4, #16
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	46a0      	mov	r8, r4
 800649e:	bfa8      	it	ge
 80064a0:	f04f 0810 	movge.w	r8, #16
 80064a4:	f7f9 ff9e 	bl	80003e4 <__aeabi_ui2d>
 80064a8:	2c09      	cmp	r4, #9
 80064aa:	4681      	mov	r9, r0
 80064ac:	468a      	mov	sl, r1
 80064ae:	dc13      	bgt.n	80064d8 <_strtod_l+0x3d0>
 80064b0:	9b07      	ldr	r3, [sp, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f43f ae67 	beq.w	8006186 <_strtod_l+0x7e>
 80064b8:	9b07      	ldr	r3, [sp, #28]
 80064ba:	dd7e      	ble.n	80065ba <_strtod_l+0x4b2>
 80064bc:	2b16      	cmp	r3, #22
 80064be:	dc65      	bgt.n	800658c <_strtod_l+0x484>
 80064c0:	4a79      	ldr	r2, [pc, #484]	; (80066a8 <_strtod_l+0x5a0>)
 80064c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80064c6:	464a      	mov	r2, r9
 80064c8:	e9de 0100 	ldrd	r0, r1, [lr]
 80064cc:	4653      	mov	r3, sl
 80064ce:	f7fa f803 	bl	80004d8 <__aeabi_dmul>
 80064d2:	4681      	mov	r9, r0
 80064d4:	468a      	mov	sl, r1
 80064d6:	e656      	b.n	8006186 <_strtod_l+0x7e>
 80064d8:	4b73      	ldr	r3, [pc, #460]	; (80066a8 <_strtod_l+0x5a0>)
 80064da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80064de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80064e2:	f7f9 fff9 	bl	80004d8 <__aeabi_dmul>
 80064e6:	4606      	mov	r6, r0
 80064e8:	4628      	mov	r0, r5
 80064ea:	460f      	mov	r7, r1
 80064ec:	f7f9 ff7a 	bl	80003e4 <__aeabi_ui2d>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f7f9 fe38 	bl	800016c <__adddf3>
 80064fc:	2c0f      	cmp	r4, #15
 80064fe:	4681      	mov	r9, r0
 8006500:	468a      	mov	sl, r1
 8006502:	ddd5      	ble.n	80064b0 <_strtod_l+0x3a8>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	eba4 0808 	sub.w	r8, r4, r8
 800650a:	4498      	add	r8, r3
 800650c:	f1b8 0f00 	cmp.w	r8, #0
 8006510:	f340 809a 	ble.w	8006648 <_strtod_l+0x540>
 8006514:	f018 030f 	ands.w	r3, r8, #15
 8006518:	d00a      	beq.n	8006530 <_strtod_l+0x428>
 800651a:	4963      	ldr	r1, [pc, #396]	; (80066a8 <_strtod_l+0x5a0>)
 800651c:	464a      	mov	r2, r9
 800651e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006526:	4653      	mov	r3, sl
 8006528:	f7f9 ffd6 	bl	80004d8 <__aeabi_dmul>
 800652c:	4681      	mov	r9, r0
 800652e:	468a      	mov	sl, r1
 8006530:	f038 080f 	bics.w	r8, r8, #15
 8006534:	d077      	beq.n	8006626 <_strtod_l+0x51e>
 8006536:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800653a:	dd4b      	ble.n	80065d4 <_strtod_l+0x4cc>
 800653c:	f04f 0800 	mov.w	r8, #0
 8006540:	f8cd 8010 	str.w	r8, [sp, #16]
 8006544:	f8cd 8020 	str.w	r8, [sp, #32]
 8006548:	f8cd 8018 	str.w	r8, [sp, #24]
 800654c:	2322      	movs	r3, #34	; 0x22
 800654e:	f04f 0900 	mov.w	r9, #0
 8006552:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80066b0 <_strtod_l+0x5a8>
 8006556:	f8cb 3000 	str.w	r3, [fp]
 800655a:	9b08      	ldr	r3, [sp, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f43f ae12 	beq.w	8006186 <_strtod_l+0x7e>
 8006562:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006564:	4658      	mov	r0, fp
 8006566:	f002 f860 	bl	800862a <_Bfree>
 800656a:	9906      	ldr	r1, [sp, #24]
 800656c:	4658      	mov	r0, fp
 800656e:	f002 f85c 	bl	800862a <_Bfree>
 8006572:	9904      	ldr	r1, [sp, #16]
 8006574:	4658      	mov	r0, fp
 8006576:	f002 f858 	bl	800862a <_Bfree>
 800657a:	9908      	ldr	r1, [sp, #32]
 800657c:	4658      	mov	r0, fp
 800657e:	f002 f854 	bl	800862a <_Bfree>
 8006582:	4641      	mov	r1, r8
 8006584:	4658      	mov	r0, fp
 8006586:	f002 f850 	bl	800862a <_Bfree>
 800658a:	e5fc      	b.n	8006186 <_strtod_l+0x7e>
 800658c:	9a07      	ldr	r2, [sp, #28]
 800658e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006592:	4293      	cmp	r3, r2
 8006594:	dbb6      	blt.n	8006504 <_strtod_l+0x3fc>
 8006596:	4d44      	ldr	r5, [pc, #272]	; (80066a8 <_strtod_l+0x5a0>)
 8006598:	f1c4 040f 	rsb	r4, r4, #15
 800659c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80065a0:	464a      	mov	r2, r9
 80065a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065a6:	4653      	mov	r3, sl
 80065a8:	f7f9 ff96 	bl	80004d8 <__aeabi_dmul>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	1b1c      	subs	r4, r3, r4
 80065b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80065b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065b8:	e789      	b.n	80064ce <_strtod_l+0x3c6>
 80065ba:	f113 0f16 	cmn.w	r3, #22
 80065be:	dba1      	blt.n	8006504 <_strtod_l+0x3fc>
 80065c0:	4a39      	ldr	r2, [pc, #228]	; (80066a8 <_strtod_l+0x5a0>)
 80065c2:	4648      	mov	r0, r9
 80065c4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80065c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80065cc:	4651      	mov	r1, sl
 80065ce:	f7fa f8ad 	bl	800072c <__aeabi_ddiv>
 80065d2:	e77e      	b.n	80064d2 <_strtod_l+0x3ca>
 80065d4:	2300      	movs	r3, #0
 80065d6:	4648      	mov	r0, r9
 80065d8:	4651      	mov	r1, sl
 80065da:	461d      	mov	r5, r3
 80065dc:	4e33      	ldr	r6, [pc, #204]	; (80066ac <_strtod_l+0x5a4>)
 80065de:	ea4f 1828 	mov.w	r8, r8, asr #4
 80065e2:	f1b8 0f01 	cmp.w	r8, #1
 80065e6:	dc21      	bgt.n	800662c <_strtod_l+0x524>
 80065e8:	b10b      	cbz	r3, 80065ee <_strtod_l+0x4e6>
 80065ea:	4681      	mov	r9, r0
 80065ec:	468a      	mov	sl, r1
 80065ee:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <_strtod_l+0x5a4>)
 80065f0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80065f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80065f8:	464a      	mov	r2, r9
 80065fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80065fe:	4653      	mov	r3, sl
 8006600:	f7f9 ff6a 	bl	80004d8 <__aeabi_dmul>
 8006604:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <_strtod_l+0x5a8>)
 8006606:	460a      	mov	r2, r1
 8006608:	400b      	ands	r3, r1
 800660a:	492a      	ldr	r1, [pc, #168]	; (80066b4 <_strtod_l+0x5ac>)
 800660c:	4681      	mov	r9, r0
 800660e:	428b      	cmp	r3, r1
 8006610:	d894      	bhi.n	800653c <_strtod_l+0x434>
 8006612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006616:	428b      	cmp	r3, r1
 8006618:	bf86      	itte	hi
 800661a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800661e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80066bc <_strtod_l+0x5b4>
 8006622:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006626:	2300      	movs	r3, #0
 8006628:	9305      	str	r3, [sp, #20]
 800662a:	e07b      	b.n	8006724 <_strtod_l+0x61c>
 800662c:	f018 0f01 	tst.w	r8, #1
 8006630:	d006      	beq.n	8006640 <_strtod_l+0x538>
 8006632:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 ff4d 	bl	80004d8 <__aeabi_dmul>
 800663e:	2301      	movs	r3, #1
 8006640:	3501      	adds	r5, #1
 8006642:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006646:	e7cc      	b.n	80065e2 <_strtod_l+0x4da>
 8006648:	d0ed      	beq.n	8006626 <_strtod_l+0x51e>
 800664a:	f1c8 0800 	rsb	r8, r8, #0
 800664e:	f018 020f 	ands.w	r2, r8, #15
 8006652:	d00a      	beq.n	800666a <_strtod_l+0x562>
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <_strtod_l+0x5a0>)
 8006656:	4648      	mov	r0, r9
 8006658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800665c:	4651      	mov	r1, sl
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7fa f863 	bl	800072c <__aeabi_ddiv>
 8006666:	4681      	mov	r9, r0
 8006668:	468a      	mov	sl, r1
 800666a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800666e:	d0da      	beq.n	8006626 <_strtod_l+0x51e>
 8006670:	f1b8 0f1f 	cmp.w	r8, #31
 8006674:	dd24      	ble.n	80066c0 <_strtod_l+0x5b8>
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	f8cd 8010 	str.w	r8, [sp, #16]
 800667e:	f8cd 8020 	str.w	r8, [sp, #32]
 8006682:	f8cd 8018 	str.w	r8, [sp, #24]
 8006686:	2322      	movs	r3, #34	; 0x22
 8006688:	f04f 0900 	mov.w	r9, #0
 800668c:	f04f 0a00 	mov.w	sl, #0
 8006690:	f8cb 3000 	str.w	r3, [fp]
 8006694:	e761      	b.n	800655a <_strtod_l+0x452>
 8006696:	bf00      	nop
 8006698:	08009535 	.word	0x08009535
 800669c:	080095bb 	.word	0x080095bb
 80066a0:	0800953d 	.word	0x0800953d
 80066a4:	08009578 	.word	0x08009578
 80066a8:	08009660 	.word	0x08009660
 80066ac:	08009638 	.word	0x08009638
 80066b0:	7ff00000 	.word	0x7ff00000
 80066b4:	7ca00000 	.word	0x7ca00000
 80066b8:	fff80000 	.word	0xfff80000
 80066bc:	7fefffff 	.word	0x7fefffff
 80066c0:	f018 0310 	ands.w	r3, r8, #16
 80066c4:	bf18      	it	ne
 80066c6:	236a      	movne	r3, #106	; 0x6a
 80066c8:	4648      	mov	r0, r9
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	4651      	mov	r1, sl
 80066ce:	2300      	movs	r3, #0
 80066d0:	4da1      	ldr	r5, [pc, #644]	; (8006958 <_strtod_l+0x850>)
 80066d2:	f1b8 0f00 	cmp.w	r8, #0
 80066d6:	f300 8113 	bgt.w	8006900 <_strtod_l+0x7f8>
 80066da:	b10b      	cbz	r3, 80066e0 <_strtod_l+0x5d8>
 80066dc:	4681      	mov	r9, r0
 80066de:	468a      	mov	sl, r1
 80066e0:	9b05      	ldr	r3, [sp, #20]
 80066e2:	b1bb      	cbz	r3, 8006714 <_strtod_l+0x60c>
 80066e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80066e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	4651      	mov	r1, sl
 80066f0:	dd10      	ble.n	8006714 <_strtod_l+0x60c>
 80066f2:	2b1f      	cmp	r3, #31
 80066f4:	f340 8110 	ble.w	8006918 <_strtod_l+0x810>
 80066f8:	2b34      	cmp	r3, #52	; 0x34
 80066fa:	bfd8      	it	le
 80066fc:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006700:	f04f 0900 	mov.w	r9, #0
 8006704:	bfcf      	iteee	gt
 8006706:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800670a:	3b20      	suble	r3, #32
 800670c:	fa02 f303 	lslle.w	r3, r2, r3
 8006710:	ea03 0a01 	andle.w	sl, r3, r1
 8006714:	2200      	movs	r2, #0
 8006716:	2300      	movs	r3, #0
 8006718:	4648      	mov	r0, r9
 800671a:	4651      	mov	r1, sl
 800671c:	f7fa f944 	bl	80009a8 <__aeabi_dcmpeq>
 8006720:	2800      	cmp	r0, #0
 8006722:	d1a8      	bne.n	8006676 <_strtod_l+0x56e>
 8006724:	9b06      	ldr	r3, [sp, #24]
 8006726:	9a04      	ldr	r2, [sp, #16]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	9908      	ldr	r1, [sp, #32]
 800672c:	4623      	mov	r3, r4
 800672e:	4658      	mov	r0, fp
 8006730:	f001 ffcd 	bl	80086ce <__s2b>
 8006734:	9008      	str	r0, [sp, #32]
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f af00 	beq.w	800653c <_strtod_l+0x434>
 800673c:	9a07      	ldr	r2, [sp, #28]
 800673e:	9b07      	ldr	r3, [sp, #28]
 8006740:	2a00      	cmp	r2, #0
 8006742:	f1c3 0300 	rsb	r3, r3, #0
 8006746:	bfa8      	it	ge
 8006748:	2300      	movge	r3, #0
 800674a:	f04f 0800 	mov.w	r8, #0
 800674e:	930e      	str	r3, [sp, #56]	; 0x38
 8006750:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006754:	9316      	str	r3, [sp, #88]	; 0x58
 8006756:	f8cd 8010 	str.w	r8, [sp, #16]
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	4658      	mov	r0, fp
 800675e:	6859      	ldr	r1, [r3, #4]
 8006760:	f001 ff2f 	bl	80085c2 <_Balloc>
 8006764:	9006      	str	r0, [sp, #24]
 8006766:	2800      	cmp	r0, #0
 8006768:	f43f aef0 	beq.w	800654c <_strtod_l+0x444>
 800676c:	9b08      	ldr	r3, [sp, #32]
 800676e:	300c      	adds	r0, #12
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	f103 010c 	add.w	r1, r3, #12
 8006776:	3202      	adds	r2, #2
 8006778:	0092      	lsls	r2, r2, #2
 800677a:	f001 ff17 	bl	80085ac <memcpy>
 800677e:	ab1e      	add	r3, sp, #120	; 0x78
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	ab1d      	add	r3, sp, #116	; 0x74
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	464a      	mov	r2, r9
 8006788:	4653      	mov	r3, sl
 800678a:	4658      	mov	r0, fp
 800678c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006790:	f002 fa58 	bl	8008c44 <__d2b>
 8006794:	901c      	str	r0, [sp, #112]	; 0x70
 8006796:	2800      	cmp	r0, #0
 8006798:	f43f aed8 	beq.w	800654c <_strtod_l+0x444>
 800679c:	2101      	movs	r1, #1
 800679e:	4658      	mov	r0, fp
 80067a0:	f002 f821 	bl	80087e6 <__i2b>
 80067a4:	9004      	str	r0, [sp, #16]
 80067a6:	4603      	mov	r3, r0
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f43f aecf 	beq.w	800654c <_strtod_l+0x444>
 80067ae:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80067b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80067b2:	2d00      	cmp	r5, #0
 80067b4:	bfab      	itete	ge
 80067b6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80067b8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80067ba:	18ee      	addge	r6, r5, r3
 80067bc:	1b5c      	sublt	r4, r3, r5
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	bfa8      	it	ge
 80067c2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80067c4:	eba5 0503 	sub.w	r5, r5, r3
 80067c8:	4415      	add	r5, r2
 80067ca:	4b64      	ldr	r3, [pc, #400]	; (800695c <_strtod_l+0x854>)
 80067cc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80067d0:	bfb8      	it	lt
 80067d2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80067d4:	429d      	cmp	r5, r3
 80067d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80067da:	f280 80af 	bge.w	800693c <_strtod_l+0x834>
 80067de:	1b5b      	subs	r3, r3, r5
 80067e0:	2b1f      	cmp	r3, #31
 80067e2:	eba2 0203 	sub.w	r2, r2, r3
 80067e6:	f04f 0701 	mov.w	r7, #1
 80067ea:	f300 809c 	bgt.w	8006926 <_strtod_l+0x81e>
 80067ee:	2500      	movs	r5, #0
 80067f0:	fa07 f303 	lsl.w	r3, r7, r3
 80067f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f6:	18b7      	adds	r7, r6, r2
 80067f8:	9b05      	ldr	r3, [sp, #20]
 80067fa:	42be      	cmp	r6, r7
 80067fc:	4414      	add	r4, r2
 80067fe:	441c      	add	r4, r3
 8006800:	4633      	mov	r3, r6
 8006802:	bfa8      	it	ge
 8006804:	463b      	movge	r3, r7
 8006806:	42a3      	cmp	r3, r4
 8006808:	bfa8      	it	ge
 800680a:	4623      	movge	r3, r4
 800680c:	2b00      	cmp	r3, #0
 800680e:	bfc2      	ittt	gt
 8006810:	1aff      	subgt	r7, r7, r3
 8006812:	1ae4      	subgt	r4, r4, r3
 8006814:	1af6      	subgt	r6, r6, r3
 8006816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006818:	b1bb      	cbz	r3, 800684a <_strtod_l+0x742>
 800681a:	461a      	mov	r2, r3
 800681c:	9904      	ldr	r1, [sp, #16]
 800681e:	4658      	mov	r0, fp
 8006820:	f002 f880 	bl	8008924 <__pow5mult>
 8006824:	9004      	str	r0, [sp, #16]
 8006826:	2800      	cmp	r0, #0
 8006828:	f43f ae90 	beq.w	800654c <_strtod_l+0x444>
 800682c:	4601      	mov	r1, r0
 800682e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006830:	4658      	mov	r0, fp
 8006832:	f001 ffe1 	bl	80087f8 <__multiply>
 8006836:	9009      	str	r0, [sp, #36]	; 0x24
 8006838:	2800      	cmp	r0, #0
 800683a:	f43f ae87 	beq.w	800654c <_strtod_l+0x444>
 800683e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006840:	4658      	mov	r0, fp
 8006842:	f001 fef2 	bl	800862a <_Bfree>
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	931c      	str	r3, [sp, #112]	; 0x70
 800684a:	2f00      	cmp	r7, #0
 800684c:	dc7a      	bgt.n	8006944 <_strtod_l+0x83c>
 800684e:	9b07      	ldr	r3, [sp, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	dd08      	ble.n	8006866 <_strtod_l+0x75e>
 8006854:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006856:	9906      	ldr	r1, [sp, #24]
 8006858:	4658      	mov	r0, fp
 800685a:	f002 f863 	bl	8008924 <__pow5mult>
 800685e:	9006      	str	r0, [sp, #24]
 8006860:	2800      	cmp	r0, #0
 8006862:	f43f ae73 	beq.w	800654c <_strtod_l+0x444>
 8006866:	2c00      	cmp	r4, #0
 8006868:	dd08      	ble.n	800687c <_strtod_l+0x774>
 800686a:	4622      	mov	r2, r4
 800686c:	9906      	ldr	r1, [sp, #24]
 800686e:	4658      	mov	r0, fp
 8006870:	f002 f8a6 	bl	80089c0 <__lshift>
 8006874:	9006      	str	r0, [sp, #24]
 8006876:	2800      	cmp	r0, #0
 8006878:	f43f ae68 	beq.w	800654c <_strtod_l+0x444>
 800687c:	2e00      	cmp	r6, #0
 800687e:	dd08      	ble.n	8006892 <_strtod_l+0x78a>
 8006880:	4632      	mov	r2, r6
 8006882:	9904      	ldr	r1, [sp, #16]
 8006884:	4658      	mov	r0, fp
 8006886:	f002 f89b 	bl	80089c0 <__lshift>
 800688a:	9004      	str	r0, [sp, #16]
 800688c:	2800      	cmp	r0, #0
 800688e:	f43f ae5d 	beq.w	800654c <_strtod_l+0x444>
 8006892:	9a06      	ldr	r2, [sp, #24]
 8006894:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006896:	4658      	mov	r0, fp
 8006898:	f002 f900 	bl	8008a9c <__mdiff>
 800689c:	4680      	mov	r8, r0
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f ae54 	beq.w	800654c <_strtod_l+0x444>
 80068a4:	2400      	movs	r4, #0
 80068a6:	68c3      	ldr	r3, [r0, #12]
 80068a8:	9904      	ldr	r1, [sp, #16]
 80068aa:	60c4      	str	r4, [r0, #12]
 80068ac:	930c      	str	r3, [sp, #48]	; 0x30
 80068ae:	f002 f8db 	bl	8008a68 <__mcmp>
 80068b2:	42a0      	cmp	r0, r4
 80068b4:	da54      	bge.n	8006960 <_strtod_l+0x858>
 80068b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068b8:	b9f3      	cbnz	r3, 80068f8 <_strtod_l+0x7f0>
 80068ba:	f1b9 0f00 	cmp.w	r9, #0
 80068be:	d11b      	bne.n	80068f8 <_strtod_l+0x7f0>
 80068c0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80068c4:	b9c3      	cbnz	r3, 80068f8 <_strtod_l+0x7f0>
 80068c6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80068ca:	0d1b      	lsrs	r3, r3, #20
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80068d2:	d911      	bls.n	80068f8 <_strtod_l+0x7f0>
 80068d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80068d8:	b91b      	cbnz	r3, 80068e2 <_strtod_l+0x7da>
 80068da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	dd0a      	ble.n	80068f8 <_strtod_l+0x7f0>
 80068e2:	4641      	mov	r1, r8
 80068e4:	2201      	movs	r2, #1
 80068e6:	4658      	mov	r0, fp
 80068e8:	f002 f86a 	bl	80089c0 <__lshift>
 80068ec:	9904      	ldr	r1, [sp, #16]
 80068ee:	4680      	mov	r8, r0
 80068f0:	f002 f8ba 	bl	8008a68 <__mcmp>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	dc68      	bgt.n	80069ca <_strtod_l+0x8c2>
 80068f8:	9b05      	ldr	r3, [sp, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d172      	bne.n	80069e4 <_strtod_l+0x8dc>
 80068fe:	e630      	b.n	8006562 <_strtod_l+0x45a>
 8006900:	f018 0f01 	tst.w	r8, #1
 8006904:	d004      	beq.n	8006910 <_strtod_l+0x808>
 8006906:	e9d5 2300 	ldrd	r2, r3, [r5]
 800690a:	f7f9 fde5 	bl	80004d8 <__aeabi_dmul>
 800690e:	2301      	movs	r3, #1
 8006910:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006914:	3508      	adds	r5, #8
 8006916:	e6dc      	b.n	80066d2 <_strtod_l+0x5ca>
 8006918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	ea03 0909 	and.w	r9, r3, r9
 8006924:	e6f6      	b.n	8006714 <_strtod_l+0x60c>
 8006926:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800692a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800692e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006932:	35e2      	adds	r5, #226	; 0xe2
 8006934:	fa07 f505 	lsl.w	r5, r7, r5
 8006938:	970f      	str	r7, [sp, #60]	; 0x3c
 800693a:	e75c      	b.n	80067f6 <_strtod_l+0x6ee>
 800693c:	2301      	movs	r3, #1
 800693e:	2500      	movs	r5, #0
 8006940:	930f      	str	r3, [sp, #60]	; 0x3c
 8006942:	e758      	b.n	80067f6 <_strtod_l+0x6ee>
 8006944:	463a      	mov	r2, r7
 8006946:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006948:	4658      	mov	r0, fp
 800694a:	f002 f839 	bl	80089c0 <__lshift>
 800694e:	901c      	str	r0, [sp, #112]	; 0x70
 8006950:	2800      	cmp	r0, #0
 8006952:	f47f af7c 	bne.w	800684e <_strtod_l+0x746>
 8006956:	e5f9      	b.n	800654c <_strtod_l+0x444>
 8006958:	08009590 	.word	0x08009590
 800695c:	fffffc02 	.word	0xfffffc02
 8006960:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006964:	f040 8089 	bne.w	8006a7a <_strtod_l+0x972>
 8006968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800696a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800696e:	b342      	cbz	r2, 80069c2 <_strtod_l+0x8ba>
 8006970:	4aaf      	ldr	r2, [pc, #700]	; (8006c30 <_strtod_l+0xb28>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d156      	bne.n	8006a24 <_strtod_l+0x91c>
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	4648      	mov	r0, r9
 800697a:	b1eb      	cbz	r3, 80069b8 <_strtod_l+0x8b0>
 800697c:	4653      	mov	r3, sl
 800697e:	4aad      	ldr	r2, [pc, #692]	; (8006c34 <_strtod_l+0xb2c>)
 8006980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006984:	401a      	ands	r2, r3
 8006986:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800698a:	d818      	bhi.n	80069be <_strtod_l+0x8b6>
 800698c:	0d12      	lsrs	r2, r2, #20
 800698e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006992:	fa01 f303 	lsl.w	r3, r1, r3
 8006996:	4298      	cmp	r0, r3
 8006998:	d144      	bne.n	8006a24 <_strtod_l+0x91c>
 800699a:	4ba7      	ldr	r3, [pc, #668]	; (8006c38 <_strtod_l+0xb30>)
 800699c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800699e:	429a      	cmp	r2, r3
 80069a0:	d102      	bne.n	80069a8 <_strtod_l+0x8a0>
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f add2 	beq.w	800654c <_strtod_l+0x444>
 80069a8:	4ba2      	ldr	r3, [pc, #648]	; (8006c34 <_strtod_l+0xb2c>)
 80069aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ac:	f04f 0900 	mov.w	r9, #0
 80069b0:	401a      	ands	r2, r3
 80069b2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80069b6:	e79f      	b.n	80068f8 <_strtod_l+0x7f0>
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069bc:	e7eb      	b.n	8006996 <_strtod_l+0x88e>
 80069be:	460b      	mov	r3, r1
 80069c0:	e7e9      	b.n	8006996 <_strtod_l+0x88e>
 80069c2:	bb7b      	cbnz	r3, 8006a24 <_strtod_l+0x91c>
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	d12c      	bne.n	8006a24 <_strtod_l+0x91c>
 80069ca:	9905      	ldr	r1, [sp, #20]
 80069cc:	4653      	mov	r3, sl
 80069ce:	4a99      	ldr	r2, [pc, #612]	; (8006c34 <_strtod_l+0xb2c>)
 80069d0:	b1f1      	cbz	r1, 8006a10 <_strtod_l+0x908>
 80069d2:	ea02 010a 	and.w	r1, r2, sl
 80069d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80069da:	dc19      	bgt.n	8006a10 <_strtod_l+0x908>
 80069dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80069e0:	f77f ae51 	ble.w	8006686 <_strtod_l+0x57e>
 80069e4:	2300      	movs	r3, #0
 80069e6:	4a95      	ldr	r2, [pc, #596]	; (8006c3c <_strtod_l+0xb34>)
 80069e8:	4648      	mov	r0, r9
 80069ea:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80069ee:	4651      	mov	r1, sl
 80069f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	4681      	mov	r9, r0
 80069fa:	468a      	mov	sl, r1
 80069fc:	2900      	cmp	r1, #0
 80069fe:	f47f adb0 	bne.w	8006562 <_strtod_l+0x45a>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f47f adad 	bne.w	8006562 <_strtod_l+0x45a>
 8006a08:	2322      	movs	r3, #34	; 0x22
 8006a0a:	f8cb 3000 	str.w	r3, [fp]
 8006a0e:	e5a8      	b.n	8006562 <_strtod_l+0x45a>
 8006a10:	4013      	ands	r3, r2
 8006a12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a16:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8006a1a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006a1e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006a22:	e769      	b.n	80068f8 <_strtod_l+0x7f0>
 8006a24:	b19d      	cbz	r5, 8006a4e <_strtod_l+0x946>
 8006a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a28:	421d      	tst	r5, r3
 8006a2a:	f43f af65 	beq.w	80068f8 <_strtod_l+0x7f0>
 8006a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a30:	9a05      	ldr	r2, [sp, #20]
 8006a32:	4648      	mov	r0, r9
 8006a34:	4651      	mov	r1, sl
 8006a36:	b173      	cbz	r3, 8006a56 <_strtod_l+0x94e>
 8006a38:	f7ff fb42 	bl	80060c0 <sulp>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a44:	f7f9 fb92 	bl	800016c <__adddf3>
 8006a48:	4681      	mov	r9, r0
 8006a4a:	468a      	mov	sl, r1
 8006a4c:	e754      	b.n	80068f8 <_strtod_l+0x7f0>
 8006a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a50:	ea13 0f09 	tst.w	r3, r9
 8006a54:	e7e9      	b.n	8006a2a <_strtod_l+0x922>
 8006a56:	f7ff fb33 	bl	80060c0 <sulp>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a62:	f7f9 fb81 	bl	8000168 <__aeabi_dsub>
 8006a66:	2200      	movs	r2, #0
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4681      	mov	r9, r0
 8006a6c:	468a      	mov	sl, r1
 8006a6e:	f7f9 ff9b 	bl	80009a8 <__aeabi_dcmpeq>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f47f ae07 	bne.w	8006686 <_strtod_l+0x57e>
 8006a78:	e73e      	b.n	80068f8 <_strtod_l+0x7f0>
 8006a7a:	9904      	ldr	r1, [sp, #16]
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	f002 f930 	bl	8008ce2 <__ratio>
 8006a82:	2200      	movs	r2, #0
 8006a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a88:	4606      	mov	r6, r0
 8006a8a:	460f      	mov	r7, r1
 8006a8c:	f7f9 ffa0 	bl	80009d0 <__aeabi_dcmple>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d075      	beq.n	8006b80 <_strtod_l+0xa78>
 8006a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d047      	beq.n	8006b2a <_strtod_l+0xa22>
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	4f68      	ldr	r7, [pc, #416]	; (8006c40 <_strtod_l+0xb38>)
 8006a9e:	4d68      	ldr	r5, [pc, #416]	; (8006c40 <_strtod_l+0xb38>)
 8006aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aa6:	0d1b      	lsrs	r3, r3, #20
 8006aa8:	051b      	lsls	r3, r3, #20
 8006aaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aae:	4b65      	ldr	r3, [pc, #404]	; (8006c44 <_strtod_l+0xb3c>)
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	f040 80cf 	bne.w	8006c54 <_strtod_l+0xb4c>
 8006ab6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	4648      	mov	r0, r9
 8006ac2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	f002 f846 	bl	8008b58 <__ulp>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7f9 fd00 	bl	80004d8 <__aeabi_dmul>
 8006ad8:	464a      	mov	r2, r9
 8006ada:	4653      	mov	r3, sl
 8006adc:	f7f9 fb46 	bl	800016c <__adddf3>
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4954      	ldr	r1, [pc, #336]	; (8006c34 <_strtod_l+0xb2c>)
 8006ae4:	4a58      	ldr	r2, [pc, #352]	; (8006c48 <_strtod_l+0xb40>)
 8006ae6:	4019      	ands	r1, r3
 8006ae8:	4291      	cmp	r1, r2
 8006aea:	4681      	mov	r9, r0
 8006aec:	d95e      	bls.n	8006bac <_strtod_l+0xaa4>
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d103      	bne.n	8006b00 <_strtod_l+0x9f8>
 8006af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afa:	3301      	adds	r3, #1
 8006afc:	f43f ad26 	beq.w	800654c <_strtod_l+0x444>
 8006b00:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006b04:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006c38 <_strtod_l+0xb30>
 8006b08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b0a:	4658      	mov	r0, fp
 8006b0c:	f001 fd8d 	bl	800862a <_Bfree>
 8006b10:	9906      	ldr	r1, [sp, #24]
 8006b12:	4658      	mov	r0, fp
 8006b14:	f001 fd89 	bl	800862a <_Bfree>
 8006b18:	9904      	ldr	r1, [sp, #16]
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f001 fd85 	bl	800862a <_Bfree>
 8006b20:	4641      	mov	r1, r8
 8006b22:	4658      	mov	r0, fp
 8006b24:	f001 fd81 	bl	800862a <_Bfree>
 8006b28:	e617      	b.n	800675a <_strtod_l+0x652>
 8006b2a:	f1b9 0f00 	cmp.w	r9, #0
 8006b2e:	d119      	bne.n	8006b64 <_strtod_l+0xa5c>
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b36:	b9e3      	cbnz	r3, 8006b72 <_strtod_l+0xa6a>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <_strtod_l+0xb38>)
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f7f9 ff3c 	bl	80009bc <__aeabi_dcmplt>
 8006b44:	b9c8      	cbnz	r0, 8006b7a <_strtod_l+0xa72>
 8006b46:	2200      	movs	r2, #0
 8006b48:	4b40      	ldr	r3, [pc, #256]	; (8006c4c <_strtod_l+0xb44>)
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	f7f9 fcc3 	bl	80004d8 <__aeabi_dmul>
 8006b52:	4604      	mov	r4, r0
 8006b54:	460d      	mov	r5, r1
 8006b56:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b5a:	9418      	str	r4, [sp, #96]	; 0x60
 8006b5c:	9319      	str	r3, [sp, #100]	; 0x64
 8006b5e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006b62:	e79d      	b.n	8006aa0 <_strtod_l+0x998>
 8006b64:	f1b9 0f01 	cmp.w	r9, #1
 8006b68:	d103      	bne.n	8006b72 <_strtod_l+0xa6a>
 8006b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f43f ad8a 	beq.w	8006686 <_strtod_l+0x57e>
 8006b72:	2600      	movs	r6, #0
 8006b74:	4f36      	ldr	r7, [pc, #216]	; (8006c50 <_strtod_l+0xb48>)
 8006b76:	2400      	movs	r4, #0
 8006b78:	e791      	b.n	8006a9e <_strtod_l+0x996>
 8006b7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006b7c:	4d33      	ldr	r5, [pc, #204]	; (8006c4c <_strtod_l+0xb44>)
 8006b7e:	e7ea      	b.n	8006b56 <_strtod_l+0xa4e>
 8006b80:	4b32      	ldr	r3, [pc, #200]	; (8006c4c <_strtod_l+0xb44>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7f9 fca6 	bl	80004d8 <__aeabi_dmul>
 8006b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	b933      	cbnz	r3, 8006ba2 <_strtod_l+0xa9a>
 8006b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b98:	9010      	str	r0, [sp, #64]	; 0x40
 8006b9a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b9c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ba0:	e77e      	b.n	8006aa0 <_strtod_l+0x998>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006baa:	e7f7      	b.n	8006b9c <_strtod_l+0xa94>
 8006bac:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006bb0:	9b05      	ldr	r3, [sp, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1a8      	bne.n	8006b08 <_strtod_l+0xa00>
 8006bb6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006bba:	0d1b      	lsrs	r3, r3, #20
 8006bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bbe:	051b      	lsls	r3, r3, #20
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	4656      	mov	r6, sl
 8006bc4:	d1a0      	bne.n	8006b08 <_strtod_l+0xa00>
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7f9 ff35 	bl	8000a38 <__aeabi_d2iz>
 8006bce:	f7f9 fc19 	bl	8000404 <__aeabi_i2d>
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7f9 fac5 	bl	8000168 <__aeabi_dsub>
 8006bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	b933      	cbnz	r3, 8006bf4 <_strtod_l+0xaec>
 8006be6:	f1b9 0f00 	cmp.w	r9, #0
 8006bea:	d103      	bne.n	8006bf4 <_strtod_l+0xaec>
 8006bec:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	d06a      	beq.n	8006cca <_strtod_l+0xbc2>
 8006bf4:	a30a      	add	r3, pc, #40	; (adr r3, 8006c20 <_strtod_l+0xb18>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 fedd 	bl	80009bc <__aeabi_dcmplt>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f47f acad 	bne.w	8006562 <_strtod_l+0x45a>
 8006c08:	a307      	add	r3, pc, #28	; (adr r3, 8006c28 <_strtod_l+0xb20>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fef1 	bl	80009f8 <__aeabi_dcmpgt>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f43f af76 	beq.w	8006b08 <_strtod_l+0xa00>
 8006c1c:	e4a1      	b.n	8006562 <_strtod_l+0x45a>
 8006c1e:	bf00      	nop
 8006c20:	94a03595 	.word	0x94a03595
 8006c24:	3fdfffff 	.word	0x3fdfffff
 8006c28:	35afe535 	.word	0x35afe535
 8006c2c:	3fe00000 	.word	0x3fe00000
 8006c30:	000fffff 	.word	0x000fffff
 8006c34:	7ff00000 	.word	0x7ff00000
 8006c38:	7fefffff 	.word	0x7fefffff
 8006c3c:	39500000 	.word	0x39500000
 8006c40:	3ff00000 	.word	0x3ff00000
 8006c44:	7fe00000 	.word	0x7fe00000
 8006c48:	7c9fffff 	.word	0x7c9fffff
 8006c4c:	3fe00000 	.word	0x3fe00000
 8006c50:	bff00000 	.word	0xbff00000
 8006c54:	9b05      	ldr	r3, [sp, #20]
 8006c56:	b313      	cbz	r3, 8006c9e <_strtod_l+0xb96>
 8006c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c5e:	d81e      	bhi.n	8006c9e <_strtod_l+0xb96>
 8006c60:	a325      	add	r3, pc, #148	; (adr r3, 8006cf8 <_strtod_l+0xbf0>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 feb1 	bl	80009d0 <__aeabi_dcmple>
 8006c6e:	b190      	cbz	r0, 8006c96 <_strtod_l+0xb8e>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7f9 ff08 	bl	8000a88 <__aeabi_d2uiz>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	bf08      	it	eq
 8006c7c:	2001      	moveq	r0, #1
 8006c7e:	f7f9 fbb1 	bl	80003e4 <__aeabi_ui2d>
 8006c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c84:	4604      	mov	r4, r0
 8006c86:	460d      	mov	r5, r1
 8006c88:	b9d3      	cbnz	r3, 8006cc0 <_strtod_l+0xbb8>
 8006c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c8e:	9012      	str	r0, [sp, #72]	; 0x48
 8006c90:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c98:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006c9c:	1a9f      	subs	r7, r3, r2
 8006c9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ca2:	f001 ff59 	bl	8008b58 <__ulp>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fc13 	bl	80004d8 <__aeabi_dmul>
 8006cb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cb6:	f7f9 fa59 	bl	800016c <__adddf3>
 8006cba:	4681      	mov	r9, r0
 8006cbc:	468a      	mov	sl, r1
 8006cbe:	e777      	b.n	8006bb0 <_strtod_l+0xaa8>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006cc8:	e7e3      	b.n	8006c92 <_strtod_l+0xb8a>
 8006cca:	a30d      	add	r3, pc, #52	; (adr r3, 8006d00 <_strtod_l+0xbf8>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 fe74 	bl	80009bc <__aeabi_dcmplt>
 8006cd4:	e79f      	b.n	8006c16 <_strtod_l+0xb0e>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8006cda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	f7ff ba55 	b.w	800618e <_strtod_l+0x86>
 8006ce4:	2b65      	cmp	r3, #101	; 0x65
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f43f ab42 	beq.w	8006372 <_strtod_l+0x26a>
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	9105      	str	r1, [sp, #20]
 8006cf4:	f7ff babf 	b.w	8006276 <_strtod_l+0x16e>
 8006cf8:	ffc00000 	.word	0xffc00000
 8006cfc:	41dfffff 	.word	0x41dfffff
 8006d00:	94a03595 	.word	0x94a03595
 8006d04:	3fcfffff 	.word	0x3fcfffff

08006d08 <strtod>:
 8006d08:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <strtod+0x1c>)
 8006d0a:	b410      	push	{r4}
 8006d0c:	681c      	ldr	r4, [r3, #0]
 8006d0e:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <strtod+0x20>)
 8006d10:	6a23      	ldr	r3, [r4, #32]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf08      	it	eq
 8006d16:	4613      	moveq	r3, r2
 8006d18:	460a      	mov	r2, r1
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	bc10      	pop	{r4}
 8006d20:	f7ff b9f2 	b.w	8006108 <_strtod_l>
 8006d24:	20000048 	.word	0x20000048
 8006d28:	200000ac 	.word	0x200000ac

08006d2c <__swbuf_r>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	460e      	mov	r6, r1
 8006d30:	4614      	mov	r4, r2
 8006d32:	4605      	mov	r5, r0
 8006d34:	b118      	cbz	r0, 8006d3e <__swbuf_r+0x12>
 8006d36:	6983      	ldr	r3, [r0, #24]
 8006d38:	b90b      	cbnz	r3, 8006d3e <__swbuf_r+0x12>
 8006d3a:	f000 ffe9 	bl	8007d10 <__sinit>
 8006d3e:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <__swbuf_r+0x98>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	d12a      	bne.n	8006d9a <__swbuf_r+0x6e>
 8006d44:	686c      	ldr	r4, [r5, #4]
 8006d46:	69a3      	ldr	r3, [r4, #24]
 8006d48:	60a3      	str	r3, [r4, #8]
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	071a      	lsls	r2, r3, #28
 8006d4e:	d52e      	bpl.n	8006dae <__swbuf_r+0x82>
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	b363      	cbz	r3, 8006dae <__swbuf_r+0x82>
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	6820      	ldr	r0, [r4, #0]
 8006d58:	b2f6      	uxtb	r6, r6
 8006d5a:	1ac0      	subs	r0, r0, r3
 8006d5c:	6963      	ldr	r3, [r4, #20]
 8006d5e:	4637      	mov	r7, r6
 8006d60:	4283      	cmp	r3, r0
 8006d62:	dc04      	bgt.n	8006d6e <__swbuf_r+0x42>
 8006d64:	4621      	mov	r1, r4
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 ff68 	bl	8007c3c <_fflush_r>
 8006d6c:	bb28      	cbnz	r0, 8006dba <__swbuf_r+0x8e>
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	3001      	adds	r0, #1
 8006d72:	3b01      	subs	r3, #1
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	701e      	strb	r6, [r3, #0]
 8006d7e:	6963      	ldr	r3, [r4, #20]
 8006d80:	4283      	cmp	r3, r0
 8006d82:	d004      	beq.n	8006d8e <__swbuf_r+0x62>
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	07db      	lsls	r3, r3, #31
 8006d88:	d519      	bpl.n	8006dbe <__swbuf_r+0x92>
 8006d8a:	2e0a      	cmp	r6, #10
 8006d8c:	d117      	bne.n	8006dbe <__swbuf_r+0x92>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 ff53 	bl	8007c3c <_fflush_r>
 8006d96:	b190      	cbz	r0, 8006dbe <__swbuf_r+0x92>
 8006d98:	e00f      	b.n	8006dba <__swbuf_r+0x8e>
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <__swbuf_r+0x9c>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d101      	bne.n	8006da4 <__swbuf_r+0x78>
 8006da0:	68ac      	ldr	r4, [r5, #8]
 8006da2:	e7d0      	b.n	8006d46 <__swbuf_r+0x1a>
 8006da4:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <__swbuf_r+0xa0>)
 8006da6:	429c      	cmp	r4, r3
 8006da8:	bf08      	it	eq
 8006daa:	68ec      	ldreq	r4, [r5, #12]
 8006dac:	e7cb      	b.n	8006d46 <__swbuf_r+0x1a>
 8006dae:	4621      	mov	r1, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 f80d 	bl	8006dd0 <__swsetup_r>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d0cc      	beq.n	8006d54 <__swbuf_r+0x28>
 8006dba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	080095e8 	.word	0x080095e8
 8006dc8:	08009608 	.word	0x08009608
 8006dcc:	080095c8 	.word	0x080095c8

08006dd0 <__swsetup_r>:
 8006dd0:	4b32      	ldr	r3, [pc, #200]	; (8006e9c <__swsetup_r+0xcc>)
 8006dd2:	b570      	push	{r4, r5, r6, lr}
 8006dd4:	681d      	ldr	r5, [r3, #0]
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460c      	mov	r4, r1
 8006dda:	b125      	cbz	r5, 8006de6 <__swsetup_r+0x16>
 8006ddc:	69ab      	ldr	r3, [r5, #24]
 8006dde:	b913      	cbnz	r3, 8006de6 <__swsetup_r+0x16>
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 ff95 	bl	8007d10 <__sinit>
 8006de6:	4b2e      	ldr	r3, [pc, #184]	; (8006ea0 <__swsetup_r+0xd0>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	d10f      	bne.n	8006e0c <__swsetup_r+0x3c>
 8006dec:	686c      	ldr	r4, [r5, #4]
 8006dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	0715      	lsls	r5, r2, #28
 8006df6:	d42c      	bmi.n	8006e52 <__swsetup_r+0x82>
 8006df8:	06d0      	lsls	r0, r2, #27
 8006dfa:	d411      	bmi.n	8006e20 <__swsetup_r+0x50>
 8006dfc:	2209      	movs	r2, #9
 8006dfe:	6032      	str	r2, [r6, #0]
 8006e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e0a:	e03e      	b.n	8006e8a <__swsetup_r+0xba>
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <__swsetup_r+0xd4>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d101      	bne.n	8006e16 <__swsetup_r+0x46>
 8006e12:	68ac      	ldr	r4, [r5, #8]
 8006e14:	e7eb      	b.n	8006dee <__swsetup_r+0x1e>
 8006e16:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <__swsetup_r+0xd8>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	bf08      	it	eq
 8006e1c:	68ec      	ldreq	r4, [r5, #12]
 8006e1e:	e7e6      	b.n	8006dee <__swsetup_r+0x1e>
 8006e20:	0751      	lsls	r1, r2, #29
 8006e22:	d512      	bpl.n	8006e4a <__swsetup_r+0x7a>
 8006e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e26:	b141      	cbz	r1, 8006e3a <__swsetup_r+0x6a>
 8006e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e2c:	4299      	cmp	r1, r3
 8006e2e:	d002      	beq.n	8006e36 <__swsetup_r+0x66>
 8006e30:	4630      	mov	r0, r6
 8006e32:	f001 ffcd 	bl	8008dd0 <_free_r>
 8006e36:	2300      	movs	r3, #0
 8006e38:	6363      	str	r3, [r4, #52]	; 0x34
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	2300      	movs	r3, #0
 8006e44:	6063      	str	r3, [r4, #4]
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	f043 0308 	orr.w	r3, r3, #8
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	b94b      	cbnz	r3, 8006e6a <__swsetup_r+0x9a>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e60:	d003      	beq.n	8006e6a <__swsetup_r+0x9a>
 8006e62:	4621      	mov	r1, r4
 8006e64:	4630      	mov	r0, r6
 8006e66:	f001 fb39 	bl	80084dc <__smakebuf_r>
 8006e6a:	89a2      	ldrh	r2, [r4, #12]
 8006e6c:	f012 0301 	ands.w	r3, r2, #1
 8006e70:	d00c      	beq.n	8006e8c <__swsetup_r+0xbc>
 8006e72:	2300      	movs	r3, #0
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	6963      	ldr	r3, [r4, #20]
 8006e78:	425b      	negs	r3, r3
 8006e7a:	61a3      	str	r3, [r4, #24]
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b953      	cbnz	r3, 8006e96 <__swsetup_r+0xc6>
 8006e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e88:	d1ba      	bne.n	8006e00 <__swsetup_r+0x30>
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
 8006e8c:	0792      	lsls	r2, r2, #30
 8006e8e:	bf58      	it	pl
 8006e90:	6963      	ldrpl	r3, [r4, #20]
 8006e92:	60a3      	str	r3, [r4, #8]
 8006e94:	e7f2      	b.n	8006e7c <__swsetup_r+0xac>
 8006e96:	2000      	movs	r0, #0
 8006e98:	e7f7      	b.n	8006e8a <__swsetup_r+0xba>
 8006e9a:	bf00      	nop
 8006e9c:	20000048 	.word	0x20000048
 8006ea0:	080095e8 	.word	0x080095e8
 8006ea4:	08009608 	.word	0x08009608
 8006ea8:	080095c8 	.word	0x080095c8

08006eac <quorem>:
 8006eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	6903      	ldr	r3, [r0, #16]
 8006eb2:	690c      	ldr	r4, [r1, #16]
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	f2c0 8084 	blt.w	8006fc4 <quorem+0x118>
 8006ebc:	3c01      	subs	r4, #1
 8006ebe:	f101 0714 	add.w	r7, r1, #20
 8006ec2:	f100 0614 	add.w	r6, r0, #20
 8006ec6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006eca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006ece:	3501      	adds	r5, #1
 8006ed0:	fbb0 f5f5 	udiv	r5, r0, r5
 8006ed4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006ed8:	eb06 030c 	add.w	r3, r6, ip
 8006edc:	eb07 090c 	add.w	r9, r7, ip
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	b39d      	cbz	r5, 8006f4c <quorem+0xa0>
 8006ee4:	f04f 0a00 	mov.w	sl, #0
 8006ee8:	4638      	mov	r0, r7
 8006eea:	46b6      	mov	lr, r6
 8006eec:	46d3      	mov	fp, sl
 8006eee:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ef2:	b293      	uxth	r3, r2
 8006ef4:	fb05 a303 	mla	r3, r5, r3, sl
 8006ef8:	0c12      	lsrs	r2, r2, #16
 8006efa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006efe:	fb05 a202 	mla	r2, r5, r2, sl
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	ebab 0303 	sub.w	r3, fp, r3
 8006f08:	f8de b000 	ldr.w	fp, [lr]
 8006f0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006f10:	fa1f fb8b 	uxth.w	fp, fp
 8006f14:	445b      	add	r3, fp
 8006f16:	fa1f fb82 	uxth.w	fp, r2
 8006f1a:	f8de 2000 	ldr.w	r2, [lr]
 8006f1e:	4581      	cmp	r9, r0
 8006f20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f2e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006f32:	f84e 3b04 	str.w	r3, [lr], #4
 8006f36:	d2da      	bcs.n	8006eee <quorem+0x42>
 8006f38:	f856 300c 	ldr.w	r3, [r6, ip]
 8006f3c:	b933      	cbnz	r3, 8006f4c <quorem+0xa0>
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	3b04      	subs	r3, #4
 8006f42:	429e      	cmp	r6, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	d331      	bcc.n	8006fac <quorem+0x100>
 8006f48:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	f001 fd8b 	bl	8008a68 <__mcmp>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	db26      	blt.n	8006fa4 <quorem+0xf8>
 8006f56:	4630      	mov	r0, r6
 8006f58:	f04f 0c00 	mov.w	ip, #0
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006f62:	f8d0 e000 	ldr.w	lr, [r0]
 8006f66:	b28b      	uxth	r3, r1
 8006f68:	ebac 0303 	sub.w	r3, ip, r3
 8006f6c:	fa1f f28e 	uxth.w	r2, lr
 8006f70:	4413      	add	r3, r2
 8006f72:	0c0a      	lsrs	r2, r1, #16
 8006f74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f82:	45b9      	cmp	r9, r7
 8006f84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f88:	f840 3b04 	str.w	r3, [r0], #4
 8006f8c:	d2e7      	bcs.n	8006f5e <quorem+0xb2>
 8006f8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f96:	b92a      	cbnz	r2, 8006fa4 <quorem+0xf8>
 8006f98:	3b04      	subs	r3, #4
 8006f9a:	429e      	cmp	r6, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	d30b      	bcc.n	8006fb8 <quorem+0x10c>
 8006fa0:	f8c8 4010 	str.w	r4, [r8, #16]
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	b003      	add	sp, #12
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	6812      	ldr	r2, [r2, #0]
 8006fae:	3b04      	subs	r3, #4
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	d1c9      	bne.n	8006f48 <quorem+0x9c>
 8006fb4:	3c01      	subs	r4, #1
 8006fb6:	e7c4      	b.n	8006f42 <quorem+0x96>
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	3b04      	subs	r3, #4
 8006fbc:	2a00      	cmp	r2, #0
 8006fbe:	d1ef      	bne.n	8006fa0 <quorem+0xf4>
 8006fc0:	3c01      	subs	r4, #1
 8006fc2:	e7ea      	b.n	8006f9a <quorem+0xee>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e7ee      	b.n	8006fa6 <quorem+0xfa>

08006fc8 <_dtoa_r>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	4616      	mov	r6, r2
 8006fce:	461f      	mov	r7, r3
 8006fd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fd2:	b095      	sub	sp, #84	; 0x54
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006fda:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006fde:	b93d      	cbnz	r5, 8006ff0 <_dtoa_r+0x28>
 8006fe0:	2010      	movs	r0, #16
 8006fe2:	f001 fabb 	bl	800855c <malloc>
 8006fe6:	6260      	str	r0, [r4, #36]	; 0x24
 8006fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fec:	6005      	str	r5, [r0, #0]
 8006fee:	60c5      	str	r5, [r0, #12]
 8006ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	b151      	cbz	r1, 800700c <_dtoa_r+0x44>
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4093      	lsls	r3, r2
 8006ffc:	604a      	str	r2, [r1, #4]
 8006ffe:	608b      	str	r3, [r1, #8]
 8007000:	4620      	mov	r0, r4
 8007002:	f001 fb12 	bl	800862a <_Bfree>
 8007006:	2200      	movs	r2, #0
 8007008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	1e3b      	subs	r3, r7, #0
 800700e:	bfaf      	iteee	ge
 8007010:	2300      	movge	r3, #0
 8007012:	2201      	movlt	r2, #1
 8007014:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007018:	9303      	strlt	r3, [sp, #12]
 800701a:	bfac      	ite	ge
 800701c:	f8c8 3000 	strge.w	r3, [r8]
 8007020:	f8c8 2000 	strlt.w	r2, [r8]
 8007024:	4bae      	ldr	r3, [pc, #696]	; (80072e0 <_dtoa_r+0x318>)
 8007026:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800702a:	ea33 0308 	bics.w	r3, r3, r8
 800702e:	d11b      	bne.n	8007068 <_dtoa_r+0xa0>
 8007030:	f242 730f 	movw	r3, #9999	; 0x270f
 8007034:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	b923      	cbnz	r3, 8007046 <_dtoa_r+0x7e>
 800703c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007040:	2800      	cmp	r0, #0
 8007042:	f000 8545 	beq.w	8007ad0 <_dtoa_r+0xb08>
 8007046:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007048:	b953      	cbnz	r3, 8007060 <_dtoa_r+0x98>
 800704a:	4ba6      	ldr	r3, [pc, #664]	; (80072e4 <_dtoa_r+0x31c>)
 800704c:	e021      	b.n	8007092 <_dtoa_r+0xca>
 800704e:	4ba6      	ldr	r3, [pc, #664]	; (80072e8 <_dtoa_r+0x320>)
 8007050:	9306      	str	r3, [sp, #24]
 8007052:	3308      	adds	r3, #8
 8007054:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	9806      	ldr	r0, [sp, #24]
 800705a:	b015      	add	sp, #84	; 0x54
 800705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	4ba0      	ldr	r3, [pc, #640]	; (80072e4 <_dtoa_r+0x31c>)
 8007062:	9306      	str	r3, [sp, #24]
 8007064:	3303      	adds	r3, #3
 8007066:	e7f5      	b.n	8007054 <_dtoa_r+0x8c>
 8007068:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	2300      	movs	r3, #0
 8007070:	4630      	mov	r0, r6
 8007072:	4639      	mov	r1, r7
 8007074:	f7f9 fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8007078:	4682      	mov	sl, r0
 800707a:	b160      	cbz	r0, 8007096 <_dtoa_r+0xce>
 800707c:	2301      	movs	r3, #1
 800707e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8520 	beq.w	8007aca <_dtoa_r+0xb02>
 800708a:	4b98      	ldr	r3, [pc, #608]	; (80072ec <_dtoa_r+0x324>)
 800708c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	9306      	str	r3, [sp, #24]
 8007094:	e7e0      	b.n	8007058 <_dtoa_r+0x90>
 8007096:	ab12      	add	r3, sp, #72	; 0x48
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	ab13      	add	r3, sp, #76	; 0x4c
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4632      	mov	r2, r6
 80070a0:	463b      	mov	r3, r7
 80070a2:	4620      	mov	r0, r4
 80070a4:	f001 fdce 	bl	8008c44 <__d2b>
 80070a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80070ac:	4683      	mov	fp, r0
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	d07d      	beq.n	80071ae <_dtoa_r+0x1e6>
 80070b2:	46b0      	mov	r8, r6
 80070b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80070bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80070c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80070c8:	2200      	movs	r2, #0
 80070ca:	4b89      	ldr	r3, [pc, #548]	; (80072f0 <_dtoa_r+0x328>)
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 f84a 	bl	8000168 <__aeabi_dsub>
 80070d4:	a37c      	add	r3, pc, #496	; (adr r3, 80072c8 <_dtoa_r+0x300>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 f9fd 	bl	80004d8 <__aeabi_dmul>
 80070de:	a37c      	add	r3, pc, #496	; (adr r3, 80072d0 <_dtoa_r+0x308>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 f842 	bl	800016c <__adddf3>
 80070e8:	4606      	mov	r6, r0
 80070ea:	4628      	mov	r0, r5
 80070ec:	460f      	mov	r7, r1
 80070ee:	f7f9 f989 	bl	8000404 <__aeabi_i2d>
 80070f2:	a379      	add	r3, pc, #484	; (adr r3, 80072d8 <_dtoa_r+0x310>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 f9ee 	bl	80004d8 <__aeabi_dmul>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 f832 	bl	800016c <__adddf3>
 8007108:	4606      	mov	r6, r0
 800710a:	460f      	mov	r7, r1
 800710c:	f7f9 fc94 	bl	8000a38 <__aeabi_d2iz>
 8007110:	2200      	movs	r2, #0
 8007112:	4682      	mov	sl, r0
 8007114:	2300      	movs	r3, #0
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	f7f9 fc4f 	bl	80009bc <__aeabi_dcmplt>
 800711e:	b148      	cbz	r0, 8007134 <_dtoa_r+0x16c>
 8007120:	4650      	mov	r0, sl
 8007122:	f7f9 f96f 	bl	8000404 <__aeabi_i2d>
 8007126:	4632      	mov	r2, r6
 8007128:	463b      	mov	r3, r7
 800712a:	f7f9 fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800712e:	b908      	cbnz	r0, 8007134 <_dtoa_r+0x16c>
 8007130:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007134:	f1ba 0f16 	cmp.w	sl, #22
 8007138:	d85a      	bhi.n	80071f0 <_dtoa_r+0x228>
 800713a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800713e:	496d      	ldr	r1, [pc, #436]	; (80072f4 <_dtoa_r+0x32c>)
 8007140:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007148:	f7f9 fc56 	bl	80009f8 <__aeabi_dcmpgt>
 800714c:	2800      	cmp	r0, #0
 800714e:	d051      	beq.n	80071f4 <_dtoa_r+0x22c>
 8007150:	2300      	movs	r3, #0
 8007152:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007156:	930d      	str	r3, [sp, #52]	; 0x34
 8007158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800715a:	1b5d      	subs	r5, r3, r5
 800715c:	1e6b      	subs	r3, r5, #1
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	bf43      	ittte	mi
 8007162:	2300      	movmi	r3, #0
 8007164:	f1c5 0901 	rsbmi	r9, r5, #1
 8007168:	9307      	strmi	r3, [sp, #28]
 800716a:	f04f 0900 	movpl.w	r9, #0
 800716e:	f1ba 0f00 	cmp.w	sl, #0
 8007172:	db41      	blt.n	80071f8 <_dtoa_r+0x230>
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800717a:	4453      	add	r3, sl
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	2300      	movs	r3, #0
 8007180:	9308      	str	r3, [sp, #32]
 8007182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007184:	2b09      	cmp	r3, #9
 8007186:	f200 808f 	bhi.w	80072a8 <_dtoa_r+0x2e0>
 800718a:	2b05      	cmp	r3, #5
 800718c:	bfc4      	itt	gt
 800718e:	3b04      	subgt	r3, #4
 8007190:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007192:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007194:	bfc8      	it	gt
 8007196:	2500      	movgt	r5, #0
 8007198:	f1a3 0302 	sub.w	r3, r3, #2
 800719c:	bfd8      	it	le
 800719e:	2501      	movle	r5, #1
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	f200 808d 	bhi.w	80072c0 <_dtoa_r+0x2f8>
 80071a6:	e8df f003 	tbb	[pc, r3]
 80071aa:	7d7b      	.short	0x7d7b
 80071ac:	6f2f      	.short	0x6f2f
 80071ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071b2:	441d      	add	r5, r3
 80071b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80071b8:	2820      	cmp	r0, #32
 80071ba:	dd13      	ble.n	80071e4 <_dtoa_r+0x21c>
 80071bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80071c0:	9b02      	ldr	r3, [sp, #8]
 80071c2:	fa08 f800 	lsl.w	r8, r8, r0
 80071c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80071ca:	fa23 f000 	lsr.w	r0, r3, r0
 80071ce:	ea48 0000 	orr.w	r0, r8, r0
 80071d2:	f7f9 f907 	bl	80003e4 <__aeabi_ui2d>
 80071d6:	2301      	movs	r3, #1
 80071d8:	4680      	mov	r8, r0
 80071da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80071de:	3d01      	subs	r5, #1
 80071e0:	9310      	str	r3, [sp, #64]	; 0x40
 80071e2:	e771      	b.n	80070c8 <_dtoa_r+0x100>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	f1c0 0020 	rsb	r0, r0, #32
 80071ea:	fa03 f000 	lsl.w	r0, r3, r0
 80071ee:	e7f0      	b.n	80071d2 <_dtoa_r+0x20a>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7b0      	b.n	8007156 <_dtoa_r+0x18e>
 80071f4:	900d      	str	r0, [sp, #52]	; 0x34
 80071f6:	e7af      	b.n	8007158 <_dtoa_r+0x190>
 80071f8:	f1ca 0300 	rsb	r3, sl, #0
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	2300      	movs	r3, #0
 8007200:	eba9 090a 	sub.w	r9, r9, sl
 8007204:	930c      	str	r3, [sp, #48]	; 0x30
 8007206:	e7bc      	b.n	8007182 <_dtoa_r+0x1ba>
 8007208:	2301      	movs	r3, #1
 800720a:	9309      	str	r3, [sp, #36]	; 0x24
 800720c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800720e:	2b00      	cmp	r3, #0
 8007210:	dd74      	ble.n	80072fc <_dtoa_r+0x334>
 8007212:	4698      	mov	r8, r3
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	2200      	movs	r2, #0
 8007218:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800721a:	6072      	str	r2, [r6, #4]
 800721c:	2204      	movs	r2, #4
 800721e:	f102 0014 	add.w	r0, r2, #20
 8007222:	4298      	cmp	r0, r3
 8007224:	6871      	ldr	r1, [r6, #4]
 8007226:	d96e      	bls.n	8007306 <_dtoa_r+0x33e>
 8007228:	4620      	mov	r0, r4
 800722a:	f001 f9ca 	bl	80085c2 <_Balloc>
 800722e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007230:	6030      	str	r0, [r6, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f1b8 0f0e 	cmp.w	r8, #14
 8007238:	9306      	str	r3, [sp, #24]
 800723a:	f200 80ed 	bhi.w	8007418 <_dtoa_r+0x450>
 800723e:	2d00      	cmp	r5, #0
 8007240:	f000 80ea 	beq.w	8007418 <_dtoa_r+0x450>
 8007244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007248:	f1ba 0f00 	cmp.w	sl, #0
 800724c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007250:	dd77      	ble.n	8007342 <_dtoa_r+0x37a>
 8007252:	4a28      	ldr	r2, [pc, #160]	; (80072f4 <_dtoa_r+0x32c>)
 8007254:	f00a 030f 	and.w	r3, sl, #15
 8007258:	ea4f 162a 	mov.w	r6, sl, asr #4
 800725c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007260:	06f0      	lsls	r0, r6, #27
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800726a:	d568      	bpl.n	800733e <_dtoa_r+0x376>
 800726c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007270:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <_dtoa_r+0x330>)
 8007272:	2503      	movs	r5, #3
 8007274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007278:	f7f9 fa58 	bl	800072c <__aeabi_ddiv>
 800727c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007280:	f006 060f 	and.w	r6, r6, #15
 8007284:	4f1c      	ldr	r7, [pc, #112]	; (80072f8 <_dtoa_r+0x330>)
 8007286:	e04f      	b.n	8007328 <_dtoa_r+0x360>
 8007288:	2301      	movs	r3, #1
 800728a:	9309      	str	r3, [sp, #36]	; 0x24
 800728c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800728e:	4453      	add	r3, sl
 8007290:	f103 0801 	add.w	r8, r3, #1
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	4643      	mov	r3, r8
 8007298:	2b01      	cmp	r3, #1
 800729a:	bfb8      	it	lt
 800729c:	2301      	movlt	r3, #1
 800729e:	e7ba      	b.n	8007216 <_dtoa_r+0x24e>
 80072a0:	2300      	movs	r3, #0
 80072a2:	e7b2      	b.n	800720a <_dtoa_r+0x242>
 80072a4:	2300      	movs	r3, #0
 80072a6:	e7f0      	b.n	800728a <_dtoa_r+0x2c2>
 80072a8:	2501      	movs	r5, #1
 80072aa:	2300      	movs	r3, #0
 80072ac:	9509      	str	r5, [sp, #36]	; 0x24
 80072ae:	931e      	str	r3, [sp, #120]	; 0x78
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072b4:	2200      	movs	r2, #0
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	4698      	mov	r8, r3
 80072ba:	2312      	movs	r3, #18
 80072bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80072be:	e7aa      	b.n	8007216 <_dtoa_r+0x24e>
 80072c0:	2301      	movs	r3, #1
 80072c2:	9309      	str	r3, [sp, #36]	; 0x24
 80072c4:	e7f4      	b.n	80072b0 <_dtoa_r+0x2e8>
 80072c6:	bf00      	nop
 80072c8:	636f4361 	.word	0x636f4361
 80072cc:	3fd287a7 	.word	0x3fd287a7
 80072d0:	8b60c8b3 	.word	0x8b60c8b3
 80072d4:	3fc68a28 	.word	0x3fc68a28
 80072d8:	509f79fb 	.word	0x509f79fb
 80072dc:	3fd34413 	.word	0x3fd34413
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	080095c1 	.word	0x080095c1
 80072e8:	080095b8 	.word	0x080095b8
 80072ec:	08009541 	.word	0x08009541
 80072f0:	3ff80000 	.word	0x3ff80000
 80072f4:	08009660 	.word	0x08009660
 80072f8:	08009638 	.word	0x08009638
 80072fc:	2301      	movs	r3, #1
 80072fe:	9304      	str	r3, [sp, #16]
 8007300:	4698      	mov	r8, r3
 8007302:	461a      	mov	r2, r3
 8007304:	e7da      	b.n	80072bc <_dtoa_r+0x2f4>
 8007306:	3101      	adds	r1, #1
 8007308:	6071      	str	r1, [r6, #4]
 800730a:	0052      	lsls	r2, r2, #1
 800730c:	e787      	b.n	800721e <_dtoa_r+0x256>
 800730e:	07f1      	lsls	r1, r6, #31
 8007310:	d508      	bpl.n	8007324 <_dtoa_r+0x35c>
 8007312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800731a:	f7f9 f8dd 	bl	80004d8 <__aeabi_dmul>
 800731e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007322:	3501      	adds	r5, #1
 8007324:	1076      	asrs	r6, r6, #1
 8007326:	3708      	adds	r7, #8
 8007328:	2e00      	cmp	r6, #0
 800732a:	d1f0      	bne.n	800730e <_dtoa_r+0x346>
 800732c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007334:	f7f9 f9fa 	bl	800072c <__aeabi_ddiv>
 8007338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800733c:	e01b      	b.n	8007376 <_dtoa_r+0x3ae>
 800733e:	2502      	movs	r5, #2
 8007340:	e7a0      	b.n	8007284 <_dtoa_r+0x2bc>
 8007342:	f000 80a4 	beq.w	800748e <_dtoa_r+0x4c6>
 8007346:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800734a:	f1ca 0600 	rsb	r6, sl, #0
 800734e:	4ba0      	ldr	r3, [pc, #640]	; (80075d0 <_dtoa_r+0x608>)
 8007350:	f006 020f 	and.w	r2, r6, #15
 8007354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f9 f8bc 	bl	80004d8 <__aeabi_dmul>
 8007360:	2502      	movs	r5, #2
 8007362:	2300      	movs	r3, #0
 8007364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007368:	4f9a      	ldr	r7, [pc, #616]	; (80075d4 <_dtoa_r+0x60c>)
 800736a:	1136      	asrs	r6, r6, #4
 800736c:	2e00      	cmp	r6, #0
 800736e:	f040 8083 	bne.w	8007478 <_dtoa_r+0x4b0>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e0      	bne.n	8007338 <_dtoa_r+0x370>
 8007376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 808a 	beq.w	8007492 <_dtoa_r+0x4ca>
 800737e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007382:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007386:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800738a:	2200      	movs	r2, #0
 800738c:	4b92      	ldr	r3, [pc, #584]	; (80075d8 <_dtoa_r+0x610>)
 800738e:	f7f9 fb15 	bl	80009bc <__aeabi_dcmplt>
 8007392:	2800      	cmp	r0, #0
 8007394:	d07d      	beq.n	8007492 <_dtoa_r+0x4ca>
 8007396:	f1b8 0f00 	cmp.w	r8, #0
 800739a:	d07a      	beq.n	8007492 <_dtoa_r+0x4ca>
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dd36      	ble.n	8007410 <_dtoa_r+0x448>
 80073a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073a6:	2200      	movs	r2, #0
 80073a8:	4b8c      	ldr	r3, [pc, #560]	; (80075dc <_dtoa_r+0x614>)
 80073aa:	f7f9 f895 	bl	80004d8 <__aeabi_dmul>
 80073ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b2:	9e04      	ldr	r6, [sp, #16]
 80073b4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80073b8:	3501      	adds	r5, #1
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7f9 f822 	bl	8000404 <__aeabi_i2d>
 80073c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c4:	f7f9 f888 	bl	80004d8 <__aeabi_dmul>
 80073c8:	2200      	movs	r2, #0
 80073ca:	4b85      	ldr	r3, [pc, #532]	; (80075e0 <_dtoa_r+0x618>)
 80073cc:	f7f8 fece 	bl	800016c <__adddf3>
 80073d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80073d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80073d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d15c      	bne.n	8007498 <_dtoa_r+0x4d0>
 80073de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	4b7f      	ldr	r3, [pc, #508]	; (80075e4 <_dtoa_r+0x61c>)
 80073e6:	f7f8 febf 	bl	8000168 <__aeabi_dsub>
 80073ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ec:	462b      	mov	r3, r5
 80073ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073f2:	f7f9 fb01 	bl	80009f8 <__aeabi_dcmpgt>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f040 8281 	bne.w	80078fe <_dtoa_r+0x936>
 80073fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007402:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007406:	f7f9 fad9 	bl	80009bc <__aeabi_dcmplt>
 800740a:	2800      	cmp	r0, #0
 800740c:	f040 8275 	bne.w	80078fa <_dtoa_r+0x932>
 8007410:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800741a:	2b00      	cmp	r3, #0
 800741c:	f2c0 814b 	blt.w	80076b6 <_dtoa_r+0x6ee>
 8007420:	f1ba 0f0e 	cmp.w	sl, #14
 8007424:	f300 8147 	bgt.w	80076b6 <_dtoa_r+0x6ee>
 8007428:	4b69      	ldr	r3, [pc, #420]	; (80075d0 <_dtoa_r+0x608>)
 800742a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007436:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007438:	2b00      	cmp	r3, #0
 800743a:	f280 80d7 	bge.w	80075ec <_dtoa_r+0x624>
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	f300 80d3 	bgt.w	80075ec <_dtoa_r+0x624>
 8007446:	f040 8257 	bne.w	80078f8 <_dtoa_r+0x930>
 800744a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800744e:	2200      	movs	r2, #0
 8007450:	4b64      	ldr	r3, [pc, #400]	; (80075e4 <_dtoa_r+0x61c>)
 8007452:	f7f9 f841 	bl	80004d8 <__aeabi_dmul>
 8007456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800745a:	f7f9 fac3 	bl	80009e4 <__aeabi_dcmpge>
 800745e:	4646      	mov	r6, r8
 8007460:	4647      	mov	r7, r8
 8007462:	2800      	cmp	r0, #0
 8007464:	f040 822d 	bne.w	80078c2 <_dtoa_r+0x8fa>
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	9a06      	ldr	r2, [sp, #24]
 800746c:	1c5d      	adds	r5, r3, #1
 800746e:	2331      	movs	r3, #49	; 0x31
 8007470:	f10a 0a01 	add.w	sl, sl, #1
 8007474:	7013      	strb	r3, [r2, #0]
 8007476:	e228      	b.n	80078ca <_dtoa_r+0x902>
 8007478:	07f2      	lsls	r2, r6, #31
 800747a:	d505      	bpl.n	8007488 <_dtoa_r+0x4c0>
 800747c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007480:	f7f9 f82a 	bl	80004d8 <__aeabi_dmul>
 8007484:	2301      	movs	r3, #1
 8007486:	3501      	adds	r5, #1
 8007488:	1076      	asrs	r6, r6, #1
 800748a:	3708      	adds	r7, #8
 800748c:	e76e      	b.n	800736c <_dtoa_r+0x3a4>
 800748e:	2502      	movs	r5, #2
 8007490:	e771      	b.n	8007376 <_dtoa_r+0x3ae>
 8007492:	4657      	mov	r7, sl
 8007494:	4646      	mov	r6, r8
 8007496:	e790      	b.n	80073ba <_dtoa_r+0x3f2>
 8007498:	4b4d      	ldr	r3, [pc, #308]	; (80075d0 <_dtoa_r+0x608>)
 800749a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800749e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d048      	beq.n	800753a <_dtoa_r+0x572>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	2000      	movs	r0, #0
 80074ae:	494e      	ldr	r1, [pc, #312]	; (80075e8 <_dtoa_r+0x620>)
 80074b0:	f7f9 f93c 	bl	800072c <__aeabi_ddiv>
 80074b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074b8:	f7f8 fe56 	bl	8000168 <__aeabi_dsub>
 80074bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074c0:	9d06      	ldr	r5, [sp, #24]
 80074c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074c6:	f7f9 fab7 	bl	8000a38 <__aeabi_d2iz>
 80074ca:	9011      	str	r0, [sp, #68]	; 0x44
 80074cc:	f7f8 ff9a 	bl	8000404 <__aeabi_i2d>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d8:	f7f8 fe46 	bl	8000168 <__aeabi_dsub>
 80074dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e2:	3330      	adds	r3, #48	; 0x30
 80074e4:	f805 3b01 	strb.w	r3, [r5], #1
 80074e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074ec:	f7f9 fa66 	bl	80009bc <__aeabi_dcmplt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d163      	bne.n	80075bc <_dtoa_r+0x5f4>
 80074f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074f8:	2000      	movs	r0, #0
 80074fa:	4937      	ldr	r1, [pc, #220]	; (80075d8 <_dtoa_r+0x610>)
 80074fc:	f7f8 fe34 	bl	8000168 <__aeabi_dsub>
 8007500:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007504:	f7f9 fa5a 	bl	80009bc <__aeabi_dcmplt>
 8007508:	2800      	cmp	r0, #0
 800750a:	f040 80b5 	bne.w	8007678 <_dtoa_r+0x6b0>
 800750e:	9b06      	ldr	r3, [sp, #24]
 8007510:	1aeb      	subs	r3, r5, r3
 8007512:	429e      	cmp	r6, r3
 8007514:	f77f af7c 	ble.w	8007410 <_dtoa_r+0x448>
 8007518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800751c:	2200      	movs	r2, #0
 800751e:	4b2f      	ldr	r3, [pc, #188]	; (80075dc <_dtoa_r+0x614>)
 8007520:	f7f8 ffda 	bl	80004d8 <__aeabi_dmul>
 8007524:	2200      	movs	r2, #0
 8007526:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800752a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752e:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <_dtoa_r+0x614>)
 8007530:	f7f8 ffd2 	bl	80004d8 <__aeabi_dmul>
 8007534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007538:	e7c3      	b.n	80074c2 <_dtoa_r+0x4fa>
 800753a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800753e:	f7f8 ffcb 	bl	80004d8 <__aeabi_dmul>
 8007542:	9b06      	ldr	r3, [sp, #24]
 8007544:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007548:	199d      	adds	r5, r3, r6
 800754a:	461e      	mov	r6, r3
 800754c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007550:	f7f9 fa72 	bl	8000a38 <__aeabi_d2iz>
 8007554:	9011      	str	r0, [sp, #68]	; 0x44
 8007556:	f7f8 ff55 	bl	8000404 <__aeabi_i2d>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007562:	f7f8 fe01 	bl	8000168 <__aeabi_dsub>
 8007566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800756c:	3330      	adds	r3, #48	; 0x30
 800756e:	f806 3b01 	strb.w	r3, [r6], #1
 8007572:	42ae      	cmp	r6, r5
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	d124      	bne.n	80075c4 <_dtoa_r+0x5fc>
 800757a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800757e:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <_dtoa_r+0x620>)
 8007580:	f7f8 fdf4 	bl	800016c <__adddf3>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758c:	f7f9 fa34 	bl	80009f8 <__aeabi_dcmpgt>
 8007590:	2800      	cmp	r0, #0
 8007592:	d171      	bne.n	8007678 <_dtoa_r+0x6b0>
 8007594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007598:	2000      	movs	r0, #0
 800759a:	4913      	ldr	r1, [pc, #76]	; (80075e8 <_dtoa_r+0x620>)
 800759c:	f7f8 fde4 	bl	8000168 <__aeabi_dsub>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075a8:	f7f9 fa08 	bl	80009bc <__aeabi_dcmplt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f43f af2f 	beq.w	8007410 <_dtoa_r+0x448>
 80075b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075b6:	1e6a      	subs	r2, r5, #1
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d001      	beq.n	80075c0 <_dtoa_r+0x5f8>
 80075bc:	46ba      	mov	sl, r7
 80075be:	e04a      	b.n	8007656 <_dtoa_r+0x68e>
 80075c0:	4615      	mov	r5, r2
 80075c2:	e7f6      	b.n	80075b2 <_dtoa_r+0x5ea>
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <_dtoa_r+0x614>)
 80075c6:	f7f8 ff87 	bl	80004d8 <__aeabi_dmul>
 80075ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ce:	e7bd      	b.n	800754c <_dtoa_r+0x584>
 80075d0:	08009660 	.word	0x08009660
 80075d4:	08009638 	.word	0x08009638
 80075d8:	3ff00000 	.word	0x3ff00000
 80075dc:	40240000 	.word	0x40240000
 80075e0:	401c0000 	.word	0x401c0000
 80075e4:	40140000 	.word	0x40140000
 80075e8:	3fe00000 	.word	0x3fe00000
 80075ec:	9d06      	ldr	r5, [sp, #24]
 80075ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075f6:	4630      	mov	r0, r6
 80075f8:	4639      	mov	r1, r7
 80075fa:	f7f9 f897 	bl	800072c <__aeabi_ddiv>
 80075fe:	f7f9 fa1b 	bl	8000a38 <__aeabi_d2iz>
 8007602:	4681      	mov	r9, r0
 8007604:	f7f8 fefe 	bl	8000404 <__aeabi_i2d>
 8007608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760c:	f7f8 ff64 	bl	80004d8 <__aeabi_dmul>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f8 fda6 	bl	8000168 <__aeabi_dsub>
 800761c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007620:	f805 6b01 	strb.w	r6, [r5], #1
 8007624:	9e06      	ldr	r6, [sp, #24]
 8007626:	4602      	mov	r2, r0
 8007628:	1bae      	subs	r6, r5, r6
 800762a:	45b0      	cmp	r8, r6
 800762c:	460b      	mov	r3, r1
 800762e:	d135      	bne.n	800769c <_dtoa_r+0x6d4>
 8007630:	f7f8 fd9c 	bl	800016c <__adddf3>
 8007634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007638:	4606      	mov	r6, r0
 800763a:	460f      	mov	r7, r1
 800763c:	f7f9 f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 8007640:	b9c8      	cbnz	r0, 8007676 <_dtoa_r+0x6ae>
 8007642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f9 f9ad 	bl	80009a8 <__aeabi_dcmpeq>
 800764e:	b110      	cbz	r0, 8007656 <_dtoa_r+0x68e>
 8007650:	f019 0f01 	tst.w	r9, #1
 8007654:	d10f      	bne.n	8007676 <_dtoa_r+0x6ae>
 8007656:	4659      	mov	r1, fp
 8007658:	4620      	mov	r0, r4
 800765a:	f000 ffe6 	bl	800862a <_Bfree>
 800765e:	2300      	movs	r3, #0
 8007660:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007662:	702b      	strb	r3, [r5, #0]
 8007664:	f10a 0301 	add.w	r3, sl, #1
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800766c:	2b00      	cmp	r3, #0
 800766e:	f43f acf3 	beq.w	8007058 <_dtoa_r+0x90>
 8007672:	601d      	str	r5, [r3, #0]
 8007674:	e4f0      	b.n	8007058 <_dtoa_r+0x90>
 8007676:	4657      	mov	r7, sl
 8007678:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800767c:	1e6b      	subs	r3, r5, #1
 800767e:	2a39      	cmp	r2, #57	; 0x39
 8007680:	d106      	bne.n	8007690 <_dtoa_r+0x6c8>
 8007682:	9a06      	ldr	r2, [sp, #24]
 8007684:	429a      	cmp	r2, r3
 8007686:	d107      	bne.n	8007698 <_dtoa_r+0x6d0>
 8007688:	2330      	movs	r3, #48	; 0x30
 800768a:	7013      	strb	r3, [r2, #0]
 800768c:	4613      	mov	r3, r2
 800768e:	3701      	adds	r7, #1
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	3201      	adds	r2, #1
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e791      	b.n	80075bc <_dtoa_r+0x5f4>
 8007698:	461d      	mov	r5, r3
 800769a:	e7ed      	b.n	8007678 <_dtoa_r+0x6b0>
 800769c:	2200      	movs	r2, #0
 800769e:	4b99      	ldr	r3, [pc, #612]	; (8007904 <_dtoa_r+0x93c>)
 80076a0:	f7f8 ff1a 	bl	80004d8 <__aeabi_dmul>
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	4606      	mov	r6, r0
 80076aa:	460f      	mov	r7, r1
 80076ac:	f7f9 f97c 	bl	80009a8 <__aeabi_dcmpeq>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d09e      	beq.n	80075f2 <_dtoa_r+0x62a>
 80076b4:	e7cf      	b.n	8007656 <_dtoa_r+0x68e>
 80076b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	f000 8088 	beq.w	80077ce <_dtoa_r+0x806>
 80076be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80076c0:	2a01      	cmp	r2, #1
 80076c2:	dc6d      	bgt.n	80077a0 <_dtoa_r+0x7d8>
 80076c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	d066      	beq.n	8007798 <_dtoa_r+0x7d0>
 80076ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076ce:	464d      	mov	r5, r9
 80076d0:	9e08      	ldr	r6, [sp, #32]
 80076d2:	9a07      	ldr	r2, [sp, #28]
 80076d4:	2101      	movs	r1, #1
 80076d6:	441a      	add	r2, r3
 80076d8:	4620      	mov	r0, r4
 80076da:	4499      	add	r9, r3
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	f001 f882 	bl	80087e6 <__i2b>
 80076e2:	4607      	mov	r7, r0
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	dd0b      	ble.n	8007700 <_dtoa_r+0x738>
 80076e8:	9b07      	ldr	r3, [sp, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd08      	ble.n	8007700 <_dtoa_r+0x738>
 80076ee:	42ab      	cmp	r3, r5
 80076f0:	bfa8      	it	ge
 80076f2:	462b      	movge	r3, r5
 80076f4:	9a07      	ldr	r2, [sp, #28]
 80076f6:	eba9 0903 	sub.w	r9, r9, r3
 80076fa:	1aed      	subs	r5, r5, r3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	9307      	str	r3, [sp, #28]
 8007700:	9b08      	ldr	r3, [sp, #32]
 8007702:	b1eb      	cbz	r3, 8007740 <_dtoa_r+0x778>
 8007704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007706:	2b00      	cmp	r3, #0
 8007708:	d065      	beq.n	80077d6 <_dtoa_r+0x80e>
 800770a:	b18e      	cbz	r6, 8007730 <_dtoa_r+0x768>
 800770c:	4639      	mov	r1, r7
 800770e:	4632      	mov	r2, r6
 8007710:	4620      	mov	r0, r4
 8007712:	f001 f907 	bl	8008924 <__pow5mult>
 8007716:	465a      	mov	r2, fp
 8007718:	4601      	mov	r1, r0
 800771a:	4607      	mov	r7, r0
 800771c:	4620      	mov	r0, r4
 800771e:	f001 f86b 	bl	80087f8 <__multiply>
 8007722:	4659      	mov	r1, fp
 8007724:	900a      	str	r0, [sp, #40]	; 0x28
 8007726:	4620      	mov	r0, r4
 8007728:	f000 ff7f 	bl	800862a <_Bfree>
 800772c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772e:	469b      	mov	fp, r3
 8007730:	9b08      	ldr	r3, [sp, #32]
 8007732:	1b9a      	subs	r2, r3, r6
 8007734:	d004      	beq.n	8007740 <_dtoa_r+0x778>
 8007736:	4659      	mov	r1, fp
 8007738:	4620      	mov	r0, r4
 800773a:	f001 f8f3 	bl	8008924 <__pow5mult>
 800773e:	4683      	mov	fp, r0
 8007740:	2101      	movs	r1, #1
 8007742:	4620      	mov	r0, r4
 8007744:	f001 f84f 	bl	80087e6 <__i2b>
 8007748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800774a:	4606      	mov	r6, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 81c6 	beq.w	8007ade <_dtoa_r+0xb16>
 8007752:	461a      	mov	r2, r3
 8007754:	4601      	mov	r1, r0
 8007756:	4620      	mov	r0, r4
 8007758:	f001 f8e4 	bl	8008924 <__pow5mult>
 800775c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800775e:	4606      	mov	r6, r0
 8007760:	2b01      	cmp	r3, #1
 8007762:	dc3e      	bgt.n	80077e2 <_dtoa_r+0x81a>
 8007764:	9b02      	ldr	r3, [sp, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d137      	bne.n	80077da <_dtoa_r+0x812>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007770:	2b00      	cmp	r3, #0
 8007772:	d134      	bne.n	80077de <_dtoa_r+0x816>
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800777a:	0d1b      	lsrs	r3, r3, #20
 800777c:	051b      	lsls	r3, r3, #20
 800777e:	b12b      	cbz	r3, 800778c <_dtoa_r+0x7c4>
 8007780:	9b07      	ldr	r3, [sp, #28]
 8007782:	f109 0901 	add.w	r9, r9, #1
 8007786:	3301      	adds	r3, #1
 8007788:	9307      	str	r3, [sp, #28]
 800778a:	2301      	movs	r3, #1
 800778c:	9308      	str	r3, [sp, #32]
 800778e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007790:	2b00      	cmp	r3, #0
 8007792:	d128      	bne.n	80077e6 <_dtoa_r+0x81e>
 8007794:	2001      	movs	r0, #1
 8007796:	e02e      	b.n	80077f6 <_dtoa_r+0x82e>
 8007798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800779a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800779e:	e796      	b.n	80076ce <_dtoa_r+0x706>
 80077a0:	9b08      	ldr	r3, [sp, #32]
 80077a2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80077a6:	42b3      	cmp	r3, r6
 80077a8:	bfb7      	itett	lt
 80077aa:	9b08      	ldrlt	r3, [sp, #32]
 80077ac:	1b9e      	subge	r6, r3, r6
 80077ae:	1af2      	sublt	r2, r6, r3
 80077b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80077b2:	bfbf      	itttt	lt
 80077b4:	9608      	strlt	r6, [sp, #32]
 80077b6:	189b      	addlt	r3, r3, r2
 80077b8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80077ba:	2600      	movlt	r6, #0
 80077bc:	f1b8 0f00 	cmp.w	r8, #0
 80077c0:	bfb9      	ittee	lt
 80077c2:	eba9 0508 	sublt.w	r5, r9, r8
 80077c6:	2300      	movlt	r3, #0
 80077c8:	464d      	movge	r5, r9
 80077ca:	4643      	movge	r3, r8
 80077cc:	e781      	b.n	80076d2 <_dtoa_r+0x70a>
 80077ce:	9e08      	ldr	r6, [sp, #32]
 80077d0:	464d      	mov	r5, r9
 80077d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077d4:	e786      	b.n	80076e4 <_dtoa_r+0x71c>
 80077d6:	9a08      	ldr	r2, [sp, #32]
 80077d8:	e7ad      	b.n	8007736 <_dtoa_r+0x76e>
 80077da:	2300      	movs	r3, #0
 80077dc:	e7d6      	b.n	800778c <_dtoa_r+0x7c4>
 80077de:	9b02      	ldr	r3, [sp, #8]
 80077e0:	e7d4      	b.n	800778c <_dtoa_r+0x7c4>
 80077e2:	2300      	movs	r3, #0
 80077e4:	9308      	str	r3, [sp, #32]
 80077e6:	6933      	ldr	r3, [r6, #16]
 80077e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077ec:	6918      	ldr	r0, [r3, #16]
 80077ee:	f000 ffac 	bl	800874a <__hi0bits>
 80077f2:	f1c0 0020 	rsb	r0, r0, #32
 80077f6:	9b07      	ldr	r3, [sp, #28]
 80077f8:	4418      	add	r0, r3
 80077fa:	f010 001f 	ands.w	r0, r0, #31
 80077fe:	d047      	beq.n	8007890 <_dtoa_r+0x8c8>
 8007800:	f1c0 0320 	rsb	r3, r0, #32
 8007804:	2b04      	cmp	r3, #4
 8007806:	dd3b      	ble.n	8007880 <_dtoa_r+0x8b8>
 8007808:	9b07      	ldr	r3, [sp, #28]
 800780a:	f1c0 001c 	rsb	r0, r0, #28
 800780e:	4481      	add	r9, r0
 8007810:	4405      	add	r5, r0
 8007812:	4403      	add	r3, r0
 8007814:	9307      	str	r3, [sp, #28]
 8007816:	f1b9 0f00 	cmp.w	r9, #0
 800781a:	dd05      	ble.n	8007828 <_dtoa_r+0x860>
 800781c:	4659      	mov	r1, fp
 800781e:	464a      	mov	r2, r9
 8007820:	4620      	mov	r0, r4
 8007822:	f001 f8cd 	bl	80089c0 <__lshift>
 8007826:	4683      	mov	fp, r0
 8007828:	9b07      	ldr	r3, [sp, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	dd05      	ble.n	800783a <_dtoa_r+0x872>
 800782e:	4631      	mov	r1, r6
 8007830:	461a      	mov	r2, r3
 8007832:	4620      	mov	r0, r4
 8007834:	f001 f8c4 	bl	80089c0 <__lshift>
 8007838:	4606      	mov	r6, r0
 800783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783c:	b353      	cbz	r3, 8007894 <_dtoa_r+0x8cc>
 800783e:	4631      	mov	r1, r6
 8007840:	4658      	mov	r0, fp
 8007842:	f001 f911 	bl	8008a68 <__mcmp>
 8007846:	2800      	cmp	r0, #0
 8007848:	da24      	bge.n	8007894 <_dtoa_r+0x8cc>
 800784a:	2300      	movs	r3, #0
 800784c:	4659      	mov	r1, fp
 800784e:	220a      	movs	r2, #10
 8007850:	4620      	mov	r0, r4
 8007852:	f000 ff01 	bl	8008658 <__multadd>
 8007856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007858:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800785c:	4683      	mov	fp, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8144 	beq.w	8007aec <_dtoa_r+0xb24>
 8007864:	2300      	movs	r3, #0
 8007866:	4639      	mov	r1, r7
 8007868:	220a      	movs	r2, #10
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fef4 	bl	8008658 <__multadd>
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	4607      	mov	r7, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	dc4d      	bgt.n	8007914 <_dtoa_r+0x94c>
 8007878:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800787a:	2b02      	cmp	r3, #2
 800787c:	dd4a      	ble.n	8007914 <_dtoa_r+0x94c>
 800787e:	e011      	b.n	80078a4 <_dtoa_r+0x8dc>
 8007880:	d0c9      	beq.n	8007816 <_dtoa_r+0x84e>
 8007882:	9a07      	ldr	r2, [sp, #28]
 8007884:	331c      	adds	r3, #28
 8007886:	441a      	add	r2, r3
 8007888:	4499      	add	r9, r3
 800788a:	441d      	add	r5, r3
 800788c:	4613      	mov	r3, r2
 800788e:	e7c1      	b.n	8007814 <_dtoa_r+0x84c>
 8007890:	4603      	mov	r3, r0
 8007892:	e7f6      	b.n	8007882 <_dtoa_r+0x8ba>
 8007894:	f1b8 0f00 	cmp.w	r8, #0
 8007898:	dc36      	bgt.n	8007908 <_dtoa_r+0x940>
 800789a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800789c:	2b02      	cmp	r3, #2
 800789e:	dd33      	ble.n	8007908 <_dtoa_r+0x940>
 80078a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80078a4:	9b04      	ldr	r3, [sp, #16]
 80078a6:	b963      	cbnz	r3, 80078c2 <_dtoa_r+0x8fa>
 80078a8:	4631      	mov	r1, r6
 80078aa:	2205      	movs	r2, #5
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fed3 	bl	8008658 <__multadd>
 80078b2:	4601      	mov	r1, r0
 80078b4:	4606      	mov	r6, r0
 80078b6:	4658      	mov	r0, fp
 80078b8:	f001 f8d6 	bl	8008a68 <__mcmp>
 80078bc:	2800      	cmp	r0, #0
 80078be:	f73f add3 	bgt.w	8007468 <_dtoa_r+0x4a0>
 80078c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078c4:	9d06      	ldr	r5, [sp, #24]
 80078c6:	ea6f 0a03 	mvn.w	sl, r3
 80078ca:	f04f 0900 	mov.w	r9, #0
 80078ce:	4631      	mov	r1, r6
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 feaa 	bl	800862a <_Bfree>
 80078d6:	2f00      	cmp	r7, #0
 80078d8:	f43f aebd 	beq.w	8007656 <_dtoa_r+0x68e>
 80078dc:	f1b9 0f00 	cmp.w	r9, #0
 80078e0:	d005      	beq.n	80078ee <_dtoa_r+0x926>
 80078e2:	45b9      	cmp	r9, r7
 80078e4:	d003      	beq.n	80078ee <_dtoa_r+0x926>
 80078e6:	4649      	mov	r1, r9
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 fe9e 	bl	800862a <_Bfree>
 80078ee:	4639      	mov	r1, r7
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fe9a 	bl	800862a <_Bfree>
 80078f6:	e6ae      	b.n	8007656 <_dtoa_r+0x68e>
 80078f8:	2600      	movs	r6, #0
 80078fa:	4637      	mov	r7, r6
 80078fc:	e7e1      	b.n	80078c2 <_dtoa_r+0x8fa>
 80078fe:	46ba      	mov	sl, r7
 8007900:	4637      	mov	r7, r6
 8007902:	e5b1      	b.n	8007468 <_dtoa_r+0x4a0>
 8007904:	40240000 	.word	0x40240000
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	f8cd 8010 	str.w	r8, [sp, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80f3 	beq.w	8007afa <_dtoa_r+0xb32>
 8007914:	2d00      	cmp	r5, #0
 8007916:	dd05      	ble.n	8007924 <_dtoa_r+0x95c>
 8007918:	4639      	mov	r1, r7
 800791a:	462a      	mov	r2, r5
 800791c:	4620      	mov	r0, r4
 800791e:	f001 f84f 	bl	80089c0 <__lshift>
 8007922:	4607      	mov	r7, r0
 8007924:	9b08      	ldr	r3, [sp, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d04c      	beq.n	80079c4 <_dtoa_r+0x9fc>
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fe48 	bl	80085c2 <_Balloc>
 8007932:	4605      	mov	r5, r0
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	f107 010c 	add.w	r1, r7, #12
 800793a:	3202      	adds	r2, #2
 800793c:	0092      	lsls	r2, r2, #2
 800793e:	300c      	adds	r0, #12
 8007940:	f000 fe34 	bl	80085ac <memcpy>
 8007944:	2201      	movs	r2, #1
 8007946:	4629      	mov	r1, r5
 8007948:	4620      	mov	r0, r4
 800794a:	f001 f839 	bl	80089c0 <__lshift>
 800794e:	46b9      	mov	r9, r7
 8007950:	4607      	mov	r7, r0
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	9307      	str	r3, [sp, #28]
 8007956:	9b02      	ldr	r3, [sp, #8]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	9308      	str	r3, [sp, #32]
 800795e:	4631      	mov	r1, r6
 8007960:	4658      	mov	r0, fp
 8007962:	f7ff faa3 	bl	8006eac <quorem>
 8007966:	4649      	mov	r1, r9
 8007968:	4605      	mov	r5, r0
 800796a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800796e:	4658      	mov	r0, fp
 8007970:	f001 f87a 	bl	8008a68 <__mcmp>
 8007974:	463a      	mov	r2, r7
 8007976:	9002      	str	r0, [sp, #8]
 8007978:	4631      	mov	r1, r6
 800797a:	4620      	mov	r0, r4
 800797c:	f001 f88e 	bl	8008a9c <__mdiff>
 8007980:	68c3      	ldr	r3, [r0, #12]
 8007982:	4602      	mov	r2, r0
 8007984:	bb03      	cbnz	r3, 80079c8 <_dtoa_r+0xa00>
 8007986:	4601      	mov	r1, r0
 8007988:	9009      	str	r0, [sp, #36]	; 0x24
 800798a:	4658      	mov	r0, fp
 800798c:	f001 f86c 	bl	8008a68 <__mcmp>
 8007990:	4603      	mov	r3, r0
 8007992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007994:	4611      	mov	r1, r2
 8007996:	4620      	mov	r0, r4
 8007998:	9309      	str	r3, [sp, #36]	; 0x24
 800799a:	f000 fe46 	bl	800862a <_Bfree>
 800799e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a0:	b9a3      	cbnz	r3, 80079cc <_dtoa_r+0xa04>
 80079a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079a4:	b992      	cbnz	r2, 80079cc <_dtoa_r+0xa04>
 80079a6:	9a08      	ldr	r2, [sp, #32]
 80079a8:	b982      	cbnz	r2, 80079cc <_dtoa_r+0xa04>
 80079aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079ae:	d029      	beq.n	8007a04 <_dtoa_r+0xa3c>
 80079b0:	9b02      	ldr	r3, [sp, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dd01      	ble.n	80079ba <_dtoa_r+0x9f2>
 80079b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80079ba:	9b07      	ldr	r3, [sp, #28]
 80079bc:	1c5d      	adds	r5, r3, #1
 80079be:	f883 8000 	strb.w	r8, [r3]
 80079c2:	e784      	b.n	80078ce <_dtoa_r+0x906>
 80079c4:	4638      	mov	r0, r7
 80079c6:	e7c2      	b.n	800794e <_dtoa_r+0x986>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e7e3      	b.n	8007994 <_dtoa_r+0x9cc>
 80079cc:	9a02      	ldr	r2, [sp, #8]
 80079ce:	2a00      	cmp	r2, #0
 80079d0:	db04      	blt.n	80079dc <_dtoa_r+0xa14>
 80079d2:	d123      	bne.n	8007a1c <_dtoa_r+0xa54>
 80079d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079d6:	bb0a      	cbnz	r2, 8007a1c <_dtoa_r+0xa54>
 80079d8:	9a08      	ldr	r2, [sp, #32]
 80079da:	b9fa      	cbnz	r2, 8007a1c <_dtoa_r+0xa54>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	ddec      	ble.n	80079ba <_dtoa_r+0x9f2>
 80079e0:	4659      	mov	r1, fp
 80079e2:	2201      	movs	r2, #1
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 ffeb 	bl	80089c0 <__lshift>
 80079ea:	4631      	mov	r1, r6
 80079ec:	4683      	mov	fp, r0
 80079ee:	f001 f83b 	bl	8008a68 <__mcmp>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	dc03      	bgt.n	80079fe <_dtoa_r+0xa36>
 80079f6:	d1e0      	bne.n	80079ba <_dtoa_r+0x9f2>
 80079f8:	f018 0f01 	tst.w	r8, #1
 80079fc:	d0dd      	beq.n	80079ba <_dtoa_r+0x9f2>
 80079fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a02:	d1d8      	bne.n	80079b6 <_dtoa_r+0x9ee>
 8007a04:	9b07      	ldr	r3, [sp, #28]
 8007a06:	9a07      	ldr	r2, [sp, #28]
 8007a08:	1c5d      	adds	r5, r3, #1
 8007a0a:	2339      	movs	r3, #57	; 0x39
 8007a0c:	7013      	strb	r3, [r2, #0]
 8007a0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a12:	1e6a      	subs	r2, r5, #1
 8007a14:	2b39      	cmp	r3, #57	; 0x39
 8007a16:	d04d      	beq.n	8007ab4 <_dtoa_r+0xaec>
 8007a18:	3301      	adds	r3, #1
 8007a1a:	e052      	b.n	8007ac2 <_dtoa_r+0xafa>
 8007a1c:	9a07      	ldr	r2, [sp, #28]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f102 0501 	add.w	r5, r2, #1
 8007a24:	dd06      	ble.n	8007a34 <_dtoa_r+0xa6c>
 8007a26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a2a:	d0eb      	beq.n	8007a04 <_dtoa_r+0xa3c>
 8007a2c:	f108 0801 	add.w	r8, r8, #1
 8007a30:	9b07      	ldr	r3, [sp, #28]
 8007a32:	e7c4      	b.n	80079be <_dtoa_r+0x9f6>
 8007a34:	9b06      	ldr	r3, [sp, #24]
 8007a36:	9a04      	ldr	r2, [sp, #16]
 8007a38:	1aeb      	subs	r3, r5, r3
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007a40:	d021      	beq.n	8007a86 <_dtoa_r+0xabe>
 8007a42:	4659      	mov	r1, fp
 8007a44:	2300      	movs	r3, #0
 8007a46:	220a      	movs	r2, #10
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fe05 	bl	8008658 <__multadd>
 8007a4e:	45b9      	cmp	r9, r7
 8007a50:	4683      	mov	fp, r0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	f04f 020a 	mov.w	r2, #10
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	d105      	bne.n	8007a6c <_dtoa_r+0xaa4>
 8007a60:	f000 fdfa 	bl	8008658 <__multadd>
 8007a64:	4681      	mov	r9, r0
 8007a66:	4607      	mov	r7, r0
 8007a68:	9507      	str	r5, [sp, #28]
 8007a6a:	e778      	b.n	800795e <_dtoa_r+0x996>
 8007a6c:	f000 fdf4 	bl	8008658 <__multadd>
 8007a70:	4639      	mov	r1, r7
 8007a72:	4681      	mov	r9, r0
 8007a74:	2300      	movs	r3, #0
 8007a76:	220a      	movs	r2, #10
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 fded 	bl	8008658 <__multadd>
 8007a7e:	4607      	mov	r7, r0
 8007a80:	e7f2      	b.n	8007a68 <_dtoa_r+0xaa0>
 8007a82:	f04f 0900 	mov.w	r9, #0
 8007a86:	4659      	mov	r1, fp
 8007a88:	2201      	movs	r2, #1
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 ff98 	bl	80089c0 <__lshift>
 8007a90:	4631      	mov	r1, r6
 8007a92:	4683      	mov	fp, r0
 8007a94:	f000 ffe8 	bl	8008a68 <__mcmp>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dcb8      	bgt.n	8007a0e <_dtoa_r+0xa46>
 8007a9c:	d102      	bne.n	8007aa4 <_dtoa_r+0xadc>
 8007a9e:	f018 0f01 	tst.w	r8, #1
 8007aa2:	d1b4      	bne.n	8007a0e <_dtoa_r+0xa46>
 8007aa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007aa8:	1e6a      	subs	r2, r5, #1
 8007aaa:	2b30      	cmp	r3, #48	; 0x30
 8007aac:	f47f af0f 	bne.w	80078ce <_dtoa_r+0x906>
 8007ab0:	4615      	mov	r5, r2
 8007ab2:	e7f7      	b.n	8007aa4 <_dtoa_r+0xadc>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d105      	bne.n	8007ac6 <_dtoa_r+0xafe>
 8007aba:	2331      	movs	r3, #49	; 0x31
 8007abc:	9a06      	ldr	r2, [sp, #24]
 8007abe:	f10a 0a01 	add.w	sl, sl, #1
 8007ac2:	7013      	strb	r3, [r2, #0]
 8007ac4:	e703      	b.n	80078ce <_dtoa_r+0x906>
 8007ac6:	4615      	mov	r5, r2
 8007ac8:	e7a1      	b.n	8007a0e <_dtoa_r+0xa46>
 8007aca:	4b17      	ldr	r3, [pc, #92]	; (8007b28 <_dtoa_r+0xb60>)
 8007acc:	f7ff bae1 	b.w	8007092 <_dtoa_r+0xca>
 8007ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f47f aabb 	bne.w	800704e <_dtoa_r+0x86>
 8007ad8:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <_dtoa_r+0xb64>)
 8007ada:	f7ff bada 	b.w	8007092 <_dtoa_r+0xca>
 8007ade:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	f77f ae3f 	ble.w	8007764 <_dtoa_r+0x79c>
 8007ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ae8:	9308      	str	r3, [sp, #32]
 8007aea:	e653      	b.n	8007794 <_dtoa_r+0x7cc>
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	dc03      	bgt.n	8007afa <_dtoa_r+0xb32>
 8007af2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	f73f aed5 	bgt.w	80078a4 <_dtoa_r+0x8dc>
 8007afa:	9d06      	ldr	r5, [sp, #24]
 8007afc:	4631      	mov	r1, r6
 8007afe:	4658      	mov	r0, fp
 8007b00:	f7ff f9d4 	bl	8006eac <quorem>
 8007b04:	9b06      	ldr	r3, [sp, #24]
 8007b06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007b0a:	f805 8b01 	strb.w	r8, [r5], #1
 8007b0e:	9a04      	ldr	r2, [sp, #16]
 8007b10:	1aeb      	subs	r3, r5, r3
 8007b12:	429a      	cmp	r2, r3
 8007b14:	ddb5      	ble.n	8007a82 <_dtoa_r+0xaba>
 8007b16:	4659      	mov	r1, fp
 8007b18:	2300      	movs	r3, #0
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 fd9b 	bl	8008658 <__multadd>
 8007b22:	4683      	mov	fp, r0
 8007b24:	e7ea      	b.n	8007afc <_dtoa_r+0xb34>
 8007b26:	bf00      	nop
 8007b28:	08009540 	.word	0x08009540
 8007b2c:	080095b8 	.word	0x080095b8

08007b30 <__sflush_r>:
 8007b30:	898a      	ldrh	r2, [r1, #12]
 8007b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b36:	4605      	mov	r5, r0
 8007b38:	0710      	lsls	r0, r2, #28
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	d458      	bmi.n	8007bf0 <__sflush_r+0xc0>
 8007b3e:	684b      	ldr	r3, [r1, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dc05      	bgt.n	8007b50 <__sflush_r+0x20>
 8007b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dc02      	bgt.n	8007b50 <__sflush_r+0x20>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b52:	2e00      	cmp	r6, #0
 8007b54:	d0f9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b5c:	682f      	ldr	r7, [r5, #0]
 8007b5e:	6a21      	ldr	r1, [r4, #32]
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	d032      	beq.n	8007bca <__sflush_r+0x9a>
 8007b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	075a      	lsls	r2, r3, #29
 8007b6a:	d505      	bpl.n	8007b78 <__sflush_r+0x48>
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	1ac0      	subs	r0, r0, r3
 8007b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b72:	b10b      	cbz	r3, 8007b78 <__sflush_r+0x48>
 8007b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b76:	1ac0      	subs	r0, r0, r3
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b7e:	6a21      	ldr	r1, [r4, #32]
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b0      	blx	r6
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	d106      	bne.n	8007b98 <__sflush_r+0x68>
 8007b8a:	6829      	ldr	r1, [r5, #0]
 8007b8c:	291d      	cmp	r1, #29
 8007b8e:	d848      	bhi.n	8007c22 <__sflush_r+0xf2>
 8007b90:	4a29      	ldr	r2, [pc, #164]	; (8007c38 <__sflush_r+0x108>)
 8007b92:	40ca      	lsrs	r2, r1
 8007b94:	07d6      	lsls	r6, r2, #31
 8007b96:	d544      	bpl.n	8007c22 <__sflush_r+0xf2>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	6062      	str	r2, [r4, #4]
 8007b9c:	6922      	ldr	r2, [r4, #16]
 8007b9e:	04d9      	lsls	r1, r3, #19
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	d504      	bpl.n	8007bae <__sflush_r+0x7e>
 8007ba4:	1c42      	adds	r2, r0, #1
 8007ba6:	d101      	bne.n	8007bac <__sflush_r+0x7c>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b903      	cbnz	r3, 8007bae <__sflush_r+0x7e>
 8007bac:	6560      	str	r0, [r4, #84]	; 0x54
 8007bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bb0:	602f      	str	r7, [r5, #0]
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	d0c9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	d002      	beq.n	8007bc4 <__sflush_r+0x94>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f001 f906 	bl	8008dd0 <_free_r>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8007bc8:	e7c0      	b.n	8007b4c <__sflush_r+0x1c>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b0      	blx	r6
 8007bd0:	1c41      	adds	r1, r0, #1
 8007bd2:	d1c8      	bne.n	8007b66 <__sflush_r+0x36>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0c5      	beq.n	8007b66 <__sflush_r+0x36>
 8007bda:	2b1d      	cmp	r3, #29
 8007bdc:	d001      	beq.n	8007be2 <__sflush_r+0xb2>
 8007bde:	2b16      	cmp	r3, #22
 8007be0:	d101      	bne.n	8007be6 <__sflush_r+0xb6>
 8007be2:	602f      	str	r7, [r5, #0]
 8007be4:	e7b1      	b.n	8007b4a <__sflush_r+0x1a>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	e7ad      	b.n	8007b4c <__sflush_r+0x1c>
 8007bf0:	690f      	ldr	r7, [r1, #16]
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d0a9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007bf6:	0793      	lsls	r3, r2, #30
 8007bf8:	bf18      	it	ne
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	680e      	ldr	r6, [r1, #0]
 8007bfe:	bf08      	it	eq
 8007c00:	694b      	ldreq	r3, [r1, #20]
 8007c02:	eba6 0807 	sub.w	r8, r6, r7
 8007c06:	600f      	str	r7, [r1, #0]
 8007c08:	608b      	str	r3, [r1, #8]
 8007c0a:	f1b8 0f00 	cmp.w	r8, #0
 8007c0e:	dd9c      	ble.n	8007b4a <__sflush_r+0x1a>
 8007c10:	4643      	mov	r3, r8
 8007c12:	463a      	mov	r2, r7
 8007c14:	6a21      	ldr	r1, [r4, #32]
 8007c16:	4628      	mov	r0, r5
 8007c18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c1a:	47b0      	blx	r6
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	dc06      	bgt.n	8007c2e <__sflush_r+0xfe>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c2c:	e78e      	b.n	8007b4c <__sflush_r+0x1c>
 8007c2e:	4407      	add	r7, r0
 8007c30:	eba8 0800 	sub.w	r8, r8, r0
 8007c34:	e7e9      	b.n	8007c0a <__sflush_r+0xda>
 8007c36:	bf00      	nop
 8007c38:	20400001 	.word	0x20400001

08007c3c <_fflush_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	690b      	ldr	r3, [r1, #16]
 8007c40:	4605      	mov	r5, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	b1db      	cbz	r3, 8007c7e <_fflush_r+0x42>
 8007c46:	b118      	cbz	r0, 8007c50 <_fflush_r+0x14>
 8007c48:	6983      	ldr	r3, [r0, #24]
 8007c4a:	b90b      	cbnz	r3, 8007c50 <_fflush_r+0x14>
 8007c4c:	f000 f860 	bl	8007d10 <__sinit>
 8007c50:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <_fflush_r+0x48>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d109      	bne.n	8007c6a <_fflush_r+0x2e>
 8007c56:	686c      	ldr	r4, [r5, #4]
 8007c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5c:	b17b      	cbz	r3, 8007c7e <_fflush_r+0x42>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c66:	f7ff bf63 	b.w	8007b30 <__sflush_r>
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <_fflush_r+0x4c>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d101      	bne.n	8007c74 <_fflush_r+0x38>
 8007c70:	68ac      	ldr	r4, [r5, #8]
 8007c72:	e7f1      	b.n	8007c58 <_fflush_r+0x1c>
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <_fflush_r+0x50>)
 8007c76:	429c      	cmp	r4, r3
 8007c78:	bf08      	it	eq
 8007c7a:	68ec      	ldreq	r4, [r5, #12]
 8007c7c:	e7ec      	b.n	8007c58 <_fflush_r+0x1c>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
 8007c82:	bf00      	nop
 8007c84:	080095e8 	.word	0x080095e8
 8007c88:	08009608 	.word	0x08009608
 8007c8c:	080095c8 	.word	0x080095c8

08007c90 <std>:
 8007c90:	2300      	movs	r3, #0
 8007c92:	b510      	push	{r4, lr}
 8007c94:	4604      	mov	r4, r0
 8007c96:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9a:	6083      	str	r3, [r0, #8]
 8007c9c:	8181      	strh	r1, [r0, #12]
 8007c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ca0:	81c2      	strh	r2, [r0, #14]
 8007ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca6:	6183      	str	r3, [r0, #24]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	2208      	movs	r2, #8
 8007cac:	305c      	adds	r0, #92	; 0x5c
 8007cae:	f7fd fd33 	bl	8005718 <memset>
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <std+0x38>)
 8007cb4:	6224      	str	r4, [r4, #32]
 8007cb6:	6263      	str	r3, [r4, #36]	; 0x24
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <std+0x3c>)
 8007cba:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <std+0x40>)
 8007cbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cc0:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <std+0x44>)
 8007cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop
 8007cc8:	080091b9 	.word	0x080091b9
 8007ccc:	080091db 	.word	0x080091db
 8007cd0:	08009213 	.word	0x08009213
 8007cd4:	08009237 	.word	0x08009237

08007cd8 <_cleanup_r>:
 8007cd8:	4901      	ldr	r1, [pc, #4]	; (8007ce0 <_cleanup_r+0x8>)
 8007cda:	f000 b885 	b.w	8007de8 <_fwalk_reent>
 8007cde:	bf00      	nop
 8007ce0:	08007c3d 	.word	0x08007c3d

08007ce4 <__sfmoreglue>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	2568      	movs	r5, #104	; 0x68
 8007ce8:	1e4a      	subs	r2, r1, #1
 8007cea:	4355      	muls	r5, r2
 8007cec:	460e      	mov	r6, r1
 8007cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cf2:	f001 f8b9 	bl	8008e68 <_malloc_r>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	b140      	cbz	r0, 8007d0c <__sfmoreglue+0x28>
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8007d00:	300c      	adds	r0, #12
 8007d02:	60a0      	str	r0, [r4, #8]
 8007d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d08:	f7fd fd06 	bl	8005718 <memset>
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}

08007d10 <__sinit>:
 8007d10:	6983      	ldr	r3, [r0, #24]
 8007d12:	b510      	push	{r4, lr}
 8007d14:	4604      	mov	r4, r0
 8007d16:	bb33      	cbnz	r3, 8007d66 <__sinit+0x56>
 8007d18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d1c:	6503      	str	r3, [r0, #80]	; 0x50
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <__sinit+0x58>)
 8007d20:	4a12      	ldr	r2, [pc, #72]	; (8007d6c <__sinit+0x5c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6282      	str	r2, [r0, #40]	; 0x28
 8007d26:	4298      	cmp	r0, r3
 8007d28:	bf04      	itt	eq
 8007d2a:	2301      	moveq	r3, #1
 8007d2c:	6183      	streq	r3, [r0, #24]
 8007d2e:	f000 f81f 	bl	8007d70 <__sfp>
 8007d32:	6060      	str	r0, [r4, #4]
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 f81b 	bl	8007d70 <__sfp>
 8007d3a:	60a0      	str	r0, [r4, #8]
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 f817 	bl	8007d70 <__sfp>
 8007d42:	2200      	movs	r2, #0
 8007d44:	60e0      	str	r0, [r4, #12]
 8007d46:	2104      	movs	r1, #4
 8007d48:	6860      	ldr	r0, [r4, #4]
 8007d4a:	f7ff ffa1 	bl	8007c90 <std>
 8007d4e:	2201      	movs	r2, #1
 8007d50:	2109      	movs	r1, #9
 8007d52:	68a0      	ldr	r0, [r4, #8]
 8007d54:	f7ff ff9c 	bl	8007c90 <std>
 8007d58:	2202      	movs	r2, #2
 8007d5a:	2112      	movs	r1, #18
 8007d5c:	68e0      	ldr	r0, [r4, #12]
 8007d5e:	f7ff ff97 	bl	8007c90 <std>
 8007d62:	2301      	movs	r3, #1
 8007d64:	61a3      	str	r3, [r4, #24]
 8007d66:	bd10      	pop	{r4, pc}
 8007d68:	0800952c 	.word	0x0800952c
 8007d6c:	08007cd9 	.word	0x08007cd9

08007d70 <__sfp>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <__sfp+0x70>)
 8007d74:	4607      	mov	r7, r0
 8007d76:	681e      	ldr	r6, [r3, #0]
 8007d78:	69b3      	ldr	r3, [r6, #24]
 8007d7a:	b913      	cbnz	r3, 8007d82 <__sfp+0x12>
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff ffc7 	bl	8007d10 <__sinit>
 8007d82:	3648      	adds	r6, #72	; 0x48
 8007d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	d503      	bpl.n	8007d94 <__sfp+0x24>
 8007d8c:	6833      	ldr	r3, [r6, #0]
 8007d8e:	b133      	cbz	r3, 8007d9e <__sfp+0x2e>
 8007d90:	6836      	ldr	r6, [r6, #0]
 8007d92:	e7f7      	b.n	8007d84 <__sfp+0x14>
 8007d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d98:	b16d      	cbz	r5, 8007db6 <__sfp+0x46>
 8007d9a:	3468      	adds	r4, #104	; 0x68
 8007d9c:	e7f4      	b.n	8007d88 <__sfp+0x18>
 8007d9e:	2104      	movs	r1, #4
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff ff9f 	bl	8007ce4 <__sfmoreglue>
 8007da6:	6030      	str	r0, [r6, #0]
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d1f1      	bne.n	8007d90 <__sfp+0x20>
 8007dac:	230c      	movs	r3, #12
 8007dae:	4604      	mov	r4, r0
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4620      	mov	r0, r4
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <__sfp+0x74>)
 8007db8:	6665      	str	r5, [r4, #100]	; 0x64
 8007dba:	e9c4 5500 	strd	r5, r5, [r4]
 8007dbe:	60a5      	str	r5, [r4, #8]
 8007dc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007dc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007dc8:	2208      	movs	r2, #8
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dd0:	f7fd fca2 	bl	8005718 <memset>
 8007dd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ddc:	e7e9      	b.n	8007db2 <__sfp+0x42>
 8007dde:	bf00      	nop
 8007de0:	0800952c 	.word	0x0800952c
 8007de4:	ffff0001 	.word	0xffff0001

08007de8 <_fwalk_reent>:
 8007de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	4680      	mov	r8, r0
 8007dee:	4689      	mov	r9, r1
 8007df0:	2600      	movs	r6, #0
 8007df2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007df6:	b914      	cbnz	r4, 8007dfe <_fwalk_reent+0x16>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e02:	3f01      	subs	r7, #1
 8007e04:	d501      	bpl.n	8007e0a <_fwalk_reent+0x22>
 8007e06:	6824      	ldr	r4, [r4, #0]
 8007e08:	e7f5      	b.n	8007df6 <_fwalk_reent+0xe>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d907      	bls.n	8007e20 <_fwalk_reent+0x38>
 8007e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e14:	3301      	adds	r3, #1
 8007e16:	d003      	beq.n	8007e20 <_fwalk_reent+0x38>
 8007e18:	4629      	mov	r1, r5
 8007e1a:	4640      	mov	r0, r8
 8007e1c:	47c8      	blx	r9
 8007e1e:	4306      	orrs	r6, r0
 8007e20:	3568      	adds	r5, #104	; 0x68
 8007e22:	e7ee      	b.n	8007e02 <_fwalk_reent+0x1a>

08007e24 <rshift>:
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e26:	6906      	ldr	r6, [r0, #16]
 8007e28:	114b      	asrs	r3, r1, #5
 8007e2a:	429e      	cmp	r6, r3
 8007e2c:	f100 0414 	add.w	r4, r0, #20
 8007e30:	dd31      	ble.n	8007e96 <rshift+0x72>
 8007e32:	f011 011f 	ands.w	r1, r1, #31
 8007e36:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e3a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e3e:	d108      	bne.n	8007e52 <rshift+0x2e>
 8007e40:	4621      	mov	r1, r4
 8007e42:	42b2      	cmp	r2, r6
 8007e44:	460b      	mov	r3, r1
 8007e46:	d211      	bcs.n	8007e6c <rshift+0x48>
 8007e48:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e4c:	f841 3b04 	str.w	r3, [r1], #4
 8007e50:	e7f7      	b.n	8007e42 <rshift+0x1e>
 8007e52:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e56:	4623      	mov	r3, r4
 8007e58:	f1c1 0c20 	rsb	ip, r1, #32
 8007e5c:	40cd      	lsrs	r5, r1
 8007e5e:	3204      	adds	r2, #4
 8007e60:	42b2      	cmp	r2, r6
 8007e62:	4617      	mov	r7, r2
 8007e64:	d30d      	bcc.n	8007e82 <rshift+0x5e>
 8007e66:	601d      	str	r5, [r3, #0]
 8007e68:	b105      	cbz	r5, 8007e6c <rshift+0x48>
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	eba3 0204 	sub.w	r2, r3, r4
 8007e72:	bf08      	it	eq
 8007e74:	2300      	moveq	r3, #0
 8007e76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e7a:	6102      	str	r2, [r0, #16]
 8007e7c:	bf08      	it	eq
 8007e7e:	6143      	streq	r3, [r0, #20]
 8007e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e82:	683f      	ldr	r7, [r7, #0]
 8007e84:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e88:	433d      	orrs	r5, r7
 8007e8a:	f843 5b04 	str.w	r5, [r3], #4
 8007e8e:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e92:	40cd      	lsrs	r5, r1
 8007e94:	e7e4      	b.n	8007e60 <rshift+0x3c>
 8007e96:	4623      	mov	r3, r4
 8007e98:	e7e8      	b.n	8007e6c <rshift+0x48>

08007e9a <__hexdig_fun>:
 8007e9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e9e:	2b09      	cmp	r3, #9
 8007ea0:	d802      	bhi.n	8007ea8 <__hexdig_fun+0xe>
 8007ea2:	3820      	subs	r0, #32
 8007ea4:	b2c0      	uxtb	r0, r0
 8007ea6:	4770      	bx	lr
 8007ea8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007eac:	2b05      	cmp	r3, #5
 8007eae:	d801      	bhi.n	8007eb4 <__hexdig_fun+0x1a>
 8007eb0:	3847      	subs	r0, #71	; 0x47
 8007eb2:	e7f7      	b.n	8007ea4 <__hexdig_fun+0xa>
 8007eb4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	d801      	bhi.n	8007ec0 <__hexdig_fun+0x26>
 8007ebc:	3827      	subs	r0, #39	; 0x27
 8007ebe:	e7f1      	b.n	8007ea4 <__hexdig_fun+0xa>
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	4770      	bx	lr

08007ec4 <__gethex>:
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	b08b      	sub	sp, #44	; 0x2c
 8007eca:	9002      	str	r0, [sp, #8]
 8007ecc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007ece:	468a      	mov	sl, r1
 8007ed0:	4690      	mov	r8, r2
 8007ed2:	9306      	str	r3, [sp, #24]
 8007ed4:	f000 face 	bl	8008474 <__localeconv_l>
 8007ed8:	6803      	ldr	r3, [r0, #0]
 8007eda:	f04f 0b00 	mov.w	fp, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	9303      	str	r3, [sp, #12]
 8007ee2:	f7f8 f935 	bl	8000150 <strlen>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	9001      	str	r0, [sp, #4]
 8007eea:	4403      	add	r3, r0
 8007eec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ef0:	9307      	str	r3, [sp, #28]
 8007ef2:	f8da 3000 	ldr.w	r3, [sl]
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	461f      	mov	r7, r3
 8007efa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007efe:	2830      	cmp	r0, #48	; 0x30
 8007f00:	d06c      	beq.n	8007fdc <__gethex+0x118>
 8007f02:	f7ff ffca 	bl	8007e9a <__hexdig_fun>
 8007f06:	4604      	mov	r4, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d16a      	bne.n	8007fe2 <__gethex+0x11e>
 8007f0c:	9a01      	ldr	r2, [sp, #4]
 8007f0e:	9903      	ldr	r1, [sp, #12]
 8007f10:	4638      	mov	r0, r7
 8007f12:	f001 f994 	bl	800923e <strncmp>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d166      	bne.n	8007fe8 <__gethex+0x124>
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	5cf8      	ldrb	r0, [r7, r3]
 8007f1e:	18fe      	adds	r6, r7, r3
 8007f20:	f7ff ffbb 	bl	8007e9a <__hexdig_fun>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d062      	beq.n	8007fee <__gethex+0x12a>
 8007f28:	4633      	mov	r3, r6
 8007f2a:	7818      	ldrb	r0, [r3, #0]
 8007f2c:	461f      	mov	r7, r3
 8007f2e:	2830      	cmp	r0, #48	; 0x30
 8007f30:	f103 0301 	add.w	r3, r3, #1
 8007f34:	d0f9      	beq.n	8007f2a <__gethex+0x66>
 8007f36:	f7ff ffb0 	bl	8007e9a <__hexdig_fun>
 8007f3a:	fab0 f580 	clz	r5, r0
 8007f3e:	4634      	mov	r4, r6
 8007f40:	f04f 0b01 	mov.w	fp, #1
 8007f44:	096d      	lsrs	r5, r5, #5
 8007f46:	463a      	mov	r2, r7
 8007f48:	4616      	mov	r6, r2
 8007f4a:	7830      	ldrb	r0, [r6, #0]
 8007f4c:	3201      	adds	r2, #1
 8007f4e:	f7ff ffa4 	bl	8007e9a <__hexdig_fun>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d1f8      	bne.n	8007f48 <__gethex+0x84>
 8007f56:	9a01      	ldr	r2, [sp, #4]
 8007f58:	9903      	ldr	r1, [sp, #12]
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f001 f96f 	bl	800923e <strncmp>
 8007f60:	b950      	cbnz	r0, 8007f78 <__gethex+0xb4>
 8007f62:	b954      	cbnz	r4, 8007f7a <__gethex+0xb6>
 8007f64:	9b01      	ldr	r3, [sp, #4]
 8007f66:	18f4      	adds	r4, r6, r3
 8007f68:	4622      	mov	r2, r4
 8007f6a:	4616      	mov	r6, r2
 8007f6c:	7830      	ldrb	r0, [r6, #0]
 8007f6e:	3201      	adds	r2, #1
 8007f70:	f7ff ff93 	bl	8007e9a <__hexdig_fun>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1f8      	bne.n	8007f6a <__gethex+0xa6>
 8007f78:	b10c      	cbz	r4, 8007f7e <__gethex+0xba>
 8007f7a:	1ba4      	subs	r4, r4, r6
 8007f7c:	00a4      	lsls	r4, r4, #2
 8007f7e:	7833      	ldrb	r3, [r6, #0]
 8007f80:	2b50      	cmp	r3, #80	; 0x50
 8007f82:	d001      	beq.n	8007f88 <__gethex+0xc4>
 8007f84:	2b70      	cmp	r3, #112	; 0x70
 8007f86:	d140      	bne.n	800800a <__gethex+0x146>
 8007f88:	7873      	ldrb	r3, [r6, #1]
 8007f8a:	2b2b      	cmp	r3, #43	; 0x2b
 8007f8c:	d031      	beq.n	8007ff2 <__gethex+0x12e>
 8007f8e:	2b2d      	cmp	r3, #45	; 0x2d
 8007f90:	d033      	beq.n	8007ffa <__gethex+0x136>
 8007f92:	f04f 0900 	mov.w	r9, #0
 8007f96:	1c71      	adds	r1, r6, #1
 8007f98:	7808      	ldrb	r0, [r1, #0]
 8007f9a:	f7ff ff7e 	bl	8007e9a <__hexdig_fun>
 8007f9e:	1e43      	subs	r3, r0, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b18      	cmp	r3, #24
 8007fa4:	d831      	bhi.n	800800a <__gethex+0x146>
 8007fa6:	f1a0 0210 	sub.w	r2, r0, #16
 8007faa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fae:	f7ff ff74 	bl	8007e9a <__hexdig_fun>
 8007fb2:	1e43      	subs	r3, r0, #1
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b18      	cmp	r3, #24
 8007fb8:	d922      	bls.n	8008000 <__gethex+0x13c>
 8007fba:	f1b9 0f00 	cmp.w	r9, #0
 8007fbe:	d000      	beq.n	8007fc2 <__gethex+0xfe>
 8007fc0:	4252      	negs	r2, r2
 8007fc2:	4414      	add	r4, r2
 8007fc4:	f8ca 1000 	str.w	r1, [sl]
 8007fc8:	b30d      	cbz	r5, 800800e <__gethex+0x14a>
 8007fca:	f1bb 0f00 	cmp.w	fp, #0
 8007fce:	bf0c      	ite	eq
 8007fd0:	2706      	moveq	r7, #6
 8007fd2:	2700      	movne	r7, #0
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	b00b      	add	sp, #44	; 0x2c
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	f10b 0b01 	add.w	fp, fp, #1
 8007fe0:	e78a      	b.n	8007ef8 <__gethex+0x34>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	462c      	mov	r4, r5
 8007fe6:	e7ae      	b.n	8007f46 <__gethex+0x82>
 8007fe8:	463e      	mov	r6, r7
 8007fea:	2501      	movs	r5, #1
 8007fec:	e7c7      	b.n	8007f7e <__gethex+0xba>
 8007fee:	4604      	mov	r4, r0
 8007ff0:	e7fb      	b.n	8007fea <__gethex+0x126>
 8007ff2:	f04f 0900 	mov.w	r9, #0
 8007ff6:	1cb1      	adds	r1, r6, #2
 8007ff8:	e7ce      	b.n	8007f98 <__gethex+0xd4>
 8007ffa:	f04f 0901 	mov.w	r9, #1
 8007ffe:	e7fa      	b.n	8007ff6 <__gethex+0x132>
 8008000:	230a      	movs	r3, #10
 8008002:	fb03 0202 	mla	r2, r3, r2, r0
 8008006:	3a10      	subs	r2, #16
 8008008:	e7cf      	b.n	8007faa <__gethex+0xe6>
 800800a:	4631      	mov	r1, r6
 800800c:	e7da      	b.n	8007fc4 <__gethex+0x100>
 800800e:	4629      	mov	r1, r5
 8008010:	1bf3      	subs	r3, r6, r7
 8008012:	3b01      	subs	r3, #1
 8008014:	2b07      	cmp	r3, #7
 8008016:	dc49      	bgt.n	80080ac <__gethex+0x1e8>
 8008018:	9802      	ldr	r0, [sp, #8]
 800801a:	f000 fad2 	bl	80085c2 <_Balloc>
 800801e:	f04f 0b00 	mov.w	fp, #0
 8008022:	4605      	mov	r5, r0
 8008024:	46da      	mov	sl, fp
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	f100 0914 	add.w	r9, r0, #20
 800802c:	f1c3 0301 	rsb	r3, r3, #1
 8008030:	f8cd 9010 	str.w	r9, [sp, #16]
 8008034:	9308      	str	r3, [sp, #32]
 8008036:	42b7      	cmp	r7, r6
 8008038:	d33b      	bcc.n	80080b2 <__gethex+0x1ee>
 800803a:	9804      	ldr	r0, [sp, #16]
 800803c:	f840 ab04 	str.w	sl, [r0], #4
 8008040:	eba0 0009 	sub.w	r0, r0, r9
 8008044:	1080      	asrs	r0, r0, #2
 8008046:	6128      	str	r0, [r5, #16]
 8008048:	0147      	lsls	r7, r0, #5
 800804a:	4650      	mov	r0, sl
 800804c:	f000 fb7d 	bl	800874a <__hi0bits>
 8008050:	f8d8 6000 	ldr.w	r6, [r8]
 8008054:	1a3f      	subs	r7, r7, r0
 8008056:	42b7      	cmp	r7, r6
 8008058:	dd64      	ble.n	8008124 <__gethex+0x260>
 800805a:	1bbf      	subs	r7, r7, r6
 800805c:	4639      	mov	r1, r7
 800805e:	4628      	mov	r0, r5
 8008060:	f000 fe87 	bl	8008d72 <__any_on>
 8008064:	4682      	mov	sl, r0
 8008066:	b178      	cbz	r0, 8008088 <__gethex+0x1c4>
 8008068:	f04f 0a01 	mov.w	sl, #1
 800806c:	1e7b      	subs	r3, r7, #1
 800806e:	1159      	asrs	r1, r3, #5
 8008070:	f003 021f 	and.w	r2, r3, #31
 8008074:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008078:	fa0a f202 	lsl.w	r2, sl, r2
 800807c:	420a      	tst	r2, r1
 800807e:	d003      	beq.n	8008088 <__gethex+0x1c4>
 8008080:	4553      	cmp	r3, sl
 8008082:	dc46      	bgt.n	8008112 <__gethex+0x24e>
 8008084:	f04f 0a02 	mov.w	sl, #2
 8008088:	4639      	mov	r1, r7
 800808a:	4628      	mov	r0, r5
 800808c:	f7ff feca 	bl	8007e24 <rshift>
 8008090:	443c      	add	r4, r7
 8008092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008096:	42a3      	cmp	r3, r4
 8008098:	da52      	bge.n	8008140 <__gethex+0x27c>
 800809a:	4629      	mov	r1, r5
 800809c:	9802      	ldr	r0, [sp, #8]
 800809e:	f000 fac4 	bl	800862a <_Bfree>
 80080a2:	2300      	movs	r3, #0
 80080a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080a6:	27a3      	movs	r7, #163	; 0xa3
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e793      	b.n	8007fd4 <__gethex+0x110>
 80080ac:	3101      	adds	r1, #1
 80080ae:	105b      	asrs	r3, r3, #1
 80080b0:	e7b0      	b.n	8008014 <__gethex+0x150>
 80080b2:	1e73      	subs	r3, r6, #1
 80080b4:	9305      	str	r3, [sp, #20]
 80080b6:	9a07      	ldr	r2, [sp, #28]
 80080b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080bc:	4293      	cmp	r3, r2
 80080be:	d018      	beq.n	80080f2 <__gethex+0x22e>
 80080c0:	f1bb 0f20 	cmp.w	fp, #32
 80080c4:	d107      	bne.n	80080d6 <__gethex+0x212>
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	f8c3 a000 	str.w	sl, [r3]
 80080cc:	f04f 0a00 	mov.w	sl, #0
 80080d0:	46d3      	mov	fp, sl
 80080d2:	3304      	adds	r3, #4
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080da:	f7ff fede 	bl	8007e9a <__hexdig_fun>
 80080de:	f000 000f 	and.w	r0, r0, #15
 80080e2:	fa00 f00b 	lsl.w	r0, r0, fp
 80080e6:	ea4a 0a00 	orr.w	sl, sl, r0
 80080ea:	f10b 0b04 	add.w	fp, fp, #4
 80080ee:	9b05      	ldr	r3, [sp, #20]
 80080f0:	e00d      	b.n	800810e <__gethex+0x24a>
 80080f2:	9b05      	ldr	r3, [sp, #20]
 80080f4:	9a08      	ldr	r2, [sp, #32]
 80080f6:	4413      	add	r3, r2
 80080f8:	42bb      	cmp	r3, r7
 80080fa:	d3e1      	bcc.n	80080c0 <__gethex+0x1fc>
 80080fc:	4618      	mov	r0, r3
 80080fe:	9a01      	ldr	r2, [sp, #4]
 8008100:	9903      	ldr	r1, [sp, #12]
 8008102:	9309      	str	r3, [sp, #36]	; 0x24
 8008104:	f001 f89b 	bl	800923e <strncmp>
 8008108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810a:	2800      	cmp	r0, #0
 800810c:	d1d8      	bne.n	80080c0 <__gethex+0x1fc>
 800810e:	461e      	mov	r6, r3
 8008110:	e791      	b.n	8008036 <__gethex+0x172>
 8008112:	1eb9      	subs	r1, r7, #2
 8008114:	4628      	mov	r0, r5
 8008116:	f000 fe2c 	bl	8008d72 <__any_on>
 800811a:	2800      	cmp	r0, #0
 800811c:	d0b2      	beq.n	8008084 <__gethex+0x1c0>
 800811e:	f04f 0a03 	mov.w	sl, #3
 8008122:	e7b1      	b.n	8008088 <__gethex+0x1c4>
 8008124:	da09      	bge.n	800813a <__gethex+0x276>
 8008126:	1bf7      	subs	r7, r6, r7
 8008128:	4629      	mov	r1, r5
 800812a:	463a      	mov	r2, r7
 800812c:	9802      	ldr	r0, [sp, #8]
 800812e:	f000 fc47 	bl	80089c0 <__lshift>
 8008132:	4605      	mov	r5, r0
 8008134:	1be4      	subs	r4, r4, r7
 8008136:	f100 0914 	add.w	r9, r0, #20
 800813a:	f04f 0a00 	mov.w	sl, #0
 800813e:	e7a8      	b.n	8008092 <__gethex+0x1ce>
 8008140:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008144:	42a0      	cmp	r0, r4
 8008146:	dd6b      	ble.n	8008220 <__gethex+0x35c>
 8008148:	1b04      	subs	r4, r0, r4
 800814a:	42a6      	cmp	r6, r4
 800814c:	dc2e      	bgt.n	80081ac <__gethex+0x2e8>
 800814e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d022      	beq.n	800819c <__gethex+0x2d8>
 8008156:	2b03      	cmp	r3, #3
 8008158:	d024      	beq.n	80081a4 <__gethex+0x2e0>
 800815a:	2b01      	cmp	r3, #1
 800815c:	d115      	bne.n	800818a <__gethex+0x2c6>
 800815e:	42a6      	cmp	r6, r4
 8008160:	d113      	bne.n	800818a <__gethex+0x2c6>
 8008162:	2e01      	cmp	r6, #1
 8008164:	dc0b      	bgt.n	800817e <__gethex+0x2ba>
 8008166:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800816a:	9a06      	ldr	r2, [sp, #24]
 800816c:	2762      	movs	r7, #98	; 0x62
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	2301      	movs	r3, #1
 8008172:	612b      	str	r3, [r5, #16]
 8008174:	f8c9 3000 	str.w	r3, [r9]
 8008178:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800817a:	601d      	str	r5, [r3, #0]
 800817c:	e72a      	b.n	8007fd4 <__gethex+0x110>
 800817e:	1e71      	subs	r1, r6, #1
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fdf6 	bl	8008d72 <__any_on>
 8008186:	2800      	cmp	r0, #0
 8008188:	d1ed      	bne.n	8008166 <__gethex+0x2a2>
 800818a:	4629      	mov	r1, r5
 800818c:	9802      	ldr	r0, [sp, #8]
 800818e:	f000 fa4c 	bl	800862a <_Bfree>
 8008192:	2300      	movs	r3, #0
 8008194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008196:	2750      	movs	r7, #80	; 0x50
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e71b      	b.n	8007fd4 <__gethex+0x110>
 800819c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0e1      	beq.n	8008166 <__gethex+0x2a2>
 80081a2:	e7f2      	b.n	800818a <__gethex+0x2c6>
 80081a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1dd      	bne.n	8008166 <__gethex+0x2a2>
 80081aa:	e7ee      	b.n	800818a <__gethex+0x2c6>
 80081ac:	1e67      	subs	r7, r4, #1
 80081ae:	f1ba 0f00 	cmp.w	sl, #0
 80081b2:	d132      	bne.n	800821a <__gethex+0x356>
 80081b4:	b127      	cbz	r7, 80081c0 <__gethex+0x2fc>
 80081b6:	4639      	mov	r1, r7
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 fdda 	bl	8008d72 <__any_on>
 80081be:	4682      	mov	sl, r0
 80081c0:	2301      	movs	r3, #1
 80081c2:	117a      	asrs	r2, r7, #5
 80081c4:	f007 071f 	and.w	r7, r7, #31
 80081c8:	fa03 f707 	lsl.w	r7, r3, r7
 80081cc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081d0:	4621      	mov	r1, r4
 80081d2:	421f      	tst	r7, r3
 80081d4:	f04f 0702 	mov.w	r7, #2
 80081d8:	4628      	mov	r0, r5
 80081da:	bf18      	it	ne
 80081dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80081e0:	1b36      	subs	r6, r6, r4
 80081e2:	f7ff fe1f 	bl	8007e24 <rshift>
 80081e6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081ea:	f1ba 0f00 	cmp.w	sl, #0
 80081ee:	d048      	beq.n	8008282 <__gethex+0x3be>
 80081f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d015      	beq.n	8008224 <__gethex+0x360>
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d017      	beq.n	800822c <__gethex+0x368>
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d109      	bne.n	8008214 <__gethex+0x350>
 8008200:	f01a 0f02 	tst.w	sl, #2
 8008204:	d006      	beq.n	8008214 <__gethex+0x350>
 8008206:	f8d9 3000 	ldr.w	r3, [r9]
 800820a:	ea4a 0a03 	orr.w	sl, sl, r3
 800820e:	f01a 0f01 	tst.w	sl, #1
 8008212:	d10e      	bne.n	8008232 <__gethex+0x36e>
 8008214:	f047 0710 	orr.w	r7, r7, #16
 8008218:	e033      	b.n	8008282 <__gethex+0x3be>
 800821a:	f04f 0a01 	mov.w	sl, #1
 800821e:	e7cf      	b.n	80081c0 <__gethex+0x2fc>
 8008220:	2701      	movs	r7, #1
 8008222:	e7e2      	b.n	80081ea <__gethex+0x326>
 8008224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008226:	f1c3 0301 	rsb	r3, r3, #1
 800822a:	9315      	str	r3, [sp, #84]	; 0x54
 800822c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f0      	beq.n	8008214 <__gethex+0x350>
 8008232:	f04f 0c00 	mov.w	ip, #0
 8008236:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800823a:	f105 0314 	add.w	r3, r5, #20
 800823e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008242:	eb03 010a 	add.w	r1, r3, sl
 8008246:	4618      	mov	r0, r3
 8008248:	f853 2b04 	ldr.w	r2, [r3], #4
 800824c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008250:	d01c      	beq.n	800828c <__gethex+0x3c8>
 8008252:	3201      	adds	r2, #1
 8008254:	6002      	str	r2, [r0, #0]
 8008256:	2f02      	cmp	r7, #2
 8008258:	f105 0314 	add.w	r3, r5, #20
 800825c:	d138      	bne.n	80082d0 <__gethex+0x40c>
 800825e:	f8d8 2000 	ldr.w	r2, [r8]
 8008262:	3a01      	subs	r2, #1
 8008264:	42b2      	cmp	r2, r6
 8008266:	d10a      	bne.n	800827e <__gethex+0x3ba>
 8008268:	2201      	movs	r2, #1
 800826a:	1171      	asrs	r1, r6, #5
 800826c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008270:	f006 061f 	and.w	r6, r6, #31
 8008274:	fa02 f606 	lsl.w	r6, r2, r6
 8008278:	421e      	tst	r6, r3
 800827a:	bf18      	it	ne
 800827c:	4617      	movne	r7, r2
 800827e:	f047 0720 	orr.w	r7, r7, #32
 8008282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008284:	601d      	str	r5, [r3, #0]
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	601c      	str	r4, [r3, #0]
 800828a:	e6a3      	b.n	8007fd4 <__gethex+0x110>
 800828c:	4299      	cmp	r1, r3
 800828e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008292:	d8d8      	bhi.n	8008246 <__gethex+0x382>
 8008294:	68ab      	ldr	r3, [r5, #8]
 8008296:	4599      	cmp	r9, r3
 8008298:	db12      	blt.n	80082c0 <__gethex+0x3fc>
 800829a:	6869      	ldr	r1, [r5, #4]
 800829c:	9802      	ldr	r0, [sp, #8]
 800829e:	3101      	adds	r1, #1
 80082a0:	f000 f98f 	bl	80085c2 <_Balloc>
 80082a4:	4683      	mov	fp, r0
 80082a6:	692a      	ldr	r2, [r5, #16]
 80082a8:	f105 010c 	add.w	r1, r5, #12
 80082ac:	3202      	adds	r2, #2
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	300c      	adds	r0, #12
 80082b2:	f000 f97b 	bl	80085ac <memcpy>
 80082b6:	4629      	mov	r1, r5
 80082b8:	9802      	ldr	r0, [sp, #8]
 80082ba:	f000 f9b6 	bl	800862a <_Bfree>
 80082be:	465d      	mov	r5, fp
 80082c0:	692b      	ldr	r3, [r5, #16]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	612a      	str	r2, [r5, #16]
 80082c6:	2201      	movs	r2, #1
 80082c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082cc:	615a      	str	r2, [r3, #20]
 80082ce:	e7c2      	b.n	8008256 <__gethex+0x392>
 80082d0:	692a      	ldr	r2, [r5, #16]
 80082d2:	454a      	cmp	r2, r9
 80082d4:	dd0b      	ble.n	80082ee <__gethex+0x42a>
 80082d6:	2101      	movs	r1, #1
 80082d8:	4628      	mov	r0, r5
 80082da:	f7ff fda3 	bl	8007e24 <rshift>
 80082de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e2:	3401      	adds	r4, #1
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	f6ff aed8 	blt.w	800809a <__gethex+0x1d6>
 80082ea:	2701      	movs	r7, #1
 80082ec:	e7c7      	b.n	800827e <__gethex+0x3ba>
 80082ee:	f016 061f 	ands.w	r6, r6, #31
 80082f2:	d0fa      	beq.n	80082ea <__gethex+0x426>
 80082f4:	449a      	add	sl, r3
 80082f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082fa:	f000 fa26 	bl	800874a <__hi0bits>
 80082fe:	f1c6 0620 	rsb	r6, r6, #32
 8008302:	42b0      	cmp	r0, r6
 8008304:	dbe7      	blt.n	80082d6 <__gethex+0x412>
 8008306:	e7f0      	b.n	80082ea <__gethex+0x426>

08008308 <L_shift>:
 8008308:	f1c2 0208 	rsb	r2, r2, #8
 800830c:	0092      	lsls	r2, r2, #2
 800830e:	b570      	push	{r4, r5, r6, lr}
 8008310:	f1c2 0620 	rsb	r6, r2, #32
 8008314:	6843      	ldr	r3, [r0, #4]
 8008316:	6804      	ldr	r4, [r0, #0]
 8008318:	fa03 f506 	lsl.w	r5, r3, r6
 800831c:	432c      	orrs	r4, r5
 800831e:	40d3      	lsrs	r3, r2
 8008320:	6004      	str	r4, [r0, #0]
 8008322:	f840 3f04 	str.w	r3, [r0, #4]!
 8008326:	4288      	cmp	r0, r1
 8008328:	d3f4      	bcc.n	8008314 <L_shift+0xc>
 800832a:	bd70      	pop	{r4, r5, r6, pc}

0800832c <__match>:
 800832c:	b530      	push	{r4, r5, lr}
 800832e:	6803      	ldr	r3, [r0, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	b914      	cbnz	r4, 800833e <__match+0x12>
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	2001      	movs	r0, #1
 800833c:	bd30      	pop	{r4, r5, pc}
 800833e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008342:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008346:	2d19      	cmp	r5, #25
 8008348:	bf98      	it	ls
 800834a:	3220      	addls	r2, #32
 800834c:	42a2      	cmp	r2, r4
 800834e:	d0f0      	beq.n	8008332 <__match+0x6>
 8008350:	2000      	movs	r0, #0
 8008352:	e7f3      	b.n	800833c <__match+0x10>

08008354 <__hexnan>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	2500      	movs	r5, #0
 800835a:	680b      	ldr	r3, [r1, #0]
 800835c:	4682      	mov	sl, r0
 800835e:	115f      	asrs	r7, r3, #5
 8008360:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008364:	f013 031f 	ands.w	r3, r3, #31
 8008368:	bf18      	it	ne
 800836a:	3704      	addne	r7, #4
 800836c:	1f3e      	subs	r6, r7, #4
 800836e:	4690      	mov	r8, r2
 8008370:	46b1      	mov	r9, r6
 8008372:	4634      	mov	r4, r6
 8008374:	46ab      	mov	fp, r5
 8008376:	b087      	sub	sp, #28
 8008378:	6801      	ldr	r1, [r0, #0]
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	f847 5c04 	str.w	r5, [r7, #-4]
 8008380:	9502      	str	r5, [sp, #8]
 8008382:	784a      	ldrb	r2, [r1, #1]
 8008384:	1c4b      	adds	r3, r1, #1
 8008386:	9303      	str	r3, [sp, #12]
 8008388:	b342      	cbz	r2, 80083dc <__hexnan+0x88>
 800838a:	4610      	mov	r0, r2
 800838c:	9105      	str	r1, [sp, #20]
 800838e:	9204      	str	r2, [sp, #16]
 8008390:	f7ff fd83 	bl	8007e9a <__hexdig_fun>
 8008394:	2800      	cmp	r0, #0
 8008396:	d143      	bne.n	8008420 <__hexnan+0xcc>
 8008398:	9a04      	ldr	r2, [sp, #16]
 800839a:	9905      	ldr	r1, [sp, #20]
 800839c:	2a20      	cmp	r2, #32
 800839e:	d818      	bhi.n	80083d2 <__hexnan+0x7e>
 80083a0:	9b02      	ldr	r3, [sp, #8]
 80083a2:	459b      	cmp	fp, r3
 80083a4:	dd13      	ble.n	80083ce <__hexnan+0x7a>
 80083a6:	454c      	cmp	r4, r9
 80083a8:	d206      	bcs.n	80083b8 <__hexnan+0x64>
 80083aa:	2d07      	cmp	r5, #7
 80083ac:	dc04      	bgt.n	80083b8 <__hexnan+0x64>
 80083ae:	462a      	mov	r2, r5
 80083b0:	4649      	mov	r1, r9
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7ff ffa8 	bl	8008308 <L_shift>
 80083b8:	4544      	cmp	r4, r8
 80083ba:	d944      	bls.n	8008446 <__hexnan+0xf2>
 80083bc:	2300      	movs	r3, #0
 80083be:	f1a4 0904 	sub.w	r9, r4, #4
 80083c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80083c6:	461d      	mov	r5, r3
 80083c8:	464c      	mov	r4, r9
 80083ca:	f8cd b008 	str.w	fp, [sp, #8]
 80083ce:	9903      	ldr	r1, [sp, #12]
 80083d0:	e7d7      	b.n	8008382 <__hexnan+0x2e>
 80083d2:	2a29      	cmp	r2, #41	; 0x29
 80083d4:	d14a      	bne.n	800846c <__hexnan+0x118>
 80083d6:	3102      	adds	r1, #2
 80083d8:	f8ca 1000 	str.w	r1, [sl]
 80083dc:	f1bb 0f00 	cmp.w	fp, #0
 80083e0:	d044      	beq.n	800846c <__hexnan+0x118>
 80083e2:	454c      	cmp	r4, r9
 80083e4:	d206      	bcs.n	80083f4 <__hexnan+0xa0>
 80083e6:	2d07      	cmp	r5, #7
 80083e8:	dc04      	bgt.n	80083f4 <__hexnan+0xa0>
 80083ea:	462a      	mov	r2, r5
 80083ec:	4649      	mov	r1, r9
 80083ee:	4620      	mov	r0, r4
 80083f0:	f7ff ff8a 	bl	8008308 <L_shift>
 80083f4:	4544      	cmp	r4, r8
 80083f6:	d928      	bls.n	800844a <__hexnan+0xf6>
 80083f8:	4643      	mov	r3, r8
 80083fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80083fe:	42a6      	cmp	r6, r4
 8008400:	f843 2b04 	str.w	r2, [r3], #4
 8008404:	d2f9      	bcs.n	80083fa <__hexnan+0xa6>
 8008406:	2200      	movs	r2, #0
 8008408:	f843 2b04 	str.w	r2, [r3], #4
 800840c:	429e      	cmp	r6, r3
 800840e:	d2fb      	bcs.n	8008408 <__hexnan+0xb4>
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	b91b      	cbnz	r3, 800841c <__hexnan+0xc8>
 8008414:	4546      	cmp	r6, r8
 8008416:	d127      	bne.n	8008468 <__hexnan+0x114>
 8008418:	2301      	movs	r3, #1
 800841a:	6033      	str	r3, [r6, #0]
 800841c:	2005      	movs	r0, #5
 800841e:	e026      	b.n	800846e <__hexnan+0x11a>
 8008420:	3501      	adds	r5, #1
 8008422:	2d08      	cmp	r5, #8
 8008424:	f10b 0b01 	add.w	fp, fp, #1
 8008428:	dd06      	ble.n	8008438 <__hexnan+0xe4>
 800842a:	4544      	cmp	r4, r8
 800842c:	d9cf      	bls.n	80083ce <__hexnan+0x7a>
 800842e:	2300      	movs	r3, #0
 8008430:	2501      	movs	r5, #1
 8008432:	f844 3c04 	str.w	r3, [r4, #-4]
 8008436:	3c04      	subs	r4, #4
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	f000 000f 	and.w	r0, r0, #15
 800843e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008442:	6020      	str	r0, [r4, #0]
 8008444:	e7c3      	b.n	80083ce <__hexnan+0x7a>
 8008446:	2508      	movs	r5, #8
 8008448:	e7c1      	b.n	80083ce <__hexnan+0x7a>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0df      	beq.n	8008410 <__hexnan+0xbc>
 8008450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008454:	f1c3 0320 	rsb	r3, r3, #32
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
 800845c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008460:	401a      	ands	r2, r3
 8008462:	f847 2c04 	str.w	r2, [r7, #-4]
 8008466:	e7d3      	b.n	8008410 <__hexnan+0xbc>
 8008468:	3e04      	subs	r6, #4
 800846a:	e7d1      	b.n	8008410 <__hexnan+0xbc>
 800846c:	2004      	movs	r0, #4
 800846e:	b007      	add	sp, #28
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008474 <__localeconv_l>:
 8008474:	30f0      	adds	r0, #240	; 0xf0
 8008476:	4770      	bx	lr

08008478 <_localeconv_r>:
 8008478:	4b04      	ldr	r3, [pc, #16]	; (800848c <_localeconv_r+0x14>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6a18      	ldr	r0, [r3, #32]
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <_localeconv_r+0x18>)
 8008480:	2800      	cmp	r0, #0
 8008482:	bf08      	it	eq
 8008484:	4618      	moveq	r0, r3
 8008486:	30f0      	adds	r0, #240	; 0xf0
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000048 	.word	0x20000048
 8008490:	200000ac 	.word	0x200000ac

08008494 <__swhatbuf_r>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	460e      	mov	r6, r1
 8008498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849c:	b096      	sub	sp, #88	; 0x58
 800849e:	2900      	cmp	r1, #0
 80084a0:	4614      	mov	r4, r2
 80084a2:	461d      	mov	r5, r3
 80084a4:	da07      	bge.n	80084b6 <__swhatbuf_r+0x22>
 80084a6:	2300      	movs	r3, #0
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	89b3      	ldrh	r3, [r6, #12]
 80084ac:	061a      	lsls	r2, r3, #24
 80084ae:	d410      	bmi.n	80084d2 <__swhatbuf_r+0x3e>
 80084b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b4:	e00e      	b.n	80084d4 <__swhatbuf_r+0x40>
 80084b6:	466a      	mov	r2, sp
 80084b8:	f000 ff02 	bl	80092c0 <_fstat_r>
 80084bc:	2800      	cmp	r0, #0
 80084be:	dbf2      	blt.n	80084a6 <__swhatbuf_r+0x12>
 80084c0:	9a01      	ldr	r2, [sp, #4]
 80084c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084ca:	425a      	negs	r2, r3
 80084cc:	415a      	adcs	r2, r3
 80084ce:	602a      	str	r2, [r5, #0]
 80084d0:	e7ee      	b.n	80084b0 <__swhatbuf_r+0x1c>
 80084d2:	2340      	movs	r3, #64	; 0x40
 80084d4:	2000      	movs	r0, #0
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	b016      	add	sp, #88	; 0x58
 80084da:	bd70      	pop	{r4, r5, r6, pc}

080084dc <__smakebuf_r>:
 80084dc:	898b      	ldrh	r3, [r1, #12]
 80084de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084e0:	079d      	lsls	r5, r3, #30
 80084e2:	4606      	mov	r6, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	d507      	bpl.n	80084f8 <__smakebuf_r+0x1c>
 80084e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	6123      	str	r3, [r4, #16]
 80084f0:	2301      	movs	r3, #1
 80084f2:	6163      	str	r3, [r4, #20]
 80084f4:	b002      	add	sp, #8
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	ab01      	add	r3, sp, #4
 80084fa:	466a      	mov	r2, sp
 80084fc:	f7ff ffca 	bl	8008494 <__swhatbuf_r>
 8008500:	9900      	ldr	r1, [sp, #0]
 8008502:	4605      	mov	r5, r0
 8008504:	4630      	mov	r0, r6
 8008506:	f000 fcaf 	bl	8008e68 <_malloc_r>
 800850a:	b948      	cbnz	r0, 8008520 <__smakebuf_r+0x44>
 800850c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008510:	059a      	lsls	r2, r3, #22
 8008512:	d4ef      	bmi.n	80084f4 <__smakebuf_r+0x18>
 8008514:	f023 0303 	bic.w	r3, r3, #3
 8008518:	f043 0302 	orr.w	r3, r3, #2
 800851c:	81a3      	strh	r3, [r4, #12]
 800851e:	e7e3      	b.n	80084e8 <__smakebuf_r+0xc>
 8008520:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <__smakebuf_r+0x7c>)
 8008522:	62b3      	str	r3, [r6, #40]	; 0x28
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	6020      	str	r0, [r4, #0]
 8008528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	9b00      	ldr	r3, [sp, #0]
 8008530:	6120      	str	r0, [r4, #16]
 8008532:	6163      	str	r3, [r4, #20]
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	b15b      	cbz	r3, 8008550 <__smakebuf_r+0x74>
 8008538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800853c:	4630      	mov	r0, r6
 800853e:	f000 fed1 	bl	80092e4 <_isatty_r>
 8008542:	b128      	cbz	r0, 8008550 <__smakebuf_r+0x74>
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	f043 0301 	orr.w	r3, r3, #1
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	431d      	orrs	r5, r3
 8008554:	81a5      	strh	r5, [r4, #12]
 8008556:	e7cd      	b.n	80084f4 <__smakebuf_r+0x18>
 8008558:	08007cd9 	.word	0x08007cd9

0800855c <malloc>:
 800855c:	4b02      	ldr	r3, [pc, #8]	; (8008568 <malloc+0xc>)
 800855e:	4601      	mov	r1, r0
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	f000 bc81 	b.w	8008e68 <_malloc_r>
 8008566:	bf00      	nop
 8008568:	20000048 	.word	0x20000048

0800856c <__ascii_mbtowc>:
 800856c:	b082      	sub	sp, #8
 800856e:	b901      	cbnz	r1, 8008572 <__ascii_mbtowc+0x6>
 8008570:	a901      	add	r1, sp, #4
 8008572:	b142      	cbz	r2, 8008586 <__ascii_mbtowc+0x1a>
 8008574:	b14b      	cbz	r3, 800858a <__ascii_mbtowc+0x1e>
 8008576:	7813      	ldrb	r3, [r2, #0]
 8008578:	600b      	str	r3, [r1, #0]
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	1c10      	adds	r0, r2, #0
 800857e:	bf18      	it	ne
 8008580:	2001      	movne	r0, #1
 8008582:	b002      	add	sp, #8
 8008584:	4770      	bx	lr
 8008586:	4610      	mov	r0, r2
 8008588:	e7fb      	b.n	8008582 <__ascii_mbtowc+0x16>
 800858a:	f06f 0001 	mvn.w	r0, #1
 800858e:	e7f8      	b.n	8008582 <__ascii_mbtowc+0x16>

08008590 <memchr>:
 8008590:	b510      	push	{r4, lr}
 8008592:	b2c9      	uxtb	r1, r1
 8008594:	4402      	add	r2, r0
 8008596:	4290      	cmp	r0, r2
 8008598:	4603      	mov	r3, r0
 800859a:	d101      	bne.n	80085a0 <memchr+0x10>
 800859c:	2300      	movs	r3, #0
 800859e:	e003      	b.n	80085a8 <memchr+0x18>
 80085a0:	781c      	ldrb	r4, [r3, #0]
 80085a2:	3001      	adds	r0, #1
 80085a4:	428c      	cmp	r4, r1
 80085a6:	d1f6      	bne.n	8008596 <memchr+0x6>
 80085a8:	4618      	mov	r0, r3
 80085aa:	bd10      	pop	{r4, pc}

080085ac <memcpy>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	1e43      	subs	r3, r0, #1
 80085b0:	440a      	add	r2, r1
 80085b2:	4291      	cmp	r1, r2
 80085b4:	d100      	bne.n	80085b8 <memcpy+0xc>
 80085b6:	bd10      	pop	{r4, pc}
 80085b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085c0:	e7f7      	b.n	80085b2 <memcpy+0x6>

080085c2 <_Balloc>:
 80085c2:	b570      	push	{r4, r5, r6, lr}
 80085c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085c6:	4604      	mov	r4, r0
 80085c8:	460e      	mov	r6, r1
 80085ca:	b93d      	cbnz	r5, 80085dc <_Balloc+0x1a>
 80085cc:	2010      	movs	r0, #16
 80085ce:	f7ff ffc5 	bl	800855c <malloc>
 80085d2:	6260      	str	r0, [r4, #36]	; 0x24
 80085d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085d8:	6005      	str	r5, [r0, #0]
 80085da:	60c5      	str	r5, [r0, #12]
 80085dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80085de:	68eb      	ldr	r3, [r5, #12]
 80085e0:	b183      	cbz	r3, 8008604 <_Balloc+0x42>
 80085e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80085ea:	b9b8      	cbnz	r0, 800861c <_Balloc+0x5a>
 80085ec:	2101      	movs	r1, #1
 80085ee:	fa01 f506 	lsl.w	r5, r1, r6
 80085f2:	1d6a      	adds	r2, r5, #5
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fbdc 	bl	8008db4 <_calloc_r>
 80085fc:	b160      	cbz	r0, 8008618 <_Balloc+0x56>
 80085fe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008602:	e00e      	b.n	8008622 <_Balloc+0x60>
 8008604:	2221      	movs	r2, #33	; 0x21
 8008606:	2104      	movs	r1, #4
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fbd3 	bl	8008db4 <_calloc_r>
 800860e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008610:	60e8      	str	r0, [r5, #12]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e4      	bne.n	80085e2 <_Balloc+0x20>
 8008618:	2000      	movs	r0, #0
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	6802      	ldr	r2, [r0, #0]
 800861e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008622:	2300      	movs	r3, #0
 8008624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008628:	e7f7      	b.n	800861a <_Balloc+0x58>

0800862a <_Bfree>:
 800862a:	b570      	push	{r4, r5, r6, lr}
 800862c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800862e:	4606      	mov	r6, r0
 8008630:	460d      	mov	r5, r1
 8008632:	b93c      	cbnz	r4, 8008644 <_Bfree+0x1a>
 8008634:	2010      	movs	r0, #16
 8008636:	f7ff ff91 	bl	800855c <malloc>
 800863a:	6270      	str	r0, [r6, #36]	; 0x24
 800863c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008640:	6004      	str	r4, [r0, #0]
 8008642:	60c4      	str	r4, [r0, #12]
 8008644:	b13d      	cbz	r5, 8008656 <_Bfree+0x2c>
 8008646:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008648:	686a      	ldr	r2, [r5, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008650:	6029      	str	r1, [r5, #0]
 8008652:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008656:	bd70      	pop	{r4, r5, r6, pc}

08008658 <__multadd>:
 8008658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865c:	461f      	mov	r7, r3
 800865e:	4606      	mov	r6, r0
 8008660:	460c      	mov	r4, r1
 8008662:	2300      	movs	r3, #0
 8008664:	690d      	ldr	r5, [r1, #16]
 8008666:	f101 0c14 	add.w	ip, r1, #20
 800866a:	f8dc 0000 	ldr.w	r0, [ip]
 800866e:	3301      	adds	r3, #1
 8008670:	b281      	uxth	r1, r0
 8008672:	fb02 7101 	mla	r1, r2, r1, r7
 8008676:	0c00      	lsrs	r0, r0, #16
 8008678:	0c0f      	lsrs	r7, r1, #16
 800867a:	fb02 7000 	mla	r0, r2, r0, r7
 800867e:	b289      	uxth	r1, r1
 8008680:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008684:	429d      	cmp	r5, r3
 8008686:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800868a:	f84c 1b04 	str.w	r1, [ip], #4
 800868e:	dcec      	bgt.n	800866a <__multadd+0x12>
 8008690:	b1d7      	cbz	r7, 80086c8 <__multadd+0x70>
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	42ab      	cmp	r3, r5
 8008696:	dc12      	bgt.n	80086be <__multadd+0x66>
 8008698:	6861      	ldr	r1, [r4, #4]
 800869a:	4630      	mov	r0, r6
 800869c:	3101      	adds	r1, #1
 800869e:	f7ff ff90 	bl	80085c2 <_Balloc>
 80086a2:	4680      	mov	r8, r0
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	f104 010c 	add.w	r1, r4, #12
 80086aa:	3202      	adds	r2, #2
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	300c      	adds	r0, #12
 80086b0:	f7ff ff7c 	bl	80085ac <memcpy>
 80086b4:	4621      	mov	r1, r4
 80086b6:	4630      	mov	r0, r6
 80086b8:	f7ff ffb7 	bl	800862a <_Bfree>
 80086bc:	4644      	mov	r4, r8
 80086be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086c2:	3501      	adds	r5, #1
 80086c4:	615f      	str	r7, [r3, #20]
 80086c6:	6125      	str	r5, [r4, #16]
 80086c8:	4620      	mov	r0, r4
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086ce <__s2b>:
 80086ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d2:	4615      	mov	r5, r2
 80086d4:	2209      	movs	r2, #9
 80086d6:	461f      	mov	r7, r3
 80086d8:	3308      	adds	r3, #8
 80086da:	460c      	mov	r4, r1
 80086dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e0:	4606      	mov	r6, r0
 80086e2:	2201      	movs	r2, #1
 80086e4:	2100      	movs	r1, #0
 80086e6:	429a      	cmp	r2, r3
 80086e8:	db20      	blt.n	800872c <__s2b+0x5e>
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7ff ff69 	bl	80085c2 <_Balloc>
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	2d09      	cmp	r5, #9
 80086f4:	6143      	str	r3, [r0, #20]
 80086f6:	f04f 0301 	mov.w	r3, #1
 80086fa:	6103      	str	r3, [r0, #16]
 80086fc:	dd19      	ble.n	8008732 <__s2b+0x64>
 80086fe:	f104 0809 	add.w	r8, r4, #9
 8008702:	46c1      	mov	r9, r8
 8008704:	442c      	add	r4, r5
 8008706:	f819 3b01 	ldrb.w	r3, [r9], #1
 800870a:	4601      	mov	r1, r0
 800870c:	3b30      	subs	r3, #48	; 0x30
 800870e:	220a      	movs	r2, #10
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffa1 	bl	8008658 <__multadd>
 8008716:	45a1      	cmp	r9, r4
 8008718:	d1f5      	bne.n	8008706 <__s2b+0x38>
 800871a:	eb08 0405 	add.w	r4, r8, r5
 800871e:	3c08      	subs	r4, #8
 8008720:	1b2d      	subs	r5, r5, r4
 8008722:	1963      	adds	r3, r4, r5
 8008724:	42bb      	cmp	r3, r7
 8008726:	db07      	blt.n	8008738 <__s2b+0x6a>
 8008728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872c:	0052      	lsls	r2, r2, #1
 800872e:	3101      	adds	r1, #1
 8008730:	e7d9      	b.n	80086e6 <__s2b+0x18>
 8008732:	340a      	adds	r4, #10
 8008734:	2509      	movs	r5, #9
 8008736:	e7f3      	b.n	8008720 <__s2b+0x52>
 8008738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800873c:	4601      	mov	r1, r0
 800873e:	3b30      	subs	r3, #48	; 0x30
 8008740:	220a      	movs	r2, #10
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff ff88 	bl	8008658 <__multadd>
 8008748:	e7eb      	b.n	8008722 <__s2b+0x54>

0800874a <__hi0bits>:
 800874a:	0c02      	lsrs	r2, r0, #16
 800874c:	0412      	lsls	r2, r2, #16
 800874e:	4603      	mov	r3, r0
 8008750:	b9b2      	cbnz	r2, 8008780 <__hi0bits+0x36>
 8008752:	0403      	lsls	r3, r0, #16
 8008754:	2010      	movs	r0, #16
 8008756:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800875a:	bf04      	itt	eq
 800875c:	021b      	lsleq	r3, r3, #8
 800875e:	3008      	addeq	r0, #8
 8008760:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008764:	bf04      	itt	eq
 8008766:	011b      	lsleq	r3, r3, #4
 8008768:	3004      	addeq	r0, #4
 800876a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800876e:	bf04      	itt	eq
 8008770:	009b      	lsleq	r3, r3, #2
 8008772:	3002      	addeq	r0, #2
 8008774:	2b00      	cmp	r3, #0
 8008776:	db06      	blt.n	8008786 <__hi0bits+0x3c>
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	d503      	bpl.n	8008784 <__hi0bits+0x3a>
 800877c:	3001      	adds	r0, #1
 800877e:	4770      	bx	lr
 8008780:	2000      	movs	r0, #0
 8008782:	e7e8      	b.n	8008756 <__hi0bits+0xc>
 8008784:	2020      	movs	r0, #32
 8008786:	4770      	bx	lr

08008788 <__lo0bits>:
 8008788:	6803      	ldr	r3, [r0, #0]
 800878a:	4601      	mov	r1, r0
 800878c:	f013 0207 	ands.w	r2, r3, #7
 8008790:	d00b      	beq.n	80087aa <__lo0bits+0x22>
 8008792:	07da      	lsls	r2, r3, #31
 8008794:	d423      	bmi.n	80087de <__lo0bits+0x56>
 8008796:	0798      	lsls	r0, r3, #30
 8008798:	bf49      	itett	mi
 800879a:	085b      	lsrmi	r3, r3, #1
 800879c:	089b      	lsrpl	r3, r3, #2
 800879e:	2001      	movmi	r0, #1
 80087a0:	600b      	strmi	r3, [r1, #0]
 80087a2:	bf5c      	itt	pl
 80087a4:	600b      	strpl	r3, [r1, #0]
 80087a6:	2002      	movpl	r0, #2
 80087a8:	4770      	bx	lr
 80087aa:	b298      	uxth	r0, r3
 80087ac:	b9a8      	cbnz	r0, 80087da <__lo0bits+0x52>
 80087ae:	2010      	movs	r0, #16
 80087b0:	0c1b      	lsrs	r3, r3, #16
 80087b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087b6:	bf04      	itt	eq
 80087b8:	0a1b      	lsreq	r3, r3, #8
 80087ba:	3008      	addeq	r0, #8
 80087bc:	071a      	lsls	r2, r3, #28
 80087be:	bf04      	itt	eq
 80087c0:	091b      	lsreq	r3, r3, #4
 80087c2:	3004      	addeq	r0, #4
 80087c4:	079a      	lsls	r2, r3, #30
 80087c6:	bf04      	itt	eq
 80087c8:	089b      	lsreq	r3, r3, #2
 80087ca:	3002      	addeq	r0, #2
 80087cc:	07da      	lsls	r2, r3, #31
 80087ce:	d402      	bmi.n	80087d6 <__lo0bits+0x4e>
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	d006      	beq.n	80087e2 <__lo0bits+0x5a>
 80087d4:	3001      	adds	r0, #1
 80087d6:	600b      	str	r3, [r1, #0]
 80087d8:	4770      	bx	lr
 80087da:	4610      	mov	r0, r2
 80087dc:	e7e9      	b.n	80087b2 <__lo0bits+0x2a>
 80087de:	2000      	movs	r0, #0
 80087e0:	4770      	bx	lr
 80087e2:	2020      	movs	r0, #32
 80087e4:	4770      	bx	lr

080087e6 <__i2b>:
 80087e6:	b510      	push	{r4, lr}
 80087e8:	460c      	mov	r4, r1
 80087ea:	2101      	movs	r1, #1
 80087ec:	f7ff fee9 	bl	80085c2 <_Balloc>
 80087f0:	2201      	movs	r2, #1
 80087f2:	6144      	str	r4, [r0, #20]
 80087f4:	6102      	str	r2, [r0, #16]
 80087f6:	bd10      	pop	{r4, pc}

080087f8 <__multiply>:
 80087f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4614      	mov	r4, r2
 80087fe:	690a      	ldr	r2, [r1, #16]
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	4688      	mov	r8, r1
 8008804:	429a      	cmp	r2, r3
 8008806:	bfbe      	ittt	lt
 8008808:	460b      	movlt	r3, r1
 800880a:	46a0      	movlt	r8, r4
 800880c:	461c      	movlt	r4, r3
 800880e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008812:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800881a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800881e:	eb07 0609 	add.w	r6, r7, r9
 8008822:	42b3      	cmp	r3, r6
 8008824:	bfb8      	it	lt
 8008826:	3101      	addlt	r1, #1
 8008828:	f7ff fecb 	bl	80085c2 <_Balloc>
 800882c:	f100 0514 	add.w	r5, r0, #20
 8008830:	462b      	mov	r3, r5
 8008832:	2200      	movs	r2, #0
 8008834:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008838:	4573      	cmp	r3, lr
 800883a:	d316      	bcc.n	800886a <__multiply+0x72>
 800883c:	f104 0214 	add.w	r2, r4, #20
 8008840:	f108 0114 	add.w	r1, r8, #20
 8008844:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008848:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	9b00      	ldr	r3, [sp, #0]
 8008850:	9201      	str	r2, [sp, #4]
 8008852:	4293      	cmp	r3, r2
 8008854:	d80c      	bhi.n	8008870 <__multiply+0x78>
 8008856:	2e00      	cmp	r6, #0
 8008858:	dd03      	ble.n	8008862 <__multiply+0x6a>
 800885a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800885e:	2b00      	cmp	r3, #0
 8008860:	d05d      	beq.n	800891e <__multiply+0x126>
 8008862:	6106      	str	r6, [r0, #16]
 8008864:	b003      	add	sp, #12
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886a:	f843 2b04 	str.w	r2, [r3], #4
 800886e:	e7e3      	b.n	8008838 <__multiply+0x40>
 8008870:	f8b2 b000 	ldrh.w	fp, [r2]
 8008874:	f1bb 0f00 	cmp.w	fp, #0
 8008878:	d023      	beq.n	80088c2 <__multiply+0xca>
 800887a:	4689      	mov	r9, r1
 800887c:	46ac      	mov	ip, r5
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	f859 4b04 	ldr.w	r4, [r9], #4
 8008886:	f8dc a000 	ldr.w	sl, [ip]
 800888a:	b2a3      	uxth	r3, r4
 800888c:	fa1f fa8a 	uxth.w	sl, sl
 8008890:	fb0b a303 	mla	r3, fp, r3, sl
 8008894:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008898:	f8dc 4000 	ldr.w	r4, [ip]
 800889c:	4443      	add	r3, r8
 800889e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088a2:	fb0b 840a 	mla	r4, fp, sl, r8
 80088a6:	46e2      	mov	sl, ip
 80088a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80088b2:	454f      	cmp	r7, r9
 80088b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088b8:	f84a 3b04 	str.w	r3, [sl], #4
 80088bc:	d82b      	bhi.n	8008916 <__multiply+0x11e>
 80088be:	f8cc 8004 	str.w	r8, [ip, #4]
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	3204      	adds	r2, #4
 80088c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80088ca:	f1ba 0f00 	cmp.w	sl, #0
 80088ce:	d020      	beq.n	8008912 <__multiply+0x11a>
 80088d0:	4689      	mov	r9, r1
 80088d2:	46a8      	mov	r8, r5
 80088d4:	f04f 0b00 	mov.w	fp, #0
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	f8b9 c000 	ldrh.w	ip, [r9]
 80088de:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	fb0a 440c 	mla	r4, sl, ip, r4
 80088e8:	46c4      	mov	ip, r8
 80088ea:	445c      	add	r4, fp
 80088ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80088f0:	f84c 3b04 	str.w	r3, [ip], #4
 80088f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80088f8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80088fc:	0c1b      	lsrs	r3, r3, #16
 80088fe:	fb0a b303 	mla	r3, sl, r3, fp
 8008902:	454f      	cmp	r7, r9
 8008904:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008908:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800890c:	d805      	bhi.n	800891a <__multiply+0x122>
 800890e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008912:	3504      	adds	r5, #4
 8008914:	e79b      	b.n	800884e <__multiply+0x56>
 8008916:	46d4      	mov	ip, sl
 8008918:	e7b3      	b.n	8008882 <__multiply+0x8a>
 800891a:	46e0      	mov	r8, ip
 800891c:	e7dd      	b.n	80088da <__multiply+0xe2>
 800891e:	3e01      	subs	r6, #1
 8008920:	e799      	b.n	8008856 <__multiply+0x5e>
	...

08008924 <__pow5mult>:
 8008924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008928:	4615      	mov	r5, r2
 800892a:	f012 0203 	ands.w	r2, r2, #3
 800892e:	4606      	mov	r6, r0
 8008930:	460f      	mov	r7, r1
 8008932:	d007      	beq.n	8008944 <__pow5mult+0x20>
 8008934:	4c21      	ldr	r4, [pc, #132]	; (80089bc <__pow5mult+0x98>)
 8008936:	3a01      	subs	r2, #1
 8008938:	2300      	movs	r3, #0
 800893a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800893e:	f7ff fe8b 	bl	8008658 <__multadd>
 8008942:	4607      	mov	r7, r0
 8008944:	10ad      	asrs	r5, r5, #2
 8008946:	d035      	beq.n	80089b4 <__pow5mult+0x90>
 8008948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800894a:	b93c      	cbnz	r4, 800895c <__pow5mult+0x38>
 800894c:	2010      	movs	r0, #16
 800894e:	f7ff fe05 	bl	800855c <malloc>
 8008952:	6270      	str	r0, [r6, #36]	; 0x24
 8008954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008958:	6004      	str	r4, [r0, #0]
 800895a:	60c4      	str	r4, [r0, #12]
 800895c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008964:	b94c      	cbnz	r4, 800897a <__pow5mult+0x56>
 8008966:	f240 2171 	movw	r1, #625	; 0x271
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff ff3b 	bl	80087e6 <__i2b>
 8008970:	2300      	movs	r3, #0
 8008972:	4604      	mov	r4, r0
 8008974:	f8c8 0008 	str.w	r0, [r8, #8]
 8008978:	6003      	str	r3, [r0, #0]
 800897a:	f04f 0800 	mov.w	r8, #0
 800897e:	07eb      	lsls	r3, r5, #31
 8008980:	d50a      	bpl.n	8008998 <__pow5mult+0x74>
 8008982:	4639      	mov	r1, r7
 8008984:	4622      	mov	r2, r4
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff ff36 	bl	80087f8 <__multiply>
 800898c:	4681      	mov	r9, r0
 800898e:	4639      	mov	r1, r7
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff fe4a 	bl	800862a <_Bfree>
 8008996:	464f      	mov	r7, r9
 8008998:	106d      	asrs	r5, r5, #1
 800899a:	d00b      	beq.n	80089b4 <__pow5mult+0x90>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	b938      	cbnz	r0, 80089b0 <__pow5mult+0x8c>
 80089a0:	4622      	mov	r2, r4
 80089a2:	4621      	mov	r1, r4
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff ff27 	bl	80087f8 <__multiply>
 80089aa:	6020      	str	r0, [r4, #0]
 80089ac:	f8c0 8000 	str.w	r8, [r0]
 80089b0:	4604      	mov	r4, r0
 80089b2:	e7e4      	b.n	800897e <__pow5mult+0x5a>
 80089b4:	4638      	mov	r0, r7
 80089b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ba:	bf00      	nop
 80089bc:	08009728 	.word	0x08009728

080089c0 <__lshift>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	4607      	mov	r7, r0
 80089c8:	4616      	mov	r6, r2
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089d0:	eb0a 0903 	add.w	r9, sl, r3
 80089d4:	6849      	ldr	r1, [r1, #4]
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	f109 0501 	add.w	r5, r9, #1
 80089dc:	42ab      	cmp	r3, r5
 80089de:	db32      	blt.n	8008a46 <__lshift+0x86>
 80089e0:	4638      	mov	r0, r7
 80089e2:	f7ff fdee 	bl	80085c2 <_Balloc>
 80089e6:	2300      	movs	r3, #0
 80089e8:	4680      	mov	r8, r0
 80089ea:	461a      	mov	r2, r3
 80089ec:	f100 0114 	add.w	r1, r0, #20
 80089f0:	4553      	cmp	r3, sl
 80089f2:	db2b      	blt.n	8008a4c <__lshift+0x8c>
 80089f4:	6920      	ldr	r0, [r4, #16]
 80089f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089fa:	f104 0314 	add.w	r3, r4, #20
 80089fe:	f016 021f 	ands.w	r2, r6, #31
 8008a02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a0a:	d025      	beq.n	8008a58 <__lshift+0x98>
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	f1c2 0e20 	rsb	lr, r2, #32
 8008a12:	468a      	mov	sl, r1
 8008a14:	681e      	ldr	r6, [r3, #0]
 8008a16:	4096      	lsls	r6, r2
 8008a18:	4330      	orrs	r0, r6
 8008a1a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a22:	459c      	cmp	ip, r3
 8008a24:	fa20 f00e 	lsr.w	r0, r0, lr
 8008a28:	d814      	bhi.n	8008a54 <__lshift+0x94>
 8008a2a:	6048      	str	r0, [r1, #4]
 8008a2c:	b108      	cbz	r0, 8008a32 <__lshift+0x72>
 8008a2e:	f109 0502 	add.w	r5, r9, #2
 8008a32:	3d01      	subs	r5, #1
 8008a34:	4638      	mov	r0, r7
 8008a36:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	f7ff fdf5 	bl	800862a <_Bfree>
 8008a40:	4640      	mov	r0, r8
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	3101      	adds	r1, #1
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	e7c7      	b.n	80089dc <__lshift+0x1c>
 8008a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008a50:	3301      	adds	r3, #1
 8008a52:	e7cd      	b.n	80089f0 <__lshift+0x30>
 8008a54:	4651      	mov	r1, sl
 8008a56:	e7dc      	b.n	8008a12 <__lshift+0x52>
 8008a58:	3904      	subs	r1, #4
 8008a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5e:	459c      	cmp	ip, r3
 8008a60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a64:	d8f9      	bhi.n	8008a5a <__lshift+0x9a>
 8008a66:	e7e4      	b.n	8008a32 <__lshift+0x72>

08008a68 <__mcmp>:
 8008a68:	6903      	ldr	r3, [r0, #16]
 8008a6a:	690a      	ldr	r2, [r1, #16]
 8008a6c:	b530      	push	{r4, r5, lr}
 8008a6e:	1a9b      	subs	r3, r3, r2
 8008a70:	d10c      	bne.n	8008a8c <__mcmp+0x24>
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	3014      	adds	r0, #20
 8008a76:	3114      	adds	r1, #20
 8008a78:	1884      	adds	r4, r0, r2
 8008a7a:	4411      	add	r1, r2
 8008a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a84:	4295      	cmp	r5, r2
 8008a86:	d003      	beq.n	8008a90 <__mcmp+0x28>
 8008a88:	d305      	bcc.n	8008a96 <__mcmp+0x2e>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	bd30      	pop	{r4, r5, pc}
 8008a90:	42a0      	cmp	r0, r4
 8008a92:	d3f3      	bcc.n	8008a7c <__mcmp+0x14>
 8008a94:	e7fa      	b.n	8008a8c <__mcmp+0x24>
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a9a:	e7f7      	b.n	8008a8c <__mcmp+0x24>

08008a9c <__mdiff>:
 8008a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	f7ff ffdd 	bl	8008a68 <__mcmp>
 8008aae:	1e06      	subs	r6, r0, #0
 8008ab0:	d108      	bne.n	8008ac4 <__mdiff+0x28>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff fd84 	bl	80085c2 <_Balloc>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac4:	bfa4      	itt	ge
 8008ac6:	4623      	movge	r3, r4
 8008ac8:	462c      	movge	r4, r5
 8008aca:	4638      	mov	r0, r7
 8008acc:	6861      	ldr	r1, [r4, #4]
 8008ace:	bfa6      	itte	ge
 8008ad0:	461d      	movge	r5, r3
 8008ad2:	2600      	movge	r6, #0
 8008ad4:	2601      	movlt	r6, #1
 8008ad6:	f7ff fd74 	bl	80085c2 <_Balloc>
 8008ada:	f04f 0e00 	mov.w	lr, #0
 8008ade:	60c6      	str	r6, [r0, #12]
 8008ae0:	692b      	ldr	r3, [r5, #16]
 8008ae2:	6926      	ldr	r6, [r4, #16]
 8008ae4:	f104 0214 	add.w	r2, r4, #20
 8008ae8:	f105 0914 	add.w	r9, r5, #20
 8008aec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008af0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008af4:	f100 0114 	add.w	r1, r0, #20
 8008af8:	f852 ab04 	ldr.w	sl, [r2], #4
 8008afc:	f859 5b04 	ldr.w	r5, [r9], #4
 8008b00:	fa1f f38a 	uxth.w	r3, sl
 8008b04:	4473      	add	r3, lr
 8008b06:	b2ac      	uxth	r4, r5
 8008b08:	1b1b      	subs	r3, r3, r4
 8008b0a:	0c2c      	lsrs	r4, r5, #16
 8008b0c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008b10:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008b1a:	45c8      	cmp	r8, r9
 8008b1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b20:	4694      	mov	ip, r2
 8008b22:	f841 4b04 	str.w	r4, [r1], #4
 8008b26:	d8e7      	bhi.n	8008af8 <__mdiff+0x5c>
 8008b28:	45bc      	cmp	ip, r7
 8008b2a:	d304      	bcc.n	8008b36 <__mdiff+0x9a>
 8008b2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008b30:	b183      	cbz	r3, 8008b54 <__mdiff+0xb8>
 8008b32:	6106      	str	r6, [r0, #16]
 8008b34:	e7c4      	b.n	8008ac0 <__mdiff+0x24>
 8008b36:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008b3a:	b2a2      	uxth	r2, r4
 8008b3c:	4472      	add	r2, lr
 8008b3e:	1413      	asrs	r3, r2, #16
 8008b40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008b44:	b292      	uxth	r2, r2
 8008b46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b4a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b4e:	f841 2b04 	str.w	r2, [r1], #4
 8008b52:	e7e9      	b.n	8008b28 <__mdiff+0x8c>
 8008b54:	3e01      	subs	r6, #1
 8008b56:	e7e9      	b.n	8008b2c <__mdiff+0x90>

08008b58 <__ulp>:
 8008b58:	4b10      	ldr	r3, [pc, #64]	; (8008b9c <__ulp+0x44>)
 8008b5a:	400b      	ands	r3, r1
 8008b5c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dd02      	ble.n	8008b6a <__ulp+0x12>
 8008b64:	2000      	movs	r0, #0
 8008b66:	4619      	mov	r1, r3
 8008b68:	4770      	bx	lr
 8008b6a:	425b      	negs	r3, r3
 8008b6c:	151b      	asrs	r3, r3, #20
 8008b6e:	2b13      	cmp	r3, #19
 8008b70:	f04f 0000 	mov.w	r0, #0
 8008b74:	f04f 0100 	mov.w	r1, #0
 8008b78:	dc04      	bgt.n	8008b84 <__ulp+0x2c>
 8008b7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008b7e:	fa42 f103 	asr.w	r1, r2, r3
 8008b82:	4770      	bx	lr
 8008b84:	2201      	movs	r2, #1
 8008b86:	3b14      	subs	r3, #20
 8008b88:	2b1e      	cmp	r3, #30
 8008b8a:	bfce      	itee	gt
 8008b8c:	4613      	movgt	r3, r2
 8008b8e:	f1c3 031f 	rsble	r3, r3, #31
 8008b92:	fa02 f303 	lslle.w	r3, r2, r3
 8008b96:	4618      	mov	r0, r3
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	7ff00000 	.word	0x7ff00000

08008ba0 <__b2d>:
 8008ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	6907      	ldr	r7, [r0, #16]
 8008ba6:	f100 0914 	add.w	r9, r0, #20
 8008baa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008bae:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008bb2:	f1a7 0804 	sub.w	r8, r7, #4
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7ff fdc7 	bl	800874a <__hi0bits>
 8008bbc:	f1c0 0320 	rsb	r3, r0, #32
 8008bc0:	280a      	cmp	r0, #10
 8008bc2:	600b      	str	r3, [r1, #0]
 8008bc4:	491e      	ldr	r1, [pc, #120]	; (8008c40 <__b2d+0xa0>)
 8008bc6:	dc17      	bgt.n	8008bf8 <__b2d+0x58>
 8008bc8:	45c1      	cmp	r9, r8
 8008bca:	bf28      	it	cs
 8008bcc:	2200      	movcs	r2, #0
 8008bce:	f1c0 0c0b 	rsb	ip, r0, #11
 8008bd2:	fa26 f30c 	lsr.w	r3, r6, ip
 8008bd6:	bf38      	it	cc
 8008bd8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008bdc:	ea43 0501 	orr.w	r5, r3, r1
 8008be0:	f100 0315 	add.w	r3, r0, #21
 8008be4:	fa06 f303 	lsl.w	r3, r6, r3
 8008be8:	fa22 f20c 	lsr.w	r2, r2, ip
 8008bec:	ea43 0402 	orr.w	r4, r3, r2
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf8:	45c1      	cmp	r9, r8
 8008bfa:	bf3a      	itte	cc
 8008bfc:	f1a7 0808 	subcc.w	r8, r7, #8
 8008c00:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008c04:	2200      	movcs	r2, #0
 8008c06:	f1b0 030b 	subs.w	r3, r0, #11
 8008c0a:	d015      	beq.n	8008c38 <__b2d+0x98>
 8008c0c:	409e      	lsls	r6, r3
 8008c0e:	f1c3 0720 	rsb	r7, r3, #32
 8008c12:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008c16:	fa22 f107 	lsr.w	r1, r2, r7
 8008c1a:	45c8      	cmp	r8, r9
 8008c1c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008c20:	ea46 0501 	orr.w	r5, r6, r1
 8008c24:	bf94      	ite	ls
 8008c26:	2100      	movls	r1, #0
 8008c28:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008c2c:	fa02 f003 	lsl.w	r0, r2, r3
 8008c30:	40f9      	lsrs	r1, r7
 8008c32:	ea40 0401 	orr.w	r4, r0, r1
 8008c36:	e7db      	b.n	8008bf0 <__b2d+0x50>
 8008c38:	ea46 0501 	orr.w	r5, r6, r1
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	e7d7      	b.n	8008bf0 <__b2d+0x50>
 8008c40:	3ff00000 	.word	0x3ff00000

08008c44 <__d2b>:
 8008c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c48:	461c      	mov	r4, r3
 8008c4a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008c4e:	2101      	movs	r1, #1
 8008c50:	4690      	mov	r8, r2
 8008c52:	f7ff fcb6 	bl	80085c2 <_Balloc>
 8008c56:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008c5a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008c5e:	4607      	mov	r7, r0
 8008c60:	bb34      	cbnz	r4, 8008cb0 <__d2b+0x6c>
 8008c62:	9201      	str	r2, [sp, #4]
 8008c64:	f1b8 0200 	subs.w	r2, r8, #0
 8008c68:	d027      	beq.n	8008cba <__d2b+0x76>
 8008c6a:	a802      	add	r0, sp, #8
 8008c6c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008c70:	f7ff fd8a 	bl	8008788 <__lo0bits>
 8008c74:	9900      	ldr	r1, [sp, #0]
 8008c76:	b1f0      	cbz	r0, 8008cb6 <__d2b+0x72>
 8008c78:	9a01      	ldr	r2, [sp, #4]
 8008c7a:	f1c0 0320 	rsb	r3, r0, #32
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	430b      	orrs	r3, r1
 8008c84:	40c2      	lsrs	r2, r0
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	9201      	str	r2, [sp, #4]
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bf14      	ite	ne
 8008c90:	2102      	movne	r1, #2
 8008c92:	2101      	moveq	r1, #1
 8008c94:	61bb      	str	r3, [r7, #24]
 8008c96:	6139      	str	r1, [r7, #16]
 8008c98:	b1c4      	cbz	r4, 8008ccc <__d2b+0x88>
 8008c9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c9e:	4404      	add	r4, r0
 8008ca0:	6034      	str	r4, [r6, #0]
 8008ca2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ca6:	6028      	str	r0, [r5, #0]
 8008ca8:	4638      	mov	r0, r7
 8008caa:	b002      	add	sp, #8
 8008cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008cb4:	e7d5      	b.n	8008c62 <__d2b+0x1e>
 8008cb6:	6179      	str	r1, [r7, #20]
 8008cb8:	e7e7      	b.n	8008c8a <__d2b+0x46>
 8008cba:	a801      	add	r0, sp, #4
 8008cbc:	f7ff fd64 	bl	8008788 <__lo0bits>
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	9b01      	ldr	r3, [sp, #4]
 8008cc4:	6139      	str	r1, [r7, #16]
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	3020      	adds	r0, #32
 8008cca:	e7e5      	b.n	8008c98 <__d2b+0x54>
 8008ccc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cd0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008cd4:	6030      	str	r0, [r6, #0]
 8008cd6:	6918      	ldr	r0, [r3, #16]
 8008cd8:	f7ff fd37 	bl	800874a <__hi0bits>
 8008cdc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008ce0:	e7e1      	b.n	8008ca6 <__d2b+0x62>

08008ce2 <__ratio>:
 8008ce2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce6:	4688      	mov	r8, r1
 8008ce8:	4669      	mov	r1, sp
 8008cea:	4681      	mov	r9, r0
 8008cec:	f7ff ff58 	bl	8008ba0 <__b2d>
 8008cf0:	468b      	mov	fp, r1
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	460f      	mov	r7, r1
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	a901      	add	r1, sp, #4
 8008cfa:	f7ff ff51 	bl	8008ba0 <__b2d>
 8008cfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d06:	460d      	mov	r5, r1
 8008d08:	eba3 0c02 	sub.w	ip, r3, r2
 8008d0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfd5      	itete	le
 8008d1a:	460a      	movle	r2, r1
 8008d1c:	463a      	movgt	r2, r7
 8008d1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d22:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008d26:	bfd8      	it	le
 8008d28:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	4602      	mov	r2, r0
 8008d30:	4659      	mov	r1, fp
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7f7 fcfa 	bl	800072c <__aeabi_ddiv>
 8008d38:	b003      	add	sp, #12
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d3e <__copybits>:
 8008d3e:	3901      	subs	r1, #1
 8008d40:	b510      	push	{r4, lr}
 8008d42:	1149      	asrs	r1, r1, #5
 8008d44:	6914      	ldr	r4, [r2, #16]
 8008d46:	3101      	adds	r1, #1
 8008d48:	f102 0314 	add.w	r3, r2, #20
 8008d4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	4602      	mov	r2, r0
 8008d58:	d303      	bcc.n	8008d62 <__copybits+0x24>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	428a      	cmp	r2, r1
 8008d5e:	d305      	bcc.n	8008d6c <__copybits+0x2e>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	f840 2b04 	str.w	r2, [r0], #4
 8008d6a:	e7f3      	b.n	8008d54 <__copybits+0x16>
 8008d6c:	f842 3b04 	str.w	r3, [r2], #4
 8008d70:	e7f4      	b.n	8008d5c <__copybits+0x1e>

08008d72 <__any_on>:
 8008d72:	f100 0214 	add.w	r2, r0, #20
 8008d76:	6900      	ldr	r0, [r0, #16]
 8008d78:	114b      	asrs	r3, r1, #5
 8008d7a:	4298      	cmp	r0, r3
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	db11      	blt.n	8008da4 <__any_on+0x32>
 8008d80:	dd0a      	ble.n	8008d98 <__any_on+0x26>
 8008d82:	f011 011f 	ands.w	r1, r1, #31
 8008d86:	d007      	beq.n	8008d98 <__any_on+0x26>
 8008d88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d8c:	fa24 f001 	lsr.w	r0, r4, r1
 8008d90:	fa00 f101 	lsl.w	r1, r0, r1
 8008d94:	428c      	cmp	r4, r1
 8008d96:	d10b      	bne.n	8008db0 <__any_on+0x3e>
 8008d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d803      	bhi.n	8008da8 <__any_on+0x36>
 8008da0:	2000      	movs	r0, #0
 8008da2:	bd10      	pop	{r4, pc}
 8008da4:	4603      	mov	r3, r0
 8008da6:	e7f7      	b.n	8008d98 <__any_on+0x26>
 8008da8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d0f5      	beq.n	8008d9c <__any_on+0x2a>
 8008db0:	2001      	movs	r0, #1
 8008db2:	e7f6      	b.n	8008da2 <__any_on+0x30>

08008db4 <_calloc_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	fb02 f401 	mul.w	r4, r2, r1
 8008dba:	4621      	mov	r1, r4
 8008dbc:	f000 f854 	bl	8008e68 <_malloc_r>
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	b118      	cbz	r0, 8008dcc <_calloc_r+0x18>
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f7fc fca6 	bl	8005718 <memset>
 8008dcc:	4628      	mov	r0, r5
 8008dce:	bd38      	pop	{r3, r4, r5, pc}

08008dd0 <_free_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	d043      	beq.n	8008e60 <_free_r+0x90>
 8008dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ddc:	1f0c      	subs	r4, r1, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bfb8      	it	lt
 8008de2:	18e4      	addlt	r4, r4, r3
 8008de4:	f000 faa0 	bl	8009328 <__malloc_lock>
 8008de8:	4a1e      	ldr	r2, [pc, #120]	; (8008e64 <_free_r+0x94>)
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	4610      	mov	r0, r2
 8008dee:	b933      	cbnz	r3, 8008dfe <_free_r+0x2e>
 8008df0:	6063      	str	r3, [r4, #4]
 8008df2:	6014      	str	r4, [r2, #0]
 8008df4:	4628      	mov	r0, r5
 8008df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dfa:	f000 ba96 	b.w	800932a <__malloc_unlock>
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	d90b      	bls.n	8008e1a <_free_r+0x4a>
 8008e02:	6821      	ldr	r1, [r4, #0]
 8008e04:	1862      	adds	r2, r4, r1
 8008e06:	4293      	cmp	r3, r2
 8008e08:	bf01      	itttt	eq
 8008e0a:	681a      	ldreq	r2, [r3, #0]
 8008e0c:	685b      	ldreq	r3, [r3, #4]
 8008e0e:	1852      	addeq	r2, r2, r1
 8008e10:	6022      	streq	r2, [r4, #0]
 8008e12:	6063      	str	r3, [r4, #4]
 8008e14:	6004      	str	r4, [r0, #0]
 8008e16:	e7ed      	b.n	8008df4 <_free_r+0x24>
 8008e18:	4613      	mov	r3, r2
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	b10a      	cbz	r2, 8008e22 <_free_r+0x52>
 8008e1e:	42a2      	cmp	r2, r4
 8008e20:	d9fa      	bls.n	8008e18 <_free_r+0x48>
 8008e22:	6819      	ldr	r1, [r3, #0]
 8008e24:	1858      	adds	r0, r3, r1
 8008e26:	42a0      	cmp	r0, r4
 8008e28:	d10b      	bne.n	8008e42 <_free_r+0x72>
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	4401      	add	r1, r0
 8008e2e:	1858      	adds	r0, r3, r1
 8008e30:	4282      	cmp	r2, r0
 8008e32:	6019      	str	r1, [r3, #0]
 8008e34:	d1de      	bne.n	8008df4 <_free_r+0x24>
 8008e36:	6810      	ldr	r0, [r2, #0]
 8008e38:	6852      	ldr	r2, [r2, #4]
 8008e3a:	4401      	add	r1, r0
 8008e3c:	6019      	str	r1, [r3, #0]
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	e7d8      	b.n	8008df4 <_free_r+0x24>
 8008e42:	d902      	bls.n	8008e4a <_free_r+0x7a>
 8008e44:	230c      	movs	r3, #12
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	e7d4      	b.n	8008df4 <_free_r+0x24>
 8008e4a:	6820      	ldr	r0, [r4, #0]
 8008e4c:	1821      	adds	r1, r4, r0
 8008e4e:	428a      	cmp	r2, r1
 8008e50:	bf01      	itttt	eq
 8008e52:	6811      	ldreq	r1, [r2, #0]
 8008e54:	6852      	ldreq	r2, [r2, #4]
 8008e56:	1809      	addeq	r1, r1, r0
 8008e58:	6021      	streq	r1, [r4, #0]
 8008e5a:	6062      	str	r2, [r4, #4]
 8008e5c:	605c      	str	r4, [r3, #4]
 8008e5e:	e7c9      	b.n	8008df4 <_free_r+0x24>
 8008e60:	bd38      	pop	{r3, r4, r5, pc}
 8008e62:	bf00      	nop
 8008e64:	200002dc 	.word	0x200002dc

08008e68 <_malloc_r>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	1ccd      	adds	r5, r1, #3
 8008e6c:	f025 0503 	bic.w	r5, r5, #3
 8008e70:	3508      	adds	r5, #8
 8008e72:	2d0c      	cmp	r5, #12
 8008e74:	bf38      	it	cc
 8008e76:	250c      	movcc	r5, #12
 8008e78:	2d00      	cmp	r5, #0
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	db01      	blt.n	8008e82 <_malloc_r+0x1a>
 8008e7e:	42a9      	cmp	r1, r5
 8008e80:	d903      	bls.n	8008e8a <_malloc_r+0x22>
 8008e82:	230c      	movs	r3, #12
 8008e84:	6033      	str	r3, [r6, #0]
 8008e86:	2000      	movs	r0, #0
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	f000 fa4d 	bl	8009328 <__malloc_lock>
 8008e8e:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <_malloc_r+0xac>)
 8008e90:	6814      	ldr	r4, [r2, #0]
 8008e92:	4621      	mov	r1, r4
 8008e94:	b991      	cbnz	r1, 8008ebc <_malloc_r+0x54>
 8008e96:	4c20      	ldr	r4, [pc, #128]	; (8008f18 <_malloc_r+0xb0>)
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	b91b      	cbnz	r3, 8008ea4 <_malloc_r+0x3c>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 f97b 	bl	8009198 <_sbrk_r>
 8008ea2:	6020      	str	r0, [r4, #0]
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f000 f976 	bl	8009198 <_sbrk_r>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d124      	bne.n	8008efa <_malloc_r+0x92>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	6033      	str	r3, [r6, #0]
 8008eb6:	f000 fa38 	bl	800932a <__malloc_unlock>
 8008eba:	e7e4      	b.n	8008e86 <_malloc_r+0x1e>
 8008ebc:	680b      	ldr	r3, [r1, #0]
 8008ebe:	1b5b      	subs	r3, r3, r5
 8008ec0:	d418      	bmi.n	8008ef4 <_malloc_r+0x8c>
 8008ec2:	2b0b      	cmp	r3, #11
 8008ec4:	d90f      	bls.n	8008ee6 <_malloc_r+0x7e>
 8008ec6:	600b      	str	r3, [r1, #0]
 8008ec8:	18cc      	adds	r4, r1, r3
 8008eca:	50cd      	str	r5, [r1, r3]
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f000 fa2c 	bl	800932a <__malloc_unlock>
 8008ed2:	f104 000b 	add.w	r0, r4, #11
 8008ed6:	1d23      	adds	r3, r4, #4
 8008ed8:	f020 0007 	bic.w	r0, r0, #7
 8008edc:	1ac3      	subs	r3, r0, r3
 8008ede:	d0d3      	beq.n	8008e88 <_malloc_r+0x20>
 8008ee0:	425a      	negs	r2, r3
 8008ee2:	50e2      	str	r2, [r4, r3]
 8008ee4:	e7d0      	b.n	8008e88 <_malloc_r+0x20>
 8008ee6:	684b      	ldr	r3, [r1, #4]
 8008ee8:	428c      	cmp	r4, r1
 8008eea:	bf16      	itet	ne
 8008eec:	6063      	strne	r3, [r4, #4]
 8008eee:	6013      	streq	r3, [r2, #0]
 8008ef0:	460c      	movne	r4, r1
 8008ef2:	e7eb      	b.n	8008ecc <_malloc_r+0x64>
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	6849      	ldr	r1, [r1, #4]
 8008ef8:	e7cc      	b.n	8008e94 <_malloc_r+0x2c>
 8008efa:	1cc4      	adds	r4, r0, #3
 8008efc:	f024 0403 	bic.w	r4, r4, #3
 8008f00:	42a0      	cmp	r0, r4
 8008f02:	d005      	beq.n	8008f10 <_malloc_r+0xa8>
 8008f04:	1a21      	subs	r1, r4, r0
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 f946 	bl	8009198 <_sbrk_r>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d0cf      	beq.n	8008eb0 <_malloc_r+0x48>
 8008f10:	6025      	str	r5, [r4, #0]
 8008f12:	e7db      	b.n	8008ecc <_malloc_r+0x64>
 8008f14:	200002dc 	.word	0x200002dc
 8008f18:	200002e0 	.word	0x200002e0

08008f1c <__sfputc_r>:
 8008f1c:	6893      	ldr	r3, [r2, #8]
 8008f1e:	b410      	push	{r4}
 8008f20:	3b01      	subs	r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	6093      	str	r3, [r2, #8]
 8008f26:	da07      	bge.n	8008f38 <__sfputc_r+0x1c>
 8008f28:	6994      	ldr	r4, [r2, #24]
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	db01      	blt.n	8008f32 <__sfputc_r+0x16>
 8008f2e:	290a      	cmp	r1, #10
 8008f30:	d102      	bne.n	8008f38 <__sfputc_r+0x1c>
 8008f32:	bc10      	pop	{r4}
 8008f34:	f7fd befa 	b.w	8006d2c <__swbuf_r>
 8008f38:	6813      	ldr	r3, [r2, #0]
 8008f3a:	1c58      	adds	r0, r3, #1
 8008f3c:	6010      	str	r0, [r2, #0]
 8008f3e:	7019      	strb	r1, [r3, #0]
 8008f40:	4608      	mov	r0, r1
 8008f42:	bc10      	pop	{r4}
 8008f44:	4770      	bx	lr

08008f46 <__sfputs_r>:
 8008f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f48:	4606      	mov	r6, r0
 8008f4a:	460f      	mov	r7, r1
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	18d5      	adds	r5, r2, r3
 8008f50:	42ac      	cmp	r4, r5
 8008f52:	d101      	bne.n	8008f58 <__sfputs_r+0x12>
 8008f54:	2000      	movs	r0, #0
 8008f56:	e007      	b.n	8008f68 <__sfputs_r+0x22>
 8008f58:	463a      	mov	r2, r7
 8008f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7ff ffdc 	bl	8008f1c <__sfputc_r>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d1f3      	bne.n	8008f50 <__sfputs_r+0xa>
 8008f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f6c <_vfiprintf_r>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	460c      	mov	r4, r1
 8008f72:	b09d      	sub	sp, #116	; 0x74
 8008f74:	4617      	mov	r7, r2
 8008f76:	461d      	mov	r5, r3
 8008f78:	4606      	mov	r6, r0
 8008f7a:	b118      	cbz	r0, 8008f84 <_vfiprintf_r+0x18>
 8008f7c:	6983      	ldr	r3, [r0, #24]
 8008f7e:	b90b      	cbnz	r3, 8008f84 <_vfiprintf_r+0x18>
 8008f80:	f7fe fec6 	bl	8007d10 <__sinit>
 8008f84:	4b7c      	ldr	r3, [pc, #496]	; (8009178 <_vfiprintf_r+0x20c>)
 8008f86:	429c      	cmp	r4, r3
 8008f88:	d158      	bne.n	800903c <_vfiprintf_r+0xd0>
 8008f8a:	6874      	ldr	r4, [r6, #4]
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	0718      	lsls	r0, r3, #28
 8008f90:	d55e      	bpl.n	8009050 <_vfiprintf_r+0xe4>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d05b      	beq.n	8009050 <_vfiprintf_r+0xe4>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9c:	2320      	movs	r3, #32
 8008f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa2:	2330      	movs	r3, #48	; 0x30
 8008fa4:	f04f 0b01 	mov.w	fp, #1
 8008fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fac:	9503      	str	r5, [sp, #12]
 8008fae:	46b8      	mov	r8, r7
 8008fb0:	4645      	mov	r5, r8
 8008fb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fb6:	b10b      	cbz	r3, 8008fbc <_vfiprintf_r+0x50>
 8008fb8:	2b25      	cmp	r3, #37	; 0x25
 8008fba:	d154      	bne.n	8009066 <_vfiprintf_r+0xfa>
 8008fbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8008fc0:	d00b      	beq.n	8008fda <_vfiprintf_r+0x6e>
 8008fc2:	4653      	mov	r3, sl
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff ffbc 	bl	8008f46 <__sfputs_r>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f000 80c2 	beq.w	8009158 <_vfiprintf_r+0x1ec>
 8008fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd6:	4453      	add	r3, sl
 8008fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fda:	f898 3000 	ldrb.w	r3, [r8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80ba 	beq.w	8009158 <_vfiprintf_r+0x1ec>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ff8:	46a8      	mov	r8, r5
 8008ffa:	2205      	movs	r2, #5
 8008ffc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009000:	485e      	ldr	r0, [pc, #376]	; (800917c <_vfiprintf_r+0x210>)
 8009002:	f7ff fac5 	bl	8008590 <memchr>
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	bb78      	cbnz	r0, 800906a <_vfiprintf_r+0xfe>
 800900a:	06d9      	lsls	r1, r3, #27
 800900c:	bf44      	itt	mi
 800900e:	2220      	movmi	r2, #32
 8009010:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009014:	071a      	lsls	r2, r3, #28
 8009016:	bf44      	itt	mi
 8009018:	222b      	movmi	r2, #43	; 0x2b
 800901a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800901e:	782a      	ldrb	r2, [r5, #0]
 8009020:	2a2a      	cmp	r2, #42	; 0x2a
 8009022:	d02a      	beq.n	800907a <_vfiprintf_r+0x10e>
 8009024:	46a8      	mov	r8, r5
 8009026:	2000      	movs	r0, #0
 8009028:	250a      	movs	r5, #10
 800902a:	9a07      	ldr	r2, [sp, #28]
 800902c:	4641      	mov	r1, r8
 800902e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009032:	3b30      	subs	r3, #48	; 0x30
 8009034:	2b09      	cmp	r3, #9
 8009036:	d969      	bls.n	800910c <_vfiprintf_r+0x1a0>
 8009038:	b360      	cbz	r0, 8009094 <_vfiprintf_r+0x128>
 800903a:	e024      	b.n	8009086 <_vfiprintf_r+0x11a>
 800903c:	4b50      	ldr	r3, [pc, #320]	; (8009180 <_vfiprintf_r+0x214>)
 800903e:	429c      	cmp	r4, r3
 8009040:	d101      	bne.n	8009046 <_vfiprintf_r+0xda>
 8009042:	68b4      	ldr	r4, [r6, #8]
 8009044:	e7a2      	b.n	8008f8c <_vfiprintf_r+0x20>
 8009046:	4b4f      	ldr	r3, [pc, #316]	; (8009184 <_vfiprintf_r+0x218>)
 8009048:	429c      	cmp	r4, r3
 800904a:	bf08      	it	eq
 800904c:	68f4      	ldreq	r4, [r6, #12]
 800904e:	e79d      	b.n	8008f8c <_vfiprintf_r+0x20>
 8009050:	4621      	mov	r1, r4
 8009052:	4630      	mov	r0, r6
 8009054:	f7fd febc 	bl	8006dd0 <__swsetup_r>
 8009058:	2800      	cmp	r0, #0
 800905a:	d09d      	beq.n	8008f98 <_vfiprintf_r+0x2c>
 800905c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009060:	b01d      	add	sp, #116	; 0x74
 8009062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009066:	46a8      	mov	r8, r5
 8009068:	e7a2      	b.n	8008fb0 <_vfiprintf_r+0x44>
 800906a:	4a44      	ldr	r2, [pc, #272]	; (800917c <_vfiprintf_r+0x210>)
 800906c:	4645      	mov	r5, r8
 800906e:	1a80      	subs	r0, r0, r2
 8009070:	fa0b f000 	lsl.w	r0, fp, r0
 8009074:	4318      	orrs	r0, r3
 8009076:	9004      	str	r0, [sp, #16]
 8009078:	e7be      	b.n	8008ff8 <_vfiprintf_r+0x8c>
 800907a:	9a03      	ldr	r2, [sp, #12]
 800907c:	1d11      	adds	r1, r2, #4
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	9103      	str	r1, [sp, #12]
 8009082:	2a00      	cmp	r2, #0
 8009084:	db01      	blt.n	800908a <_vfiprintf_r+0x11e>
 8009086:	9207      	str	r2, [sp, #28]
 8009088:	e004      	b.n	8009094 <_vfiprintf_r+0x128>
 800908a:	4252      	negs	r2, r2
 800908c:	f043 0302 	orr.w	r3, r3, #2
 8009090:	9207      	str	r2, [sp, #28]
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	f898 3000 	ldrb.w	r3, [r8]
 8009098:	2b2e      	cmp	r3, #46	; 0x2e
 800909a:	d10e      	bne.n	80090ba <_vfiprintf_r+0x14e>
 800909c:	f898 3001 	ldrb.w	r3, [r8, #1]
 80090a0:	2b2a      	cmp	r3, #42	; 0x2a
 80090a2:	d138      	bne.n	8009116 <_vfiprintf_r+0x1aa>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	f108 0802 	add.w	r8, r8, #2
 80090aa:	1d1a      	adds	r2, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	9203      	str	r2, [sp, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfb8      	it	lt
 80090b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090b8:	9305      	str	r3, [sp, #20]
 80090ba:	4d33      	ldr	r5, [pc, #204]	; (8009188 <_vfiprintf_r+0x21c>)
 80090bc:	2203      	movs	r2, #3
 80090be:	f898 1000 	ldrb.w	r1, [r8]
 80090c2:	4628      	mov	r0, r5
 80090c4:	f7ff fa64 	bl	8008590 <memchr>
 80090c8:	b140      	cbz	r0, 80090dc <_vfiprintf_r+0x170>
 80090ca:	2340      	movs	r3, #64	; 0x40
 80090cc:	1b40      	subs	r0, r0, r5
 80090ce:	fa03 f000 	lsl.w	r0, r3, r0
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	f108 0801 	add.w	r8, r8, #1
 80090d8:	4303      	orrs	r3, r0
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	f898 1000 	ldrb.w	r1, [r8]
 80090e0:	2206      	movs	r2, #6
 80090e2:	482a      	ldr	r0, [pc, #168]	; (800918c <_vfiprintf_r+0x220>)
 80090e4:	f108 0701 	add.w	r7, r8, #1
 80090e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ec:	f7ff fa50 	bl	8008590 <memchr>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d037      	beq.n	8009164 <_vfiprintf_r+0x1f8>
 80090f4:	4b26      	ldr	r3, [pc, #152]	; (8009190 <_vfiprintf_r+0x224>)
 80090f6:	bb1b      	cbnz	r3, 8009140 <_vfiprintf_r+0x1d4>
 80090f8:	9b03      	ldr	r3, [sp, #12]
 80090fa:	3307      	adds	r3, #7
 80090fc:	f023 0307 	bic.w	r3, r3, #7
 8009100:	3308      	adds	r3, #8
 8009102:	9303      	str	r3, [sp, #12]
 8009104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009106:	444b      	add	r3, r9
 8009108:	9309      	str	r3, [sp, #36]	; 0x24
 800910a:	e750      	b.n	8008fae <_vfiprintf_r+0x42>
 800910c:	fb05 3202 	mla	r2, r5, r2, r3
 8009110:	2001      	movs	r0, #1
 8009112:	4688      	mov	r8, r1
 8009114:	e78a      	b.n	800902c <_vfiprintf_r+0xc0>
 8009116:	2300      	movs	r3, #0
 8009118:	250a      	movs	r5, #10
 800911a:	4619      	mov	r1, r3
 800911c:	f108 0801 	add.w	r8, r8, #1
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	4640      	mov	r0, r8
 8009124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009128:	3a30      	subs	r2, #48	; 0x30
 800912a:	2a09      	cmp	r2, #9
 800912c:	d903      	bls.n	8009136 <_vfiprintf_r+0x1ca>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0c3      	beq.n	80090ba <_vfiprintf_r+0x14e>
 8009132:	9105      	str	r1, [sp, #20]
 8009134:	e7c1      	b.n	80090ba <_vfiprintf_r+0x14e>
 8009136:	fb05 2101 	mla	r1, r5, r1, r2
 800913a:	2301      	movs	r3, #1
 800913c:	4680      	mov	r8, r0
 800913e:	e7f0      	b.n	8009122 <_vfiprintf_r+0x1b6>
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	4622      	mov	r2, r4
 8009146:	4b13      	ldr	r3, [pc, #76]	; (8009194 <_vfiprintf_r+0x228>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4630      	mov	r0, r6
 800914c:	f7fc fb7e 	bl	800584c <_printf_float>
 8009150:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009154:	4681      	mov	r9, r0
 8009156:	d1d5      	bne.n	8009104 <_vfiprintf_r+0x198>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	065b      	lsls	r3, r3, #25
 800915c:	f53f af7e 	bmi.w	800905c <_vfiprintf_r+0xf0>
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	e77d      	b.n	8009060 <_vfiprintf_r+0xf4>
 8009164:	ab03      	add	r3, sp, #12
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4622      	mov	r2, r4
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <_vfiprintf_r+0x228>)
 800916c:	a904      	add	r1, sp, #16
 800916e:	4630      	mov	r0, r6
 8009170:	f7fc fe18 	bl	8005da4 <_printf_i>
 8009174:	e7ec      	b.n	8009150 <_vfiprintf_r+0x1e4>
 8009176:	bf00      	nop
 8009178:	080095e8 	.word	0x080095e8
 800917c:	08009734 	.word	0x08009734
 8009180:	08009608 	.word	0x08009608
 8009184:	080095c8 	.word	0x080095c8
 8009188:	0800973a 	.word	0x0800973a
 800918c:	0800973e 	.word	0x0800973e
 8009190:	0800584d 	.word	0x0800584d
 8009194:	08008f47 	.word	0x08008f47

08009198 <_sbrk_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	2300      	movs	r3, #0
 800919c:	4c05      	ldr	r4, [pc, #20]	; (80091b4 <_sbrk_r+0x1c>)
 800919e:	4605      	mov	r5, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	f7f9 f8d2 	bl	800234c <_sbrk>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_sbrk_r+0x1a>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_sbrk_r+0x1a>
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000490 	.word	0x20000490

080091b8 <__sread>:
 80091b8:	b510      	push	{r4, lr}
 80091ba:	460c      	mov	r4, r1
 80091bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c0:	f000 f8b4 	bl	800932c <_read_r>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	bfab      	itete	ge
 80091c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ca:	89a3      	ldrhlt	r3, [r4, #12]
 80091cc:	181b      	addge	r3, r3, r0
 80091ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091d2:	bfac      	ite	ge
 80091d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091d6:	81a3      	strhlt	r3, [r4, #12]
 80091d8:	bd10      	pop	{r4, pc}

080091da <__swrite>:
 80091da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	461f      	mov	r7, r3
 80091e0:	898b      	ldrh	r3, [r1, #12]
 80091e2:	4605      	mov	r5, r0
 80091e4:	05db      	lsls	r3, r3, #23
 80091e6:	460c      	mov	r4, r1
 80091e8:	4616      	mov	r6, r2
 80091ea:	d505      	bpl.n	80091f8 <__swrite+0x1e>
 80091ec:	2302      	movs	r3, #2
 80091ee:	2200      	movs	r2, #0
 80091f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f4:	f000 f886 	bl	8009304 <_lseek_r>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	4632      	mov	r2, r6
 80091fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009206:	463b      	mov	r3, r7
 8009208:	4628      	mov	r0, r5
 800920a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800920e:	f000 b835 	b.w	800927c <_write_r>

08009212 <__sseek>:
 8009212:	b510      	push	{r4, lr}
 8009214:	460c      	mov	r4, r1
 8009216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921a:	f000 f873 	bl	8009304 <_lseek_r>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	bf15      	itete	ne
 8009224:	6560      	strne	r0, [r4, #84]	; 0x54
 8009226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800922a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800922e:	81a3      	strheq	r3, [r4, #12]
 8009230:	bf18      	it	ne
 8009232:	81a3      	strhne	r3, [r4, #12]
 8009234:	bd10      	pop	{r4, pc}

08009236 <__sclose>:
 8009236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923a:	f000 b831 	b.w	80092a0 <_close_r>

0800923e <strncmp>:
 800923e:	b510      	push	{r4, lr}
 8009240:	b16a      	cbz	r2, 800925e <strncmp+0x20>
 8009242:	3901      	subs	r1, #1
 8009244:	1884      	adds	r4, r0, r2
 8009246:	f810 3b01 	ldrb.w	r3, [r0], #1
 800924a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800924e:	4293      	cmp	r3, r2
 8009250:	d103      	bne.n	800925a <strncmp+0x1c>
 8009252:	42a0      	cmp	r0, r4
 8009254:	d001      	beq.n	800925a <strncmp+0x1c>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f5      	bne.n	8009246 <strncmp+0x8>
 800925a:	1a98      	subs	r0, r3, r2
 800925c:	bd10      	pop	{r4, pc}
 800925e:	4610      	mov	r0, r2
 8009260:	e7fc      	b.n	800925c <strncmp+0x1e>

08009262 <__ascii_wctomb>:
 8009262:	b149      	cbz	r1, 8009278 <__ascii_wctomb+0x16>
 8009264:	2aff      	cmp	r2, #255	; 0xff
 8009266:	bf8b      	itete	hi
 8009268:	238a      	movhi	r3, #138	; 0x8a
 800926a:	700a      	strbls	r2, [r1, #0]
 800926c:	6003      	strhi	r3, [r0, #0]
 800926e:	2001      	movls	r0, #1
 8009270:	bf88      	it	hi
 8009272:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009276:	4770      	bx	lr
 8009278:	4608      	mov	r0, r1
 800927a:	4770      	bx	lr

0800927c <_write_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4605      	mov	r5, r0
 8009280:	4608      	mov	r0, r1
 8009282:	4611      	mov	r1, r2
 8009284:	2200      	movs	r2, #0
 8009286:	4c05      	ldr	r4, [pc, #20]	; (800929c <_write_r+0x20>)
 8009288:	6022      	str	r2, [r4, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f000 f888 	bl	80093a0 <_write>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_write_r+0x1e>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	b103      	cbz	r3, 800929a <_write_r+0x1e>
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20000490 	.word	0x20000490

080092a0 <_close_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	2300      	movs	r3, #0
 80092a4:	4c05      	ldr	r4, [pc, #20]	; (80092bc <_close_r+0x1c>)
 80092a6:	4605      	mov	r5, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	f000 f850 	bl	8009350 <_close>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_close_r+0x1a>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_close_r+0x1a>
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	20000490 	.word	0x20000490

080092c0 <_fstat_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	2300      	movs	r3, #0
 80092c4:	4c06      	ldr	r4, [pc, #24]	; (80092e0 <_fstat_r+0x20>)
 80092c6:	4605      	mov	r5, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	4611      	mov	r1, r2
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	f000 f847 	bl	8009360 <_fstat>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	d102      	bne.n	80092dc <_fstat_r+0x1c>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	b103      	cbz	r3, 80092dc <_fstat_r+0x1c>
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	bd38      	pop	{r3, r4, r5, pc}
 80092de:	bf00      	nop
 80092e0:	20000490 	.word	0x20000490

080092e4 <_isatty_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	2300      	movs	r3, #0
 80092e8:	4c05      	ldr	r4, [pc, #20]	; (8009300 <_isatty_r+0x1c>)
 80092ea:	4605      	mov	r5, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	f000 f83e 	bl	8009370 <_isatty>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_isatty_r+0x1a>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_isatty_r+0x1a>
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20000490 	.word	0x20000490

08009304 <_lseek_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4605      	mov	r5, r0
 8009308:	4608      	mov	r0, r1
 800930a:	4611      	mov	r1, r2
 800930c:	2200      	movs	r2, #0
 800930e:	4c05      	ldr	r4, [pc, #20]	; (8009324 <_lseek_r+0x20>)
 8009310:	6022      	str	r2, [r4, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	f000 f834 	bl	8009380 <_lseek>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d102      	bne.n	8009322 <_lseek_r+0x1e>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	b103      	cbz	r3, 8009322 <_lseek_r+0x1e>
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	20000490 	.word	0x20000490

08009328 <__malloc_lock>:
 8009328:	4770      	bx	lr

0800932a <__malloc_unlock>:
 800932a:	4770      	bx	lr

0800932c <_read_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4605      	mov	r5, r0
 8009330:	4608      	mov	r0, r1
 8009332:	4611      	mov	r1, r2
 8009334:	2200      	movs	r2, #0
 8009336:	4c05      	ldr	r4, [pc, #20]	; (800934c <_read_r+0x20>)
 8009338:	6022      	str	r2, [r4, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	f000 f828 	bl	8009390 <_read>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_read_r+0x1e>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	b103      	cbz	r3, 800934a <_read_r+0x1e>
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	20000490 	.word	0x20000490

08009350 <_close>:
 8009350:	2258      	movs	r2, #88	; 0x58
 8009352:	4b02      	ldr	r3, [pc, #8]	; (800935c <_close+0xc>)
 8009354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	4770      	bx	lr
 800935c:	20000490 	.word	0x20000490

08009360 <_fstat>:
 8009360:	2258      	movs	r2, #88	; 0x58
 8009362:	4b02      	ldr	r3, [pc, #8]	; (800936c <_fstat+0xc>)
 8009364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	4770      	bx	lr
 800936c:	20000490 	.word	0x20000490

08009370 <_isatty>:
 8009370:	2258      	movs	r2, #88	; 0x58
 8009372:	4b02      	ldr	r3, [pc, #8]	; (800937c <_isatty+0xc>)
 8009374:	2000      	movs	r0, #0
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20000490 	.word	0x20000490

08009380 <_lseek>:
 8009380:	2258      	movs	r2, #88	; 0x58
 8009382:	4b02      	ldr	r3, [pc, #8]	; (800938c <_lseek+0xc>)
 8009384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	4770      	bx	lr
 800938c:	20000490 	.word	0x20000490

08009390 <_read>:
 8009390:	2258      	movs	r2, #88	; 0x58
 8009392:	4b02      	ldr	r3, [pc, #8]	; (800939c <_read+0xc>)
 8009394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	4770      	bx	lr
 800939c:	20000490 	.word	0x20000490

080093a0 <_write>:
 80093a0:	2258      	movs	r2, #88	; 0x58
 80093a2:	4b02      	ldr	r3, [pc, #8]	; (80093ac <_write+0xc>)
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	4770      	bx	lr
 80093ac:	20000490 	.word	0x20000490

080093b0 <_init>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr

080093bc <_fini>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr
